{
    "swagger": "2.0",
    "info": {
        "title": "Open API specification for Qlik SaaS REST API"
    },
    "paths": {
        "/.well-known/oauth-authorization-server": {
            "get": {
                "tags": [
                    "metadata"
                ],
                "summary": "Get authorization server metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-metadata"
                                }
                            }
                        },
                        "description": "Returns authorization server metadata."
                    }
                },
                "description": "Returns authorization server metadata.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "20a4aa0d-5df5-4563-9bd5-a9632871132a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/login": {
            "get": {
                "tags": [
                    "login"
                ],
                "summary": "Login using interactive identity provider",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Redirect to the identity provider."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid login."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "returnto",
                        "schema": {
                            "type": "string"
                        },
                        "example": "automations/editor/fef1ba5f-facb-4cd1-9c69-8ddc6c61b7e3",
                        "required": false,
                        "description": "Relative or full URL on the tenant to redirect to after successful login."
                    },
                    {
                        "in": "header",
                        "name": "Qlik-Web-Integration-ID",
                        "schema": {
                            "type": "string"
                        },
                        "example": "OG_YzbL1zweMS4XQcv88J_n0853IbM0R",
                        "required": false,
                        "description": "Web Integration ID associated with origin whitelist used to validate returnto value."
                    }
                ],
                "description": "Initiates login using the active interactive identity provider associated with the tenant. Uses default Qlik identity provider if no customer-configured interactive identity provider is active.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "d3a9078d-8d3a-4202-89a2-bd1b4bd1ac7b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/login/jwt-session": {
            "post": {
                "tags": [
                    "tokens"
                ],
                "summary": "Exchange a token",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "eas.sid=spn3PWVdGDmSs2NH6kEgpIwZft2utI2m;eas.sid.sig=s43MYzD54Z7NsayOdPD0pXm24fc;_csrfToken=jQrrL9KC-OomYaTw2vY8B2sR1uddfwH2q_js;_csrfToken.sig=GRB6I20vR-tlgmFceq8a9mSGyCE"
                                },
                                "description": "session cookie and CSRF token along with their signatures"
                            }
                        },
                        "description": "Successfully exchanged JWT for session."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized."
                    }
                },
                "description": "Exchanges a token in the form of a user JWT for a session cookie.\nThe JWT should be securely signed with an algorithm other than HS, and it should contain the following claims:\n1. iss: identifies the principal that issued the JWT; it must match the issuer in the IDP definition.\n2. aud: identifies the recipients of the JWT, which in this case is \"qlik.api/login/jwt-session\".\n3. sub: identifies the subject of the JWT.\n4. subType: the type of identifier the sub represents, which in this case is \"user\".\n5. name: the name of the user.\n6. email: the email address of the user.\n7. email_verified: a claim indicating to Qlik that the JWT source has verified that the email address belongs to the subject.\n9. jti: JWT ID; it should be unique for each consumed JWT token.\n10. iat: identifies the time at which the JWT was issued.\n11. nbf: identifies the starting time on which the JWT is accepted. The current unix time must be passed this value.\n12. exp: identifies the expiration time after which the JWT is not accepted.\n13. keyid: identifies the KeyID used to sign the JWT; it must match the KeyID in the IDP definition.\n\nAnd the time window between exp and nbf should not exceed 1 hour.\n",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "eed74183-fa04-4a39-ac22-b23e8373e01d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/oauth/authorize": {
            "get": {
                "tags": [
                    "oauth"
                ],
                "summary": "Authorize a client application",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Redirect to the identity provider or back to the redirect_uri if an error occurs. On error the redirect will follow the OAuth2 RFC section 4.1.2.1 (https://tools.ietf.org/html/rfc6749#section-4.1.2.1) with an additional error_code parameter with the internal error code. When a detail is known for the error it will be included as error_detail."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid client_id or redirect_uri."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "client_id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The client identifier."
                    },
                    {
                        "in": "query",
                        "name": "code_challenge_method",
                        "schema": {
                            "enum": [
                                "S256"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The algorithm that client used for generating code_challenge, only S256 is supported for now."
                    },
                    {
                        "in": "query",
                        "name": "redirect_uri",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Relative or full URL to redirect to after successful login."
                    },
                    {
                        "in": "query",
                        "name": "response_type",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Describes the grant flow to use."
                    },
                    {
                        "in": "query",
                        "name": "scope",
                        "style": "spaceDelimited",
                        "schema": {
                            "enum": [
                                "user_default",
                                "offline_access"
                            ],
                            "type": "array",
                            "example": "user_default"
                        },
                        "explode": false,
                        "required": true,
                        "description": "The scope of access that is being requested."
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "State parameter to roundtrip to client in final redirect."
                    },
                    {
                        "in": "query",
                        "name": "code_challenge",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The code challenge created by the client."
                    },
                    {
                        "in": "query",
                        "name": "max_age",
                        "schema": {
                            "type": "number"
                        },
                        "required": false,
                        "description": "Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OpenID Provider."
                    },
                    {
                        "in": "query",
                        "name": "prompt",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies whether the Authorization Server prompts the End-User for re-authentication and consent."
                    }
                ],
                "description": "Allows a client application to use an OAuth flow to request user authorization.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "34355600-9ccc-4e0e-8168-98a0c30837bb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/oauth/revoke": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Revoke OAuth token provided by client",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Token was revoked."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request."
                    }
                },
                "description": "Allows a client to revoke their token.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/oauth-revoke-request"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/oauth-revoke-request"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties of the token that the client wants to revoke."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "7dd39499-5b82-4483-a460-248a7777d184",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/oauth/token": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Retrieve OAuth token",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-token-response"
                                }
                            }
                        },
                        "description": "Token set created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid login or tokens, indicates that code or token used can be deleted by the client. Also could be invalid client credentials provided in Authorization header."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden because user is disabled or has reached the maximum number of tokens."
                    }
                },
                "description": "Allows a client to perform an OAuth flow to obtain a token set.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/oauth-client-credentials-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-refresh-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-authorization-code-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-token-exchange"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-user-impersonation-request"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/oauth-client-credentials-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-refresh-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-authorization-code-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-token-exchange"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-user-impersonation-request"
                                    }
                                ]
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "9a844068-7e1b-4f48-b6c9-153c90f53fc8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/api-keys": {
            "get": {
                "tags": [
                    "api-keys"
                ],
                "summary": "List API keys",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api-key-page"
                                }
                            }
                        },
                        "description": "The list API keys result."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to list API keys."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "createdByUser",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "64ef645a3b7009d55dee5a2b"
                        },
                        "description": "The user ID that created the API key."
                    },
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string",
                            "format": "uid v4"
                        },
                        "required": false,
                        "description": "Get resources with IDs that are lower than the target resource ID. Cannot be used in conjunction with startingAfter."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Maximum number of API keys to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "createdByUser",
                                "+createdByUser",
                                "-createdByUser",
                                "sub",
                                "+sub",
                                "-sub",
                                "status",
                                "+status",
                                "-status",
                                "description",
                                "+description",
                                "-description",
                                "created",
                                "+created",
                                "-created"
                            ],
                            "type": "string",
                            "default": "-created"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string",
                            "format": "uid v4"
                        },
                        "required": false,
                        "description": "Get resources with IDs that are higher than the target resource ID. Cannot be used in conjunction with endingBefore."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "active",
                                "expired",
                                "revoked"
                            ],
                            "type": "string",
                            "format": "text"
                        },
                        "required": false,
                        "description": "The status of the API key."
                    },
                    {
                        "in": "query",
                        "name": "sub",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "SCIM\\\\215g5595380d646163cadbb9"
                        },
                        "required": false,
                        "description": "The ID of the subject. For SCIM the format is `SCIM\\\\{{IDP-ID}}`, where `{{IDP-ID}}` is the ID of the IDP in Qlik. For users, use their user ID, e.g. `64ef645a3b7009d55dee5a2b`."
                    }
                ],
                "description": "Lists API keys for the tenant. To list API keys owned by other users, requesting user must be assigned the `TenantAdmin` role.",
                "operationId": "getApiKeys",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "899017f8-621f-4887-8378-f2344a539cdf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Create API key",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyWithToken"
                                }
                            }
                        },
                        "description": "Created the API key successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to create an API key"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "description": "Creates an API key, either for a user, or for configuring SCIM for a compatible Identity Provider.\nSending `sub` and `subType` is required only for creating SCIM keys.\n",
                "operationId": "createApiKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeyBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to set for the API key."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "f54421b0-5c3f-44c3-a709-bc6a53677c14",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/api-keys/configs/{tenantId}": {
            "get": {
                "tags": [
                    "api-keys configurations"
                ],
                "summary": "Get API key configuration",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeysConfig"
                                }
                            }
                        },
                        "description": "API keys configuration."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "Hj5p89bylz1r2AUC6joLNuHzVx5Ya8cF"
                        },
                        "required": true,
                        "description": "The tenant ID from which you wish to retrieve the API key configuration."
                    }
                ],
                "description": "Retrieves the API key configuration for a tenant.",
                "operationId": "getApiKeysConfiguration",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "7e8a9f69-6a0a-491e-b0d9-bae912783407",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "api-keys configurations"
                ],
                "summary": "Update API keys configuration",
                "responses": {
                    "204": {
                        "description": "API keys configuration updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to update the API keys configuration."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Failed to update the API keys configuration."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The tenant ID of the API keys configuration to be retrieved."
                    }
                ],
                "description": "Updates the API keys configuration for a given tenant ID.",
                "operationId": "updateApiKeyConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeysConfigPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Configurations that the user wants to update for API keys."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "3eb03ba5-19db-41f5-8537-ccd20a38d846",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/api-keys/{id}": {
            "get": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Get API key for a given ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKey"
                                }
                            }
                        },
                        "description": "Returns an API key resource."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to query this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the API key to be retrieved."
                    }
                ],
                "description": "Returns the API key for a given API key ID.",
                "operationId": "getApiKeyById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "f490e309-83c2-4246-ab94-67c2421206b3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Update API key description",
                "responses": {
                    "204": {
                        "description": "API key updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to update this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "JWT ID (jti)"
                        },
                        "required": true,
                        "description": "The ID of the API key resource to be updated."
                    }
                ],
                "description": "Updates an API key description for a given API key ID.",
                "operationId": "updateApiKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeysPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to update for the API key."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "494614e8-a373-47c8-b9b9-8d9d5d6ff4c6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Delete or revoke an API key",
                "responses": {
                    "204": {
                        "description": "Deleted or revoked an API key resource."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to delete or revoke this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetryAfterHeader"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the API key to be retrieved."
                    }
                ],
                "description": "Deletes or revokes an API key for a given API key ID. When the owner of the API key sends the request, the key will be deleted and removed from the tenant. When a user assigned the `TenantAdmin` role sends the request, the key will be disabled and marked as revoked.",
                "operationId": "deleteApiKeyById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "6195797a-d75d-4417-91cd-ef48dc9f08ad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "description": "Creates a new app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApp"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to set in new app."
                },
                "x-qlik-access-control": [
                    "create"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a409f5d5-69d4-4738-be15-54bdbbd1db4f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Compare two evaluations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comparison"
                                }
                            }
                        },
                        "description": "Comparison executed successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "baseid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the baseline evaluation"
                    },
                    {
                        "in": "path",
                        "name": "comparisonid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the comparison evaluation"
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full list of comparisons including non-significant diffs"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    }
                ],
                "description": "Accepts two evaluation ids and returns a comparison denoting the differences between the two.\n",
                "operationId": "evaluation#compareTwo",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8386df79-9cce-4087-88bd-4035acbbb271",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}/actions/download": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Download a comparison log of two evaluations",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {},
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comparison"
                                }
                            }
                        },
                        "description": "Comparison executed successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "baseid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the baseline evaluation"
                    },
                    {
                        "in": "path",
                        "name": "comparisonid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the comparison evaluation"
                    }
                ],
                "description": "Accepts two evaluation ids and downloads a log, in XML format, denoting the differences between the two.\n",
                "operationId": "evaluation#downloadCompareTwo",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "237e4618-7478-406e-82c2-48e791f22e5e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{id}": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    }
                ],
                "description": "Find an evaluation by a specific id.\n",
                "operationId": "evaluation#getOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "0fb92ca5-e15a-4554-9060-c58ff9bde6c1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{id}/actions/download": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Download a detailed XML log of a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {},
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    }
                ],
                "description": "Find and download an evaluation log by a specific evaluation id.\n",
                "operationId": "evaluation#downloadOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "e542cc47-b08d-446c-bfb6-3fd65e87d58c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/import": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The app ID of the target app when source is qvw file."
                    },
                    {
                        "in": "query",
                        "name": "fallbackName",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The name of the target app when source does not have a specified name, applicable if source is qvw file."
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The file ID to be downloaded from Temporary Content Service (TCS) and used during import."
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The import mode. In `new` mode (default), the source app will be imported as a new app.<div class=note>The `autoreplace` mode is an internal mode only and is not permitted for external use.</div>\n\nOne of:\n* NEW\n* AUTOREPLACE"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The name of the target app."
                    },
                    {
                        "in": "query",
                        "name": "NoData",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If NoData is true, the data of the existing app will be kept as is, otherwise it will be replaced by the new incoming data."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The space ID of the target app."
                    }
                ],
                "description": "Imports an app into the system.",
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/FileData"
                            }
                        }
                    },
                    "description": "Path of the source app."
                },
                "x-qlik-access-control": [
                    "import"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "7a3b854c-b0bc-42ed-84b6-a616ebf1c925",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/privileges": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserPrivileges"
                                    }
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "description": "Gets the app privileges for the current user, such as create app and import app. Empty means that the current user has no app privileges.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "d41878f3-fe23-489f-a687-332c8ae8eb55",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Retrieves information for a specific app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8ab8c511-8862-448d-bf70-122a68ab8b13",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Updates the information for a specific app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateApp"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that user wants to set."
                },
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8ad62bd3-71ba-4207-9790-579a35654edb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Deletes a specific app.",
                "x-qlik-access-control": [
                    "delete"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "bc9c6790-e7a9-4893-82da-fe45259f54b5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/copy": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Copies a specific app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApp"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that should be set in the copy."
                },
                "x-qlik-access-control": [
                    "duplicate"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "51192669-344a-4fae-b6ad-48f6a42d5de0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/data/lineage": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LineageInfoRest"
                                    }
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Retrieves the lineage for an app.\nReturns a JSON-formatted array of strings describing the lineage of the app.",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1779deaf-82e9-4678-a064-6c93c0a6dd65",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/data/metadata": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataModelMetadata"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Retrieves the data model and reload statistics metadata of an app.\nAn empty metadata structure is returned if the metadata is not available in the app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "e7d4ed4c-0ca6-4f94-a99c-8e01234ebfa5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/export": {
            "post": {
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "The URL of the exported app on Temporary content service."
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "headers": {},
                        "description": "Bad request"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "query",
                        "name": "NoData",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "The flag indicating if only object contents should be exported."
                    }
                ],
                "description": "Exports a specific app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "70a53bc3-7775-42c5-b334-6a057e84d4c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/insight-analyses": {
            "get": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns information about supported analyses for the app's data model. Lists available analysis types, along with minimum and maximum number of dimensions, measures, and fields.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisDescriptorResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and information about supported analyses is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "header",
                        "name": "accept-language",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
                    }
                ],
                "operationId": "getAnalyses",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "14cdd0da-6840-47d1-bf6a-36cc8670dc94",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/insight-analyses/actions/recommend": {
            "post": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns analysis recommendations in response to a natural language question, a set of fields and master items, or a set of fields and master items with an optional target analysis.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisRecommendationResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and recommendations are returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid Business Logic"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "header",
                        "name": "accept-language",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
                    }
                ],
                "operationId": "getRecommendations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalysisRecommendRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b6a2fa17-78de-4a23-a5f5-7777102b58ba",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/insight-analyses/model": {
            "get": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns information about model used to make analysis recommendations. Lists all fields and master items in the logical model, along with an indication of the validity of the logical model if the default is not used.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisModelResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and information about model is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid Business Logic"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    }
                ],
                "operationId": "getBusinessModel",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "6d57ea41-9b7b-40c1-b422-e64a8e787e46",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/media/files/{path}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Unique application identifier."
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Path to file content."
                    }
                ],
                "description": "Gets media content from file.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "bb894cab-35e9-4f42-af3a-6d6e2f6825a2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Unique application identifier."
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Path to file content."
                    }
                ],
                "description": "Stores the media content file.\nReturns OK if the bytes containing the media file content were successfully stored, or error in case of failure, lack of permission or file already exists on the supplied path.",
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/FileData"
                            }
                        }
                    },
                    "required": true,
                    "description": ""
                },
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "5deba42b-0e1b-48b9-aa13-54dccc647921",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Unique application identifier."
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Path to file content."
                    }
                ],
                "description": "Deletes a media content file or complete directory.\nReturns OK if the bytes containing the media file (or the complete content of a directory) were successfully deleted, or error in case of failure or lack of permission.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "fb53da60-2d25-422b-a5ae-849acb4828f1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/media/list/{path}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppContentList"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Unique application identifier."
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The path to sub folder with static content relative to the root folder. Use empty path to access the root folder."
                    },
                    {
                        "in": "query",
                        "name": "show",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional. List output can include files and folders in different ways:\n* Not recursive, default if show option is not supplied or incorrectly specified, results in output with files and empty directories for the path specified only.\n* Recursive(r), use ?show=r or ?show=recursive, results in a recursive output with files, all empty folders are excluded.\n* All(a), use ?show=a or ?show=all, results in a recursive output with files and empty directories."
                    }
                ],
                "description": "Lists media content.\nReturns a JSON formatted array of strings describing the available media content or error if the optional path supplied is not found.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "9f37a9e7-1e71-4d9a-a9b6-4e584013e8ca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/media/thumbnail": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Unique application identifier."
                    }
                ],
                "description": "Gets media content from file currently used as application thumbnail.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.\nThe image selected as thumbnail is only updated when application is saved.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ad104a43-46d3-4c37-bffd-5c9aa0288c22",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/objects/{objectId}/actions/change-owner": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxAppObject"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "400": {
                        "headers": {},
                        "description": "Bad request"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "path",
                        "name": "objectId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the object."
                    }
                ],
                "description": "Sets owner on an app object.\nThe user must be the owner of the object.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOwner"
                            }
                        }
                    },
                    "required": true,
                    "description": "New owner."
                },
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "bf7ed92e-2cff-4c49-b6c4-65eefb7400e4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/owner": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Changes owner of the app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOwner"
                            }
                        }
                    },
                    "required": true,
                    "description": "New owner."
                },
                "x-qlik-access-control": [
                    "change_owner"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1ad59afb-49ac-41cb-a1b9-e3314c789aa2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/publish": {
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Publishes a specific app to a managed space.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/PublishApp"
                            }
                        }
                    },
                    "required": true,
                    "description": "Publish information for the app."
                },
                "x-qlik-access-control": [
                    "publish"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "35594c41-e6e6-4a37-853f-03b3fdb21ebe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Republishes a published app to a managed space.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/RepublishApp"
                            }
                        }
                    },
                    "required": true,
                    "description": "Republish information for the app."
                },
                "x-qlik-access-control": [
                    "publish"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "7094acfa-1bf5-4026-bec2-d06a6f137a58",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/reloads/logs": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptLogList"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Retrieves the metadata about all script logs stored for an app.\nReturns an array of ScriptLogMeta objects.",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "23e517c3-cb0a-4f72-ac8d-da9965ca7b71",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/reloads/logs/{reloadId}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the reload."
                    }
                ],
                "description": "Retrieves the log of a specific reload.\nReturns the log as \"text/plain; charset=UTF-8\".",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "f624792e-34a8-4965-8c73-024f109b6467",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/reloads/metadata/{reloadId}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReloadListMetadata"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app"
                    },
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the reload. Use empty reloadId to get all reloads."
                    },
                    {
                        "in": "query",
                        "name": "includeSkipStoreReloads",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Include metadata for reloads ran with SkipStore flag set to true. Default: false"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Maximum number of records to return from this request. Default: 100"
                    }
                ],
                "description": "Retrieves the app reload metadata list.\nReload metadata contains reload information, including reload id, duration, endtime and lineage load info.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1bc4b140-12f1-48cf-a975-d00fb59b6e8e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/report-filters": {
            "get": {
                "tags": [
                    "filters"
                ],
                "summary": "Get the filter list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterList"
                                }
                            }
                        },
                        "description": "The filters have been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "query",
                        "name": "filterTypes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "REP",
                                    "SUB"
                                ],
                                "type": "string"
                            },
                            "minItems": 1
                        },
                        "required": true,
                        "description": "The filter type (REP, SUB). REP stands for report bookmark, SUB for subscription bookmark."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.\nThe following fields support the `co` (contains) operator: `name`, `description`\nThe following fields support the `eq` (equals) operator: `ownerId`\nExample:\n(name co \"query1\" or description co \"query2\") and ownerId eq \"123\"\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "example": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string",
                            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                            "nullable": true
                        },
                        "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                        "description": "If present, the cursor that starts the page of data that is returned."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "+ownerId",
                                    "-ownerId",
                                    "-name",
                                    "+name",
                                    "+description",
                                    "-description",
                                    "+createdAt",
                                    "-createdAt",
                                    "+updatedAt",
                                    "-updatedAt"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Sorting parameters."
                    }
                ],
                "description": "List all filters that are present in the given app. Filters allow to reduce the app data visible in a report output. Each filter can contain definitions on one or multiple fields.",
                "operationId": "filtersList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "6bb9b466-73dd-4276-b597-d3ed24b10778",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "filters"
                ],
                "summary": "Create a new filter.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Filter"
                                }
                            }
                        },
                        "description": "The filter has been successfully created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax, errors in params or the report request is not valid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Filter name conflict."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    }
                ],
                "description": "Creates a new report filter which is used to re-apply selections, variables, patches to an engine session.",
                "operationId": "filtersCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilterRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The filter definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "00ebc032-0313-470f-bf59-40e863ea67b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/report-filters/actions/count": {
            "get": {
                "tags": [
                    "filters"
                ],
                "summary": "Get the number of filters for the given app and filter types",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiltersCount"
                                }
                            }
                        },
                        "description": "The count of filters."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "query",
                        "name": "filterTypes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "REP",
                                    "SUB"
                                ],
                                "type": "string"
                            },
                            "example": [
                                "REP"
                            ],
                            "minItems": 1
                        },
                        "required": true,
                        "description": "The filter type (REP, SUB). REP stands for report bookmark, SUB for subscription bookmark."
                    }
                ],
                "operationId": "filtersCount",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e68b0fa2-9844-47e0-9b0b-c4952455d010",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/report-filters/{id}": {
            "get": {
                "tags": [
                    "filters"
                ],
                "summary": "Get a filter",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Filter"
                                }
                            }
                        },
                        "description": "The filter has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "The filter id identifier (bookmarkId)."
                    }
                ],
                "operationId": "filtersGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "f85efe9f-4421-4fb9-bed9-eace9efeb346",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "filters"
                ],
                "summary": "Update a filter",
                "responses": {
                    "204": {
                        "description": "The filter has been successfully patched."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Filter name conflict. A filter with the same name already exists."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "The filter id identifier (bookmarkId)."
                    }
                ],
                "operationId": "filtersUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchFilter"
                            }
                        }
                    },
                    "required": true,
                    "description": "The filter definition that will replace the existing one."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "c9be54dc-ed00-4723-b97b-5de3f3b73ec0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "filters"
                ],
                "summary": "Delete a filter",
                "responses": {
                    "204": {
                        "description": "The filter has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Forbidden, user lacks sufficient permissions to access the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterErrors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "The filter id identifier (bookmarkId)."
                    }
                ],
                "operationId": "filtersDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "a77996df-a293-4e86-8f24-610d34af0746",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/scripts": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptMetaList"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A scim filter expression defining which script versions should be retrieved. Filterable fields are:\n* ScriptId\n* ModifiedTime\n* ModifierId"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Maximum number of records to return from this request."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Opaque definition of which page of the result set to return. Returned from a previous call using the same filter. Not yet supported."
                    }
                ],
                "description": "Retrieves the script history for an app.\nReturns information about the saved versions of the script in a list sorted with latest first.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "cc7d078e-c577-4fc4-a3b9-b06617b8dc67",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Sets script for an app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/ScriptVersion"
                            }
                        }
                    },
                    "required": true,
                    "description": "The script to set."
                },
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "0e189948-07ef-4d73-a71b-0e3342b80cee",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/scripts/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptVersion"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the script version, or 'current' for retrieving the current version."
                    }
                ],
                "description": "Retrieves a version of the script for an app.\nReturns the script text.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ff8b34f8-ce78-4d4c-85f0-dd7d23482c43",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                },
                "tags": [
                    "apps"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the script version."
                    }
                ],
                "description": "Updates a specific version of the script for an app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NxPatch"
                                }
                            }
                        }
                    },
                    "required": true,
                    "description": "Array of patches for the object ScriptVersion.\n<div class=note>Patches have limited functionality for this object. Only /versionMessage can be modified using operations add, remove and replace.</div>"
                },
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1f71b25f-f0b9-4051-813c-d9bdaa8bdf6a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the script version"
                    }
                ],
                "description": "Deletes a specific version of the script for an app.\nFails if the supplied id is the current version.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "411deaa7-69bb-4696-abf5-02d660972a8c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{appId}/space": {
            "put": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Sets space on a specific app.",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSpace"
                            }
                        }
                    },
                    "required": true,
                    "description": "New space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "2ce1b528-7eb8-459f-86f9-86e77f33c096",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        },
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Identifier of the app."
                    }
                ],
                "description": "Removes space from a specific app.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "219ad865-e720-4ebf-9632-3e7ead8bbb4e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                },
                "tags": [
                    "apps"
                ]
            }
        },
        "/v1/apps/{guid}/evaluations": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a list of all historic evaluations for an app GUID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluations"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "guid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "The app guid."
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "fileMode",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Add file transfer headers to response"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Number of results to return per page."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get next page from"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get previous page from"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Property to sort list on"
                    }
                ],
                "description": "Find all evaluations for an app GUID.\nSupports paging via next, prev which are sent in the response body\n",
                "operationId": "evaluation#getEvaluations",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dfe4e5e2-6c8a-493e-a62d-350821b313d6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Queue an app evaluation",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "App evaluation queued."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Bad request, incorrect body."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "User lacks permissions to evaluate app."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "App does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "guid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Guid of the app."
                    }
                ],
                "description": "Queue an app evaluation by its app guid.\n",
                "operationId": "evaluation#queueEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "e2c98210-61fa-4f09-8432-fdc127e69552",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants": {
            "get": {
                "tags": [
                    "assistants"
                ],
                "summary": "List assistants",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assistantsResult"
                                }
                            }
                        },
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of assistants to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "NAME",
                                "-NAME",
                                "DESCRIPTION",
                                "-DESCRIPTION",
                                "CREATED",
                                "-CREATED",
                                "UPDATED",
                                "-UPDATED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, e.g. `name`. Can be prefixed with `-` to set descending order; defaults to ascending."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Optional parameter to request total count for query.",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Retrieves the list of assistants. The result can be filtered, sorted, and paginated.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "59713572-dfa6-43b5-944c-5e5e364f5939",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "assistants"
                ],
                "summary": "Create an assistant",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assistant"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant."
                            }
                        },
                        "description": "Successfully created an assistant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "description": "Creates a new assistant.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createAssistant"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/createAssistantWithAvatar"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "ea85f8db-2cb0-42a2-9d48-c32f9cbad1fb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/feedback": {
            "get": {
                "tags": [
                    "assistants"
                ],
                "summary": "Get feedback",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/feedbackSummary"
                                }
                            }
                        },
                        "description": "Successfully retrieved the feedback summary for the assistant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant from which to retrieve feedback summary."
                    }
                ],
                "description": "Retrieves feedback summary for the assistant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "aa21a8c8-388e-4f74-929e-58b224671e0f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/assistants/{assistantId}/sources/plaintexts": {
            "post": {
                "tags": [
                    "assistants"
                ],
                "summary": "Bulk search source chunks",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/sourcesPlaintext"
                                }
                            }
                        },
                        "description": "Successfully retrieved plaintext of the chunks."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to search for source chunks."
                    }
                ],
                "description": "Perform a bulk search for the plaintext of source chunks for the assistant.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChunksRefs"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "10b95601-5c13-4195-abd9-75e20fb84d66",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/starters": {
            "get": {
                "tags": [
                    "starters"
                ],
                "summary": "List starters",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/startersResult"
                                }
                            }
                        },
                        "description": "Successfully retrieved the assistant's starters."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant from which to retrieve starters."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of starters to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "QUESTION",
                                "-QUESTION",
                                "CREATED",
                                "-CREATED",
                                "UPDATED",
                                "-UPDATED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, e.g. `name`. Can be prefixed with `-` to set descending order; defaults to ascending."
                    }
                ],
                "description": "Retrieves the list of starters for the assistant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "f6189e19-d77b-4c45-a9c4-3558e7ce182d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "starters"
                ],
                "summary": "Create a starter",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Starter"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant starter version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant starter."
                            }
                        },
                        "description": "Successfully created a new assistant starter."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format or starter limit exceeded."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to create the starter."
                    }
                ],
                "description": "Creates a new starter for the assistant.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createStarter"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "02572918-1ee0-4ed9-b24a-349e8e6a2e07",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/starters/{starterId}": {
            "get": {
                "tags": [
                    "starters"
                ],
                "summary": "Get a starter",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Starter"
                                }
                            }
                        },
                        "description": "Successfully retrieved the starter."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The starter was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested starter."
                    },
                    {
                        "in": "path",
                        "name": "starterId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the starter to retrieve."
                    }
                ],
                "description": "Retrieves the specified starter.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7424e186-0bac-4160-b363-06ad86f7a0f6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "starters"
                ],
                "summary": "Update a starter",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Starter"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant."
                            }
                        },
                        "description": "Successfully updated the starter."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested starter."
                    },
                    {
                        "in": "path",
                        "name": "starterId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the starter to retrieve."
                    }
                ],
                "description": "Updates the specified starter.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Starter"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "91239083-69e2-4f31-b443-24d00e8b786c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "starters"
                ],
                "summary": "Delete a starter",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested starter."
                    },
                    {
                        "in": "path",
                        "name": "starterId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the starter to delete."
                    }
                ],
                "description": "Deletes the starter and all of its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7ff8b624-d41b-4875-aefb-3337f084beab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/starters/{starterId}/followups/{followupId}": {
            "put": {
                "tags": [
                    "starters"
                ],
                "summary": "Update a Followup",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Starter"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the Followup."
                            }
                        },
                        "description": "Successfully updated the Followup."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested Followup."
                    },
                    {
                        "in": "path",
                        "name": "followupId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the Followup to update."
                    },
                    {
                        "in": "path",
                        "name": "starterId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the starter containing the requested Followup."
                    }
                ],
                "description": "Updates the specified Followup.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/followup"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "c705f402-d863-4666-b8f6-f2ee74b8cdbb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "starters"
                ],
                "summary": "Delete a Followup",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The Followup was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested Followup."
                    },
                    {
                        "in": "path",
                        "name": "followupId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the Followup to delete."
                    },
                    {
                        "in": "path",
                        "name": "starterId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the starter containing the requested Followup."
                    }
                ],
                "description": "Deletes the specified Followup.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "d82de8a7-a8bb-417d-87c7-21961e5ab703",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads": {
            "get": {
                "tags": [
                    "threads"
                ],
                "summary": "List threads",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/threadsResult"
                                }
                            }
                        },
                        "description": "Successfully retrieved the threads for the assistant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant from which to retrieve threads."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "favorite": {
                                "value": "favorite eq \"true\""
                            },
                            "hasLikes": {
                                "value": "summaryStats.likes gt \"0\""
                            },
                            "hasReview": {
                                "value": "summaryStats.reviews gt \"0\""
                            },
                            "hasDislikes": {
                                "value": "summaryStats.dislikes gt \"0\""
                            },
                            "hasFeedback": {
                                "value": "hasFeedback eq \"true\""
                            },
                            "filterOwnerAndHideDeleted": {
                                "value": "ownerId co \"669603a035eb5fedab45987f\" and not(deletedAt pr)"
                            }
                        },
                        "description": "Optional parameter to filter threads."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of assistants to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "NAME",
                                "-NAME",
                                "CREATED",
                                "-CREATED",
                                "UPDATED",
                                "-UPDATED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, e.g. `name`. Can be prefixed with `-` to set descending order; defaults to ascending."
                    }
                ],
                "description": "Retrieves the list of threads for the assistant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "544b520a-7fa3-4567-94d4-33e45badc8b4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "threads"
                ],
                "summary": "Create a thread",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Thread"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant thread version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant thread."
                            }
                        },
                        "description": "Successfully created a new assistant thread."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to create the thread."
                    }
                ],
                "description": "Creates a new thread for the assistant.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createThread"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "b9f08bee-2941-4b1b-8ae5-524836f19250",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads/{threadId}/interactions": {
            "get": {
                "tags": [
                    "threads"
                ],
                "summary": "List interactions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactionsResult"
                                }
                            }
                        },
                        "description": "Successfully retrieved the thread interactions."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The feedback was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant from which to retrieve the interactions."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860bb"
                        },
                        "required": true,
                        "description": "The ID of the thread from which to retrieve the interactions."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of feedback to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "CREATED",
                                "-CREATED",
                                "UPDATED",
                                "-UPDATED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, e.g. `created`. Can be prefixed with `-` to set descending order; defaults to ascending."
                    }
                ],
                "description": "Retrieves the list of interactions for the thread.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "45c452b4-93a2-4987-b60d-1eca3fd8bbe1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "threads"
                ],
                "summary": "Create an interaction",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Interaction"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Thread feedback version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the thread interaction."
                            }
                        },
                        "description": "Successfully created a new thread interaction."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant or the thread was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to create the interaction."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread in which to create the interaction."
                    }
                ],
                "description": "Creates a new interaction for the thread.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createInteraction"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "1968929f-fc05-4113-a3b7-8471e838a14d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads/{threadId}/interactions/{interactionId}": {
            "get": {
                "tags": [
                    "threads"
                ],
                "summary": "Get an interaction",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Interaction"
                                }
                            }
                        },
                        "description": "Successfully retrieved the interaction."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The interaction was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to retrieve the interaction."
                    },
                    {
                        "in": "path",
                        "name": "interactionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the interaction to retrieve."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread in which to retrieve the interaction."
                    }
                ],
                "description": "Retrieves an interaction for the thread.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "923cd076-99bc-4d38-bc1b-6cd618b267cc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "threads"
                ],
                "summary": "Delete an interaction",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to delete the interaction."
                    },
                    {
                        "in": "path",
                        "name": "interactionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the interaction to delete."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread in which to delete the interaction."
                    }
                ],
                "description": "Deletes the specified interaction and all of its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "d49cb382-1118-4d49-9b0d-25eee842a111",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads/{threadId}/interactions/{interactionId}/feedback": {
            "post": {
                "tags": [
                    "threads"
                ],
                "summary": "Create feedback",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Interaction"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Thread feedback version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the thread feedback."
                            }
                        },
                        "description": "Successfully created a new thread feedback."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to create the feedback."
                    },
                    {
                        "in": "path",
                        "name": "interactionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the interaction in which to create the feedback."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread in which to create the feedback."
                    }
                ],
                "description": "Creates feedback for the thread.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createFeedback"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "b118ee39-f50a-4817-b5f9-808f510d1022",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads/{threadId}/interactions/{interactionId}/feedback/{feedbackId}": {
            "patch": {
                "tags": [
                    "threads"
                ],
                "summary": "Update feedback",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Feedback version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the feedback."
                            }
                        },
                        "description": "Successfully updated the feedback."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested feedback."
                    },
                    {
                        "in": "path",
                        "name": "feedbackId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the feedback to update."
                    },
                    {
                        "in": "path",
                        "name": "interactionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the interaction containing the requested Feedback."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread containing the requested feedback."
                    }
                ],
                "description": "Updates feedback for the thread.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/feedbackPatchArray"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "f1122d73-4b97-489e-a457-cb3be4f180ab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantId}/threads/{threadId}/interactions/{interactionId}/reviews": {
            "post": {
                "tags": [
                    "threads"
                ],
                "summary": "Create feedback review",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Interaction"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Thread feedback version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the thread feedback."
                            }
                        },
                        "description": "Successfully created a new thread feedback."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "A resource was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant in which to create the feedback review."
                    },
                    {
                        "in": "path",
                        "name": "interactionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the interaction in which to create the feedback review."
                    },
                    {
                        "in": "path",
                        "name": "threadId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread in which to create the feedback review."
                    }
                ],
                "description": "Creates feedback review for the thread.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createReview"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "e3fdb85c-6716-4c51-9d8d-f7d8313a211d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{assistantid}/threads/{threadid}": {
            "get": {
                "tags": [
                    "threads"
                ],
                "summary": "Get a thread",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadWithMessages"
                                }
                            }
                        },
                        "description": "Successfully retrieved the thread."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The thread was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested thread."
                    },
                    {
                        "in": "path",
                        "name": "threadid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread to retrieve."
                    }
                ],
                "description": "Retrieves a thread for the assistant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "9762cfcb-7ac1-48f0-85d5-b632452b73dc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "threads"
                ],
                "summary": "Update thread properties",
                "responses": {
                    "204": {
                        "description": "Thread updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "The request has been rate-limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested thread."
                    },
                    {
                        "in": "path",
                        "name": "threadid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread to retrieve."
                    }
                ],
                "description": "Updates the properties of an existing thread with JSON Patch-formatted data.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/threadPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "bd4493b9-23f8-479e-a7d4-d993cfed6953",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "threads"
                ],
                "summary": "Delete a thread",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assistantid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant containing the requested thread."
                    },
                    {
                        "in": "path",
                        "name": "threadid",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the thread to retrieve."
                    }
                ],
                "description": "Deletes the specified thread and all of its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "04c0ed93-ad13-47f9-a2d9-d9a5538e20f0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/assistants/{id}": {
            "get": {
                "tags": [
                    "assistants"
                ],
                "summary": "Get an assistant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assistant"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant."
                            }
                        },
                        "description": "Successfully retrieved the assistant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant to retrieve."
                    }
                ],
                "description": "Retrieves the specified assistant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "f192f579-51ff-460c-b113-925a1b352c6e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "assistants"
                ],
                "summary": "Update assistant properties",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Assistant version."
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the assistant."
                            }
                        },
                        "description": "Assistant updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "The request has been rate-limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The assistant ID."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the assistant was fetched."
                    }
                ],
                "description": "Updates the properties of an existing assistant with JSON Patch-formatted data.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7b979359-0887-40d8-9905-1761b8c4e8ab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "assistants"
                ],
                "summary": "Delete an assistant",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The assistant was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The ID of the assistant to delete."
                    }
                ],
                "description": "Deletes the assistant and all of its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "131ab0c2-f9ac-45d6-bff1-2f8befdb02aa",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/audits": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "List recent audit events",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "eventTime",
                        "schema": {
                            "type": "string",
                            "example": "2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z",
                            "pattern": "YYYY-MM-DDThh:mm:ss.sssZ/YYYY-MM-DDThh:mm:ss.sssZ"
                        },
                        "description": "The start/end time interval formatted in ISO 8601 to search by eventTime. For example, \"?eventTime=2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z\"."
                    },
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The case-sensitive string used to search by eventType. Retrieve a list of possible eventTypes with `/v1/audits/types`."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The comma separated list of audit unique identifiers."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The maximum number of resources to return for a request."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "default": "-eventTime"
                        },
                        "description": "The property of a resource to sort on (default sort is -eventTime). The supported properties are source, eventType, and eventTime. A property must be prefixed by + or - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "source",
                        "schema": {
                            "type": "string",
                            "example": "com.qlik/licenses"
                        },
                        "description": "The case-sensitive string used to search by source. Retrieve a list of possible sources with `/v1/audits/sources`."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The case-sensitive string used to search by userId."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Retrieves list of events for subscribed services for your tenant. Stores events for 90 days, after which they can be accessed via `/v1/audits/archive`.",
                "operationId": "audits",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "214d398b-a038-4146-9150-c790f0b4bf63",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/archive": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "List archived audit events",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetArchiveResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "date",
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2020-02-20",
                            "pattern": "YYYY-MM-DD"
                        },
                        "required": true,
                        "description": "Date to be used as filter and criteria during extraction.",
                        "allowEmptyValue": false
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT is used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Retrieves audit events from long term storage. Finds and returns audit events from the archive, formatted as a JSON array, for the given date and tenant (in JWT). Archived events are not removed.",
                "operationId": "archive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9020c96f-3e04-4f47-ac83-ff18ac3e7a82",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/settings": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Get server configuration options",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSettingsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Returns the server configuration options. It includes options that represent the server configuration state and parameters that were used to run the server with certain functionality.",
                "operationId": "getSettings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0cbf6ff8-eba9-4764-bb60-dc592de9b6d4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/sources": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "List possible event sources",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetObjectsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Finds and returns the list of possible event sources for this tenant.",
                "operationId": "sources",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4f1baeb4-9a2b-4bf1-9e15-0a2c643b963b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/types": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "List possible event types",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetObjectsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Finds and returns the list of possible event types for this tenant.",
                "operationId": "eventTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "35b21374-5801-4021-a2bf-309ff0a6a88d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/{id}": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Get a specific audit event",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetByIDResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The audit item's unique identifier."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Finds and returns a specific audit events for the given event ID.",
                "operationId": "audit",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1d5b51fe-2a3d-409b-9456-a23b2aad8b31",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 1000
                }
            }
        },
        "/v1/automation-connections": {
            "get": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Retrieves a list of automation connections",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationConnectionsList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "name eq \"My Automation Connection\" and connectorId eq \"0d87347d-27c0-11ea-921c-022e6b5ea1e2\" and ownerId eq \"sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy\" and spaceId eq \"5f0f78b239ff4f0001234567\""
                        },
                        "required": false,
                        "description": "Filters the result based on the specified criteria: name, connectorId, ownerId, or spaceId."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "example": 50,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of automation connections to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "listAll",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "required": false,
                        "description": "When true, list all connections. Restricted to tenant admins and analytics admins."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "name",
                                "createdAt",
                                "updatedAt",
                                "+id",
                                "+name",
                                "+createdAt",
                                "+updatedAt",
                                "-id",
                                "-name",
                                "-createdAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "id",
                            "example": "-name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +- prefix indicating sort order. (?sort=-name => sort on the name field using descending order)"
                    }
                ],
                "operationId": "getAutomationConnections",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "af43a8ee-3a15-42e8-b9b5-254948c01771",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Create an automation connection",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationConnectionDetailObject"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "description": "Creates a new connection object from an automation connector.",
                "operationId": "createAutomationConnection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationConnectionCreationObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "The automation object to create."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ca66fd01-06bd-4a52-a5dd-7759f51382bb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automation-connections/{id}": {
            "get": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Get automation connection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationConnectionDetailObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "d6321ebd-d9e8-48fe-9d86-97dbd473bf60"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    }
                ],
                "description": "Returns details about the specified automation connection.",
                "operationId": "getAutomationConnection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dcc08b7a-caeb-4e0d-be89-05b493a5bff6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Update automation connection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationConnectionDetailObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    }
                ],
                "description": "Updates the specified properties of an automation connection.",
                "operationId": "updateAutomationConnection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationConnectionPutRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "The automation connection object to update."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "3c1eb2b6-fa91-4bdc-bd6c-34d6081733bc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Delete automation connection",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    },
                    {
                        "in": "query",
                        "name": "forced",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "required": false,
                        "description": "When true, the automation connection will be deleted regardless of its usage by any automations."
                    }
                ],
                "description": "Deletes the specified automation connection.",
                "operationId": "deleteAutomationConnection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "7aeb54ad-9189-4a37-a7e2-41b76f5d90b4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automation-connections/{id}/actions/change-owner": {
            "post": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Change automation connection owner",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    }
                ],
                "description": "Changes the owner of an automation connection by specifying a new owner.",
                "operationId": "automationConnectionChangeOwner",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationConnectionChangeOwnerObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "The new owner of the automation connection."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "92b32f24-72bf-4773-a302-15c387d1854b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automation-connections/{id}/actions/change-space": {
            "post": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Change automation connection space",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    }
                ],
                "description": "Changes the space of an automation connection by specifying a new space.",
                "operationId": "automationConnectionChangeSpace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationConnectionChangeSpaceObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "The new space of the automation connection."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "64b8bea8-a851-452b-aa7d-ffa8382594aa",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automation-connections/{id}/actions/check": {
            "post": {
                "tags": [
                    "automation-connections"
                ],
                "summary": "Check automation connection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationConnectionCheckObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation connection."
                    }
                ],
                "description": "Tries to validate and checks the connection status of an automation connection.",
                "operationId": "checkAutomationConnection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "0d426646-edb1-4488-816b-db2b698d49ac",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a list of automations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string",
                            "default": ""
                        },
                        "example": "lastRun,lastRunStatus,runMode,createdAt,updatedAt",
                        "required": false,
                        "description": "Allows to select the actual fields to be returned. When no fields are defined, all are returned."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "name eq \"My Automation\" and runMode eq \"scheduled\" and ownerId eq \"sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy\""
                        },
                        "required": false,
                        "description": "Allowed filters: name, runMode, lastRunStatus, ownerId"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "example": 50,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of automations to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "name",
                                "runMode",
                                "state",
                                "createdAt",
                                "updatedAt",
                                "lastRunAt",
                                "lastRunStatus",
                                "duration",
                                "+id",
                                "+name",
                                "+runMode",
                                "+state",
                                "+createdAt",
                                "+updatedAt",
                                "+lastRunAt",
                                "+lastRunStatus",
                                "-id",
                                "-name",
                                "-runMode",
                                "-state",
                                "-createdAt",
                                "-updatedAt",
                                "-lastRunAt",
                                "-lastRunStatus",
                                "+duration",
                                "-duration"
                            ],
                            "type": "string",
                            "default": "id",
                            "example": "-name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +- prefix indicating sort order. (?query=-name => sort on the name field using descending order)"
                    }
                ],
                "operationId": "getAutomations",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "9065dff1-dacd-4530-a85a-0d9d2570e865",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Create an automation",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "createAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Automation object to create"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c15b2e08-7810-4405-9148-1a0c4de34e8b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/usage": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves all automation usage for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "name eq \"duration\" and date eq \"2021-12-15\""
                        },
                        "required": true,
                        "description": "Indicates how the metrics should be filtered"
                    },
                    {
                        "in": "query",
                        "name": "breakdownBy",
                        "schema": {
                            "type": "string",
                            "example": "automation"
                        },
                        "required": false,
                        "description": "If specified, result will be broken apart for each automation"
                    }
                ],
                "description": "Metrics for automations, paginated.",
                "operationId": "getUsageMetrics",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "fb847ebd-3f18-431a-82d8-6dd3f1c07dd9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automations/{id}": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves an automation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string",
                            "default": ""
                        },
                        "example": "snippetIds,endpointIds,connectorIds,workspace",
                        "required": false,
                        "description": "Allows to select the actual fields to be returned. Where the default is all fields"
                    }
                ],
                "operationId": "getAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "3dc413d4-49f8-4509-a027-7a3483fd8be7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "automations"
                ],
                "summary": "Update an automation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "updateAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Automation object to update"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "97943f9b-91fb-4ec4-914a-a6e956c90bad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "automations"
                ],
                "summary": "Delete an automation",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "deleteAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ff4a29b4-395a-4fd5-a378-16976adc4922",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/copy": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Copy an automation.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "description": "The unique identifier for the automation."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "copyAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the new automation."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a9ecd82b-f8e8-49c9-9bfc-8faba2373bbd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/disable": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Disables an automation.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "disableAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "25b92eb7-5b3f-49ed-ad04-79d6022555c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/enable": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Enable an automation.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "enableAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "339bab02-36a8-4be1-955b-60117b7f7d41",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/move": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Move an automation to a different user.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "description": "This step will remove the history and change logs of this automation. All linked connections used inside an automation will be detached.",
                "operationId": "moveAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "userId"
                                ],
                                "properties": {
                                    "userId": {
                                        "type": "string",
                                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ce7119a0-b6b6-4255-ac5c-e7b114c8be1d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a list of runs for a specific automation.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string",
                            "default": ""
                        },
                        "example": "isTestRun,isArchived,error,startTime,stopTime,duration,scheduledStartTIme",
                        "required": false,
                        "description": "Allows to select the actual fields to be returned. Where the default is all fields"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "status eq \"finished\""
                        },
                        "required": false,
                        "description": "Allowed filters: status, context, startTime and title"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "example": 10,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of runs to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "status",
                                "startTime",
                                "-id",
                                "-status",
                                "-startTime",
                                "+id",
                                "+status",
                                "+startTime"
                            ],
                            "type": "string",
                            "default": "id",
                            "example": "-id"
                        },
                        "required": false,
                        "description": "The field to sort by, with +- prefix indicating sort order. (?query=-startTime => sort on the startTime field using descending order)"
                    }
                ],
                "operationId": "getRuns",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1da003b6-5a01-4011-a43f-e8ce4c996dbe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Create a run",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunDetailResponseObject"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "createRun",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RunDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Run object to create"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "60ee0a2a-41c5-4dea-9ed8-80fc5bbca581",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a run",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string",
                            "default": ""
                        },
                        "example": "id,context,status,title,isTestRun,isArchived,expectedInputs,inputs,error,metrics,startTime,stopTime",
                        "required": false,
                        "description": "Allows to select the actual fields to be returned. Where the default is all fields"
                    }
                ],
                "operationId": "getRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "474dc877-235d-41ff-aa91-4c20525eacaf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/export": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Export a run.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "url": {
                                            "type": "string",
                                            "example": "https://<bucket>.s3.<region>.amazonaws.com/<run>.json"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "Creates a temporary pre-signed AWS S3 URL to download the raw logs of a completed run. This URL is valid for 5 minutes.",
                "operationId": "exportRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a3d66394-003f-49b1-914f-58c8aecea1ad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/retry": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Retry a run.",
                "responses": {
                    "204": {
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "This action allows you to retry a specific run by creating a new run using the same inputs.",
                "operationId": "retryRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "25ea7858-99b3-4c18-aa0b-607e5871c0ab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/stop": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Stop a running automation.",
                "responses": {
                    "204": {
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "Force a run to be stopped immediately.",
                "operationId": "stopRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c91dc93e-7493-4ccf-b6d4-5ce8e786e237",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automl-deployments/{deploymentId}/realtime-predictions": {
            "post": {
                "tags": [
                    "automl-deployments"
                ],
                "summary": "Generate predictions",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {},
                            "text/json": {},
                            "application/parquet": {}
                        },
                        "description": "Stream of combined prediction output returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "includeNotPredictedReason",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, will include a column with the reason why a prediction was not produced."
                    },
                    {
                        "in": "query",
                        "name": "includeShap",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, the shapley values will be included in the response."
                    },
                    {
                        "in": "query",
                        "name": "includeSource",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, the source data will be included in the response"
                    },
                    {
                        "in": "query",
                        "name": "index",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The name of the feature in the source data to use as an index in the response data. The column will be included with its original name and values. This is intended to allow the caller to join results with source data."
                    },
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "description": "Generates predictions in a synchronous request and response.",
                "operationId": "postRealtimePredictions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/realtimePredictionInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "9eb62eed-b0bc-4050-9ef9-06991c3b030e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 300
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/coordinate-shap": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Get shapley values in coordinate form",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {}
                            }
                        },
                        "description": "Stream of coordinate shap values returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Returns a file containing the shapley values in coordinate form that are associated with a prediction ID.",
                "operationId": "getCoordinateShapForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "cdea558d-39a9-4b05-91af-728f59e5ac22",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/jobs": {
            "post": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Retrieve jobs associated with a prediction",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Retrieve jobs that are associated with a prediction. Job with correlation type `prediction`.",
                "operationId": "getPredictionJobs",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "84cdfa67-de52-4321-bbb4-47172d8b5723",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/not-predicted-reasons": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Get any rows where a prediction was not produced",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {}
                            }
                        },
                        "description": "Stream of not predicted reasons returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Returns a file containing any rows in a prediction operation where a prediction was unable to be produced.",
                "operationId": "getErrorsForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "af4f5aab-ebb9-4ab6-9cf3-7c52064ea0f2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/predictions": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Get a file containing predicted values",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Prediction stream returned succesfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Returns a file containing the predicted values that are associated with a prediction ID.",
                "operationId": "getConfigurationsForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "ca410b54-af56-44c2-a337-374266b4245d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/shap": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing shapley values",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Stream of shap values returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Returns a file containing the shapley values that are associated with a prediction ID.",
                "operationId": "getShapForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "6aad19d3-c2bd-4fad-9228-a7cc305c6b4d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/source": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing source values",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {}
                            }
                        },
                        "description": "Stream of source values and index field returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "description": "Returns a file containing the source values and an index field that are associated with a prediction ID.",
                "operationId": "getSourceForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "3d99d3a3-55f1-4d6c-8ade-5122f84ab7bd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/brands": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "List brands",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandsList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Cursor to previous."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Maximum number of brands to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "+id",
                                "-id",
                                "createdAt",
                                "+createdAt",
                                "-createdAt",
                                "updatedAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-id"
                        },
                        "required": false,
                        "description": "Field to sort by, prefixed with -/+ to indicate the order."
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Cursor to the next page."
                    }
                ],
                "description": "Lists all brand entries for a tenant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "74fec104-c946-4d57-be85-1a4703956214",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Create a new brand",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Created Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "description": "Creates a new brand.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "logo": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a JPG or PNG file that will be adjusted to fit in a 'box' measuring 109px in width and 62 px in height while maintaining aspect ratio. Maximum size of 300 KB, but smaller is recommended."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the brand."
                                    },
                                    "styles": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a JSON file to define brand style settings. Maximum size is 100 KB. This property is not currently operational."
                                    },
                                    "favIcon": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a properly formatted ICO file. Maximum size is 100 KB."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of the brand."
                                    }
                                }
                            },
                            "example": {
                                "logo": "image-file-content",
                                "name": "My brand",
                                "styles": "json-file-content",
                                "favIcon": "image-file-content",
                                "description": "Some brand description"
                            },
                            "encoding": {
                                "logo": {
                                    "contentType": "image/png, image/jpeg"
                                },
                                "styles": {
                                    "contentType": "application/json"
                                },
                                "favIcon": {
                                    "contentType": "image/x-icon, image/vnd.microsoft.icon"
                                }
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "31f6e1ba-6894-49d7-8a02-16a02d2eecaf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/active": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Retrieve active brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoActiveBrand"
                                }
                            }
                        },
                        "description": "No active brand, returns an empty response."
                    },
                    "301": {
                        "description": "Successful redirect."
                    }
                },
                "description": "Returns the current active brand. If using the Qlik default brand, no value is returned.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "097b89ce-cc07-4fcd-a31f-0721040d65e1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/brands/{brand-id}": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Retrieve a brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Returns a specific brand.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0cff6de5-77fc-4819-84c1-8e89cfb6414b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "brands"
                ],
                "summary": "Update a brand",
                "responses": {
                    "204": {
                        "description": "No Content Response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Patches a brand.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BrandPatch"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "61010e8c-2a12-48b5-bcc2-f0b5bf7572ac",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "brands"
                ],
                "summary": "Delete a brand",
                "responses": {
                    "204": {
                        "description": "No Content Response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Deletes a specific brand. If the active brand is deleted, the tenant will return to the Qlik default.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "474c7271-db43-4e43-b4ad-275c8dfcae92",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/actions/activate": {
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Activate a brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Responds with the brand that was activated."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Sets the brand active and de-activates any other active brand. If the brand is already active, no action is taken.",
                "requestBody": {
                    "content": {
                        "application/json": {}
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0abe9896-60fc-4827-8e78-d6df0af710ec",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/actions/deactivate": {
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Deactivate a brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Responds with the brand that was deactivated."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Sets the brand so it is no longer active, returning the tenant the Qlik default brand. If the brand is already inactive, no action is taken.",
                "requestBody": {
                    "content": {
                        "application/json": {}
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e95edcea-8966-4ec8-b7c8-533890015351",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/files/{brand-file-id}": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Download brand file",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "description": "Downloads the specified brand file.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d334a718-6147-49da-b979-74fd36da6dab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Creates a brand file",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandFile"
                                }
                            }
                        },
                        "description": "Created Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "description": "Creates a brand file for the specified identifier.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a file to upload."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/png, image/jpeg, image/x-icon, image/vnd.microsoft.icon, application/json"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f3497859-6d2c-4fb6-9163-eef2e4d000a4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "brands"
                ],
                "summary": "Update a brand file",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandFile"
                                }
                            }
                        },
                        "description": "OK Response - file updated"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "description": "Updates the specified brand file.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "A file to upload."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/png, image/jpeg, image/x-icon, image/vnd.microsoft.icon, application/json"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e66db066-7f6c-4904-933b-9f7e7a4912c2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "brands"
                ],
                "summary": "Delete a brand file",
                "responses": {
                    "204": {
                        "description": "No content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "description": "Deletes the specified brand file.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7ca18c0c-a319-465d-b7ed-f93621f47dc9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "List collections",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsListCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "creatorId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a resource by creatorId."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "includeItems",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "deep object": {
                                "value": "includeItems[limit]=10&includeItems[sort]=-createdAt&IncludeItems[resourceType]=app"
                            }
                        },
                        "required": false,
                        "description": "Includes the list of items belonging to the collections. Supported parameters are 'limit', 'sort' and 'resourceType'. Supported formats are json formatted string or deep object style using square brackets."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the\nnext or prev cursor, but not both.\n"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt).\nThe supported properties are createdAt, updatedAt, and name. A property\nmust be prefixed by + or - to indicate ascending or descending sort order\nrespectively.\n"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionTypes"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to filter for a collection by type. Retrieve private collections with `private`, public collections with `publicgoverned`, and tags with `public`.\n"
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/CollectionTypes"
                            }
                        },
                        "required": false,
                        "description": "A commaseparated case-sensitive string used to filter by multiple types."
                    }
                ],
                "description": "Retrieves the collections that the user has access to. This endpoint does not return the user's favorites collection, which can be retrieved with `/v1/collections/favorites`.\n",
                "operationId": "collections#listCollections",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1f5a77a7-e3c8-44e6-9fc8-86fd6879c2c5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Create a new collection.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Created response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Creates and returns a new collection. Collections of type `public` (shown as tags in the user interface) must have unique names. Other collection types can reuse names.\n",
                "operationId": "collections#createCollection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsCreateCollectionRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d9df2c76-9af6-42d9-909c-df2d3fa4fcd1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/favorites": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get user's favorites collection",
                "responses": {
                    "302": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Found response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Lists the user's favorites collection.\n",
                "operationId": "collections#getFavoritesCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5b3289ea-820b-4685-aeb3-84deddfbec56",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/collections/{collectionId}": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get a collection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Finds and returns a collection.\n",
                "operationId": "collections#getCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "65b5027e-90dc-4545-8808-f15413b07be0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "collections"
                ],
                "summary": "Update collection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Updates the name, description, or type fields provided in the patch body. Can be used to publish a `private` collection as a `publicgoverned` collection by patching `/type` with `publicgoverned` once the collection contains at least 1 item. Can also be used to return a `publicgoverned` collection to `private`. Cannot be used to change between `public` (tag) and `private / publicgoverned` (collection).",
                "operationId": "collections#PatchCollection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionByIdPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "519448b4-b0b4-4e98-adef-76099f2dfec1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "collections"
                ],
                "summary": "Update a collection's name and description",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Updates a collection's name and description and returns the updated collection. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.\n",
                "operationId": "collections#updateCollection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsUpdateCollectionRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9d4f1801-8391-447e-a359-76508979e2fc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Delete a collection",
                "responses": {
                    "204": {
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "No Content response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Deletes a collection and removes all items from the collection.\n",
                "operationId": "collections#deleteCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1d00a1f6-2a82-4c7a-9a84-cd1eafa42921",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/{collectionId}/items": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "List items in a collection",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsListCollectionItemsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier. (This query also supports 'favorites' as the collectionID).\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "resourceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceLink",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceType."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The space's unique identifier (supports \\'personal\\' as spaceId)."
                    },
                    {
                        "in": "query",
                        "name": "shared",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether or not to return items in a shared space.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "$ref": "#/components/parameters/noActionParam"
                    }
                ],
                "description": "Retrieves items from a collection that the user has access to.\n",
                "operationId": "collections#listCollectionItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "70b34b66-a7b5-46e4-84c7-d09075c2c47e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Add an item to a collection",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Created response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Adds an item to a collection and returns the item.\n",
                "operationId": "collections#addCollectionItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsAddCollectionItemRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "707d33a9-a445-4f46-8672-f8ecd17fddb0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/{collectionId}/items/{itemId}": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Get an item",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Finds and returns an item in a specific collection. See GET `/items/{id}`.\n",
                "operationId": "collections#getCollectionItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "dbaa2425-18fd-40db-9175-6a8d24b56bc3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Remove an item",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Removes an item from a collection.\n",
                "operationId": "collections#deleteCollectionItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f502ad28-bf8c-4d4d-9ea0-892fd907085f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions": {
            "post": {
                "tags": [
                    "conditions"
                ],
                "summary": "Creates a new condition.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConditionResponse"
                                }
                            }
                        },
                        "description": "Condition created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "createCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionCreateRequest"
                            }
                        }
                    },
                    "description": "The condition create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "49a24014-98bc-4197-8fda-bb12f13d99b1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/previews": {
            "post": {
                "tags": [
                    "condition preview"
                ],
                "summary": "Create condition preview request\\",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreviewResponse"
                                }
                            }
                        },
                        "description": "Condition preview request created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "description": "Create condition preview request.",
                "operationId": "conditionsPreview",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionCreateRequest"
                            }
                        }
                    },
                    "description": "Create condition preview request"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e535e4d1-a004-4581-9eab-940c835228ed",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/previews/{id}": {
            "get": {
                "tags": [
                    "condition preview"
                ],
                "summary": "Get condition preview response",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreviewStatusResponse"
                                }
                            }
                        },
                        "description": "The evaluation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "description": "Get condition preview response.",
                "operationId": "conditionsPreviewGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e8df93d1-3ad4-47bc-b402-b195a59ca7bb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/conditions/settings": {
            "get": {
                "tags": [
                    "api settings"
                ],
                "summary": "Retrieves condition manager settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISettings"
                                }
                            }
                        },
                        "description": "The api settings have been successfully returned"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "description": "Lists api settings.",
                "operationId": "ConditionManagerAPISettingsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "910f85df-fc9b-4601-ad6a-36d7ff13e40d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "api settings"
                ],
                "summary": "Updates condition manager settings",
                "responses": {
                    "204": {
                        "description": "api settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Updates API configuration. Accessible only by tenant admins.",
                "operationId": "conditionManagerAPISettingsUpload",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APISettingsUpload"
                            }
                        }
                    },
                    "description": "Request for updating the api settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "aef58d45-55bb-4a60-93d0-4c001e26da1d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}": {
            "get": {
                "tags": [
                    "conditions"
                ],
                "summary": "Retrieve a specific condition by id.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Condition"
                                }
                            }
                        },
                        "description": "The condition"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "getCondition",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "c0a02e92-bc39-4ee1-8234-faf19e7cc132",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "conditions"
                ],
                "summary": "Patch values in the condition",
                "responses": {
                    "204": {
                        "description": "The condition was updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A path or value was invalid"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "updateCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "eb1b7e8a-f448-47f3-83bb-1d015030b74d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "conditions"
                ],
                "summary": "Delete the condition",
                "responses": {
                    "204": {
                        "description": "The record was deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "deleteCondition",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "dc4699b8-eaf7-4d2f-b915-ac6b3650d65a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}/evaluations": {
            "post": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Executes the condition",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateEvaluationResponse"
                                }
                            }
                        },
                        "description": "Condition evaluation created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "executeCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateEvaluationRequest"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "2348206d-e97f-45af-9229-cad187eaddef",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}/evaluations/{evaluationId}": {
            "get": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Get an Evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEvaluationResponse"
                                }
                            }
                        },
                        "description": "The evaluation"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "evaluationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the evaluation"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "6c6cd94b-423b-4de2-8d71-d3dafea625a1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Delete an Evaluation",
                "responses": {
                    "204": {
                        "description": "The evaluation was deleted"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "evaluationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the evaluation"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "fa7c69ac-04fe-4f7c-80c8-3da785595a55",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/consumption/executions": {
            "get": {
                "tags": [
                    "Consumption"
                ],
                "summary": "Retrieves the list of executions on an specific tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExecutionsByTenantList"
                                }
                            }
                        },
                        "description": "The executions list has been successfully returned"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "actionToBlock",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax.\n\nexample `taskName eq \"automation_run_ended\" or taskName eq \"report_triggered\" or or taskName eq \"dataVolumeAggregated\"`\n\nThe following fields are supported: `scope`, `resourcetype`, `resourceaction`, `resourceid`, `capacitylimit`,\n`localusage`, `globalusage`, `overage`, `blocked`, `periodstart`, `periodend`, `consumptionreportid`, `blockedeventtime`,\n`overageeventtime`, `taskname`, `taskdescription`, `userid`, `tenantid`, `customerfacing`, `actiontoblock`\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for pagination - how many elements to skip"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the page of data."
                    },
                    {
                        "in": "query",
                        "name": "periodsToInclude",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "current",
                                    "previous"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies which periods to include regardless of the period type, start and end specified"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "periodstart",
                                    "-periodstart",
                                    "+periodstart",
                                    "periodend",
                                    "-periodend",
                                    "+periodend"
                                ],
                                "type": "string"
                            },
                            "default": [
                                "-periodstart"
                            ]
                        },
                        "required": false
                    }
                ],
                "description": "Lists of execution records by tenant.",
                "operationId": "GetExecutionsByTenantId",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b1445380-8489-44cd-a8fb-068a0dfa20f8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/csp-origins": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "List CSPs",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntryList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "childSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'childSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "connectSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'connectSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "connectSrcWSS",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'connectSrcWSS', true/false."
                    },
                    {
                        "in": "query",
                        "name": "fontSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'fontSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "formAction",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'formAction', true/false."
                    },
                    {
                        "in": "query",
                        "name": "frameAncestors",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'frameAncestors', true/false."
                    },
                    {
                        "in": "query",
                        "name": "frameSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'frameSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "imgSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'imgSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of CSP-Origins to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "mediaSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'mediaSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by name (wildcard and case insensitive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page."
                    },
                    {
                        "in": "query",
                        "name": "objectSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'objectSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "origin",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by origin (wildcard and case insensitive)."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page."
                    },
                    {
                        "in": "query",
                        "name": "scriptSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'scriptSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "-name",
                                "origin",
                                "-origin",
                                "createdDate",
                                "-createdDate",
                                "modifiedDate",
                                "-modifiedDate"
                            ],
                            "type": "string"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order."
                    },
                    {
                        "in": "query",
                        "name": "styleSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'styleSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "workerSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'workerSrc', true/false."
                    }
                ],
                "description": "Retrieves all content security policies for a tenant.",
                "operationId": "listCSPEntries",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "7721f8f7-7b1f-4dd5-80d2-536de7a5f54c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Create a new CSP",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "description": "Creates a new content security policy for an origin.",
                "operationId": "createCSPEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CSPEntryContent"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "7b2232b4-10e1-4786-82e4-ab0ae066b31d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/csp-origins/actions/generate-header": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Retrieve CSP header",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPHeader"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Acceptable"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Accept",
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/plain"
                            ],
                            "type": "string",
                            "default": "application/json"
                        },
                        "description": "The Accept request HTTP header indicates which content types, expressed as MIME types, the client is able to understand"
                    }
                ],
                "description": "Retrieves the full content security policy header (including all configured policies and origins) for the tenant.",
                "operationId": "getCSPHeader",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "5f436189-b409-4e70-9e29-6072df60e869",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/csp-origins/{id}": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Get a CSP",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "description": "Returns details for a specific content security policy.",
                "operationId": "getCSPEntry",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "419ff233-9353-40d3-93e2-d8f0eff791c0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Update a CSP",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "description": "Updates a content security policy.",
                "operationId": "updateCSPEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CSPEntryContent"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "d8ab9f40-8a17-407c-81ac-4dc73e212a74",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Delete a CSP",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "description": "Deletes a specific content security policy.",
                "operationId": "deleteCSPEntry",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "c4a3fcd0-aacb-4ba2-b1c5-b29888bff044",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/csrf-token": {
            "get": {
                "tags": [
                    "csrf"
                ],
                "summary": "Get CSRF token",
                "responses": {
                    "204": {
                        "headers": {
                            "qlik-csrf-token": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "CSRF token."
                            }
                        },
                        "description": "Successfully returned token in qlik-csrf-token header"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Errors"
                                        },
                                        {
                                            "example": {
                                                "code": "CSRF-TOKEN-4",
                                                "title": "CSRF token not supported for given authentication type"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Token is not supported for the auth mechanism being used."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Errors"
                                        },
                                        {
                                            "example": {
                                                "code": "CSRF-TOKEN-3",
                                                "title": "No token found"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Token not found"
                    }
                },
                "description": "Returns CSRF token via the qlik-csrf-token header.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "ceaa79a2-76cd-4245-97bc-8e6c31c58caa",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get a list of alerting tasks.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskListResponse"
                                }
                            }
                        },
                        "description": "The alerting tasks list has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appID",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app ID you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "conditionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The conditionId you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for finding a list of entities - used for pagination"
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The id of the owner you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "ownerName",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The name of the owner you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "owner",
                                    "recipient",
                                    "notowner"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "-datecreated",
                                    "datecreated",
                                    "+datecreated",
                                    "-ownername",
                                    "ownername",
                                    "+ownername",
                                    "lasttrigger",
                                    "-lasttrigger",
                                    "+lasttrigger",
                                    "lastscan",
                                    "-lastscan",
                                    "+lastscan",
                                    "name",
                                    "-name",
                                    "+name",
                                    "enabled",
                                    "-enabled",
                                    "+enabled",
                                    "status",
                                    "-status",
                                    "+status",
                                    "nextexecutiontime",
                                    "-nextexecutiontime",
                                    "+nextexecutiontime"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "INVALID_RECIPIENT",
                                    "INVALID_OWNER",
                                    "DISABLED",
                                    "VALID"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    }
                ],
                "operationId": "alertingTasksList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "30c90df5-ab6b-4dc9-9667-f49f7f8be8d3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Creates a new alerting task.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskResponse"
                                }
                            }
                        },
                        "description": "Alert creation has been accepted. The alerting task will have status creating, until status is set to either valid or invalid."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingTasksCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting task create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7933bd9b-89f2-4586-b063-5342d2449af3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/actions/trigger": {
            "post": {
                "tags": [
                    "alerting actions"
                ],
                "summary": "Creates a new alerting trigger action.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingActionsTriggerCreateResponse"
                                }
                            }
                        },
                        "description": "Action has been successfully done. Request to eventing was successfully triggered."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingActionsTriggerCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingActionsTriggerCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting trigger action create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e5ad4d56-dfda-4540-8e54-f656199dd23d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/actions/validate": {
            "post": {
                "tags": [
                    "alerting actions"
                ],
                "summary": "Validates a new alerting task. Current support includes validation for recipients only.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskValidationResponse"
                                }
                            }
                        },
                        "description": "Alerting task has been validated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingTaskActionsValidate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting validate action validates a new alerting task."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e3752035-7584-427a-aca2-55347ffffe5e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/settings": {
            "get": {
                "tags": [
                    "alerting settings"
                ],
                "summary": "Lists alerting settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingSettings"
                                }
                            }
                        },
                        "description": "The alerting settings have been successfully returned"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingSettingsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "97ae8d45-6da4-436b-a8c8-8395f21e8dfc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "alerting settings"
                ],
                "summary": "Updates Alerting configuration. Accessible only by tenant admins.",
                "responses": {
                    "204": {
                        "description": "Alerting settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request was denied at this time. This could happen when requesting to disable/enable the feature while there is an ongoing operation to enable/disable the feature"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingSettingsUpload",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingSettingsUpload"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request for updating the alerting settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "31de7768-a071-4274-b9c1-633dcfa9440f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get an alerting task by its id",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskResponse"
                                }
                            }
                        },
                        "description": "Alert has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksIDGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4277e6bc-4b84-4992-a84c-59791b627834",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Updates an existing alerting task",
                "responses": {
                    "204": {
                        "description": "The alerting task has been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified alerting task ID or body is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "An alerting task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskPatchRequestCompliantList"
                            }
                        }
                    },
                    "required": true,
                    "description": "Patch request definition for an alerting task."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a8d751c6-c025-4a4b-b4ad-e1aef9578998",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Deletes an alerting task.",
                "responses": {
                    "204": {
                        "description": "The alerting task has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified alerting task ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "An alerting task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c0edee30-bac1-4dc4-abd7-8f65268e1c1c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}/condition": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get the condition associated with an alerting task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingConditionResponse"
                                }
                            }
                        },
                        "description": "Condition associated with the alerting task has been successfully returned. See ConditionResponse in condition-manager api docs"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or condition not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingConditionGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "73348fea-5142-4580-a1f4-b2864bb56615",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{alertId}/executions/{executionId}": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets a specified alerting execution.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingExecutionResponse"
                                }
                            }
                        },
                        "description": "The execution has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task or execution ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier. If value is \"latest\", the latest execution will be returned"
                    }
                ],
                "operationId": "alertingExecutionsIDGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "600d5353-6ce6-4e30-9c2f-e938436e9499",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Deletes an execution.",
                "responses": {
                    "204": {
                        "description": "The execution has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task or execution ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier."
                    }
                ],
                "operationId": "alertingExecutionsDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9f0bf143-be75-4c34-a9c8-664771b93cd2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}/recipient-stats": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get the recipient stats for an alerting task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingRecipientStatsResponse"
                                }
                            }
                        },
                        "description": "Alert recipient stats have been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "groups",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "The name of the groups you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "+userID",
                                    "-userID",
                                    "subscribed",
                                    "+subscribed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "subscribed",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Subscribed property you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The recipients ID you would like to filter by"
                    }
                ],
                "operationId": "alertingRecipientStatsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bfcf2174-3d4b-4357-b749-406e29b848b0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Lists all alerting-executions linked to a user and a tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingExecutionListResponse"
                                }
                            }
                        },
                        "description": "The alerting-executions list has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "conditionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filter by condition id related to the executions."
                    },
                    {
                        "in": "query",
                        "name": "conditionStatus",
                        "schema": {
                            "enum": [
                                "FINISHED",
                                "FAILED",
                                "ALL"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filter by whether the alerting task execution status is FINISHED or FAILED."
                    },
                    {
                        "in": "query",
                        "name": "daysOfMonth",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "maximum": 31,
                                "minimum": 1
                            }
                        },
                        "required": false,
                        "description": "Specifies required days of the month that the execution was created in"
                    },
                    {
                        "in": "query",
                        "name": "daysOfWeek",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "MONDAY",
                                    "TUESDAY",
                                    "WEDNESDAY",
                                    "THURSDAY",
                                    "FRIDAY",
                                    "SATURDAY",
                                    "SUNDAY"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies a filter for custom handled periods of time in which the executions were handled"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "evaluationId",
                                    "triggerTime",
                                    "conditionStatus",
                                    "executionEvaluationStatus",
                                    "evaluation",
                                    "evaluation.endTime",
                                    "evaluation.resultData",
                                    "evaluation.resultData.count",
                                    "evaluation.resultData.headers",
                                    "evaluation.resultData.positive",
                                    "evaluation.resultData.negative",
                                    "evaluation.resultData.dimensions",
                                    "evaluation.resultData.measures"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies specific properties to be populated"
                    },
                    {
                        "in": "query",
                        "name": "includeEvaluation",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Specifies whether to include evaluation details"
                    },
                    {
                        "in": "query",
                        "name": "lastEachDay",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Specifies whether to only show the last execution in each day"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "minimumGapDays",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false,
                        "description": "Specifies the number of days required between each entry. This should require a sort by triggertime"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for pagination - how many elements to skip"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "searchResultsLimit",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false,
                        "description": "Specifies a limit number for the search query, affects total count and is not related to pagination"
                    },
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a date that executions should have been created after. Date in RFC3339Nano format, such as 2020-01-01T00:00:00.000Z"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "triggertime",
                                    "-triggertime",
                                    "+triggertime"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "timezone",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a timezone the other time-based filters in this query should consider. Expecting a momentjs format, such as America/Los_Angeles"
                    },
                    {
                        "in": "query",
                        "name": "triggered",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Filter by whether the alerting task is triggered."
                    },
                    {
                        "in": "query",
                        "name": "until",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a date that executions should have been created before. Date in RFC3339Nano format, such as 2020-01-01T00:00:00.000Z"
                    }
                ],
                "operationId": "alertingExecutionsList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5a47d692-68e4-4a18-bb38-bd577d5c9c27",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions/stats": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets the stats for alerting task executions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskExecutionStats"
                                }
                            }
                        },
                        "description": "Evaluation successfully returned."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task or execution with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "period",
                        "schema": {
                            "enum": [
                                "month"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The period by which the stats aggregation needs to be performed."
                    }
                ],
                "operationId": "alertingExecutionsEvaluationStats",
                "x-qlik-deprecated": true,
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cb55a8e1-ad2f-42e7-8959-50896b2fe720",
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions/{executionId}/evaluations": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets the content of an evaluation from an execution",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluationGetResponse"
                                }
                            }
                        },
                        "description": "Evaluation successfully returned."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task or execution with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier."
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingExecutionsEvaluationGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "22fe3613-ef8c-4fdc-8001-3f6a234731d1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-assets": {
            "post": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Save new data asset.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Created new data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataAsset"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "fe9d5777-f82b-423a-bbb0-2b58e8f1846a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Batch delete data assets by IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data asset with all child objects."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataAssets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "04fc490c-a7ee-46c6-82a8-ee3ae2de406b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-assets/{data-asset-id}": {
            "get": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Get data asset by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataAsset",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "9192a33e-0318-446e-86f4-3104af5dfa89",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Patch data asset.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Patched data asset successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Patched data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "8f64a499-8f6d-48be-8d9f-f4eece874bd3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Update data asset.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Updated data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataAsset"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "9c8c10b0-b412-46d6-bf48-1f5577c71843",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Gets a list of connections",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connections"
                                }
                            }
                        },
                        "description": "List connections with optional filter queries. Connections will be filtered internally based on the space access rules applicable to the caller. When some of connections are not returned due to errors, errors array in the response will be set."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request, typically when dataName is empty"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal error, this happens when the service fails to make requests to dependency services"
                    },
                    "502": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad gateway, this happens when requests to required (dependent) services time out"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dataName"
                    },
                    {
                        "$ref": "#/components/parameters/extended"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    },
                    {
                        "$ref": "#/components/parameters/personal"
                    },
                    {
                        "$ref": "#/components/parameters/owner"
                    },
                    {
                        "$ref": "#/components/parameters/ownedbyme"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/nodatafiles"
                    },
                    {
                        "$ref": "#/components/parameters/userId"
                    },
                    {
                        "$ref": "#/components/parameters/caseinsensitive"
                    },
                    {
                        "$ref": "#/components/parameters/locale"
                    },
                    {
                        "$ref": "#/components/parameters/includeQris"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2b84813b-857a-460c-a4a8-023d16d9bb5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Creates a new connection. Depending on the fields defined in the request body, credentials embedded (or associated) in the connection can be updated or created.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ConnectionCreateResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DcaasConnectionCreateAuthResponse"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Data connection created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Invalid data connection specified"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credentials referenced by qCredentialsID in the request body could not be found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/ConnectionCreate"
                                    },
                                    {
                                        "$ref": "#/components/schemas/DcaasConnectionCreate"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9f251201-3bba-44f4-a491-4a8438a77319",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/delete": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Delete multiple connections, only available to Admin",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkResponse"
                                }
                            }
                        },
                        "description": "Bulk delete completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the endpoint. The endpoint requires Admin role"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionDeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "18d91427-8027-4e6f-a577-dfd757edd6f4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/duplicate": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Duplicate a connection",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionCreateResponse"
                                }
                            }
                        },
                        "description": "Duplicate completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body, or duplicate from / to a reserved connection)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the source connection or no access to target space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection defined by id not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Duplicated connection would result in a name conflict with the connections in the scope"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionDuplicateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f157bc48-469e-447c-aba1-e57082fae008",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/update": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Update multiple connections, only available to Admin. When update is to change ownership of a connection, the credentials associated with the connection will NOT be transferred to the new owner, and new owner is expected to provide their own credentials for the connection.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkResponse"
                                }
                            }
                        },
                        "description": "Bulk update completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the endpoint. The endpoint requires Admin role"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4c37ff5a-d09e-4e23-bccc-ce9248c89230",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/{qID}": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Retrieves a connection by connection ID, or by name when the query parameter \"type\" is set to \"connectionname.\"",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionGet"
                                }
                            }
                        },
                        "description": "Data connection retrieved"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "The qID is not a valid UUID"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential decryption failed, likely due to invalid credentials"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/extended"
                    },
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/credentialID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    },
                    {
                        "$ref": "#/components/parameters/nocache"
                    },
                    {
                        "$ref": "#/components/parameters/parseConnection"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0e80d84e-3471-41f0-9b5c-a5113bec1a5d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Patches a connection specified by connection ID (or by name when type=connectionname is set in query).",
                "responses": {
                    "204": {
                        "description": "Data connection updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request due to invalid data in body"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a9a7c7f4-65bc-448d-9951-00d9e43de2ff",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Updates a connection specified by connection ID (or by name when type=connectionname is set in query). Depends on the fields defined in the request body, credentials embedded (or associated) in the connection can be updated or created.",
                "responses": {
                    "204": {
                        "description": "Data connection updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request due to invalid data in body"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectionUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "87994283-11c2-40ba-ac47-93b0daafc0a4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Deletes the specified data connection by ID (or by name when type=connectionname is set in query)",
                "responses": {
                    "204": {
                        "description": "Data connection deleted successfully"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9d15b6e0-9d69-4b0c-b34f-dd4f60837c48",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-credentials/actions/filter-orphan": {
            "post": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Gets list of orphan data credentials (i.e. credentials that are not associated to any data connection) filtering on properties defined in request body",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionFilterOrphanResponse"
                                }
                            }
                        },
                        "description": "Orphan credentials returned"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to credentials"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionFilterOrphanRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "4a3ab913-c34c-45a4-bcaa-b9bbbf944d06",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-credentials/{qID}": {
            "get": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Gets a credential by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Credential"
                                }
                            }
                        },
                        "description": "Credential retrieved"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Empty value not permitted for dataName"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4ef58718-07e7-4658-b664-0781007987a6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Patches a credential specified by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection ID changed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "608d90fb-f997-46ea-899c-f8ad7a125cdd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Updates a credential specified by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection ID changed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialCreate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "434cdcd7-b439-4245-82ae-55a2fc998e32",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Deletes the specified credential by ID (or by name when type=credentialname is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential deleted successfully"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e4ea0957-ffed-4a3f-be0c-1a7a42984050",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get descriptive info for the specified data files.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDataFileInfosResponse"
                                }
                            }
                        },
                        "description": "The file list was retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "allowInternalFiles",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to false, do not return data files with internal extensions else return all the data files."
                    },
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                            "nullable": true
                        },
                        "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                        "description": "Only return files scoped to the specified app.  If this parameter is not specified, only files that are not\r\nscoped to any app are returned.  \"*\" implies all app-scoped files are returned."
                    },
                    {
                        "in": "query",
                        "name": "baseNameWildcard",
                        "schema": {
                            "type": "string",
                            "example": "*SomeFileName*",
                            "nullable": true
                        },
                        "example": "*SomeFileName*",
                        "description": "If present, return only items whose base name matches the given wildcard.  Wildcards include '*' and '?'\r\ncharacters to allow for multiple matches.  The base name is the actual file or folder name without any\r\nfolder pathing included."
                    },
                    {
                        "in": "query",
                        "name": "connectionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                            "nullable": true
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "Return files and folders that reside in the space referenced by the specified DataFiles connection.  If this\r\nparameter is not specified, the user's personal space is implied."
                    },
                    {
                        "in": "query",
                        "name": "excludeFiles",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, exclude files in the returned list (IE, only return folders).  If false, include files."
                    },
                    {
                        "in": "query",
                        "name": "excludeSubFolders",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, exclude folders and files that reside in sub-folders of the root being searched.  If false,\r\ninclude all items in full folder hierarchy that recursively reside under the root.  That is, setting to\r\ntrue results in only the direct children of the root being returned."
                    },
                    {
                        "in": "query",
                        "name": "folderId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                            "nullable": true
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "If present, return only items which reside under the folder specified by the given ID.  If not present,\r\nitems that live at the root of the space are returned.  This property is mutually exclusive with 'folderPath'."
                    },
                    {
                        "in": "query",
                        "name": "folderPath",
                        "schema": {
                            "type": "string",
                            "example": "some/folder",
                            "nullable": true
                        },
                        "example": "some/folder",
                        "description": "If present, return only items which reside under the specified folder path.  If not present, items that\r\nlive at the root of the space are returned.  This property is mutually exclusive with 'folderId'."
                    },
                    {
                        "in": "query",
                        "name": "includeAllSpaces",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, and connectionId is not specified, return files and folders from all spaces the given user\r\nhas access to (including the personal space).  If connectionId is specified, this parameter is ignored."
                    },
                    {
                        "in": "query",
                        "name": "includeFolders",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, include folders in the returned list.  If false, only return data files."
                    },
                    {
                        "in": "query",
                        "name": "includeFolderStats",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, include computed folder statistics for folders in the returned list.  If false, this information\r\nis not returned."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "example": 5,
                            "maximum": 1000,
                            "minimum": 1
                        },
                        "example": 5,
                        "description": "If present, the maximum number of data files to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "example": "MyFile.csv",
                            "nullable": true
                        },
                        "example": "MyFile.csv",
                        "description": "Filter the list of files returned to the given file name."
                    },
                    {
                        "in": "query",
                        "name": "notOwnerId",
                        "schema": {
                            "type": "string",
                            "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                            "nullable": true
                        },
                        "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                        "description": "If present, fetch the data files whose owner is not the specified owner.  If a connectionId is specified in\r\nthis case, the returned list is constrained to the specified space.  If connectionId is not specified, then\r\nthe returned list is constrained to the calling user's personal space.  If includeAllSpaces is set to true,\r\nand connectionId is not specified, the returned list is from all spaces the given user\r\nhas access to (including the personal space)."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string",
                            "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                            "nullable": true
                        },
                        "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                        "description": "If present, fetch the data files for the specified owner.  If a connectionId is specified in this case, the\r\nreturned list is constrained to the specified space.  If connectionId is not specified, then all files owned\r\nby the specified user are returned regardless of the personal space that a given file resides in."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string",
                            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                            "nullable": true
                        },
                        "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                        "description": "If present, the cursor that starts the page of data that is returned."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "$ref": "#/components/schemas/GetDataFileInfosSortField"
                        },
                        "description": "The name of the field used to sort the result.  By default, the sort order is ascending.  Putting a '+' prefix on\r\nthe sort field name explicitly indicates ascending sort order.  A '-' prefix indicates a descending sort order."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "02003995-8710-4c00-8cfa-c87e43085622",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Upload a new data file or create a new folder.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "New file or folder was created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A file or folder with the same name already exists in the specified user or app scope."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file exceeds the user's quota for maximum file size to upload."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client."
                    },
                    "501": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Implemented"
                    }
                },
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "Json.Name"
                                ],
                                "properties": {
                                    "File": {
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true,
                                        "description": "IFormFile form multipart/form-data"
                                    },
                                    "Json": {
                                        "type": "object",
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "some/folder/MyFile.csv",
                                                "pattern": "^[^<>\":\\u0000|?*]+$",
                                                "description": "Name that will be given to the file or folder.  It should be noted that the '/' character\r\nin the name indicates a 'path' separator in a logical folder hierarchy for the name.  Names that\r\ncontain '/'s should be used with the assumption that a logical 'folder hierarchy' is being defined for the\r\nfull pathname of that file or folder.  IE, a '/' is a significant character in the name."
                                            },
                                            "appId": {
                                                "type": "string",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If this file should be bound to the lifecycle of a specific app, this is the ID of this app.  If this\r\nrequest is creating a folder, the specification of an app ID is not allowed."
                                            },
                                            "folder": {
                                                "type": "boolean",
                                                "default": false,
                                                "description": "If true, a folder will be created.  If false, a file is created."
                                            },
                                            "folderId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "nullable": true,
                                                "description": "If the specified file or folder should be moved to become a a sub-item of an existing folder, this is the ID\r\nof this parent folder.  Any additional folder path that is present on the Name property will be created\r\nas a subfolder hierarchy of this folder.  If the FolderID is null, the file or folder specified in the\r\nName property (including any folder prefix on that name), will be created in the root of the space."
                                            },
                                            "sourceId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If a SourceId is specified, this is the ID of the existing data file or folder whose content should be copied\r\ninto the specified data file or folder.  That is, for a file instead of the file content being specified in\r\nthe Data element, it is effectively copied from an existing, previously uploaded file.  For a folder, rather\r\nthan the new folder being empty, it's contents are copied from an existing, previously created folder."
                                            },
                                            "connectionId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                                                "nullable": true,
                                                "description": "If present, this is the DataFiles connection that the upload should occur in the context of.  If absent,\r\nthe default is that the upload will occur in the context of the Personal Space DataFiles connection.  If the\r\nDataFiles connection is different from the one specified when the file or folder was last POSTed or PUT, this\r\nwill result in a logical move of this file or folder into the new space."
                                            },
                                            "tempContentFileId": {
                                                "type": "string",
                                                "example": "624b0f54459f1c00018dade4",
                                                "nullable": true,
                                                "description": "If a TempContentFileId is specified, this is the ID of a previously uploaded temporary content file whose\r\ncontent should be copied into the specified data file.  That is, instead of the file content being specified\r\nin the Data element, it is effectively copied from an existing, previously uploaded file.  The expectation\r\nis that this file was previously uploaded to the temporary content service, and the ID specified here is\r\nthe one returned from the temp content upload request.  This option does not apply when POSTing a folder."
                                            }
                                        },
                                        "description": "See PostDataFileRequest schema which defines request structure.\n See  model.",
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "encoding": {
                                "File": {
                                    "style": "form"
                                },
                                "Json": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "4d8e5fb6-333a-4322-b6ae-8b6ae0afe0e4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/actions/change-space": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the spaces that a set of existing data files or folders reside in a a single batch.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiStatusResponse"
                                }
                            }
                        },
                        "description": "The result status of the change space operations on each specified data file."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "description": "This is to allow for a separate admin type of operation that is more global in terms of access in cases\r\nwhere admin users may not explicitly have been granted full access to a given space within the declared\r\nspace-level permissions.  If the space ID is set to null, then the data file or folder will end up residing\r\nin the personal space of the user who is the owner of the item.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataFileBatchChangeSpaceRequest"
                            }
                        }
                    },
                    "description": "The batch of IDs for each data file in the batch whose space will be changed along with\r\n            the space IDs for each change."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "d8169de4-bede-4d9f-a776-a039f57bc143",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/actions/delete": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Delete the specified set of data files and/or folders as a single batch.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiStatusResponse"
                                }
                            }
                        },
                        "description": "The result status of the delete operations on each specified data file or folder."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataFileBatchDeleteRequest"
                            }
                        }
                    },
                    "description": "The specification of the batch of data files and folders to delete."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "0c82098c-b24e-49be-be81-53d7c8d2e7c6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/connections": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get the list of built-in connections used by the engine to load/write data files.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConnectionsResponse"
                                }
                            }
                        },
                        "description": "Connection list was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                            "nullable": true
                        },
                        "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                        "description": "If present, get connections with connection strings that are scoped to the given app ID."
                    },
                    {
                        "in": "query",
                        "name": "includeSpaceStats",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to true, include computed space-level statistics for the spaces represented by the connections in the\r\nreturned list.  If false, this information is not returned."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "example": 5,
                            "maximum": 1000,
                            "minimum": 1
                        },
                        "example": 5,
                        "description": "If present, the maximum number of data file connection records to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "example": "MySenseApp",
                            "nullable": true
                        },
                        "example": "MySenseApp",
                        "description": "If present, only return connections with the given name."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string",
                            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                            "nullable": true
                        },
                        "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                        "description": "If present, the cursor that starts the page of data that is returned."
                    },
                    {
                        "in": "query",
                        "name": "personal",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": true
                        },
                        "example": true,
                        "description": "If true, only return the connections that access data in a personal space.  Default is false."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "$ref": "#/components/schemas/GetConnectionsSortField"
                        },
                        "description": "The name of the field used to sort the result.  By default, the sort is ascending.  Putting a '+' prefix on\r\nthe sort field name explicitly indicates ascending sort order.  A '-' prefix indicates a descending sort order."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "example": "617979737a9f56e49dea2e6e",
                            "nullable": true
                        },
                        "example": "617979737a9f56e49dea2e6e",
                        "description": "If present, only return the connection that accesses data files in the specified space."
                    }
                ],
                "description": "The non-filtered list contains a set of hardcoded connections, along with one connection per team space that\r\nthe given user has access to.",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "5296eacf-4248-4f2e-9f1b-657dc9e62a72",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-files/connections/{id}": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get the built-in connection used by the engine to load/write data files given a connection ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionsResponse"
                                }
                            }
                        },
                        "description": "The connection was returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The space referenced by the specified connection was not found, or is not accessible to the current user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A connection with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the connection."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dc0c72b3-75bc-4727-b2ae-147b0a1ac388",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-files/quotas": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get quota information for the calling user.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuotaResponse"
                                }
                            }
                        },
                        "description": "The quota information was retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b7114327-c85e-4376-aabb-b49afed4bee0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-files/{id}": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get descriptive info for the specified data file.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "The file was located."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "75b3cf73-423f-414f-b302-09e1077f43ca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Re-upload an existing data file or update an existing folder.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "The file or folder was updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file or folder with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "If the file or folder was renamed during the update, a file or folder with the new name\r\n            already exists.  Also, if the space that the file or folder resides in was changed as part of the update,\r\n            a file or folder with the same name already resides in the new space."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file exceeds the user's quota for maximum file size to upload."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client.  If a folder is being\r\n            updated, then if any file or folder in the subfolder hierarchy of this folder is already locked for write."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file to update."
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "File": {
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true,
                                        "description": "IFormFile form multipart/form-data"
                                    },
                                    "Json": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "some/folder/MyFile.csv",
                                                "pattern": "^[^<>\":\\u0000|?*]+$",
                                                "nullable": true,
                                                "description": "Name that will be given to the file or folder.  If this name is different than the name used when the file\r\nor folder was last POSTed or PUT, this will result in a rename of the file or folder.  It should be noted\r\nthat the '/' character in a data file name indicates a 'path' separator in a logical folder hierarchy for\r\nthe name.  Names that contain '/'s should be used with the assumption that a logical 'folder hierarchy' is\r\nbeing defined for the full pathname of that file or folder..  '/' is a significant character in the data file\r\nor folder name."
                                            },
                                            "appId": {
                                                "type": "string",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If this file should be bound to the lifecycle of a specific app, this is the ID of this app.  If this\r\nrequest is creating a folder, the specification of an app ID is not allowed."
                                            },
                                            "folderId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                                                "nullable": true,
                                                "description": "If the specified file or folder should be created as a sub-item of an existing folder, this is the ID\r\nof this parent folder.  Any additional folder path that is present on the Name property will be created\r\nas a subfolder hierarchy of this folder.  If the FolderID is null, the file or folder specified in the\r\nName property (including any folder prefix on that name), will be created in the root of the space."
                                            },
                                            "sourceId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If a SourceId is specified, this is the ID of the existing data file or folder whose content should be copied\r\ninto the specified data file or folder.  That is, for a file instead of the file content being specified in\r\nthe Data element, it is effectively copied from an existing, previously uploaded file.  For a folder, it's\r\ncontents are copied from an existing, previously created folder.  If there it existing content in the target\r\nfolder, then how the source and target folder contents are merged together is specified in the\r\nFolderMergeBehavior option."
                                            },
                                            "connectionId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                                                "nullable": true,
                                                "description": "If present, this is the DataFiles connection points to the space that the file or folder should reside in.\r\nIf absent, the default is that the file or folder will reside in the Personal SPce.  If the DataFiles\r\nconnection is different from the one specified when the file or folder was last POSTed or PUT, this will\r\nresult in a logical move of this file or folder into the new space."
                                            },
                                            "tempContentFileId": {
                                                "type": "string",
                                                "example": "624b0f54459f1c00018dade4",
                                                "nullable": true,
                                                "description": "If a TempContentFileId is specified, this is the ID of a previously uploaded temporary content file whose\r\ncontent should be copied into the specified data file.  That is, instead of the file content being specified\r\nin the Data element, it is effectively copied from an existing, previously uploaded file.  The expectation\r\nis that this file was previously uploaded to the temporary content service, and the ID specified here is\r\nthe one returned from the temp content upload request."
                                            },
                                            "folderMergeBehavior": {
                                                "$ref": "#/components/schemas/PutDataFileFolderMergeBehavior"
                                            }
                                        },
                                        "description": "See PutDataFileRequest schema which defines request structure.\n See  model.",
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "encoding": {
                                "File": {
                                    "style": "form"
                                },
                                "Json": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "373bcc92-b6f2-406e-86c5-ae7791d3a180",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            },
            "delete": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Delete the specified data file or folder.  Deleting a folder will also recursively delete all files and\r\nsubfolders that reside within the specified folder.",
                "responses": {
                    "204": {
                        "description": "The file or folder was deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file or folder with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file or folder to delete."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dbe1126d-22f1-459f-a687-44f43f4bb0f7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/{id}/actions/change-owner": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the owner of an existing data file or folder.",
                "responses": {
                    "204": {
                        "description": "The file or folder's owner was changed."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "An owner with the specified ID does not exist."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The user does not have permission to modify the specified data file or folder, or if the\r\n            item does not reside in the root of the space."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file or folder with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "If the file or folder is in a personal space, and the personal space of the new owner\r\n            already has an item in the space with the same name as the item being moved."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file or folder is already locked for write by another client.  For folders, any\r\n            write lock on a subfolder or file underneath this folder implies a lock on the folder."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file or folder whose owner will be updated."
                    }
                ],
                "description": "This is primarily an admin type of operation.  In general, the owner of a data file or folder is implicitly\r\nset as part of a create or update operation.  For data files or folders that reside in a personal space,\r\nchanging the owner has the effect of moving the data file to the new owner's personal space.  Note that,\r\nIf a given file or folder is not in the root of a personal space, this operation will not succeed, since\r\nthe parent folder does not reside in the target owner's personal space.  If the owner of a folder in the\r\nroot of a personal space is changed, the owner of all subfolders and files within those subfolders will\r\nalso recursively change.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeDataFileOwnerRequest"
                            }
                        }
                    },
                    "description": "The request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a0b5d938-6028-4640-8d27-b879e9b7f515",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/{id}/actions/change-space": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the space that an existing data file or folder resides in.",
                "responses": {
                    "204": {
                        "description": "The file or folder's space was changed."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A space with the specified ID does not exist."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The user does not have permission to modify the specified data file or folder, or if the\r\n            item does not reside in the root of the space."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file or folder with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "If there is a file or folder in the target space with the same name as the item being\r\n            moved."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for write by another client.  For folders, any write lock on\r\n            a subfolder or file underneath this folder implies a lock on the folder."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file or folder whose\r\n            space will be updated."
                    }
                ],
                "description": "This is to allow for a separate admin type of operation that is more global in terms of access in cases\r\nwhere admin users may not explicitly have been granted full access to a given space within the declared\r\nspace-level permissions.  If the space ID is set to null, then the datafile or folder will end up residing\r\nin the personal space of the user who is the owner of the item.  Note that, if a given file or folder is not\r\nin the root of a given space, this operation will not succeed, since the parent folder does not reside in\r\nthe target space.  If the space of a folder in the root of the source space is changed, all subfolders and\r\nfiles within those subfolders will also recursively be moved to the new space.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeDataFileSpaceRequest"
                            }
                        }
                    },
                    "description": "The request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "18054b0b-5bea-4d71-8b74-0873f088eb51",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-sets": {
            "post": {
                "tags": [
                    "data-set"
                ],
                "summary": "Save new data set",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Created new data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataSet"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "88ac099c-fb86-4622-863c-2ea85f6df2a8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-set"
                ],
                "summary": "Batch delete data sets.",
                "responses": {
                    "204": {
                        "description": "Deleted data sets."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataSets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "5abb6b66-d51a-416e-8cbc-60d53eb992d5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-sets/{data-set-id}": {
            "get": {
                "tags": [
                    "data-set"
                ],
                "summary": "Get data set by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataSet",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "a45c2df9-1ff5-48fb-83e7-d05ce3250b09",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-set"
                ],
                "summary": "Patch data set.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Patched data set successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Patched data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "826475ae-8980-4e8a-a313-b15b55da6f65",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-set"
                ],
                "summary": "Update data set.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Updated data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataSet"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "2267a4dd-7414-48ed-9ffa-41a6964dae87",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-sets/{data-set-id}/profiles": {
            "get": {
                "tags": [
                    "profile"
                ],
                "summary": "Get profile for the given dataset and connection Id pair, if the profile already exists in the system. Profile returned can be either latest or Stale one based on when it was computed.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSetProfile"
                                }
                            }
                        },
                        "description": "Return profiles of data set."
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSetProfile"
                                }
                            }
                        },
                        "description": "The profile is currently running."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "dataConnectionIds",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated data connection IDs."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false
                    }
                ],
                "operationId": "getDataSetProfiles",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "ce6a0a51-5f43-4712-94c5-762756cfb294",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-sources": {
            "get": {
                "tags": [
                    "data-sources"
                ],
                "summary": "Get data sources",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSourcesResponseNew"
                                }
                            }
                        },
                        "description": "An array of data source info"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Datasource not found or it is not enabled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal errors"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "dataSourceId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "rest",
                        "required": false,
                        "description": "Filtering on datasourceID, when multiple dataSourceId are set in query, last dataSourceId will be used"
                    },
                    {
                        "in": "query",
                        "name": "detail",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true,
                        "required": false,
                        "description": "Determines if provider detail is returned"
                    },
                    {
                        "in": "query",
                        "name": "includeui",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true,
                        "required": false,
                        "description": "Determines if UI info is returned"
                    }
                ],
                "description": "Gets the list of data sources available on the node.",
                "operationId": "getDataSources",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b14e8df4-e804-4f2a-9b7e-25984761153e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-sources/{dataSourceId}/api-specs": {
            "get": {
                "tags": [
                    "data-sources"
                ],
                "summary": "Get 'connectionProperties' for a given datasource",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpecResponse"
                                }
                            }
                        },
                        "description": "API spec returned"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Datasource not found or it is not enabled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal errors"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Service unavailable, happens when request to connector or down stream services fails"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataSourceId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "rest",
                        "required": true,
                        "description": "Datasource ID"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "93e20cdf-7095-44ee-b61d-7c293d193fe4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-sources/{dataSourceId}/gateways": {
            "get": {
                "tags": [
                    "data-sources"
                ],
                "summary": "Get list available gateway ID's for a given datasource",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "gateways": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "example": "051YTx0OGDlfQ_66H3NyXwK24HEEyyJI::a6CxFtkInvsJnrNXCOVWR8pQOwaphpU0",
                                                        "description": "Gateway ID"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "MyGateway",
                                                        "description": "Gateway name"
                                                    },
                                                    "default": {
                                                        "type": "boolean",
                                                        "example": true,
                                                        "description": "Whether the gateway is default"
                                                    }
                                                },
                                                "description": "Gateway data"
                                            },
                                            "description": "List of gateway ID's for given datasource ID"
                                        },
                                        "refreshedAt": {
                                            "type": "string",
                                            "example": "2024-01-18T02:25:59.521Z",
                                            "description": "Time stamp when the gateways data were refreshed"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Gateways list returned"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Datasource not found (or not enabled), or no gateway is configured for the tenant"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "General internal errors"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataSourceId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "rest",
                        "required": true,
                        "description": "Datasource ID"
                    },
                    {
                        "in": "query",
                        "name": "forceRefresh",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true,
                        "required": false,
                        "description": "Force to get a refreshed list from backend. Cached list will be returned if not set or set to false."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d6e80394-c941-4d96-8794-5f012c0eaee8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-stores": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data stores.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataStore"
                                }
                            }
                        },
                        "description": "Successful Operation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataStores",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e3a6e1f2-3437-45d6-8dbe-4069763712b3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "data-store"
                ],
                "summary": "Save new data store.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Created new data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataStore"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "29dcccc3-b973-4c33-8855-60ccb5246577",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data stores if it does not contain any data-assets.",
                "responses": {
                    "204": {
                        "description": "Deleted empty data stores."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataStores",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "48aeee15-cc96-4fb9-8ecb-1fcf07fbc5c0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-ids}/data-assets": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data assets belonging to the data store(s).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataAsset"
                                }
                            }
                        },
                        "description": "Successful Operation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataAssets",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "d1fe4bd6-a31c-43fb-9796-93a736001b17",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data assets and child data-sets by data-store IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data assets successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    }
                ],
                "operationId": "deleteDataAssetByDataStoreId",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "a7b2591c-012d-4b6b-82db-95b32ff5eb3e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-ids}/data-assets/{data-asset-ids}/data-sets": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data sets belonging to the data store(s) and data asset(s).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSet"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data asset IDs or * to include all data assets."
                    },
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataSets",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "9947e21f-b823-453c-b6ed-85fa23fe8582",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data sets by data-store IDs and data-asset IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data sets."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data asset IDs or * to include all data assets."
                    },
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    }
                ],
                "operationId": "deleteDataSetsByDataStoreIdsAndDataAssetIds",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "160bcc32-904f-467f-acfb-d53ae7747ee3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-id}": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get data store by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataStore",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "f9c720a9-abd4-43e4-852b-69972b5a1406",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-store"
                ],
                "summary": "Patch data store.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Patched data store successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Patched data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "2728106a-f319-4a5a-967c-b6034a0b9e7c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-store"
                ],
                "summary": "Update data store.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Updated data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataStore"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "6212e6f1-ba57-4b20-8535-6cc0ecd1a900",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects": {
            "get": {
                "tags": [
                    "data project"
                ],
                "summary": "List projects",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDiProjectsRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filter by space id"
                    }
                ],
                "description": "List data integration projects.",
                "operationId": "list_projects",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1c565949-8668-4cdb-9b78-a2e82b94c560",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "data project"
                ],
                "summary": "Create a new project",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiProjectItemRsp"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new data integration project in the specified space.",
                "operationId": "create_project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDiProjectReq"
                            }
                        }
                    },
                    "required": true,
                    "description": "The details of the project to create"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "88db2f25-379a-4e78-90ac-aa9e5905adda",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}": {
            "get": {
                "tags": [
                    "data project"
                ],
                "summary": "Get a project",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiProjectItemRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true
                    }
                ],
                "description": "Get a specific data integration project.",
                "operationId": "get_project",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "415e52ee-d469-494b-9a0f-bcbae294b72d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/di-projects/{projectId}/actions/export": {
            "post": {
                "tags": [
                    "data project"
                ],
                "summary": "Export a project",
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project ID"
                    },
                    {
                        "in": "header",
                        "name": "Accept",
                        "schema": {
                            "enum": [
                                "application/octet-stream"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "description": "Exports the specified data integration project.",
                "operationId": "export_project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportDiProjectReq"
                            }
                        }
                    },
                    "description": "Options for the export process"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "9d2857c7-21cb-47de-be93-30565c658c16",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}/actions/import": {
            "post": {
                "tags": [
                    "data project"
                ],
                "summary": "Import a project",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImportDiProjectRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project ID"
                    }
                ],
                "description": "Imports a data integration project from a `.zip` file.",
                "operationId": "import_project",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "zip": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true,
                    "description": "The ZIP file containing the project to import"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "577424ef-2598-4b64-babd-1cbdb9dd1a64",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}/bindings": {
            "get": {
                "tags": [
                    "data project"
                ],
                "summary": "Get project export variables",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDiExportProjectVariablesRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project ID"
                    }
                ],
                "description": "Retrieves the export variables for a specific data integration project.",
                "operationId": "get_project_export_variables",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "b74fc4cb-8401-4b08-a56d-9ecbf960ccb1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "data project"
                ],
                "summary": "Update project export variables",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDiExportProjectVariablesRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project ID"
                    }
                ],
                "description": "Updates the export variables for a specific data integration project.",
                "operationId": "update_project_export_variables",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDiExportProjectVariablesReq"
                            }
                        }
                    },
                    "required": true,
                    "description": "The details of the export variables to update"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7ee3cbea-c117-40c1-9e50-0840ca3c6b33",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}/di-tasks": {
            "get": {
                "tags": [
                    "data task"
                ],
                "summary": "List project tasks",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDataTasksRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project id"
                    }
                ],
                "description": "Lists data tasks within a given data integration project.",
                "operationId": "list_project_tasks",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6044b30f-a865-4800-8710-1fea1db91d08",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/di-projects/{projectId}/di-tasks/{dataTaskId}": {
            "get": {
                "tags": [
                    "data task"
                ],
                "summary": "Get a project task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataTaskItemRsp"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataTaskId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "task-cYSY",
                        "required": true,
                        "description": "Data task id"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project id"
                    }
                ],
                "description": "Get a specific data task within a project.",
                "operationId": "get_data_task",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9eb2ed7f-757d-4e3b-8560-6857d9177420",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/di-projects/{projectId}/di-tasks/{dataTaskId}/runtime/actions/start": {
            "post": {
                "tags": [
                    "data task"
                ],
                "summary": "Start a project task",
                "responses": {
                    "204": {
                        "description": "NO CONTENT"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataTaskId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "task-cYSY",
                        "required": true,
                        "description": "Data task id"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true,
                        "description": "Data project id"
                    }
                ],
                "description": "Start a data task on a data integration project.",
                "operationId": "start_data_task",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bac3e783-d777-489a-ad7f-3e514fa6f7e5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}/di-tasks/{dataTaskId}/runtime/actions/stop": {
            "post": {
                "tags": [
                    "data task"
                ],
                "summary": "Stop a project task",
                "responses": {
                    "204": {
                        "description": "NO CONTENT"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataTaskId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "task-cYSY",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true
                    }
                ],
                "description": "Stop a data task on a data integration project.",
                "operationId": "stop_data_task",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b0bb8ff6-6770-4ad4-bd0b-3480c627a993",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/di-projects/{projectId}/di-tasks/{dataTaskId}/runtime/state": {
            "get": {
                "tags": [
                    "data task"
                ],
                "summary": "Get project task runtime state",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "lastRun": {
                                            "$ref": "#/components/schemas/DataTaskInstanceState"
                                        },
                                        "runReadiness": {
                                            "type": "object",
                                            "properties": {
                                                "state": {
                                                    "enum": [
                                                        "READY_TO_RUN",
                                                        "ALREADY_RUNNING",
                                                        "NOT_RUNNABLE"
                                                    ],
                                                    "type": "string"
                                                },
                                                "message": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataTaskId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "task-cYSY",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "schema": {
                            "type": "string"
                        },
                        "example": "65424a71c11367914c1e659b",
                        "required": true
                    }
                ],
                "description": "Get data task runtime state within a data integration project.",
                "operationId": "get_data_task_runtime_state",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5c26ef11-6631-4f97-a271-25b10e222a34",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/encryption/keyproviders": {
            "get": {
                "tags": [
                    "tenant key provider management"
                ],
                "summary": "List AWS key providers registered for the tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProviders"
                                }
                            }
                        },
                        "description": "Successfully retrieved list of key providers"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to load list of key providers"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Returns a list of AWS key providers in the tenant. Use /actions/list to return all key providers.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f4ced1d2-004b-482a-b67b-3c097a44ab36",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "tenant key provider management"
                ],
                "summary": "Register a new multi-region AWS-KMS key.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully registered the provided AWS-KMS key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unable to access the provided AWS-KMS key, access is forbidden. Check if AWS key policy allows access from Qlik Cloud."
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to register the provided AWS-KMS key"
                    },
                    "408": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to return a response within the timeout window. The key provider (QlikVault, AWS-KMS) might be unavailable."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "The provided key is already registered"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to validate AWS-KMS ARN structure"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "The AWS-KMS key configuration must match the Qlik Cloud region configuration requirements. Most regions should have a key deployed to the same AWS region as the Qlik Cloud tenant, with a replica key in the relevant Qlik Cloud DR region. Consult the documentation for DR region mappings.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyProvider"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ea60e34a-697a-48c7-9dd0-5b837b6e4244",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/actions/list": {
            "get": {
                "tags": [
                    "tenant key provider management"
                ],
                "summary": "Lists all key providers registered for the tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListKeyProviders"
                                }
                            }
                        },
                        "description": "Successfully retrieved list of key providers"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to load list of key providers"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Returns a list of all key providers in the tenant, including the default Qlik key provider.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e6025070-bc77-402d-9feb-bb99cb770bfd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/encryption/keyproviders/actions/reset-to-default-provider": {
            "post": {
                "tags": [
                    "tenant key provider management"
                ],
                "summary": "Reset tenant key provider to default Qlik managed provider.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetMigrationNotNeeded"
                                }
                            }
                        },
                        "description": "Tenant is already using Qlik Managed provider, no action taken"
                    },
                    "205": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully initiated key migration to Qlik managed provider"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is already an ongoing migration in progress for this tenant, this must complete before a new migration can be started"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to initiate migration to Qlik managed provider"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Tenant is already using Qlik Managed provider"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Reset the encryption key back to the default Qlik managed provider. No action will be taken if tenant is already using the Qlik provider.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "750b67dc-ab09-40b7-abdd-2c85d727fb67",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/migration/actions/details": {
            "get": {
                "tags": [
                    "tenant key migration information"
                ],
                "summary": "Retrieve most recent migration details.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully fetched migration information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is no ongoing migration for this tenant"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to get ongoing migration information"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Retrieve details for the ongoing or last completed migration for the tenant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd4693db-85ab-4974-8e6d-b9b73e76036c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}": {
            "get": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Retrieve key for a given ARN fingerprint.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully fetched key provider information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "414": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Requested fingerprint length is too large"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of the requested provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Retrieve key provider detail by passing the ARN fingerprint as parameter.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "001acd69-e0d5-481c-9c5a-7f6cbafcd29f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Patches Name & Description of a given key provider.",
                "responses": {
                    "204": {
                        "description": "Successfully patched key provider information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to decode key provider patch request payload"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to patch key provider information"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The ARN fingerprint of an existing key provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Update the name and/or description of a key provider.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyProviderPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4347570b-f4d4-4179-af9d-53ba62492279",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Deletes the given key from the tenant.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvidersDeleteResponseBody"
                                }
                            }
                        },
                        "description": "Successfully deleted key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to delete key provider information"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "The requested key is being used and cannot be deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of the key provider you wish to delete."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Delete a key configuration from the tenant. Not supported for the default Qlik managed key provider. Key must not be in use.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd747ac2-dd53-4426-a068-ac337099a3be",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}/actions/migrate": {
            "post": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Migrate existing cipherkeys from current key provider to requested key provider.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully initiated cipherkeys migration"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to initiate migration"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to prepare migration"
                    },
                    "428": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is already an ongoing migration for the tenant"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of an existing key provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Migrate the active key from one provider to another. The migration process may take some time to complete, however this process will not impact users, and the tenant will continue to function normally during the migration. Use the migration details endpoint to monitor migration progress.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "39b7a054-f05f-40c9-9b3f-65aa80106be2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}/actions/test": {
            "post": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Validate AWS-KMS key access.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully validated key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "408": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to return a response within the timeout window. The key provider (QlikVault, AWS-KMS) might be unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of an existing key provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the request header using the Bearer schema."
                    }
                ],
                "description": "Validate a key to check if Qlik Cloud has required access to your AWS account and key policy, and the key configuration. If the key policy or configuration are changed from the required configuration, this may impact your ability to access your tenant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "831aea56-e132-43de-b3da-62e3a3d5679a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "List all extensions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extensions"
                                }
                            }
                        },
                        "description": "OK. Lists all extensions."
                    }
                },
                "description": "Lists all imported extensions in the tenant.",
                "operationId": "getExtensions",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "2c370ad0-8312-41ca-8873-dc47094699e3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "extensions"
                ],
                "summary": "Create a new extension",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "Created. Creates a new extension and returns it."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "description": "Creates a new extension. Accepts either provided file or data object. The name of the new extension must be different to any existing extensions.",
                "operationId": "createExtension",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/extension"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Extension archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "c3b8134c-231b-4d6c-a97b-5573e2b2dc4c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions/{id}": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Get a specific extension",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "OK. Returns extension with {id}."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "description": "Returns a specific extension matching either extension ID or extension name.",
                "operationId": "getExtensionById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "a766c6cc-40f3-4913-a1ff-ac1111056d67",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "extensions"
                ],
                "summary": "Update a specific extension",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "OK. Extension has been updated."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to update extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "description": "Updates a specific extension matching either extension ID or extension name. Accepts either provided file or data object.",
                "operationId": "updateExtensionById",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/extension"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Extension archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "c7476a32-76bc-4a0f-b401-62c322802dca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "extensions"
                ],
                "summary": "Delete a specific extension",
                "responses": {
                    "204": {
                        "description": "No content. Soft deletes the extension."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to delete extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "description": "Deletes a specific extension matching either extension ID or extension name.",
                "operationId": "deleteExtensionById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "1424fa59-e575-4033-b55d-90f613ab2e29",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions/{id}/file": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Download extension as an archive",
                "responses": {
                    "200": {
                        "description": "OK. Extension exists. Returns the extension archive."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "description": "Downloads all files in the extension matching either extension ID or extension name as a `.zip` archive.",
                "operationId": "getExtensionArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "3b60626c-43bb-4eb8-b419-2cbe6b98bda2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/extensions/{id}/file/{filepath}": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Download file from extension archive.",
                "responses": {
                    "200": {
                        "description": "OK. Extension exists and the file specified exists. Returns the specific file."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id} or the file does not exist in the archive."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "filepath",
                        "schema": {
                            "type": "string",
                            "example": "css/styles.css"
                        },
                        "required": true,
                        "description": "Path to the file location within the specified extension archive. Folders separated with forward slashes."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "description": "Downloads a specific file from the extension matching either extension ID or extension name, identified by the file path within the imported extension.",
                "operationId": "getFileFromExtensionArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "0ac5f3f2-88cb-45df-8214-f948e51a1be8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/glossaries": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Returns all glossaries.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossariesResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of glossaries to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name",
                                "description",
                                "+description",
                                "-description"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5d597519-672d-4343-b7b4-f1d16e0f724a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Creates a new glossary. Only a steward can create a glossary.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ebfde9d4-886f-4818-b617-f45b58afadcb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/actions/import": {
            "post": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Creates a new glossary, including categories and terms, based on a glossary definition file.\nSupported formats are currently, qlik, atlan and atlas\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "description": "Successfully created a new glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseBadRequest"
                                }
                            }
                        },
                        "description": "See custom codes"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseForbidden"
                                }
                            }
                        },
                        "description": "See custom codes"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseNotFound"
                                }
                            }
                        },
                        "description": "See custom codes"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "importerAsFallbackSteward",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Appending the current importer user as steward to categories/terms where no steward is defined/not match the identity service."
                    },
                    {
                        "in": "query",
                        "name": "lookupUserOnEmail",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Using email in the steward fields to lookup userIds in the identity service"
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The spaceId (leave blank or omit for personal)"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/qlikGlossary"
                            }
                        },
                        "application/json+qlik": {
                            "schema": {
                                "$ref": "#/components/schemas/qlikGlossary"
                            }
                        },
                        "application/json+atlan": {
                            "schema": {
                                "$ref": "#/components/schemas/atlanGlossary"
                            }
                        },
                        "application/json+atlas": {
                            "schema": {
                                "$ref": "#/components/schemas/atlasGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0c845f90-6b9e-405c-9dbe-6860f19cd9a5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Retrieves a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The id of the glossary to retrieve."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5f8ac0ff-5ba6-4d86-9f64-7ac740ed00fb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Updates glossary properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Glossary updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the glossary was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "034fc68e-4925-4313-8198-f4aaa938de76",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Updates a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The id of the glossary to update."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the glossary was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8b1244f3-7801-4e81-951e-a1eecc3009fb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Deletes a glossary and all of its terms.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The id of the glossary to delete."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bdfadf61-6bc9-4698-826b-576fb57fb8ff",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/actions/export": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Exports a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exportGlossary"
                                }
                            }
                        },
                        "description": "Successfully exported the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2c40e5bb-41ce-4876-870e-12bf8d0efa9a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/glossaries/{id}/categories": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Returns a list of categories for a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/categoriesResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "description",
                                "+description",
                                "-description",
                                "name",
                                "+name",
                                "-name",
                                "update",
                                "+update",
                                "-update"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b246f0d0-1637-4c4d-b4b2-a4ae0afa8eff",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "categories"
                ],
                "summary": "Creates a new category.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCategory"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a57c1d72-ee12-4c05-bc71-7a3ba3d6cc63",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/categories/{categoryId}": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Retrieves a category.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "46bcbfd4-3271-4e18-acfe-3390ff28712a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates category properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Category updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b1fe1605-b932-406e-b089-a823be27e8e6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates a category.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCategory"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f6b0a821-ae11-4cdc-91a9-616a07560fd9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "categories"
                ],
                "summary": "Deletes a category.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The id for the category to delete. All subcategories are also deleted"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The id of the glossary."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b5c0319a-4d1f-4f84-8bbc-c731126c11c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Returns a list of terms for a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termsResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional SCIM filter to be used to filter terms\nUsable fields are\n\n- id\n- name\n- relatedInformation\n- description\n- abbreviation\n- tags\n- stewards\n- status\n- categories\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "abbreviation",
                                "+abbreviation",
                                "-abbreviation",
                                "description",
                                "+description",
                                "-description",
                                "name",
                                "+name",
                                "-name",
                                "status",
                                "+status",
                                "-status",
                                "updated",
                                "+updated",
                                "-updated"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "14517fac-836b-4fd5-a010-de922d662ff0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "terms"
                ],
                "summary": "Creates a new term.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createTerm"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "417c02b9-368f-49b5-ac50-96f5b57cc26b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Retrieves a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "87c3c05d-f168-46bb-9539-22319d131b08",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "terms"
                ],
                "summary": "Updates term properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Term updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bcb776d5-690f-41b3-8f86-ed04dd5c14a7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "terms"
                ],
                "summary": "Updates a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createTerm"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "15eac325-b419-4c69-9b01-a651e27f81d5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "terms"
                ],
                "summary": "Deletes a term.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "34eb0b26-f55f-4a56-b19a-19927a362736",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/actions/change-status": {
            "post": {
                "tags": [
                    "terms"
                ],
                "summary": "Changes the status of the term. Only a steward can verify a term. Once the term is verified only a steward can modify the term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the term status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "draft",
                                "verified",
                                "deprecated"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The status to update to."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "da23fe14-2f6f-4789-9b3c-82cc87029eff",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/links": {
            "get": {
                "tags": [
                    "links"
                ],
                "summary": "Returns a list of links assigned to a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/linksResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional SCIM filter to be used to filter terms"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "type",
                                "+type",
                                "-type",
                                "subtype",
                                "+subtype",
                                "-subtype",
                                "created",
                                "+created",
                                "-created"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0ea2c391-8217-4fbd-8e9e-8fe549cbed91",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "links"
                ],
                "summary": "Creates a new link to a term.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termLinksTo"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created the link."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/termCreateLinksTo"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ea4d8564-b8ad-4974-90af-e9744f760543",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/revisions": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Retrieves previous revisions of a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termsResult"
                                }
                            }
                        },
                        "description": "Successfully retrieved the revisions."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "update",
                                "+update",
                                "-update"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "56f7920c-ee59-4fc3-8932-3cab1c751a8b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/groups": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "List groups",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Groups"
                                }
                            }
                        },
                        "description": "An array of groups, and pagination links."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying groups."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT is invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "All operations failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of groups to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ga"
                        },
                        "description": "The previous page cursor."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    },
                    {
                        "in": "query",
                        "name": "systemGroups",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Return system groups (e.g. Everyone) instead of regular groups. Cannot be combined with any other query parameters."
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether to return a total match count in the result. Defaults to false."
                    }
                ],
                "description": "Returns a list of groups with cursor-based pagination.",
                "operationId": "getGroups",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ee2b1a9f-6544-4c38-93a7-8f2eb224e03b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create group",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Group was successfully created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to create a group."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from creating a group."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Name conflict when attempting to create a new group."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Payload was too large."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates a group. The maximum number of groups a tenant can have is 10,000.",
                "operationId": "postGroups",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPostSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ad32a42b-f557-452c-9f05-e5de3c69b40e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/groups/actions/filter": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Filter groups",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Groups"
                                }
                            }
                        },
                        "description": "Groups retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Advanced query filter syntax error or query params format error or filter too complex."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "description": "Retrieves a list of groups matching the filter using advanced query string.",
                "operationId": "groups_api_actions_filter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Filter"
                            }
                        }
                    },
                    "required": false,
                    "description": "Will contain the query filter to apply. It shall not contain more than 100 ids."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0a1308a2-b268-4778-8d3e-f10ba322d909",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 200
                }
            }
        },
        "/v1/groups/settings": {
            "get": {
                "tags": [
                    "groups-settings"
                ],
                "summary": "Get group settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupSettings"
                                }
                            }
                        },
                        "description": "The requested tenant's group settings."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Returns the tenant's group settings, such as whether automatic group creation and IdP group synchronization are enabled or disabled, and roles assigned to system groups.",
                "operationId": "groups_api_get_settings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ada1654e-8b24-4657-8c6a-5a941050b32e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "groups-settings"
                ],
                "summary": "Update group settings",
                "responses": {
                    "204": {
                        "description": "Config updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Updates the tenant's group settings, such as whether automatic group creation and IdP group synchronization are enabled or disabled, and roles assigned to system groups.",
                "operationId": "patchSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "53d52fd3-f76f-4687-89c6-7fbc68fb7f48",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/groups/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get group by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Request successfully completed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The group's unique identifier"
                    }
                ],
                "description": "Returns the requested group.",
                "operationId": "getGroupById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0a182819-8b5f-45b9-873c-cd42ee79a614",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "groups"
                ],
                "summary": "Update group by ID",
                "responses": {
                    "204": {
                        "description": "Group updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for patching a user."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to patch a group."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from patching a group."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the group to update."
                    }
                ],
                "description": "Updates the requested group.",
                "operationId": "updateGroupById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "93f6a845-9b66-4ccd-a945-eca89cef31cb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Delete group by ID",
                "responses": {
                    "204": {
                        "description": "Group deleted successfully."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the group to delete."
                    }
                ],
                "description": "Deletes the requested group.",
                "operationId": "deleteGroupById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "88f33066-3dea-4fb3-a802-c1433653fc3b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/identity-providers": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "List IdPs",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPArray"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "active",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If provided, filters the results by the active field."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of IdP entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor."
                    }
                ],
                "description": "This endpoint retrieves any IdPs registered on the tenant.",
                "operationId": "getIdps",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8f0765c7-aefd-41f0-a1fc-fa78e9be21f0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "idp"
                ],
                "summary": "Create a new IdP",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDP"
                                }
                            }
                        },
                        "headers": {
                            "QLIK-IDP-POPTS": {
                                "$ref": "#/components/headers/qlikIdpPopts"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden. User missing `TenantAdmin` role, or the tenantID in the JWT does not match any of the tenantIDs in the payload."
                    }
                },
                "description": "Creates a new IdP on a tenant. Requesting user must be assigned the `TenantAdmin` role. For non-interactive IdPs (e.g. JWT), IdP must be created by sending `options` payload. For interactive IdPs (e.g. SAML or OIDC), send `pendingOptions` payload to require the interactive verification step; or send `options` payload with `skipVerify` set to `true` to skip validation step and make IdP immediately available.",
                "operationId": "createIdp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IDPPostSchema"
                            }
                        }
                    },
                    "description": "Attributes that the user wants to set for a new identity provider resource."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "927f8d15-f496-4293-bb5a-f23c6cc9dde4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/identity-providers/.well-known/metadata.json": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Return IdP configuration metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "description": "Returns IdP configuration metadata supported on the tenant. Clients can use this information to programmatically configure their interactions with Qlik Cloud.",
                "operationId": "getWellKnownMetaData",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "fd5a5789-1b0b-416a-8eae-ece078df539c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/identity-providers/me/meta": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Return active interactive IdP metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPMeta"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "description": "Retrieves default IdP metadata when no interactive IdP is enabled.",
                "operationId": "getMeMeta",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c4e28336-80f7-41d7-beda-650cc54fcc29",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/identity-providers/status": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "List IdP statuses",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPsStatus"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the status of all IdP configurations. Requires `TenantAdmin` role.",
                "operationId": "getStatus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c7d05f72-1e9e-496a-b5b1-61f4c73c290f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/identity-providers/{id}": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Get an IdP",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDP"
                                }
                            }
                        },
                        "headers": {
                            "QLIK-IDP-POPTS": {
                                "$ref": "#/components/headers/qlikIdpPopts"
                            }
                        },
                        "description": "Success"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    }
                ],
                "description": "Retrieves a specific IdP. Requesting user must be assigned the `TenantAdmin` role.",
                "operationId": "getIdp",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "dc6d06d5-8ed5-418b-8813-1ef8c7542255",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "idp"
                ],
                "summary": "Update an IdP",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. Invalid request body, URL, or state transition."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Access Denied. Only the edge-auth service or TenantAdmin user request can patch an IdP."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed. Missing QLIK-IDP-OPTS-MATCH header, or value doesn't match against IdP test configuration value."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error, the operation failed unexpectedly"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    },
                    {
                        "$ref": "#/components/parameters/qlikIdpPoptsMatch"
                    }
                ],
                "description": "Updates the configuration of an IdP. Requesting user must be assigned the `TenantAdmin` role. Partial failure is treated as complete failure and returns an error.",
                "operationId": "updateIdp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IDPPatchSchema"
                            }
                        }
                    },
                    "description": "Attributes that the user wants to patially update for an identity provider resource."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "741fa650-f48d-4aaf-afa3-6a4eda45dad4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "idp"
                ],
                "summary": "Delete an IdP",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The interactive IdP for the tenant can't be deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    }
                ],
                "description": "Deletes an identity provider. Requesting user must be assigned the `TenantAdmin` role.",
                "operationId": "deleteIdp",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9521b6c0-d27a-481f-b682-96a0a309d424",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/items": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "List items",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The collection's unique identifier. Used to filter for items with a specific tag (collection type `public`), or collection."
                    },
                    {
                        "in": "query",
                        "name": "createdByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "User's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The item's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "notCreatedByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "User's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "notOwnerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Owner identifier."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Owner identifier."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "resourceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceIds",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive strings used to search for an item by resourceIds. The maximum number of resourceIds it supports is 100. If resourceIds is provided, then resourceType must be provided. For example '?resourceIds=appId1,appId2'"
                    },
                    {
                        "in": "query",
                        "name": "resourceLink",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceSubType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "the case-sensitive string used to filter items by resourceSubType(s). For example '?resourceSubType=chart-monitoring,qix-df,qvd'. Will return a 400 error if used in conjuction with the square bracket syntax for resourceSubType filtering in the 'resourceType' query parameter."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to filter items by resourceType(s). For example '?resourceType=app,qvapp'. Additionally, a optional resourceSubType filter can be added to each resourceType. For example '?resourceType=app[qvd,chart-monitoring],qvapp'. An trailing comma can be used to include the empty resourceSubType, e.g. '?resourceType=app[qvd,chart-monitoring,]', or, to include only empty resourceSubTypes, '?resourceType=app[]' This syntax replaces the 'resourceSubType' query param, and using both in the same query will result in a 400 error."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt",
                                "+recentlyUsed",
                                "-recentlyUsed"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, recentlyUsed and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The space's unique identifier (supports \\'personal\\' as spaceId)."
                    },
                    {
                        "in": "query",
                        "name": "spaceType",
                        "schema": {
                            "$ref": "#/components/schemas/spaceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to filter items on space type(s). For example '?spaceType=shared,personal'."
                    },
                    {
                        "in": "query",
                        "name": "shared",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether or not to return items in a shared space.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "$ref": "#/components/parameters/noActionParam"
                    }
                ],
                "description": "Lists items that the user has access to.\n",
                "operationId": "items#listItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b559736a-e773-4725-9802-01c0c3dc0824",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items/settings": {
            "get": {
                "tags": [
                    "items-settings"
                ],
                "summary": "Get items settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsSettingsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Finds and returns the items service settings for the current tenant. Currently used to enable or disable usage metrics in the tenant.\n",
                "operationId": "items#GetSettings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "de8b0472-62d3-47a2-bc1b-e8d54d2489d3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "items-settings"
                ],
                "summary": "Update items settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsSettingsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Updates the settings provided in the patch body. Currently used to enable or disable usage metrics in the tenant.",
                "operationId": "items#PatchSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemsSettingsPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a930afe7-2e1a-48ec-9029-bd46215141c7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/items/{itemId}": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "Get an item",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier"
                    }
                ],
                "description": "Finds and returns an item.\n",
                "operationId": "items#getItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1a9a4e3c-edc5-4417-b4dc-706b1eabdf82",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "items"
                ],
                "summary": "Update an item",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Updates an item. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.\n",
                "operationId": "items#updateItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemsUpdateItemRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b5854ec5-2693-40ea-82b7-31c2a13a451e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "items"
                ],
                "summary": "Delete an item",
                "responses": {
                    "204": {
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "No Content response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Deletes an item and removes the item from all collections.\n",
                "operationId": "items#deleteItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "54e92b7c-612d-4da3-8334-126f224496f2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/items/{itemId}/collections": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "List collections of an item",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not found response"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionTypes"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by type."
                    }
                ],
                "description": "Finds and returns the collections (and tags) of an item. This endpoint does not return the user's favorites collection.\n",
                "operationId": "items#listItemCollections",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "54411f52-3939-4a63-919e-ea4005272dd5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items/{itemId}/publisheditems": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "List published items",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceType."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    }
                ],
                "description": "Finds and returns the published items for a given item. This endpoint is particularly useful for finding the published copies of an app or a qvapp when you want to replace the content of a published copy with new information from the source item.\n",
                "operationId": "items#listPublishedItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "117b3ab3-816a-437e-a6b1-f61e7f6e4afe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/knowledgebases": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "List knowledgebases",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/knowledgeBasesResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of knowledgebases to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "NAME",
                                "-NAME",
                                "DESCRIPTION",
                                "-DESCRIPTION",
                                "CREATED",
                                "-CREATED",
                                "UPDATED",
                                "-UPDATED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, eg. name. Can be prefixed with - to set descending order, defaults to ascending."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Optional parameter to request total count for query",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Returns a list of all knowledgebases the user has access to.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8ccf6b0b-2b22-453e-80a7-3393897dea4c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Create new knowledgebase",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/knowledgeBaseLight"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Knowledgebase version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the knowledgebase"
                            }
                        },
                        "description": "Successfully created a new knowledgebase."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "description": "Creates a new knowledgebase.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createKnowledgeBase"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8544cfc1-7bcd-431a-8ef1-05b0845e11a4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Retrieve a knowledgebase",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/knowledgeBase"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Knowledgebase version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the knowledgebase"
                            }
                        },
                        "description": "Successfully retrieved the knowledgebase."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The knowledgebase is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase to retrieve."
                    }
                ],
                "description": "Retrieves a specific knowledgebase.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "75f26230-123d-433e-8681-7909bd30bae3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Update a knowledgebase",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Knowledgebase version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the knowledgebase"
                            }
                        },
                        "description": "Knowledgebase updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The knowledgebase id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the knowledgebase was fetched."
                    }
                ],
                "description": "Updates properties of a specific knowledgebase.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "3e4e0efb-c75a-4584-929e-bd07ab1fcaf6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Delete a knowledgebase",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The knowledgebase is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase to delete."
                    }
                ],
                "description": "Deletes a knowledgebase and all of its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "c3d0aa3c-bec1-4bfe-9a6b-fd127b586d16",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources": {
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Add a datasource to a knowledgebase",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dataSource"
                                }
                            }
                        },
                        "description": "Successfully added a datasource to the knowledgebase."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The knowledgebase is not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase."
                    }
                ],
                "description": "Adds a datasource to a knowledgebase.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createDataSource"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "b433ba83-ad5d-4abe-9cd0-daf2646217e8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}": {
            "put": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Update a knowledgebase datasource",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dataSource"
                                }
                            }
                        },
                        "description": "Successfully updated the datasource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource to update."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of a knowledgebase."
                    }
                ],
                "description": "Updates a specified datasource.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/dataSource"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "303c5b22-f0fc-44a7-932a-9bf13a3da1ed",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Delete a knowledgebase datasource",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The knowledgebase is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource to delete."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    }
                ],
                "description": "Deletes a specified datasource and all its resources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "30506dab-dcf3-45fe-9a4f-6b4a0a349a78",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/actions/cancel": {
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Cancel sync of a knowledgebase datasource",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dataSourceSync"
                                }
                            }
                        },
                        "description": "Successfully cancelled sync."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource to cancel sync for."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    }
                ],
                "description": "Cancels ongoing sync for a specified datasource.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "a151591f-6b7d-4800-b1ab-7aeadc2a4be1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/actions/download": {
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Download knowledgebase datasource reference",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/downloadFileResponse"
                                }
                            }
                        },
                        "description": "Download a file from a datasource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource to download from."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    }
                ],
                "description": "Downloads a specified reference.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/downloadFile"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "115d6e71-44ec-4af4-9bde-7e4c2f217e5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/actions/sync": {
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Sync a knowledgebase datasource",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dataSourceSync"
                                }
                            }
                        },
                        "description": "Successfully started sync."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource to sync."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    }
                ],
                "description": "Starts syncing a specified datasource to a specified knowledgebase index.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "62966e75-d39e-4dd4-9fd6-eca9a28a77d2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/histories": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "List knowledgebase datasource sync histories",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/syncHistoryResult"
                                }
                            }
                        },
                        "description": "List of sync items ordered by the completed time."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The datasource is not found, the datasource has no sync history (no syncs have been run), or the calling user doesn't have access to this datasource in the knowledgebase."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of knowledgebases to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "COMPLETED",
                                "-COMPLETED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, eg. name. Can be prefixed with - to set descending order, defaults to ascending."
                    }
                ],
                "description": "Retrieves sync history for a specified datasource in a knowledgebase. Returns a `404` if there is no sync history, or if the calling user doesn't have access to the datasource.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "74a16296-c311-47d3-baf8-229dc40993e9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/histories/{syncId}": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Retrieve a knowledgebase datasource sync history",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/syncHistoryDetails"
                                }
                            }
                        },
                        "description": "List of sync items ordered by the start time."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the datasource belongs to."
                    },
                    {
                        "in": "path",
                        "name": "syncId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The sync identifier."
                    }
                ],
                "description": "Retrieves detailed sync history for a specified datasource.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8921c8ac-9010-43e1-bbd8-47214e554222",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/knowledgebases/{id}/datasources/{datasourceId}/schedules": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Get a knowledgebase datasource schedule",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/scheduleWithManifest"
                                }
                            }
                        },
                        "description": "Successfully created a schedule."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource the schedule belongs to."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the schedule belongs to."
                    }
                ],
                "description": "Returns a datasource schedule.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "454a5d9d-4d68-4d52-80b4-e5e80cd6a23b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Create a knowledgebase datasource schedule",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/scheduleWithManifest"
                                }
                            }
                        },
                        "description": "Successfully created a schedule."
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/scheduleWithManifest"
                                }
                            }
                        },
                        "description": "Successfully created a schedule."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource the schedule belongs to."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the schedule belongs to."
                    }
                ],
                "description": "Creates or updates a specified datasource schedule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/schedule"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7855d3ad-b2b3-43ef-9ed8-3177313eabd0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Delete knowledgebase datasource schedule",
                "responses": {
                    "204": {
                        "description": "Successfully deleted a schedule."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The resource does not exist."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the datasource the schedule belongs to."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase the schedule belongs to."
                    }
                ],
                "description": "Deletes a datasource schedule.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "a26921a1-e5b7-42f2-8309-b61be927e5b6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/knowledgebases/{id}/histories": {
            "get": {
                "tags": [
                    "knowledgebases"
                ],
                "summary": "Retrieve knowledgebase sync history",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/syncHistoryResult"
                                }
                            }
                        },
                        "description": "List of sync items ordered by the completed time."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The knowledgebase is not found, the knowledgebase has no sync history, or the calling user doesn't have access to the datasources in the knowledgebase."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                        },
                        "required": true,
                        "description": "The id of the knowledgebase."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of knowledgebases to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "COMPLETED",
                                "-COMPLETED"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, case insensitive, eg. name. Can be prefixed with - to set descending order, defaults to ascending."
                    }
                ],
                "description": "Retrieves sync history for the specified knowledgebase. Will return a `404` if no sync history exists, or if the calling user does not have access to synced datasources.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "afc2d544-885c-48f4-933a-9488d6cd98c1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/assignments": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Retrieves assignments for the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsResponse"
                                }
                            }
                        },
                        "description": "List of assignments."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request, invalid query."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The filter for finding entries."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries to return."
                    },
                    {
                        "in": "query",
                        "name": "orphans",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Only return assignments which are 'orphans' in the current tenant."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The requested page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The field to sort on; can be prefixed with +/- for ascending/descending sort order."
                    },
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "edd6f551-b9fa-426b-9cae-d6ee1d46b734",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/assignments/actions/add": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Assigns license access to the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsAddResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsAddRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of subjects to allocate assignments for."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f768069f-d79b-46f3-b79d-857dd949c42c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/assignments/actions/delete": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Removes license access for the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsDeleteResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsDeleteRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of assignments to delete."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8ea59307-f738-4233-863d-3c8db8c52972",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/assignments/actions/update": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Updates license access for the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsUpdateResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsUpdateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of assignments to update."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d156ce19-48ea-4ea2-b8da-77c54827a8c8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/consumption": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Retrieves license consumption for the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/consumptionEventsResponse"
                                }
                            }
                        },
                        "description": "Successful"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request, malformed query."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The SCIM filter for the query. Filterable property is \"endTime\"."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 200,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries to return."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The requested page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The field to sort on; can be prefixed with +/- for ascending/descending sort order."
                    },
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2de4ce17-f653-42aa-8d35-39db55f95ccb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/overview": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Gets the general information of the license applied to the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseOverview"
                                }
                            }
                        },
                        "description": "Licenses overview info."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "invalid tenant"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "License not found."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "69d506a4-05ce-4b69-ba60-9a287eb3addc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/settings": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Get auto assign settings for tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/settingsBody"
                                }
                            }
                        },
                        "description": "Auto assign settings."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Missing or invalid tenant."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not allowed"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3946b4b4-7a33-4520-9d02-b8cc2fafb8c5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "licenses"
                ],
                "summary": "Set auto assign settings for tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/settingsBody"
                                }
                            }
                        },
                        "description": "Auto assign settings."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Missing or invalid tenant."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Action not allowed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/settingsBody"
                            }
                        }
                    },
                    "required": false,
                    "description": "Dynamic assignment settings for professional and analyzer users. If professional users and analyzer users are both set, professional users will be automatically assigned, if available. Otherwise, analyzer users will be assigned. If neither of those users are available, analyzer capacity will be assigned, if available."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "auto assign settings",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9b3d3f52-e701-4af5-be48-b1a87b586057",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/status": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Gets the license status information of the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseStatus"
                                }
                            }
                        },
                        "description": "License status info."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "invalid tenant"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "db4b03a0-14b2-4b15-836c-e6de480025b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/actions/expand": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns next-level nodes inside a specified node on an impact analysis graph retrieved using a base node. \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The QRI for base node."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table"
                            ],
                            "type": "string",
                            "default": "table"
                        },
                        "required": true,
                        "description": "The level to get the nodes on."
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The node in the downstream graph to get next-level nodes for. For instance, to get the TABLE level nodes inside a RESOURCE level node,\nuse the RESOURCE level QRI for the node. Similarly, use the TABLE level QRI to get the FIELD level nodes.\nIf a TABLE level QRI is used with `level` parameter being `TABLE`, only the RESOURCE level of the node will be\ntaken into consideration.\n"
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to retrieve. (5 if not provided, -1 means unlimited and 1 means direct lineage)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5e8d3902-9150-4772-bbd8-750dd8cc3d89",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/actions/search": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Search all labels within a impact graph on all available levels. \nReturns result per level\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphsResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "label co \"label1\" or label co \"label2\"",
                        "required": true,
                        "description": "The expression that matches the SCIM filter format. The filter has to be encoded.\nThe currently supported attribute is \"label\", attribute operator \"co\" (contains), and grouping operator \"or\". Example: 'label co \"label1\" or label co \"label2\"'. The search queries are case insensetive.\n"
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to search. (5 if not provided, -1 means unlimited) and 1 means direct lineage."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3683bdba-67a3-445e-a5ea-1b5bf5615900",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/overview": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns all RESOURCE level nodes that are impacted by a change in the source node. \nThe number of tables and fields that are impacted for each resource are included as metadata.\nThe id (QRI) can be on any level (FIELD, TABLE or RESOURCE) and the impact will be collected based on the starting QRI.   \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to retrieve. (5 if not provided, -1 means unlimited and 1 means direct lineage)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "320f5212-e4f3-4e0e-8e56-e6ec6894aa75",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/source": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns all levels of the requested root node. Only node information will be returned.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphsResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for root node."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9f36ce4f-e66a-4ed2-876d-e4f90df930d6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns lineage graphs for requested levels of a source node. \nThe id (QRI) can point to an item on the field, table and resource level.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphLevelsResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for the source node."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table",
                                "resource",
                                "all"
                            ],
                            "type": "string",
                            "default": "resource"
                        },
                        "required": false,
                        "description": "The graph level to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes to retrieve. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d5071eba-7035-446d-ab85-d7a366200f7b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/actions/expand": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns the expanded node and its edges. \nUp and downstream nodes are not part of the response, edges are.\nThe id is the root node that lineage is requested for. The QRI of the node to expand is sent as the query parameter \"node\" for expansion.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for the source node."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table"
                            ],
                            "type": "string",
                            "default": "table"
                        },
                        "required": true,
                        "description": "The level to expand to."
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The QRI of the node in the upstream graph for expansion."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to expand. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f3eed29a-7a5b-457d-aa40-645d4ac6ac0b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/actions/search": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Search all labels within a lineage graph on all available levels. \nReturns result per level.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphsResponse"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-429"
                                }
                            }
                        },
                        "headers": {
                            "Retry-After": {
                                "schema": {
                                    "type": "integer",
                                    "example": 15
                                },
                                "description": "The number of seconds until new requests are allowed"
                            }
                        },
                        "description": "Too many requests"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "label co \"label1\" or label co \"label2\"",
                        "required": true,
                        "description": "The expression that matches the SCIM filter format. The filter has to be encoded.\nThe currently supported attribute is \"label\", attribute operator \"co\" (contains), and grouping operator \"or\". Example: 'label co \"label1\" or label co \"label2\"'. The search queries are case insensitive.\n"
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to search. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b58dfd9d-d955-42a0-84dc-f5e60ae0fbcd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 20
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/overview": {
            "post": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns the first generation upstream direct lineage. \nFor each field QRI, will find any direct linege dataset or application.  \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/overviewItems"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/emptyReturn"
                                }
                            }
                        },
                        "description": "Successfully created new resource."
                    },
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multiStatusResponse"
                                }
                            }
                        },
                        "description": "Request partially succeeded."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to get overview from. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/qris"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7aa67b0f-d10b-4597-b5d7-6786374653cd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "List deployments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFindResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentsFilter"
                    },
                    {
                        "$ref": "#/components/parameters/deploymentsSort"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "operationId": "getDeployments",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "1fad845c-530a-4e64-ba32-4c80a466354f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Create a deployment",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentPostResponse"
                                }
                            }
                        },
                        "description": "`Created`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "operationId": "postDeployment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "e14f94c3-660c-4151-82e9-0cf488aaf680",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Get a deployment",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "getDeployment",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "7e576dda-0776-40bb-8316-3ffb30108aae",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "deployments"
                ],
                "summary": "Update a deployment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "patchDeployment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "bac85cd6-2fb5-407b-a3b0-8edef52b54f0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "deployments"
                ],
                "summary": "Delete a deployment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "deleteDeployment",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "dea72a82-de00-4acc-87b4-c92ce8128298",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/actions/activate-models": {
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Activate the model for this deployment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "activateDeploymentModels",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "857b3485-56f8-41d3-a94e-5eeb6f6af6b1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/actions/deactivate-models": {
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Deactivate the model for this deployment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "deactivateDeploymentModels",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "f0a8c5eb-a99a-4bbd-8f12-3e71ce190e98",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/batch-predictions": {
            "get": {
                "tags": [
                    "predictions"
                ],
                "summary": "List batch prediction configurations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionFindResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionsFilter"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionsSort"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "operationId": "getBatchPredictions",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "1eb20cdb-a692-4e86-ae27-77345aae20b7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "predictions"
                ],
                "summary": "Create a prediction configuration",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionPostResponse"
                                }
                            }
                        },
                        "description": "`Created`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "postBatchPrediction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchPredictionInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "14ace4f7-8a00-406e-af92-44c7aaa0825f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/batch-predictions/{batchPredictionId}": {
            "get": {
                "tags": [
                    "predictions"
                ],
                "summary": "Retrieve a batch prediction",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "operationId": "getBatchPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8437849a-84f5-4b67-814c-c4f08868f741",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "predictions"
                ],
                "summary": "Updates a batch prediction",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "operationId": "patchBatchPrediction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchPredictionPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "16d4b356-cbd2-47a8-b1ed-2a94bda9faca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "predictions"
                ],
                "summary": "Delete a batch prediction",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "operationId": "deleteBatchPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8623eda3-bb91-48d5-8db7-a77b18480e42",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/batch-predictions/{batchPredictionId}/actions/predict": {
            "post": {
                "tags": [
                    "predictions"
                ],
                "summary": "Run a batch prediction",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionActionResponse"
                                }
                            }
                        },
                        "headers": {
                            "Content-Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "uri"
                                },
                                "required": true,
                                "description": "URL to poll for the status of this resource"
                            }
                        },
                        "description": "`Accepted`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "operationId": "predictBatchPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "fb96102c-9f75-4386-9c0a-30fe4b00f213",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/batch-predictions/{batchPredictionId}/schedule": {
            "get": {
                "tags": [
                    "predictions"
                ],
                "summary": "Get a batch prediction schedule",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionScheduleGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "description": "Retrieves the schedule for a batch prediction.",
                "operationId": "getBatchPredictionSchedule",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "0df88c82-c23d-4b4a-9107-40c18b7e4624",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "predictions"
                ],
                "summary": "Update a batch prediction schedule",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "description": "Updates the schedule for a batch prediction.",
                "operationId": "patchBatchPredictionSchedule",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchPredictionSchedulePatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "8dfa74f4-ae04-45b6-b7cb-81e4e79f7701",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "predictions"
                ],
                "summary": "Add a batch prediction schedule",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchPredictionSchedulePutResponse"
                                }
                            }
                        },
                        "description": "`Created`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "description": "Adds a schedule to a batch prediction.",
                "operationId": "putBatchPredictionSchedule",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchPredictionScheduleInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "0ea61f4f-f63f-49ae-b5ee-60a9a018cd92",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "predictions"
                ],
                "summary": "Delete a batch prediction schedule",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    },
                    {
                        "$ref": "#/components/parameters/batchPredictionId"
                    }
                ],
                "description": "Deletes the schedule from a batch prediction.",
                "operationId": "deleteBatchPredictionSchedule",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "64b02055-1a2d-4726-9d85-257d6d118ab2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/deployments/{deploymentId}/realtime-predictions/actions/run": {
            "post": {
                "tags": [
                    "predictions"
                ],
                "summary": "Generate predictions in a synchronous request/response",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {},
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RealtimePrediction"
                                }
                            },
                            "application/parquet": {}
                        },
                        "description": "Stream of combined prediction output returned successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "includeNotPredictedReason",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, reason why a prediction was not produced included response\n"
                    },
                    {
                        "in": "query",
                        "name": "includeShap",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, shapley values included in response"
                    },
                    {
                        "in": "query",
                        "name": "includeSource",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, source data included in response"
                    },
                    {
                        "in": "query",
                        "name": "index",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The name of the feature in the source data to use as an index in the\nresponse data. The column will be included with its original name\nand values. This is intended to allow the caller to join results\nwith source data.\n"
                    },
                    {
                        "in": "header",
                        "name": "Accept",
                        "schema": {
                            "enum": [
                                "application/json",
                                "text/json",
                                "text/csv",
                                "application/parquet",
                                "application/vnd.apache.parquet"
                            ],
                            "type": "string"
                        },
                        "description": "Sets the format of the response"
                    },
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "predictRealtime",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RealtimePredictionInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "09b9778e-d241-41fa-a404-3964c33d0797",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/experiments": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "List experiments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentFindResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentsFilter"
                    },
                    {
                        "$ref": "#/components/parameters/experimentsSort"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "description": "Retrieves a list of experiments based on provided filter and sort\nparameters.\n",
                "operationId": "getExperiments",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "d4f79442-8766-47ec-9007-f00e658b387f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "experiments"
                ],
                "summary": "Create an experiment",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentPostResponse"
                                }
                            }
                        },
                        "description": "`Created`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "operationId": "postExperiment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExperimentInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "53dbd5cb-6121-4d0f-a1b5-9a037b0e2f36",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/experiments/{experimentId}": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "Get an experiment",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    }
                ],
                "operationId": "getExperiment",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "49aecd2f-c37a-4f76-93d3-91d46ea6ce17",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "experiments"
                ],
                "summary": "Update an experiment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    }
                ],
                "operationId": "patchExperiment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExperimentPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "bf43b3d4-3bc0-41e8-bbd5-c5e6b260feef",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "experiments"
                ],
                "summary": "Delete an experiment",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    }
                ],
                "operationId": "deleteExperiment",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "9f6f13eb-108b-405c-8e88-d046814419da",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/experiments/{experimentId}/models": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "List models",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelFindResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/modelsFilter"
                    },
                    {
                        "$ref": "#/components/parameters/modelsSort"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "operationId": "getExperimentModels",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "1704a26e-e266-4059-b87a-86cf23b85894",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/ml/experiments/{experimentId}/models/{modelId}": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "Get a model",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/modelId"
                    }
                ],
                "operationId": "getExperimentModel",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "1bb25e9e-c24e-4787-861f-b4de3955cc40",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/ml/experiments/{experimentId}/versions": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "List experiment versions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentVersionFindResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/experimentVersionsFilter"
                    },
                    {
                        "$ref": "#/components/parameters/experimentVersionsSort"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "operationId": "getExperimentVersions",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "66de79a6-4b75-444c-90ca-1ad2d066e992",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "experiments"
                ],
                "summary": "Create an experiment version",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentVersionPostResponse"
                                }
                            }
                        },
                        "description": "`Accepted`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    }
                ],
                "description": "Creates an experiment version.\nPoll this version and check its `status` field to determine when models\nare finished training.\n",
                "operationId": "postExperimentVersion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExperimentVersionInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "fb9f4542-f45d-4ca5-bf42-09274cb66a4a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/experiments/{experimentId}/versions/{experimentVersionId}": {
            "get": {
                "tags": [
                    "experiments"
                ],
                "summary": "Get an experiment version",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExperimentVersionGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/experimentVersionId"
                    }
                ],
                "operationId": "getExperimentVersion",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "34325de6-5763-4af4-81fb-c31794610429",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "experiments"
                ],
                "summary": "Update an experiment version",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/experimentVersionId"
                    }
                ],
                "operationId": "patchExperimentVersion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExperimentVersionPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "0f178339-823c-42f7-b263-cd51c1f366a4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "experiments"
                ],
                "summary": "Delete an experiment version",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/experimentId"
                    },
                    {
                        "$ref": "#/components/parameters/experimentVersionId"
                    }
                ],
                "operationId": "deleteExperimentVersion",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "beb1da3b-17e2-4c8e-9303-7549746da241",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/jobs/{corrType}/{corrId}/actions/cancel": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Cancel jobs",
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/corrType"
                    },
                    {
                        "$ref": "#/components/parameters/corrId"
                    }
                ],
                "description": "Cancels jobs for an experiment version or batch prediction.",
                "operationId": "cancelJobs",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "3dc8b9b0-0693-410c-9388-c9413971c863",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/profile-insights": {
            "post": {
                "tags": [
                    "profile-insights"
                ],
                "summary": "Start profile insights creation\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileInsightsGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileInsightsGetResponse"
                                }
                            }
                        },
                        "headers": {
                            "Content-Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "uri"
                                },
                                "required": true,
                                "description": "URL to poll for the status of this resource. When it's `ready`\nyou have everything you need.\n"
                            }
                        },
                        "description": "`Accepted`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "description": "Starts creating profile insights for an experiment dataset.\nThis is an asynchronous operation. A `202 Accepted` response indicates\nthat the process has started successfully. Use the link in the response\nto check the status.\n",
                "operationId": "postProfileInsights",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileInsightsInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "dffc05be-98a5-4ccc-be84-b1075e3defec",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/ml/profile-insights/{dataSetId}": {
            "get": {
                "tags": [
                    "profile-insights"
                ],
                "summary": "Get profile insights\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileInsightsGetResponse"
                                }
                            }
                        },
                        "description": "`OK`"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalError"
                    },
                    "502": {
                        "$ref": "#/components/responses/502BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "default": {
                        "$ref": "#/components/responses/FailureDefault"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dataSetId"
                    }
                ],
                "description": "Retrieves profile insights for the specified dataset. If you received a\n`202 Accepted` response from `POST /ml/profile-insights`, poll this\nendpoint until a `200 OK` response with `ready` status is returned.\n",
                "operationId": "getProfileInsights",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [],
                "x-qlik-entity-revision": "e6c62548-0d0a-4847-bafb-4f3223af25ae",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/notes/settings": {
            "get": {
                "tags": [
                    "setting"
                ],
                "summary": "Get the enablement status of the notes feature set for this tenant and user.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotesUserSettings"
                                }
                            }
                        },
                        "description": "Notes enablement status."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "notesConfigGet",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd8d4449-fcad-41dc-8d67-972aa777c702",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "setting"
                ],
                "summary": "update the settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteSettingsPutResponse"
                                }
                            }
                        },
                        "description": "The newly applied note settings for the tenant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request content error."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized user."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "updateNoteSettingsConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoteSettingsPutPayload"
                            }
                        }
                    },
                    "required": true,
                    "description": "A JSON payload containing note settings to put."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "978f33ea-13d8-48ec-904f-d0bdcb56d6be",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/notifications": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "List all supported notifications",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsObject"
                                }
                            }
                        },
                        "description": "Request completed successfully. See Results for ResultDetail on each notification."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Request error. See Errors."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "locale",
                        "schema": {
                            "type": "string",
                            "default": "en"
                        },
                        "required": false,
                        "description": "If present, idenfies the language of the returned 'friendlyName' property."
                    },
                    {
                        "in": "query",
                        "name": "manageableInHub",
                        "schema": {
                            "enum": [
                                true,
                                false
                            ],
                            "type": "string",
                            "default": "if missing, no filtering is done"
                        },
                        "required": false,
                        "description": "If present, represents the 'manageableInHub' value to filter by."
                    },
                    {
                        "in": "query",
                        "name": "subscribable",
                        "schema": {
                            "enum": [
                                true,
                                false
                            ],
                            "type": "string",
                            "default": "if missing, no filtering is done"
                        },
                        "required": false,
                        "description": "If present, represents the 'subscribable' value to filter by."
                    }
                ],
                "operationId": "NotificationRequest",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "793d4e8d-ee0f-425b-9c80-7529d7395dab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/oauth-clients": {
            "get": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "List OAuth clients",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/OAuthClientAdminListResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OAuthClientListResponse"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "appType eq \"spa\" and clientId eq \"b3ee66d6f21d1611efa89a425f656f6f\"",
                        "required": false,
                        "description": "The filter query that should be used to filter the list of oauth clients.  The filter syntax is defined in RFC 7644. Valid attributes for filtering are `clientId`, `clientName`, `appType`, and `tenantId`."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of OAuth client entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The attribute to sort by, beginning with + for ascending and - for descending. Valid attributes for sorting are clientId, clientName, appType, tenantId."
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "example": true,
                        "required": false,
                        "description": "Boolean query parameter that determines if the total count of results should be included in the response. If true, the response includes the total number of results in the `totalResults` field. If false or not included in the query, `totalResults` will be excluded from the response."
                    }
                ],
                "description": "Retrieve all OAuth clients.",
                "operationId": "readAllOAuthClients",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8047a0ab-ae36-4ff3-b21c-083b00bc5205",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Create an OAuth client",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthClientCreateResponse"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "description": "Create a new OAuth client. Requires `TenantAdmin` role when created in-tenant. `appType` cannot be changed after creation. Consent method and published state can be changed after creation. For supported `appType`, use `PATCH /oauth-clients/{id}/connection-configs/me` to change consent method, and `POST /oauth-clients/{id}/actions/publish` to change the client to published after creation.",
                "operationId": "createOAuthClient",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthClientCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4fefca06-192c-4748-b18e-d8d8045a29e7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-clients/{id}": {
            "get": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Get an OAuth client",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/OAuthClientAdminReadResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OAuthClientReadResponse"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Retrieves the specified OAuth client.",
                "operationId": "readOAuthClient",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9aec60df-d24a-4cc4-86e5-b542031f9eda",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Update an OAuth client",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Updates the specified OAuth client.",
                "operationId": "patchOAuthClient",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OAuthClientUpdate"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ec580a47-dd8a-43d5-97a3-bd925672adb1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Delete an OAuth client",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    },
                    {
                        "in": "header",
                        "name": "qlik-confirm-delete",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "A confirmation string that should match the id of the oauth-client resource to be deleted"
                    }
                ],
                "description": "Delete the specified OAuth client.",
                "operationId": "deleteOAuthClient",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bddf5597-1a0a-4be9-b708-2c2a85b80a9f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-clients/{id}/actions/publish": {
            "post": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Publish an OAuth client",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthClientPublishResponse"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Publishes the specified OAuth client. By default, OAuth clients are bound to the tenant that created it. Publishing shares the client and makes it available to all other tenants within a region. Third-party applications connecting to Qlik Cloud can then have the same client ID for all Qlik Cloud tenants.",
                "operationId": "publishOAuthClient",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4734d8b8-a1f6-44c6-9213-20f241501f85",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-clients/{id}/client-secrets": {
            "post": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Create an OAuth client secret",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthClientSecretResponse"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ClientSecretCreateExceedLimit"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Create a new client secret for the specified OAuth client. An OAuth client can have a maximum of 5 client secrets at one time.",
                "operationId": "createOAuthClientSecret",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ca47b538-74d9-455d-bbaf-16d668dab018",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-clients/{id}/client-secrets/{hint}": {
            "delete": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Delete an OAuth client secret",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "hint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth secret"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Deletes a specific client secret for an OAuth client.",
                "operationId": "deleteOAuthClientSecret",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd5bfd92-a152-4caf-9419-6ea043d9f03c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-clients/{id}/connection-configs/me": {
            "get": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Get connection config for an OAuth client",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionConfigReadResponse"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for an OAuth client"
                    }
                ],
                "description": "Get configuration for consent method and status.",
                "operationId": "readConnectionConfig",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "49322002-2a07-44e0-b576-318b981889d4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Update connection config for an OAuth client",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Updates the consent method for the specified OAuth client.",
                "operationId": "patchConnectionConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OAuthConnectionConfigUpdate"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e40d607c-b9c6-46d1-8c2b-1cd58ff2833d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "oauth-clients"
                ],
                "summary": "Delete connection config for an OAuth client",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier for the OAuth client"
                    }
                ],
                "description": "Deletes the connection config for the calling tenant, related to the supplied client id.",
                "operationId": "deleteConnectionConfig",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate",
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7f91ee3a-a5c0-45e5-884f-754b334023c7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-tokens": {
            "get": {
                "tags": [
                    "oauth-tokens"
                ],
                "summary": "List OAuth tokens",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-token-page"
                                }
                            }
                        },
                        "description": "The page result."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameter for querying tokens."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Authentication failed."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of tokens to return."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "userId"
                            ],
                            "type": "string",
                            "default": "userId"
                        },
                        "required": false,
                        "description": "The field to sort by."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The ID of the user to limit results to."
                    }
                ],
                "description": "Retrieve list of OAuth tokens that the user has access to. Users assigned with a `TenantAdmin` role can list OAuth tokens generated for all users in the tenant.",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "73a0143f-7465-4d30-9cd7-a2b241396eda",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/oauth-tokens/{tokenId}": {
            "delete": {
                "tags": [
                    "oauth-tokens"
                ],
                "summary": "Revoke an OAuth token by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Token deleted successfully."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Authentication failed."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tokenId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the token to revoke."
                    }
                ],
                "description": "Revokes a specific OAuth token by ID. Requesting user must have `TenantAdmin` role assigned to delete tokens owned by other users.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "c834e4f9-fe72-4376-b194-af1a19ed367c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/questions/actions/ask": {
            "post": {
                "tags": [
                    "questions"
                ],
                "summary": "Returns the generated response for parsed chat queries, if no app was specified nor present in conversation context, suggests matching apps.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryNotCreated"
                                }
                            }
                        },
                        "description": "The sentence is not created as an app was not specified, but matching apps are suggested"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryCreated"
                                }
                            }
                        },
                        "description": "The sentence created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "qlik-web-integration-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "This header is only required for external clients or mashups for QCS, this value of this property should be the id of the web integration set up for the external client/mashup"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "1fefbf59-bd98-464b-bcaa-9d7b4f556428",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/questions/actions/filter": {
            "post": {
                "tags": [
                    "questions"
                ],
                "summary": "Returns NL metrics based on provided app IDs the user has access to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NLMetricsResponse"
                                }
                            }
                        },
                        "description": "If the user has access to any of the provided app id"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 100,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries returned"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A cursor pointing to the page of data to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "createdAt",
                                "updatedAt",
                                "+createdAt",
                                "+updatedAt",
                                "-createdAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "+createdAt"
                        },
                        "required": false,
                        "description": "A single field from the data model on which to sort the response. The '+' or '-' operator may be used to specify ascending or desending order.\n"
                    }
                ],
                "operationId": "filterMetrics",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NLMetricsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "4c712c64-3107-4c6f-9f35-728dae081c5f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/quotas": {
            "get": {
                "tags": [
                    "quotas"
                ],
                "summary": "Returns all quota items for the tenant (provided in JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetQuotasResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "reportUsage",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (only limits returned)."
                    }
                ],
                "operationId": "quotas",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "897bad70-3bf5-474b-b3a8-8abc5b1816e2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/quotas/{id}": {
            "get": {
                "tags": [
                    "quotas"
                ],
                "summary": "Returns a specific quota item for the tenant (provided in JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetQuotaByIdResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the quota item. For example, \"app_mem_size\", \"app_upload_disk_size\", or \"shared_spaces\"."
                    },
                    {
                        "in": "query",
                        "name": "reportUsage",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (usage not included)."
                    }
                ],
                "operationId": "quota",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "eaf0ae33-3d63-4d8e-9472-ac2bcc05d117",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/reload-tasks": {
            "get": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Find and return tasks\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tasks"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this task."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too Many Requests."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case sensitive string used to search for a task by app ID."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "partial",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The boolean value used to search for a task is partial or not"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Finds and returns the tasks that the user has access to.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4f5e86dc-dc36-472c-af6f-87268a649be7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Create a task \n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this task."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Creates a task for a specified app.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostTaskBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying the task parameters."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9552dfd2-c2c8-45e9-95dd-d5c8d5cb3379",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/reload-tasks/{taskId}": {
            "get": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Find a task\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too Many Requests."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Finds and returns a task.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "491ae07e-6287-40a6-876f-307c74936d8b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Update an existing task\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Updates an existing task",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutTaskBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying the task parameters."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "37a5efa3-a8c4-43ca-9729-97af2b35fae5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Delete a task\n",
                "responses": {
                    "204": {
                        "description": "Task deleted successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Deletes a task",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "300ec445-5b82-4c3b-8ad6-ff24f425ad88",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/reloads": {
            "get": {
                "tags": [
                    "reloads"
                ],
                "summary": "Find and return reloads",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reloads"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this reload(error code: RELOADS-003)."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The UUID formatted string used to search for an app's reload history entries. TenantAdmin users may omit this parameter to list all reload history in the tenant."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "(status eq \"FAILED\" or status eq \"EXCEEDED_LIMIT\") and partial eq \"false\" and type eq \"chronos\"\n",
                        "required": false,
                        "description": "SCIM filter expression used to search for reloads.\nThe filter syntax is defined in RFC 7644 section 3.4.2.2\n\nSupported attributes:\n- status: see #schemas/Status\n- partial: see #schemas/Partial\n- type: see #schemas/Type\n\nSupported operators:\n- eq\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "log",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "required": false,
                        "description": "The boolean value used to include the log field or not, set log=true to include the log field."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "partial",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The boolean value used to search for a reload is partial or not."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Finds and returns the reloads that the user has access to.",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c08ec119-79cc-43ac-b288-f5bbbee7b2ad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "reloads"
                ],
                "summary": "Reload an app",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reload"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for execution of this reload(error code: RELOADS-003) or the reload frequency quota has been met.(error code: RELOADS-013)."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too many requests, a pending reload request already exists for this app."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Reloads an app specified by an app ID.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReloadRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying ID of app to be reloaded."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "39263806-c474-418c-9c79-4401d7ec7d57",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 50
                }
            }
        },
        "/v1/reloads/{reloadId}": {
            "get": {
                "tags": [
                    "reloads"
                ],
                "summary": "Get reload record",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reload"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow to find or get a reload(error code: RELOADS-003)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the reload."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Finds and returns a reload record.",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "61ca0612-a161-48be-ade6-7bfe7310e7d2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/reloads/{reloadId}/actions/cancel": {
            "post": {
                "tags": [
                    "reloads"
                ],
                "summary": "Cancel a reload",
                "responses": {
                    "202": {
                        "description": "Reload is being cancelled."
                    },
                    "204": {
                        "description": "Reload has been cancelled."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow to cancel a reload(error code: RELOADS-003)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified reload record could not be found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Reload is not in a cancellable state."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the reload."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Cancels a reload that is in progress or has been queued",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "50160f65-2b27-422f-8f14-aedbbf5c1206",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 50
                }
            }
        },
        "/v1/report-templates": {
            "get": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Get descriptive info for the specified templates.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTemplatesResponse"
                                }
                            }
                        },
                        "description": "The templates list was retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "If present, restrict the number of returned items to this value."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Template name to search and filter for. Case-insensitive open search with wildcards both as prefix and suffix."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Return the templates for the specified owner."
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0,
                            "maximum": 2147483647,
                            "minimum": 0
                        },
                        "description": "If present, skip this number of the returned values in the result set (facilitates paging)."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "name",
                                    "+name",
                                    "-name",
                                    "createdAt",
                                    "+createdAt",
                                    "-createdAt",
                                    "updatedAt",
                                    "+updatedAt",
                                    "-updatedAt",
                                    "type",
                                    "+type",
                                    "-type"
                                ],
                                "type": "string"
                            }
                        },
                        "description": "Field to sort by. Prefix with +/- to indicate ascending/descending. By default, the sort order is ascending."
                    },
                    {
                        "in": "query",
                        "name": "sourceAppId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Return the templates that are using the specified app as data source."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "0fdf382f-691a-464b-baa2-27389c7dd256",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Create a new report template.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportTemplateResponse"
                                }
                            }
                        },
                        "description": "New template was created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "The template file exceeds the user's quota for maximum file to upload."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTemplateRequest"
                            }
                        }
                    },
                    "description": "The upload request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "0b7ee178-c0d9-41ae-802c-1ea079fecb5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/report-templates/{id}": {
            "get": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Get descriptive info for the specified report template.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportTemplateResponse"
                                }
                            }
                        },
                        "description": "The template was located."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "A template with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "The ID of the report template."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "afa0d775-261e-418a-9d08-b0508e418c90",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Patch an existing report template.",
                "responses": {
                    "204": {
                        "description": "Patch successfully applied to template."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "A template with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "The template file exceeds the user's quota for maximum file to upload."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "The ID of the report template to patch."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation"
                                }
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation"
                                }
                            }
                        }
                    },
                    "description": "A JSON patch request as defined by RFC 6902."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "8bfc1211-ad37-4268-ab10-797e9a5174c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Update an existing report template.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportTemplateResponse"
                                }
                            }
                        },
                        "description": "The template was updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "A template with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "The template file exceeds the user's quota for maximum file to upload."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "The ID of the report template to update."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTemplateRequest"
                            }
                        }
                    },
                    "description": "The upload request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "132cdb47-205f-4a69-9d2e-cc3d97c32a2d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Delete the specified report template.",
                "responses": {
                    "204": {
                        "description": "The template was deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "The ID of the report template to delete."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "400489cc-015e-46b7-b679-4a86b116cd5d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/report-templates/{id}/actions/download": {
            "post": {
                "tags": [
                    "report-templates"
                ],
                "summary": "Download the template file of the specified report template",
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "The template file."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResult"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "The ID of the report template."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "4d071d23-3533-4386-b2a7-fc203a38ed68",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/reports": {
            "post": {
                "tags": [
                    "reports"
                ],
                "summary": "Queue a new report request generation.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "https://qlikcloud.com:443/api/v1/reports/0c5c08d3-c211-415a-8f47-1f3e2d2c4476/status"
                                },
                                "description": "The uri to get the processing status of the requested report."
                            }
                        },
                        "description": "Report request accepted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-400000",
                                            "title": "bad or malformed http request",
                                            "detail": "invalid outputType"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax, errors in params or the report request is not valid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-401000",
                                            "title": "forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-403000",
                                            "title": "forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Forbidden, the user does not have access rights."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-404000",
                                            "title": "Not found",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-409000",
                                            "title": "Conflict",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflicted request. Report aborted."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "HTTP-429",
                                            "title": "Too Many Requests",
                                            "detail": "The user has sent too frequent requests which resulted in an undesired response code (\"error rate limiting\")"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-500000",
                                            "title": "Internal server error",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "operationId": "postReports",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "Definition of the report request.\nPlease note that sense-pixel-perfect-template-1.0, sense-hmtl-template-1.0, sense-story-x.0 and qv-data-x.0 types are only for internal use.\n\nEach report request type requires a specific template to be provided:\n - composition-1.0 requires compositionTemplates to be set\n - sense-excel-template-1.0 requires senseExcelTemplate to be set\n - sense-image-1.0 requires senseImageTemplate to be set\n - sense-sheet-1.0 requires senseSheetTemplate to be set\n - sense-data-1.0 requires senseDataTemplate to be set\n\nEach template type supports specific output types:\n - composition-1.0 supports only pdfcomposition and pptxcomposition output types\n - sense-excel-template-1.0 supports excel and pdf output type\n - sense-image-1.0 supports pdf, pptx and image output types\n - sense-sheet-1.0 supports pdf and pptx output type\n - sense-data-1.0 supports xlsx output type\n\nEach output type requires a specific output to be provided:\n - pdfcomposition requires pdfCompositionOutput to be set\n - pptxcomposition requires pptxCompositionOutput to be set\n - pdf requires pdfOuput to be set\n - pptx requires pptxOuput to be set\n - image requires imageOutput to be set\n - xlsx requires xlsxOutput to be set\n"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "469aa5cb-2a02-4c1f-8c12-c1ecf531df6b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 10
                }
            }
        },
        "/v1/reports/{id}/status": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Get report request processing status.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportStatus"
                                }
                            }
                        },
                        "description": "Returns the request processing status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-400000",
                                            "title": "Bad or malformed request",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-401000",
                                            "title": "Forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-403000",
                                            "title": "Forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Forbidden, user did not authenticate."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-404000",
                                            "title": "url path not found",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-409000",
                                            "title": "Conflict",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflicted request. Report aborted."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "HTTP-429",
                                            "title": "Too Many Requests",
                                            "detail": "The user has sent too frequent requests which resulted in an undesired response code (\"error rate limiting\")"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-500000",
                                            "title": "Internal server error",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Identifier of the request."
                    }
                ],
                "operationId": "getStatus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e0febc81-e831-466b-8173-04d41a9efe80",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRolesResult"
                                }
                            }
                        },
                        "description": "An array of roles, and pagination links."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying roles."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT is invalid or not provided."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. All conditional statements within this query parameter are case insensitive."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of roles to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de86gea"
                        },
                        "description": "The previous page cursor."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Determines wether to return a count of the total records matched in the query. Defaults to false."
                    }
                ],
                "description": "Returns a list of roles using cursor-based pagination.",
                "operationId": "getRoles",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "036a6b28-a27d-46eb-a0b2-b17c7ccf7bb5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Create role",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to create role."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from creating role."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates a custom role. Role names must be unique, and there is a maximum of 500 custom roles per tenant. Requestor must be assigned the `TenantAdmin` role.",
                "operationId": "createRole",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRole"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c0ca6da2-d3a5-4a3d-86eb-3a2c025ec5f0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/roles/{id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get role by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Request successfully completed."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Role ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "$ref": "#/components/schemas/Role/properties/id"
                        },
                        "required": true,
                        "description": "The unique identifier for the role."
                    }
                ],
                "description": "Returns the requested role.",
                "operationId": "getRoleById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b6254fb5-3eea-417e-8a47-186d1d867661",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "roles"
                ],
                "summary": "Update role by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to update role."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from updating role."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Role ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "$ref": "#/components/schemas/Role/properties/id"
                        },
                        "required": true,
                        "description": "The unique identifier for the role."
                    }
                ],
                "description": "Updates the requested role. Only applicable to roles of type `custom`. Requestor must be assigned the `TenantAdmin` role.",
                "operationId": "updateRoleById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRoles"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bbd01377-d0d8-4b73-91bf-ab1d61f2244b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete role by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Deleted successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to delete role."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from deleting role."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "$ref": "#/components/schemas/Role/properties/id"
                        },
                        "required": true,
                        "description": "The unique identifier for the role."
                    }
                ],
                "description": "Deletes the requested role. Role can only be deleted if it has been unassigned from all users and groups. Only applicable to roles of type `custom`. Requestor must be assigned the `TenantAdmin` role.",
                "operationId": "deleteRoleById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "022b40cc-3e2f-4817-8a9b-df0925eed9fb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/sharing-tasks": {
            "get": {
                "tags": [
                    "sharing tasks"
                ],
                "summary": "Lists all sharing tasks.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharingTaskRecurringListResponse"
                                }
                            }
                        },
                        "description": "The sharing task list has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appid",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "the filter by sharing task resource app id. TenantAdmin users may omit this parameter to list all sharing-tasks in the tenant."
                    },
                    {
                        "in": "query",
                        "name": "excludeDeleting",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "required": false,
                        "description": "Indicates if task with the status DELETING should be excluded from the list"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for finding a list of entities - used for pagination"
                    },
                    {
                        "in": "query",
                        "name": "owner",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "the filter by sharing task resource owner id."
                    },
                    {
                        "in": "query",
                        "name": "ownername",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "the filter by sharing task resource owner name."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the page of data."
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "owner",
                                    "recipient"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "-datecreated",
                                    "datecreated",
                                    "+datecreated",
                                    "-name",
                                    "name",
                                    "+name",
                                    "-ownername",
                                    "ownername",
                                    "+ownername",
                                    "-enabled",
                                    "enabled",
                                    "+enabled",
                                    "-status",
                                    "status",
                                    "+status",
                                    "-type",
                                    "type",
                                    "+type",
                                    "-sent",
                                    "sent",
                                    "+sent",
                                    "-scheduled",
                                    "scheduled",
                                    "+scheduled",
                                    "-appname",
                                    "appname",
                                    "+appname",
                                    "-appid",
                                    "appid",
                                    "+appid"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "templateId",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "array of template ids to filter by"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "chart-monitoring",
                                    "chart-sharing",
                                    "sheet-sharing",
                                    "template-sharing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "the filter by sharing task resource type. If type is template-sharing only and user is not tenant admin, appid is also required."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of data. Only one of next or previous may be specified.",
                        "x-qlik-deprecated": true
                    }
                ],
                "operationId": "sharingTasksList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8d8873c6-d003-4ca0-89c3-5e641d2a6331",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "sharing tasks"
                ],
                "summary": "Creates a new recurring sharing task.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharingTaskRecurringResponse"
                                }
                            }
                        },
                        "description": "The sharing task has been successfully created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "sharingTasksCreateRecurring",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharingTaskRecurringCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The sharing task create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a1bce771-5eb5-432f-9efd-e50e7b0c6321",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/sharing-tasks/actions/execute": {
            "post": {
                "tags": [
                    "sharing tasks actions"
                ],
                "summary": "Executes a recurring sharing task",
                "responses": {
                    "204": {
                        "description": "The sharing task has been successfully set up for execution."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task not found, if the provided sharing task cannot be found or otherwise unable to be executed"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "sharingTasksActionsRecurring",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharingActionsTriggerCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The sharing task execute request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "3c5322e3-a28c-4145-974a-65ac18d964c8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/sharing-tasks/settings": {
            "get": {
                "tags": [
                    "sharing settings"
                ],
                "summary": "Lists sharing settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharingSettings"
                                }
                            }
                        },
                        "description": "The sharing settings have been successfully returned"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "sharingSettingsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "6c9b1049-6d6e-4b48-97c3-2f1ecbf10e6f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "sharing settings"
                ],
                "summary": "Patches sharing features toggles. Accessible only by tenant admins.",
                "responses": {
                    "204": {
                        "description": "Sharing settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "sharingSettingsPatch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharingSettingsPatchCompliantList"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request for updating the API settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "41c07f1f-217f-4fb6-abe5-a217a025fe18",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "sharing settings"
                ],
                "summary": "Updates API configuration. Accessible only by tenant admins.",
                "responses": {
                    "204": {
                        "description": "API settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "sharingAPISettingsUpload",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APISettingsUpload"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request for updating the API settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "43fa3b87-3af4-4e7f-83e0-b3e6c4dd6cbd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/sharing-tasks/{taskId}": {
            "get": {
                "tags": [
                    "sharing tasks"
                ],
                "summary": "See details about a sharing task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharingTaskRecurringResponse"
                                }
                            }
                        },
                        "description": "Sharing task has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The sharing task identifier."
                    }
                ],
                "operationId": "sharingTasksIDGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "5e38351e-f020-49dc-ba50-dcfc195b65dd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "sharing tasks"
                ],
                "summary": "Updates an existing sharing task.",
                "responses": {
                    "204": {
                        "description": "The sharing task has been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task ID or body is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The sharing task identifier."
                    }
                ],
                "operationId": "sharingTasksUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharingTaskPatchRequestCompliantList"
                            }
                        }
                    },
                    "required": true,
                    "description": "The sharing task definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "2be44e31-0de1-4b75-8716-0da22cca8428",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "sharing tasks"
                ],
                "summary": "Deletes a sharing task.",
                "responses": {
                    "204": {
                        "description": "The sharing task has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The sharing task identifier."
                    }
                ],
                "operationId": "sharingTasksDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "19d6b835-82c6-412c-adc8-d0c3de61c913",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/sharing-tasks/{taskId}/actions/cancel": {
            "post": {
                "tags": [
                    "sharing tasks actions"
                ],
                "summary": "Cancels a recurring sharing task",
                "responses": {
                    "204": {
                        "description": "The sharing task has been successfully cancelled."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task not found, if the provided sharing task cannot be found or otherwise unable to be cancelled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The sharing task identifier."
                    }
                ],
                "operationId": "sharingTasksActionsCancel",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "e3be167f-2f83-4ab5-86e6-833e03e4a1bf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "List spaces",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spaces"
                                }
                            }
                        },
                        "description": "Spaces retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "action",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Action on space. Supports only \"?action=publish\"."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Exact match filtering on space name using SCIM. Case insensitive on attribute name. For example ?filter=name eq \"MySpace\" and ?filter=NAME eq \"MySpace\" is both valid.",
                        "x-qlik-stability": "experimental"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        },
                        "required": false,
                        "description": "Maximum number of spaces to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Space name to search and filter for. Case-insensitive open search with wildcards both as prefix and suffix. For example, \"?name=fin\" will get \"finance\", \"Final\" and \"Griffin\"."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor. Next links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Space ownerId to filter by. For example, \"?ownerId=123\"."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor. Previous links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Field to sort by. Prefix with +/- to indicate asc/desc. For example, \"?sort=+name\" to sort ascending on Name. Supported fields are \"type\", \"name\" and \"createdAt\"."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Type(s) of space to filter. For example, \"?type=managed,shared\"."
                    }
                ],
                "description": "Retrieves spaces that the current user has access to and match the query.",
                "operationId": "getSpaces",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "58e7676d-9de1-4752-96bb-687341f56c7b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "spaces"
                ],
                "summary": "Create a space",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space created."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space create operation denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space already exists. `name` must be unique."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates a space. Spaces names must be unique. Spaces of type `data` should only be used for Qlik Talend Data Integration projects.",
                "operationId": "createSpace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpaceCreate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to set for a new space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a3707a5d-de9f-420a-818b-c4648a75d097",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/types": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "List space types",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpaceTypes"
                                }
                            }
                        },
                        "description": "Space types retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Gets a list of distinct space types available for use in the tenant.",
                "operationId": "getTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6f88bc42-7db8-43c0-baa4-125701dab7d4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/spaces/{spaceId}": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Retrieve a space",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too many repetetive requests."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to retrieve."
                    }
                ],
                "description": "Retrieves a single space by ID.",
                "operationId": "getSpaceById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f7cf7de5-46df-4833-93e7-371117d11667",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "spaces"
                ],
                "summary": "Update a space's properties",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space patched (updated)."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space patch (update) operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to update."
                    }
                ],
                "description": "Updates one or more properties of a space. To update all properties at once, use `PUT /spaces/{spaceId}`.",
                "operationId": "patchSpaceById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpacePatch"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attribute that the user wants to patch (update) for the specified space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1562aa1f-a60d-4844-bb01-ab337f0b4fc9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "spaces"
                ],
                "summary": "Update a space",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space updated."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space update operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to update."
                    }
                ],
                "description": "Updates a space. To update specific properties, use `PATCH /spaces/{spaceId}`.",
                "operationId": "updateSpaceById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpaceUpdate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to update for the specified space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "add0bbd4-900b-4c98-a44a-d2395931edf5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "spaces"
                ],
                "summary": "Delete a space",
                "responses": {
                    "204": {
                        "description": "Space deleted."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space delete operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space delete precondition (space not empty) failed."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to delete."
                    }
                ],
                "description": "Deletes a space.",
                "operationId": "deleteSpaceById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "da657feb-9f22-4bec-95fa-af98032d15c4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/{spaceId}/assignments": {
            "get": {
                "tags": [
                    "assignments"
                ],
                "summary": "List assignments for a space",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignments"
                                }
                            }
                        },
                        "description": "Assignments retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignments retrieve operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    },
                    {
                        "in": "query",
                        "name": "assigneeId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filters assignment for a specific assigneeid."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        },
                        "required": false,
                        "description": "Maximum number of assignments to return."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor. Next links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor. Previous links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/AssignmentType"
                        },
                        "required": false,
                        "description": "The type of assignment. Supported values are user or group."
                    }
                ],
                "description": "Retrieves the assignments of the space matching the query. Each assignment represents one user or group and their corresponding roles in the space. Assignments are not shown for the owner of a space, who receive all `assignableRoles` by default.",
                "operationId": "getSpaceAssignments",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5260917e-7feb-4992-b96b-86769547fec9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "assignments"
                ],
                "summary": "Assign a user or group to a space",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment created."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment create operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment already exists. `assigneeId` must be unique."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "description": "Creates an assignment for a user or group (assignee) to a space with the specified roles. Assignments are not required for space owners, who receive all `assignableRoles` by default. Only one assignment can exist per space, per user or group.",
                "operationId": "createSpaceAssignment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentCreate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to set for the assignment for the space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e2a5da1b-b548-4d15-9d75-db19d255d279",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/{spaceId}/assignments/{assignmentId}": {
            "get": {
                "tags": [
                    "assignments"
                ],
                "summary": "Retrieve an assignment for a space",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment retrieve operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied or assignment not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to retrieve."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "description": "Retrieves a single assignment by assignment ID. Use `GET /spaces/{spaceId}/assignments` to list all users and groups assigned to the space and their assignment ID.",
                "operationId": "getSpaceAssignmentById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c193dfc6-2ae4-47cf-a9f2-cb5a048827fa",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "assignments"
                ],
                "summary": "Update an assignment for a space",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment updated."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment update operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to update."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "description": "Updates a single assignment by assignment ID. Use `GET /spaces/{spaceId}/assignments` to list all users and groups assigned to the space and their assignment ID. The complete list of roles must be provided.",
                "operationId": "updateSpaceAssignmentById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentUpdate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to update for the specified assignment."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f7b76cfb-e0cf-4928-b276-318f8f908e1a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "assignments"
                ],
                "summary": "Delete an assignment",
                "responses": {
                    "204": {
                        "description": "Assignment deleted."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment delete operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied or assignment not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to delete."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "description": "Deletes an assignment.",
                "operationId": "deleteSpaceAssignmentById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e6e745f1-460b-4593-9a16-9ad4c1a3529d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/temp-contents": {
            "post": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Upload a file",
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filename",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The name of the file to upload."
                    },
                    {
                        "in": "query",
                        "name": "ttl",
                        "schema": {
                            "type": "integer",
                            "maximum": 259200,
                            "minimum": 1
                        },
                        "description": "The TTL parameter is used to define the time-to-live for the content resource in seconds.\nIt defaults to one hour (3600) if no input is provided. Max TTL is 259200 (3 days).'\n"
                    }
                ],
                "description": "Upload a file as a temporary content resource. It returns a `201 Created` with a location header that contains the location of the created resource. If filename or TTL is not properly set, a `400 Bad request` is returned. For internal issues, a `500 Internal Server Error` is returned.",
                "operationId": "TempContentsPost",
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    },
                    "required": true,
                    "description": "The file content (binary) to upload."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ed28afb2-0f86-4058-a648-ce4c0a822195",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/temp-contents/files": {
            "post": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Create a new upload resource (tus)",
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            },
                            "Tus-Resumable": {
                                "$ref": "#/components/headers/TusResumable"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "Tus-Version": {
                                "$ref": "#/components/headers/TusVersion"
                            }
                        },
                        "description": "Precondition Failed. tus protocol version not supported by the server."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request Entity Too Large"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Tus-Resumable",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The version of the tus protocol used."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Length",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": true,
                        "description": "The size of the entire upload in bytes."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Metadata",
                        "schema": {
                            "type": "string"
                        },
                        "description": "One or more comma-separated key-value pairs. The key and value must be separated by a space.\nThe key should be ASCII encoded, and the value must be Base64 encoded. All keys must be unique.\nSee [tus.io](http://tus.io) for details.\n\nThe following keys are used; any other keys are ignored.\n- `filename` - the name of the file.\n- `ttl` - the time-to-live for the uploaded file in seconds. Note that the time is counted from the _start_ of\n  the upload creation, not when the upload has finished. The server will keep the file available for access for\n  this period of time. The server may then delete it. The time defaults to one hour (3600) if not provided.\n  The maximum value is 259200 (3 days).'\n"
                    }
                ],
                "description": "Create a new upload resource (tus protocol `creation` extension POST request). See [tus.io](http://tus.io) for details.",
                "operationId": "postTus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "eceebdde-f746-4aea-9b63-afabd215d289",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            }
        },
        "/v1/temp-contents/files/{id}": {
            "patch": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Apply bytes at a given offset (tus)",
                "responses": {
                    "204": {
                        "description": "No Content. Patch successfully applied to upload."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found. Non-existent upload resource."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Conflict. Upload offsets do not match."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone. The upload resource no longer exists (could have expired)."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "Tus-Version": {
                                "$ref": "#/components/headers/TusVersion"
                            }
                        },
                        "description": "Precondition Failed. tus protocol version not supported by the server."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported Media Type"
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Locked. Concurrent access is not allowed."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The ID used to uniquely identify the upload."
                    },
                    {
                        "in": "header",
                        "name": "Content-Type",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Standard HTTP `Content-Type` header."
                    },
                    {
                        "in": "header",
                        "name": "Tus-Resumable",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The version of the tus protocol used."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Offset",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": true,
                        "description": "The byte offset within the upload."
                    },
                    {
                        "in": "header",
                        "name": "Content-Length",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Standard HTTP `Content-Length` header."
                    }
                ],
                "description": "Apply bytes contained in the message at a given offset (tus protocol PATCH request). Note that the tus server only\naccepts that the Content-Type response header is set to `application/offset+octet-stream`.\nSee [tus.io](http://tus.io) for details.\n\nNote that the server may return `423 Locked` on this request. This happens if the client attempts to perform\nconcurrent access to the resource, for example, if attempting to do a `HEAD` request during an ongoing `PATCH` request.\nIt can also occur in situations where the connection is unexpectedly dropped between the client and the server\nand the client attempts to make a new request when the server is still busy processing the upload. When this\nhappens, the client shall, after some period of time, try to resume the upload again.\n",
                "operationId": "patchTus",
                "requestBody": {
                    "content": {
                        "application/offset+octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    },
                    "required": true,
                    "description": "The patch content (binary, either a complete or a partial file) to upload."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9db846d4-99bc-48c5-85ab-96a067fc8f21",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            }
        },
        "/v1/temp-contents/{id}": {
            "get": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Download a file",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Content-Length": {
                                "$ref": "#/components/headers/ContentLength"
                            },
                            "Content-Disposition": {
                                "$ref": "#/components/headers/ContentDisposition"
                            }
                        },
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content, resource is incomplete."
                    },
                    "206": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Accept-Ranges": {
                                "$ref": "#/components/headers/AcceptRanges"
                            },
                            "Content-Length": {
                                "$ref": "#/components/headers/ContentLength"
                            },
                            "Content-Ranges": {
                                "$ref": "#/components/headers/ContentRange"
                            },
                            "Content-Disposition": {
                                "$ref": "#/components/headers/ContentDisposition"
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone"
                    },
                    "416": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Range Not Satisfiable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The temporary contents ID."
                    },
                    {
                        "in": "query",
                        "name": "inline",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Set to \"1\" to download the file in inline mode. Useful for displaying a preview of the file in a browser."
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Set to `unit=start-end` (for example, `bytes=0-100`) where `unit` = `bytes` (only supported unit), and start/end is a positive integer, where start <= end. Will also handle `start-` and `-end` as described in https://tools.ietf.org/html/rfc7233."
                    }
                ],
                "description": "This endpoint is used to retrieve a temporary content file. It returns a valid (`200 OK`) in case the file exists and the user is authorized to view the contents. It returns a `410 Gone` if the file has expired and `404 Not Found` if the criteria is not met.",
                "operationId": "TempContentsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8bf41631-5237-4131-a00d-2a35b41ba259",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/temp-contents/{id}/details": {
            "get": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Retrieve file details",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/detailResponse"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content, resource is incomplete."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The temporary contents ID."
                    }
                ],
                "description": "Retrieve a summary of the metadata associated with a temporary content resource. It returns a `200 OK` with a model if the temporary resource is valid. It returns a `410 Gone` if the file has expired and `404 Not Found` if the criteria is not met.",
                "operationId": "TempContentsDetails",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2b0bf7be-1672-417b-ada3-6d2edf0b830e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/tenants": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Create a tenant",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                },
                                "examples": {
                                    "Tenant": {
                                        "$ref": "#/components/examples/PostTenant201Response"
                                    }
                                }
                            }
                        },
                        "description": "Tenant created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "MissingLicenseKeyProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-21",
                                                    "title": "Missing licenseKey property",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "InvalidLicense": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-23",
                                                    "title": "Invalid license error",
                                                    "status": "403"
                                                }
                                            ]
                                        }
                                    },
                                    "LicenseQuotaLimitReached": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-22",
                                                    "title": "License quota limit reached",
                                                    "status": "403"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-24",
                                                    "title": "Internal server error",
                                                    "status": "500"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "description": "Creates a tenant in the requested region, linked to the provided license key. You must use a regional OAuth client generated via the [My Qlik portal](https://account.myqlik.qlik.com/account) to call this endpoint. Tenant creation, deactivation, and reactivation requests must be sent to the register endpoint in the relevant Qlik Cloud region, e.g. `https://register.us.qlikcloud.com/api/v1/tenants` if interacting with tenants in the `us` region.",
                "operationId": "createTenant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantCreationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f26bd4af-949d-4b52-97e5-e27635162cb6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/me": {
            "get": {
                "tags": [
                    "tenants"
                ],
                "summary": "Redirect to current tenant",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successful redirect."
                    }
                },
                "description": "Redirects to current tenant.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d671672d-8438-4b80-a751-f98add85c762",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/tenants/{tenantId}": {
            "get": {
                "tags": [
                    "tenants"
                ],
                "summary": "Get a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                }
                            }
                        },
                        "description": "Tenant found."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant not found."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The ID of the tenant to retrieve"
                    }
                ],
                "description": "Retrieves a specific tenant by ID.",
                "operationId": "getTenantById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "df700dbc-13ba-43a9-8464-9f1bfe34d5cc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "tenants"
                ],
                "summary": "Update a tenant",
                "responses": {
                    "204": {
                        "description": "Tenant updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantPatchErrors"
                                }
                            }
                        },
                        "description": "Invalid PATCH request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The ID of the tenant to update"
                    }
                ],
                "description": "Updates properties of a specific tenant by ID.",
                "operationId": "updateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "17e18f38-2d50-4365-a87f-7a9db9992b2c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/{tenantId}/actions/deactivate": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Deactivate a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantDeactivateResponse"
                                }
                            }
                        },
                        "description": "Tenant deactivated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed (invalid qlik-confirm-hostname value)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to deactivate"
                    },
                    {
                        "in": "header",
                        "name": "qlik-confirm-hostname",
                        "schema": {
                            "type": "string",
                            "format": "hostname",
                            "example": "unicorn.eu.qlikcloud.com"
                        },
                        "required": true,
                        "description": "A confirmation string that should match the hostname associated with the tenant resource to be deactivated. Example: unicorn.eu.qlikcloud.com"
                    }
                ],
                "description": "Deactivates a specific tenant. Once deactivated, tenant will be deleted on or after `estimatedPurgeDate`. Tenant can be reactivated using `/v1/tenants/{tenantId}/actions/reactivate` until this date. You must use a regional OAuth client generated via the [My Qlik portal](https://account.myqlik.qlik.com/account) to call this endpoint. Tenant creation, deactivation, and reactivation requests must be sent to the register endpoint in the relevant Qlik Cloud region, e.g. `https://register.us.qlikcloud.com/api/v1/tenants/{tenantId}/actions/deactivate` if interacting with tenants in the `us` region.",
                "operationId": "deactivateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantDeactivateRequest"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b48526af-a54c-401d-b689-9d844a025ffc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/{tenantId}/actions/reactivate": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Reactivate a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Tenant reactivated successfully"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed (invalid qlik-confirm-hostname value)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to reactivate"
                    },
                    {
                        "in": "header",
                        "name": "qlik-confirm-hostname",
                        "schema": {
                            "type": "string",
                            "example": "unicorn.us.qlikcloud.com"
                        },
                        "required": true,
                        "description": "A confirmation string that should match one of the hostnames of the tenant resource to be reactivated. Example: unicorn.eu.qlikcloud.com"
                    }
                ],
                "description": "Reactivates a deactivated tenant. Tenants can be reactivated until the `estimatedPurgeDate` provided at time of deactivation. You must use a regional OAuth client generated via the [My Qlik portal](https://account.myqlik.qlik.com/account) to call this endpoint. Tenant creation, deactivation, and reactivation requests must be sent to the register endpoint in the relevant Qlik Cloud region, e.g. `https://register.us.qlikcloud.com/api/v1/tenants/{tenantId}/actions/reactivate` if interacting with tenants in the `us` region.",
                "operationId": "reactivateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6b6096bf-8392-428f-83db-db7699854b98",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/themes": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "List all themes",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/themes"
                                }
                            }
                        },
                        "description": "OK. Lists all themes."
                    }
                },
                "description": "Lists all imported themes in the tenant.",
                "operationId": "getThemes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "2e15cf3e-fb18-48d6-b1bc-dc184c08d184",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "themes"
                ],
                "summary": "Create a new theme",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/theme"
                                }
                            }
                        },
                        "description": "Created. Creates a new theme and returns it."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "description": "Creates a new theme. Accepts either provided file or data object. The name of the new theme must be different to any existing themes.",
                "operationId": "createTheme",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/theme"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Theme archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "d5da5561-c6b7-4d4d-9ddb-3855abb5fc77",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/themes/{id}": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Return specific theme",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/theme"
                                }
                            }
                        },
                        "description": "OK. Returns theme with {id}."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename"
                    }
                ],
                "description": "Returns a specific theme matching either theme ID or theme name.",
                "operationId": "getThemeById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "bddb31ff-97f9-47c3-b7dd-ede424a5c31d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "themes"
                ],
                "summary": "Update a specific theme",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/themes"
                                }
                            }
                        },
                        "description": "OK. Theme has been updated."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to update theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "description": "Updates a specific theme matching either theme ID or theme name. Accepts either provided file or data object.",
                "operationId": "updateThemeById",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/theme"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Theme archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "3a94a530-fb9f-4e06-80d2-848133df539e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "themes"
                ],
                "summary": "Delete specific theme",
                "responses": {
                    "204": {
                        "description": "No content. Soft deletes the theme."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to delete themes with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "description": "Deletes a specific theme matching either theme ID or theme name.",
                "operationId": "deleteThemeById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "8fb27a8c-f8e6-45c2-a216-4ccf9064bb99",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/themes/{id}/file": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Download theme as an archive",
                "responses": {
                    "200": {
                        "description": "OK. Theme exists. Returns the theme archive."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename"
                    }
                ],
                "description": "Downloads all files in the theme matching either theme ID or theme name as a `.zip` archive.",
                "operationId": "getThemeArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "5c155695-d56d-4cb5-bcd1-409eaae548da",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/themes/{id}/file/{filepath}": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Download file from theme archive",
                "responses": {
                    "200": {
                        "description": "OK. Theme exists and the file specified exists. Returns the specific file."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find a theme with {id} or the file does not exist in the archive."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "filepath",
                        "schema": {
                            "type": "string",
                            "example": "css/styles.css"
                        },
                        "required": true,
                        "description": "Path to the file location within the specified theme archive. Folders separated with forward slashes."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "description": "Downloads a file from the theme matching either theme ID or theme name, identified by the file path within the imported extension.",
                "operationId": "getFileFromThemeArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "696c0178-8e0f-46f6-a8e9-9c3a938cae88",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/transports/email-config": {
            "get": {
                "tags": [
                    "email-config"
                ],
                "summary": "Returns the email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getEmailConfig"
                                }
                            }
                        },
                        "description": "Email configuration. If configuration does not exist in database then { isValid false, passwordExists false} is returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "getEmailConfig",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3716384d-222f-48ac-a527-0633bb901151",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "email-config"
                ],
                "summary": "Patch the email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateEmailConfigError"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "patchEmailConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/emailConfigPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1e0c3f26-a367-4b01-9b0d-9e4578507350",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "email-config"
                ],
                "summary": "Deletes email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteConfigNotFoundError"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "deleteEmailConfig",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c661945a-bee7-49de-9ab1-c94695ce8d5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/send-test-email": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Send a test mail with the supplied email info (subject, body, recipient). Email config from database is used for the connection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpResult"
                                }
                            }
                        },
                        "description": "Attempted send request. Response body indicates success/failure"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendTestMailConfigNotFoundError"
                                }
                            }
                        },
                        "description": "No email config exists for tenant."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "sendTestEmailAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/email"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1a86bdc9-0586-4e8c-8910-3dfb3eb7d352",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/validate": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Returns the isValid value for the email configuration for the tenant. Will return false if no email configuration exists.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpCheck"
                                }
                            }
                        },
                        "description": "Returns boolean isValid for the email config."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "validateAction",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f19b7063-9f9e-4ffc-9003-87e3f1a3578f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/verify-connection": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Verifies connection to email server for tenant provided via JWT",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpResult"
                                }
                            }
                        },
                        "description": "Performed email connection. Response body indicates success/failure"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyConnectionConfigNotFoundError"
                                }
                            }
                        },
                        "description": "No email config exists for tenant."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "verifyConnectionAction",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7cbfee05-3e68-4a03-8843-9bf95a768354",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        },
                        "description": "Successful query, returns an array of users"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying users."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.\n\nThe following fields support the `eq` operator: `id`, `subject`, `name`, `email`, `status`, `clientId`, `assignedRoles.id` `assignedRoles.name`, `assignedGroups.id`, `assignedGroupsAssignedRoles.name`\n\nAdditionally, the following fields support the `co` operator: `name`, `email`, `subject`\n\nQueries may be rate limited if they differ greatly from these examples:\n\n```\n(id eq \"62716ab404a7bd8626af9bd6\" or id eq \"62716ac4c7e500e13ff5fa22\") and (status eq \"active\" or status eq \"disabled\")\n```\n\n```\nname co \"query\" or email co \"query\" or subject co \"query\" or id eq \"query\" or assignedRoles.name eq \"query\"\n```\n\nAny filters for status must be grouped together and applied to the whole query.\n\nValid:\n\n```\n(name eq \"Bob\" or name eq \"Alice\") and (status eq \"active\" or status eq \"disabled\")\n```\n\nInvalid:\n\n```\nname eq \"Bob\" or name eq \"Alice\" and (status eq \"active\" or status eq \"disabled\")\n```\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users that come after this cursor value when sorted. Cannot be used in conjunction with `prev`."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users that come before this cursor value when sorted. Cannot be used in conjunction with `next`."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name",
                                "_id",
                                "+_id",
                                "-_id",
                                "id",
                                "+id",
                                "-id",
                                "tenantId",
                                "+tenantId",
                                "-tenantId",
                                "clientId",
                                "+clientId",
                                "-clientId",
                                "status",
                                "+status",
                                "-status",
                                "subject",
                                "+subject",
                                "-subject",
                                "email",
                                "+email",
                                "-email",
                                "inviteExpiry",
                                "+inviteExpiry",
                                "-inviteExpiry",
                                "createdAt",
                                "+createdAt",
                                "-createdAt"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Whether to return a total match count in the result. Defaults to false. It will trigger an extra DB query to count, reducing the efficiency of the endpoint."
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string",
                            "format": "email"
                        },
                        "required": false,
                        "description": "The email to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with startingAfter. Deprecated. Use `prev` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The role to filter by. Deprecated.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                            "enum": [
                                "name"
                            ],
                            "type": "string",
                            "default": "name"
                        },
                        "required": false,
                        "description": "The user parameter to sort by. Deprecated. Use `sort` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "sortOrder",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "asc"
                        },
                        "required": false,
                        "description": "The sort order, either ascending or descending. Deprecated. Use `sort` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with endingBefore. Deprecated. Use `next` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "active",
                                "invited",
                                "disabled",
                                "deleted",
                                "provisioned"
                            ],
                            "type": "string",
                            "default": "active"
                        },
                        "required": false,
                        "description": "The status to filter by. Supports multiple values delimited by commas. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "subject",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The subject to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by. Deprecated.",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Returns a list of users using cursor-based pagination.",
                "operationId": "getUsers",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "777acc3d-0710-4cdd-a6e0-adc2e19ad169",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "User": {
                                        "$ref": "#/components/examples/PostUser201Response"
                                    }
                                }
                            }
                        },
                        "description": "User created successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to create a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from creating a user."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User conflict when attempting to create a new user."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Payload was too large (limit of 500kB)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates an invited user.",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPostSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3e3340a3-ba2e-4d12-8a18-07ca5519ce23",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users/actions/count": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Count users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCount"
                                }
                            }
                        },
                        "description": "The count of users."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from reading the count."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by.",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Returns the number of users in a given tenant",
                "operationId": "countUsers",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "722c134b-2c4f-48b0-95d0-91c18e7b88b3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/users/actions/filter": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Filter users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        },
                        "description": "Users retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Advanced query filter syntax error or query params format error or filter too complex."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to unsufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "description": "Retrieves a list of users matching the filter using an advanced query string.",
                "operationId": "users_api_actions_filter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Filter"
                            }
                        }
                    },
                    "required": false,
                    "description": "Will contain the query filter to apply. It shall not contain more than 100 ids."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "53d1f7ce-610d-4d0b-9f1a-1dec5180c3dc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 200
                }
            }
        },
        "/v1/users/actions/invite": {
            "post": {
                "tags": [
                    "invite"
                ],
                "summary": "Invite one or more users by email address.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InviteDataResponse"
                                }
                            }
                        },
                        "description": "Request completed successfully. See Results for ResultDetail on each invite."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsResponse"
                                }
                            }
                        },
                        "description": "Request denied."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsResponse"
                                }
                            }
                        },
                        "description": "Request error. See Errors."
                    }
                },
                "operationId": "inviteUsers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InviteRequest"
                            },
                            "example": {
                                "invitees": [
                                    {
                                        "name": "Elvis Presley",
                                        "email": "foo@qlik.com",
                                        "resend": true,
                                        "language": "en"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "dd975765-308a-400b-9339-dbb7d0d3add0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get my user",
                "responses": {
                    "301": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "url"
                                },
                                "description": "The URI to the user resource."
                            }
                        },
                        "description": "Successful redirect."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "description": "Redirects to retrieve the user resource associated with the JWT claims.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2e6c32e0-8b9f-473b-88e5-d0c2cb2c129f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/users/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {}
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "User resource"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from getting a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The user's unique identifier"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    }
                ],
                "description": "Returns the requested user.",
                "operationId": "getUserById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "af65c7d9-d890-44f6-b7b3-7428d125abcb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Update user by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "User updated successfully."
                    },
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User update was partially successful with non-critical failures."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for patching a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from patching a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the user to update."
                    }
                ],
                "description": "Updates fields for a user resource",
                "operationId": "updateUserById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "aafa1fe4-f418-4170-9c61-416fea780b64",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete user by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "User deleted successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for deleting a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from deleting a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the user to delete."
                    }
                ],
                "description": "Deletes the requested user.",
                "operationId": "deleteUserById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3b00af35-5164-477e-83da-ce2dc63555ef",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-integrations": {
            "get": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "List web integrations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegrations"
                                }
                            }
                        },
                        "description": "An array of web integration objects."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "The number of web integration entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by. Prefix with +/- to indicate ascending/descending order."
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore."
                    },
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by."
                    }
                ],
                "description": "Retrieves web integrations matching the query.",
                "operationId": "getWebIntegrations",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "e1221c4f-aa85-4a48-8590-05a132880ddf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Create web integration",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegrationPost"
                                }
                            }
                        },
                        "description": "Web integration created successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "BAD_REQUEST",
                                                    "title": "Bad Request",
                                                    "detail": "Error parsing request body",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-6",
                                                    "title": "Invalid property value",
                                                    "source": {
                                                        "pointer": "/path"
                                                    },
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "MissingRequiredFields": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-5",
                                                    "meta": {
                                                        "requiredFields": [
                                                            "tenantId",
                                                            "name",
                                                            "createdBy"
                                                        ]
                                                    },
                                                    "title": "Missing required fields",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_FORBIDDEN",
                                            "title": "Forbidden",
                                            "status": "403"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Requestor not allowed to create a web integration."
                    }
                },
                "description": "Creates a web integration.",
                "operationId": "createWebIntegration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebIntegrationPostSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to set for the web integration."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "caa96517-2789-4785-b96f-35a665e56ae3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-integrations/{id}": {
            "get": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Get web integration by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegration"
                                }
                            }
                        },
                        "description": "Web integration found."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to retrieve."
                    }
                ],
                "description": "Retrieves a single web integration by ID.",
                "operationId": "getWebIntegrationById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "00658353-c434-4998-95f8-f60fd156f6fd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Update web integration by ID",
                "responses": {
                    "204": {
                        "description": "Web integration updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "BAD_REQUEST",
                                                    "title": "Bad Request",
                                                    "detail": "Error parsing request body",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-6",
                                                    "title": "Invalid property value",
                                                    "source": {
                                                        "pointer": "/path"
                                                    },
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidPatchRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-4",
                                                    "title": "Invalid PATCH request",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to update."
                    }
                ],
                "description": "Updates a single web integration by ID.",
                "operationId": "updateWebIntegrationById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebIntegrationPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to update for the web integration."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "a8e30cab-13d3-459c-924d-bbfccbcdbcfe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Delete web integration by ID",
                "responses": {
                    "204": {
                        "description": "Web integration deleted successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to delete."
                    }
                ],
                "description": "Deletes a single web integration by ID.",
                "operationId": "deleteWebIntegrationById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "748ecc14-52da-4e45-96b9-efee7b695d45",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-notifications": {
            "get": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Retrieve notifications matching the query.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notifications"
                                }
                            }
                        },
                        "description": "An array of notification objects"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying users."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "The number of notification entries to retrieved."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "number",
                            "default": 1
                        },
                        "required": false,
                        "description": "Page number"
                    },
                    {
                        "in": "query",
                        "name": "read",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Read status of the notification"
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "type": "string"
                        },
                        "example": "app,space",
                        "required": false,
                        "description": "Filter by resource types. If passing more than 1 resource type, use comma seperated string."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-createdAt"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "operationId": "getNotifications",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2eda1224-b604-47e7-9877-f9d9b437029a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/web-notifications/all": {
            "patch": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Patch all notifications.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully marked all notification."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported patch request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "updateNotifications",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cbba6767-a7cb-4e91-8c14-ea06906d1f69",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Delete all notifications.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully deleted notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "deleteNotifications",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "97bbad8c-68e1-428f-8d13-558c06cf0c04",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-notifications/{notificationId}": {
            "get": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Retrieve a single notification by Id.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": "Successfully got notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found when user tries to get notification they do not own."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to retrieve."
                    }
                ],
                "operationId": "getNotification",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "06a300bc-e7a7-41cd-95af-9f9d5454649b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Patch a notification.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully patched marked notification."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported patch request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Notification not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to update."
                    }
                ],
                "operationId": "updateNotification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d0ec98e7-0112-4bf0-869f-52e4a2c777c4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Delete a notification.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully deleted notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Notification not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to delete."
                    }
                ],
                "operationId": "deleteNotification",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "28ff9a99-0ac7-48e8-b582-fad9e1552462",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "List webhooks",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "createdByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that created it"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by enabled true/false"
                    },
                    {
                        "in": "query",
                        "name": "eventTypes",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by event-type/types, a single webhook item can have multiple event-types"
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by level that user has access to (either user or level)"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of webhooks to retrieve"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by name (wildcard and case insensitive)"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page"
                    },
                    {
                        "in": "query",
                        "name": "origins",
                        "schema": {
                            "enum": [
                                "api",
                                "automations",
                                "management-console"
                            ],
                            "type": "string"
                        },
                        "description": "Filter resources by origins, supports multiorigin"
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that owns it, only applicable for user level webhooks"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name",
                                "url",
                                "+url",
                                "-url",
                                "createdAt",
                                "+createdAt",
                                "-createdAt",
                                "updatedAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-createdAt"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order"
                    },
                    {
                        "in": "query",
                        "name": "updatedByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that last updated the webhook"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by url (wildcard and case insensitive)"
                    }
                ],
                "description": "Retrieves all webhooks entries for a tenant that the user has access to. Users assigned the `TenantAdmin` role can retrieve all webhooks. A user can have up to 150 webhooks at one time.",
                "operationId": "listWebhookEntries",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e9864b60-8fbb-4ca2-bd9f-24d7823b944c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Create a new webhook",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "description": "Creates a new webhook. User must be assigned the `TenantAdmin` role to create `tenant` level webhooks.",
                "operationId": "createWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebhookPost"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8dc940a6-36b8-4f49-aa7e-bdce90307be8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks/event-types": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "List event-types",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypes"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "description": "Lists event-types that are possible to subscribe to.",
                "operationId": "listEventTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "aece3f71-4f69-4f56-8141-0094ee69cd08",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/webhooks/{id}": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Get a webhook",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Returns details for a specific webhook.",
                "operationId": "getWebhook",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c40872a9-6b1c-47f9-9742-f9f727141f1c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Update one or more webhook properties",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Patches a webhook to update one or more properties.",
                "operationId": "patchWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebhookPatch"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "fa611a27-f1ae-4e6c-8736-cc9194415763",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Update all webhook properties",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Updates a webhook, any omitted fields will be cleared, returns updated webhook.",
                "operationId": "updateWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebhookBase"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2c25193d-7c41-4082-aa8c-5ca18e244afd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Delete a webhook",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Deletes a specific webhook.",
                "operationId": "deleteWebhook",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f3637783-5dd1-49be-9f0f-4115e14f9665",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks/{id}/deliveries": {
            "get": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Return deliveries for a webhook",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by event-type"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of deliveries to retrieve"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "status",
                                "+status",
                                "-status",
                                "triggeredAt",
                                "+triggeredAt",
                                "-triggeredAt"
                            ],
                            "type": "string",
                            "default": "-triggeredAt"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "success",
                                "fail"
                            ],
                            "type": "string"
                        },
                        "description": "Filter resources by status (success or fail)"
                    }
                ],
                "description": "Returns deliveries for a specific webhook. Delivery history is stored for 1 week.",
                "operationId": "getWebhookDeliveryList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "372fae94-acdb-42ab-bfdb-ad61dea61548",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/webhooks/{id}/deliveries/{deliveryId}": {
            "get": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Return details for specific delivery",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delivery"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "deliveryId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The delivery's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Returns details for a specific delivery.",
                "operationId": "getWebhookDelivery",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e15ac17f-f2b2-4fd2-984c-f8f76eb852f6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/webhooks/{id}/deliveries/{deliveryId}/actions/resend": {
            "post": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Resend delivery",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delivery"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "deliveryId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The delivery's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "description": "Resends the delivery with the same payload.",
                "operationId": "resendDelivery",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "88a66057-290c-4797-97f3-8327fc26189c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        }
    },
    "components": {
        "schemas": {
            "api-key-page": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiKey"
                        },
                        "description": "Properties of API keys in a given tenant."
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        },
                        "description": "Navigation links to page results."
                    }
                }
            },
            "ApiKey": {
                "type": "object",
                "required": [
                    "id",
                    "tenantId",
                    "description",
                    "status",
                    "sub",
                    "subType",
                    "expiry",
                    "createdByUser"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "description": "The unique ID for the resource."
                    },
                    "sub": {
                        "type": "string",
                        "example": "SCIM\\\\215g5595380d646163cadbb9",
                        "description": "The ID of the subject for the API key. For SCIM the format is `SCIM\\\\{{IDP-ID}}`, where `{{IDP-ID}}` is the ID of the IDP in Qlik. For users, use their user ID, e.g. `64ef645a3b7009d55dee5a2b`."
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the API key will expire and no longer be a valid authentication token."
                    },
                    "status": {
                        "enum": [
                            "active",
                            "expired",
                            "revoked"
                        ],
                        "type": "string",
                        "description": "The status of the API key."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the API key was created."
                    },
                    "subType": {
                        "enum": [
                            "user",
                            "externalClient"
                        ],
                        "type": "string",
                        "description": "Type of the subject. For SCIM, it should be `externalClient`."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The tenant ID."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the API key."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the API key was last updated."
                    },
                    "createdByUser": {
                        "type": "string",
                        "format": "uid",
                        "description": "The ID of the user who created the key."
                    }
                }
            },
            "ApiKeyBody": {
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "sub": {
                        "type": "string",
                        "example": "SCIM\\\\215g5595380d646163cadbb9",
                        "description": "The ID of the subject for the API key. For SCIM the format is `SCIM\\\\{{IDP-ID}}`, where `{{IDP-ID}}` is the ID of the IDP in Qlik. When creating an API key for a user, this is their user ID, e.g. `64ef645a3b7009d55dee5a2b`, and will default to the requesting user if not provided. User must be assigned the `Developer` role."
                    },
                    "expiry": {
                        "type": "string",
                        "example": "P7D",
                        "description": "The expiry of the API key, in ISO8601 duration format. For example, `P7D` sets expiry after 7 days. If not provided, defaults to the maximum API key or SCIM key expiry configured in the tenant."
                    },
                    "subType": {
                        "enum": [
                            "user",
                            "externalClient"
                        ],
                        "type": "string",
                        "default": "user",
                        "description": "Type of the subject. For SCIM, it should be `externalClient`. If not specified, defaults to `user`."
                    },
                    "description": {
                        "type": "string",
                        "description": "Text that describes the API key."
                    }
                }
            },
            "ApiKeyConfigPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/api_keys_enabled",
                            "/max_api_key_expiry",
                            "/max_keys_per_user",
                            "/scim_externalClient_expiry"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "ApiKeyPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/description"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "ApiKeysConfig": {
                "type": "object",
                "properties": {
                    "api_keys_enabled": {
                        "type": "boolean",
                        "default": false,
                        "description": "Enables or disables user API key functionality for the specified tenant."
                    },
                    "max_keys_per_user": {
                        "type": "number",
                        "default": 5,
                        "maximum": 1000,
                        "minimum": 0,
                        "description": "The maximum number of active API keys that any user can create for the specified tenant."
                    },
                    "max_api_key_expiry": {
                        "type": "string",
                        "default": "PT24H",
                        "example": "PT24H",
                        "description": "The maximum lifetime, in ISO8601 duration format, for which an API key can be issued for the specified tenant, e.g. `P7D` for 7 days."
                    },
                    "scim_externalClient_expiry": {
                        "type": "string",
                        "default": "P365D",
                        "example": "P365D",
                        "description": "The expiry of the scim `externalClient` token in ISO8601 duration format, e.g. `P365D` for 365 days. Used during the creation of an `externalClient` API key for configuring a SCIM compatible Identity Provider."
                    }
                }
            },
            "ApiKeysConfigPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ApiKeyConfigPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/api_keys_enabled",
                        "value": true
                    }
                ]
            },
            "ApiKeysPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ApiKeyPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/description",
                        "value": "my new description"
                    }
                ]
            },
            "ApiKeyWithToken": {
                "type": "object",
                "required": [
                    "id",
                    "tenantId",
                    "description",
                    "status",
                    "token",
                    "sub",
                    "subType",
                    "expiry",
                    "createdByUser"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "description": "The unique ID for the resource."
                    },
                    "sub": {
                        "type": "string",
                        "format": "uid",
                        "description": "The ID of the subject for the API key."
                    },
                    "token": {
                        "type": "string",
                        "description": "The generated signed JWT."
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the API key will expire and no longer be a valid authentication token."
                    },
                    "status": {
                        "enum": [
                            "active",
                            "expired",
                            "revoked"
                        ],
                        "type": "string",
                        "description": "The status of the API key."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the API key was created."
                    },
                    "subType": {
                        "enum": [
                            "user"
                        ],
                        "type": "string",
                        "description": "Type of the subject."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The tenant ID."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the API key."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the API key was last updated."
                    },
                    "createdByUser": {
                        "type": "string",
                        "format": "uid",
                        "description": "The id of the user who created the key."
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The unique code for the error"
                    },
                    "title": {
                        "type": "string",
                        "description": "A summary of what went wrong"
                    },
                    "detail": {
                        "type": "string",
                        "description": "May be used to provide additional details"
                    }
                }
            },
            "Errors": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "A representation of the errors encountered from the HTTP request."
            },
            "Link": {
                "required": [
                    "href"
                ],
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "URL to a resource request"
                    }
                }
            },
            "RetryAfterHeader": {
                "type": "object",
                "properties": {
                    "retry-after": {
                        "type": "integer",
                        "description": "The amount of seconds to wait before retrying the request."
                    }
                }
            },
            "Analysis": {
                "enum": [
                    "breakdown",
                    "changePoint",
                    "comparison",
                    "contribution",
                    "correlation",
                    "fact",
                    "mutualInfo",
                    "rank",
                    "spike",
                    "trend",
                    "values"
                ],
                "type": "string"
            },
            "AnalysisComposition": {
                "type": "object",
                "properties": {
                    "dims": {
                        "$ref": "#/components/schemas/CompositionMinMax"
                    },
                    "geos": {
                        "$ref": "#/components/schemas/CompositionMinMax"
                    },
                    "msrs": {
                        "$ref": "#/components/schemas/CompositionMinMax"
                    },
                    "items": {
                        "$ref": "#/components/schemas/CompositionMinMax"
                    },
                    "temporals": {
                        "$ref": "#/components/schemas/CompositionMinMax"
                    },
                    "description": {
                        "type": "object",
                        "properties": {
                            "long": {
                                "type": "string"
                            },
                            "short": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AnalysisDescriptor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "compositions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisComposition"
                        }
                    },
                    "supportsMasterItems": {
                        "type": "boolean",
                        "description": "If analysis can work with master items (default is true)"
                    },
                    "requiresAutoCalendarPeriod": {
                        "type": "boolean",
                        "description": "Used for period-specific analyses to indicate the defined or available calendar period must be of type autoCalendar"
                    },
                    "requiresDefinedAnalysisPeriod": {
                        "type": "boolean",
                        "description": "Used for period-specific analyses to indicate the measure must be associated with one or more analysis periods"
                    },
                    "requiresAvailableAnalysisPeriod": {
                        "type": "boolean",
                        "description": "Used for period-specific analyses to indicate the temporal dimension must be associated with one or more analysis periods"
                    }
                }
            },
            "AnalysisDescriptorResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisDescriptor"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "AnalysisDetails": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "analysis": {
                        "$ref": "#/components/schemas/Analysis"
                    },
                    "analysisGroup": {
                        "$ref": "#/components/schemas/AnalysisGroup"
                    }
                }
            },
            "AnalysisGroup": {
                "enum": [
                    "anomaly",
                    "brekadown",
                    "comparison",
                    "correl",
                    "fact",
                    "list",
                    "mutualInfo",
                    "rank"
                ],
                "type": "string"
            },
            "AnalysisModelItemField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "populated only for fields"
                    },
                    "isHidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "whether the field is hidden in business logic"
                    },
                    "classifications": {
                        "$ref": "#/components/schemas/Classifications"
                    },
                    "simplifiedClassifications": {
                        "$ref": "#/components/schemas/SimplifiedClassifications"
                    }
                }
            },
            "AnalysisModelItemMasterItem": {
                "type": "object",
                "properties": {
                    "libId": {
                        "type": "string",
                        "description": "only available for master items"
                    },
                    "caption": {
                        "type": "string"
                    },
                    "isHidden": {
                        "type": "boolean",
                        "default": false,
                        "description": "whether the master item is hidden in business logic"
                    },
                    "classifications": {
                        "$ref": "#/components/schemas/Classifications"
                    },
                    "simplifiedClassifications": {
                        "$ref": "#/components/schemas/SimplifiedClassifications"
                    }
                }
            },
            "AnalysisModelResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisModelResponseDetail"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "AnalysisModelResponseDetail": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisModelItemField"
                        }
                    },
                    "masterItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisModelItemMasterItem"
                        }
                    },
                    "isLogicalModelEnabled": {
                        "type": "boolean",
                        "description": "if the analysis model is constructed based on a user-defined business-logic (as opposed to a default one)"
                    },
                    "isDefinedLogicalModelValid": {
                        "type": "boolean",
                        "description": "set only if previous property is true, to indicate if the business logic passes validation"
                    }
                }
            },
            "AnalysisRecommendationResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnalysisRecommendationResponseDetail"
                        }
                    }
                }
            },
            "AnalysisRecommendationResponseDetail": {
                "type": "object",
                "required": [
                    "recAnalyses"
                ],
                "properties": {
                    "nluInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartialNluInfo"
                        }
                    },
                    "recAnalyses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecommendedAnalysis"
                        }
                    }
                }
            },
            "AnalysisRecommendRequest": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecommendNaturalLangQuery"
                    },
                    {
                        "$ref": "#/components/schemas/RecommendItems"
                    }
                ],
                "description": "Request payload can be of two types, using natural language query or consist of fields or master items and optional target analysis.\nIn below examples, consider sales as a master item and product as field, so to get recommendations using sales and product,\nyou can utilize below three approaches, also you can set language parameter in headers as part of accept-language.\nExamples:\n```\n{\n  'text': 'show me sales by product'\n}\n```\n```\n{\n  'fields': [\n    {\n      'name': 'product'\n    }\n  ],\n  'libItems': [\n    {\n      libId: 'NwQfJ'\n    }\n  ]\n}\n```\n```\n{\n  'fields': [\n    {\n      'name': 'product'\n    }\n  ],\n  'libItems': [\n    {\n      'libId': 'NwQfJ'\n    }\n  ],\n  'targetAnalysis': {\n    'id': 'rank-rank'\n  }\n}\n```\n"
            },
            "AppAttributes": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name (title) of the application"
                    },
                    "usage": {
                        "$ref": "#/components/schemas/UsageEnum"
                    },
                    "locale": {
                        "type": "string",
                        "description": "Set custom locale instead of the system default"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "The space ID of the application"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the application"
                    }
                }
            },
            "AppContentList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppContentListItem"
                        },
                        "description": "Content list items."
                    },
                    "library": {
                        "type": "string",
                        "description": "Content library name."
                    },
                    "subpath": {
                        "type": "string",
                        "description": "Content library relative listing path. Empty in case of root listed or representing actual subpath listed."
                    }
                }
            },
            "AppContentListItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique content identifier."
                    },
                    "link": {
                        "type": "string",
                        "description": "Unique content link."
                    },
                    "name": {
                        "type": "string",
                        "description": "Content name."
                    },
                    "type": {
                        "type": "string",
                        "description": "Content type."
                    }
                }
            },
            "AppObjectGenericType": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "genericObject",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "genericBookmark",
                        "x-qlik-const": 1
                    },
                    {
                        "title": "genericMeasure",
                        "x-qlik-const": 2
                    },
                    {
                        "title": "genericDimension",
                        "x-qlik-const": 3
                    },
                    {
                        "title": "genericVariable",
                        "x-qlik-const": 4
                    }
                ]
            },
            "AppUpdateAttributes": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name (title) of the application."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the application."
                    }
                }
            },
            "ChartType": {
                "enum": [
                    "barchart",
                    "combochart",
                    "distributionplot",
                    "kpi",
                    "linechart",
                    "map",
                    "scatterplot",
                    "table"
                ],
                "type": "string",
                "description": "Chart type given to current recommendation"
            },
            "classification": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "diff": {
                                "type": "number",
                                "example": 0.5
                            },
                            "trend": {
                                "type": "string",
                                "example": "up"
                            },
                            "absoluteDiff": {
                                "type": "number",
                                "example": 2.5
                            }
                        }
                    }
                ]
            },
            "Classifications": {
                "type": "array",
                "items": {
                    "enum": [
                        "dimension",
                        "measure",
                        "temporal",
                        "city",
                        "address",
                        "boolean",
                        "country",
                        "date",
                        "email",
                        "geographical",
                        "geoPoint",
                        "geoPolygon",
                        "hour",
                        "latitude",
                        "monetary",
                        "ordinal",
                        "percentage",
                        "postalCode",
                        "quarter",
                        "stateProvince",
                        "timestamp",
                        "week",
                        "weekDay",
                        "year",
                        "yearDay"
                    ],
                    "type": "string"
                },
                "description": "classification defines the default role that attribute can play in an analysis"
            },
            "cmpbool": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/classification"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "baseline": {
                                "type": "boolean",
                                "example": false
                            },
                            "comparison": {
                                "type": "boolean",
                                "example": true
                            }
                        }
                    }
                ]
            },
            "cmpfloat": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/classification"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "baseline": {
                                "type": "number",
                                "example": 1.1
                            },
                            "comparison": {
                                "type": "number",
                                "example": 2.2
                            }
                        }
                    }
                ]
            },
            "cmpfloatWithTimeout": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/cmpfloat"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "baselineTimeoutStatusCode": {
                                "type": "string",
                                "example": "CALC-TIMEOUT"
                            },
                            "comparisonTimeoutStatusCode": {
                                "type": "string",
                                "example": "CALC-TIMEOUT"
                            }
                        }
                    }
                ]
            },
            "cmpint": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/classification"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "baseline": {
                                "type": "number",
                                "example": 1
                            },
                            "comparison": {
                                "type": "number",
                                "example": 2
                            }
                        }
                    }
                ]
            },
            "comparison": {
                "type": "object",
                "properties": {
                    "objHeavy": {
                        "$ref": "#/components/schemas/sortedcomparisonoobjheavy"
                    },
                    "rowCount": {
                        "$ref": "#/components/schemas/cmpint"
                    },
                    "objNoCache": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "sheetCount": {
                        "$ref": "#/components/schemas/cmpint"
                    },
                    "fileSizeMib": {
                        "$ref": "#/components/schemas/cmpfloat"
                    },
                    "objectCount": {
                        "$ref": "#/components/schemas/cmpint"
                    },
                    "maxMemoryMib": {
                        "$ref": "#/components/schemas/cmpfloat"
                    },
                    "sheetsCached": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "objSlowCached": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "objMemoryLimit": {
                        "$ref": "#/components/schemas/comparisonobjMemoryLimit"
                    },
                    "sheetsUncached": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "documentSizeMib": {
                        "$ref": "#/components/schemas/cmpfloat"
                    },
                    "objSlowUncached": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "dataModelSizeMib": {
                        "$ref": "#/components/schemas/cmpfloat"
                    },
                    "hasSectionAccess": {
                        "$ref": "#/components/schemas/cmpbool"
                    },
                    "topFieldsByBytes": {
                        "$ref": "#/components/schemas/sortedcomparisonfields"
                    },
                    "topTablesByBytes": {
                        "$ref": "#/components/schemas/sortedcomparisontables"
                    },
                    "objSingleThreaded": {
                        "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                    },
                    "appOpenTimeSeconds": {
                        "$ref": "#/components/schemas/cmpfloat"
                    }
                }
            },
            "comparisonfields": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/objecttopspec"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "a"
                                },
                                "cardinal": {
                                    "$ref": "#/components/schemas/cmpint"
                                },
                                "byte_size": {
                                    "$ref": "#/components/schemas/cmpint"
                                },
                                "is_system": {
                                    "$ref": "#/components/schemas/cmpbool"
                                },
                                "total_count": {
                                    "$ref": "#/components/schemas/cmpint"
                                },
                                "dataSourceStatus": {
                                    "enum": [
                                        "full",
                                        "none",
                                        "baselinemissing",
                                        "comparisonmissing"
                                    ],
                                    "type": "string",
                                    "example": "full"
                                }
                            }
                        }
                    ]
                }
            },
            "comparisonobjMemoryLimit": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/objectspec"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "dataSourceStatus": {
                                    "enum": [
                                        "full",
                                        "none",
                                        "baselinemissing",
                                        "comparisonmissing"
                                    ],
                                    "type": "string",
                                    "example": "full"
                                },
                                "baselineMemoryLimitStatusCode": {
                                    "type": "string",
                                    "example": "OUT-OF-MEMORY"
                                },
                                "comparisonMemoryLimitStatusCode": {
                                    "type": "string",
                                    "example": "OUT-OF-MEMORY"
                                }
                            }
                        }
                    ]
                }
            },
            "comparisonobjresponsetime": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/objectspec"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "dataSourceStatus": {
                                    "enum": [
                                        "full",
                                        "none",
                                        "baselinemissing",
                                        "comparisonmissing"
                                    ],
                                    "type": "string",
                                    "example": "full"
                                },
                                "responseTimeSeconds1": {
                                    "$ref": "#/components/schemas/cmpfloatWithTimeout"
                                },
                                "responseTimeSeconds2": {
                                    "$ref": "#/components/schemas/cmpfloatWithTimeout"
                                }
                            }
                        }
                    ]
                }
            },
            "comparisonoobjheavy": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/objectspec"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "cpuSeconds1": {
                                    "$ref": "#/components/schemas/cmpfloat"
                                },
                                "cpuSeconds2": {
                                    "$ref": "#/components/schemas/cmpfloat"
                                },
                                "cpuQuotient1": {
                                    "$ref": "#/components/schemas/cmpfloat"
                                },
                                "cpuQuotient2": {
                                    "$ref": "#/components/schemas/cmpfloat"
                                },
                                "dataSourceStatus": {
                                    "enum": [
                                        "full",
                                        "none",
                                        "baselinemissing",
                                        "comparisonmissing"
                                    ],
                                    "type": "string",
                                    "example": "full"
                                }
                            }
                        }
                    ]
                }
            },
            "comparisontables": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/objecttopspec"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "a"
                                },
                                "byte_size": {
                                    "$ref": "#/components/schemas/cmpint"
                                },
                                "is_system": {
                                    "$ref": "#/components/schemas/cmpbool"
                                },
                                "no_of_rows": {
                                    "$ref": "#/components/schemas/cmpint"
                                },
                                "dataSourceStatus": {
                                    "enum": [
                                        "full",
                                        "none",
                                        "baselinemissing",
                                        "comparisonmissing"
                                    ],
                                    "type": "string",
                                    "example": "full"
                                }
                            }
                        }
                    ]
                }
            },
            "CompositionMinMax": {
                "type": "object",
                "properties": {
                    "max": {
                        "type": "number"
                    },
                    "min": {
                        "type": "number"
                    }
                },
                "description": "Upper and lower bounds for items of specific classification types"
            },
            "CreateApp": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/AppAttributes"
                    }
                }
            },
            "DataModelMetadata": {
                "type": "object",
                "properties": {
                    "usage": {
                        "$ref": "#/components/schemas/UsageEnum"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FieldMetadata"
                        },
                        "description": "List of field descriptions."
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TableMetadata"
                        },
                        "description": "List of table descriptions."
                    },
                    "reload_meta": {
                        "$ref": "#/components/schemas/LastReloadMetadata"
                    },
                    "static_byte_size": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Static memory usage for the app."
                    },
                    "has_section_access": {
                        "type": "boolean",
                        "description": "If set to true, the app has section access configured."
                    },
                    "is_direct_query_mode": {
                        "type": "boolean"
                    },
                    "tables_profiling_data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TableProfilingData"
                        },
                        "description": "Profiling data of the tables in the app."
                    }
                }
            },
            "evaluation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "string",
                        "example": "5ecb5e65028d1f0001a98071"
                    },
                    "appId": {
                        "type": "string",
                        "format": "string",
                        "example": "7c2ce11d-4d10-4414-a9b0-620e57298038"
                    },
                    "ended": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-02-09T06:58:40.575Z"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/event"
                        }
                    },
                    "result": {
                        "$ref": "#/components/schemas/result"
                    },
                    "status": {
                        "type": "string",
                        "format": "string",
                        "example": "finished"
                    },
                    "appName": {
                        "type": "string",
                        "format": "string",
                        "example": "my app"
                    },
                    "details": {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "string",
                                    "example": "this is an error"
                                }
                            },
                            "warnings": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "string",
                                    "example": "this is a warning"
                                }
                            },
                            "dedicated": {
                                "type": "boolean",
                                "example": false,
                                "deprecated": true
                            },
                            "objectMetrics": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/resultentry"
                                }
                            },
                            "engineHasCache": {
                                "type": "boolean",
                                "example": false
                            },
                            "concurrentReload": {
                                "type": "boolean",
                                "example": false
                            }
                        }
                    },
                    "sheetId": {
                        "type": "string",
                        "format": "string",
                        "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                    },
                    "started": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-02-09T06:58:40.575Z"
                    },
                    "version": {
                        "type": "number",
                        "example": 1
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/metadata"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "string",
                        "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                    },
                    "appItemId": {
                        "type": "string",
                        "format": "string",
                        "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-02-09T06:58:40.575Z"
                    },
                    "sheetTitle": {
                        "type": "string",
                        "format": "string",
                        "example": "my sheet"
                    }
                }
            },
            "evaluations": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/evaluation"
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "next": {
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "$ref": "#/components/schemas/href"
                                    }
                                }
                            },
                            "prev": {
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "$ref": "#/components/schemas/href"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "EvaluatorError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "ERR-INVALID-AUTH"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "An error occured"
                                },
                                "status": {
                                    "type": "integer",
                                    "format": "int32",
                                    "example": 427
                                }
                            }
                        }
                    }
                }
            },
            "event": {
                "type": "object",
                "properties": {
                    "details": {
                        "type": "string",
                        "example": "An object failed"
                    },
                    "sheetId": {
                        "type": "string",
                        "example": "gregFG"
                    },
                    "objectId": {
                        "type": "string",
                        "example": "adfRFr"
                    },
                    "severity": {
                        "type": "string",
                        "example": "warning"
                    },
                    "errorCode": {
                        "type": "string",
                        "example": "ERR-GOPHERCISER"
                    },
                    "objectType": {
                        "type": "string",
                        "example": "linechart"
                    },
                    "sheetTitle": {
                        "type": "string",
                        "example": "mysheet"
                    },
                    "objectTitle": {
                        "type": "string",
                        "example": "profit"
                    },
                    "objectVisualization": {
                        "type": "string",
                        "example": "linechart"
                    }
                }
            },
            "FieldAttributes": {
                "type": "object",
                "properties": {
                    "Dec": {
                        "type": "string",
                        "description": "Defines the decimal separator.\nExample: **.**"
                    },
                    "Fmt": {
                        "type": "string",
                        "description": "Defines the format pattern that applies to _qText_ .\nIs used in connection to the type of the field (parameter **qType** ).\nFor more information, see _Formatting mechanism_.\nExample: _YYYY-MM-DD_ for a date."
                    },
                    "Thou": {
                        "type": "string",
                        "description": "Defines the thousand separator (if any).\nIs used if **qUseThou** is set to 1.\nExample: **,**"
                    },
                    "Type": {
                        "$ref": "#/components/schemas/FieldAttrType"
                    },
                    "nDec": {
                        "type": "integer",
                        "format": "int32",
                        "default": 10,
                        "description": "Number of decimals.\nDefault is 10."
                    },
                    "UseThou": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0,
                        "description": "Defines whether or not a thousands separator must be used.\nDefault is 0."
                    }
                },
                "description": "Sets the formatting of a field.\nThe properties of _qFieldAttributes_ and the formatting mechanism are described below.\n\n### Formatting mechanism\nThe formatting mechanism depends on the type set in _qType,_ as shown below:\n<div class=note>In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.</div>\n\n### Type is DATE, TIME, TIMESTAMP or INTERVAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .\n* If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).\n* The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n\n### Type is INTEGER\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .\n\n### Type is REAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is FIX\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is MONEY\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n\n### Type is ASCII\nNo formatting, _qFmt_ is ignored."
            },
            "FieldAttrType": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "U",
                        "description": "UNKNOWN",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "A",
                        "description": "ASCII",
                        "x-qlik-const": 1
                    },
                    {
                        "title": "I",
                        "description": "INTEGER",
                        "x-qlik-const": 10
                    },
                    {
                        "title": "R",
                        "description": "REAL",
                        "x-qlik-const": 2
                    },
                    {
                        "title": "F",
                        "description": "FIX",
                        "x-qlik-const": 11
                    },
                    {
                        "title": "M",
                        "description": "MONEY",
                        "x-qlik-const": 12
                    },
                    {
                        "title": "D",
                        "description": "DATE",
                        "x-qlik-const": 3
                    },
                    {
                        "title": "T",
                        "description": "TIME",
                        "x-qlik-const": 4
                    },
                    {
                        "title": "TS",
                        "description": "TIMESTAMP",
                        "x-qlik-const": 5
                    },
                    {
                        "title": "IV",
                        "description": "INTERVAL",
                        "x-qlik-const": 6
                    }
                ]
            },
            "FieldInTableProfilingData": {
                "type": "object",
                "properties": {
                    "Max": {
                        "type": "number",
                        "format": "double",
                        "description": "Maximum value of numerical values. NaN otherwise."
                    },
                    "Min": {
                        "type": "number",
                        "format": "double",
                        "description": "Minimum value of numerical values. NaN otherwise."
                    },
                    "Std": {
                        "type": "number",
                        "format": "double",
                        "description": "Standard deviation of numerical values. NaN otherwise."
                    },
                    "Sum": {
                        "type": "number",
                        "format": "double",
                        "description": "Sum of all numerical values. NaN otherwise."
                    },
                    "Name": {
                        "type": "string",
                        "description": "Name of the field."
                    },
                    "Sum2": {
                        "type": "number",
                        "format": "double",
                        "description": "Squared sum of all numerical values. NaN otherwise."
                    },
                    "Median": {
                        "type": "number",
                        "format": "double",
                        "description": "Median of all numerical values. NaN otherwise."
                    },
                    "Average": {
                        "type": "number",
                        "format": "double",
                        "description": "Average of all numerical values. NaN otherwise."
                    },
                    "Kurtosis": {
                        "type": "number",
                        "format": "double",
                        "description": "Kurtosis of the numerical values. NaN otherwise."
                    },
                    "Skewness": {
                        "type": "number",
                        "format": "double",
                        "description": "Skewness of the numerical values. NaN otherwise."
                    },
                    "FieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags related to the field."
                    },
                    "Fractiles": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "format": "double"
                        },
                        "description": "The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise."
                    },
                    "NegValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of negative values"
                    },
                    "PosValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of positive values"
                    },
                    "LastSorted": {
                        "type": "string",
                        "description": "For textual values the last sorted string."
                    },
                    "NullValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of null values"
                    },
                    "TextValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of textual values"
                    },
                    "ZeroValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of zero values for numerical values"
                    },
                    "FirstSorted": {
                        "type": "string",
                        "description": "For textual values the first sorted string."
                    },
                    "AvgStringLen": {
                        "type": "number",
                        "format": "double",
                        "description": "Average string length of textual values. 0 otherwise."
                    },
                    "EmptyStrings": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of empty strings"
                    },
                    "MaxStringLen": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum string length of textual values. 0 otherwise."
                    },
                    "MinStringLen": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Minimum string length of textual values. 0 otherwise."
                    },
                    "MostFrequent": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SymbolFrequency"
                        },
                        "description": "Three most frequent values and their frequencies"
                    },
                    "NumberFormat": {
                        "$ref": "#/components/schemas/FieldAttributes"
                    },
                    "SumStringLen": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Sum of all characters in strings in the field"
                    },
                    "NumericValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of numeric values"
                    },
                    "DistinctValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of distinct values"
                    },
                    "DistinctTextValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of distinct text values"
                    },
                    "DistinctNumericValues": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of distinct numeric values"
                    },
                    "FrequencyDistribution": {
                        "$ref": "#/components/schemas/FrequencyDistributionData"
                    }
                }
            },
            "FieldMetadata": {
                "type": "object",
                "properties": {
                    "hash": {
                        "type": "string",
                        "description": "Hash of the data in the field. If the data in a reload is the same, the hash will be consistent."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the field."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Field comment."
                    },
                    "cardinal": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of distinct field values."
                    },
                    "byte_size": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Static RAM memory used in bytes."
                    },
                    "is_hidden": {
                        "type": "boolean",
                        "description": "If set to true, the field is hidden.\nThe default value is false."
                    },
                    "is_locked": {
                        "type": "boolean",
                        "description": "If set to true, the field is locked.\nThe default value is false."
                    },
                    "is_system": {
                        "type": "boolean",
                        "description": "If set to true, the field is a system field.\nThe default value is false."
                    },
                    "is_numeric": {
                        "type": "boolean",
                        "description": "Is set to true if the value is a numeric.\nThe default value is false."
                    },
                    "src_tables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of table names."
                    },
                    "is_semantic": {
                        "type": "boolean",
                        "description": "If set to true, the field is semantic.\nThe default value is false."
                    },
                    "total_count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number of field values."
                    },
                    "distinct_only": {
                        "type": "boolean",
                        "description": "If set to true, only distinct field values are shown.\nThe default value is false."
                    },
                    "always_one_selected": {
                        "type": "boolean",
                        "description": "If set to true, the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false."
                    }
                }
            },
            "FieldOverride": {
                "type": "object",
                "properties": {
                    "classifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultAggregation": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "FileData": {
                "type": "string",
                "format": "binary"
            },
            "Filter": {
                "properties": {
                    "filter": {
                        "type": "string",
                        "example": "(id eq \"626949b9017b657805080bbd\" or id eq \"626949bf017b657805080bbe\") and (status eq \"active\" or status eq \"deleted\")",
                        "description": "The advanced filtering to be applied the query. All conditional statements within this query parameter are case insensitive."
                    }
                },
                "description": "An advanced query filter to be used for complex user querying in the tenant."
            },
            "FilterError": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "REP-400000",
                        "description": "The unique code for the error\n\n- \"REP-400000\" Bad request. The server could not understand the request due to invalid syntax.\n- \"REP-400008\" Selections error.\n- \"REP-400015\" Bad request in enigma request. The patch value has invalid JSON format.\n- \"REP-401000\" Unauthorized. The client must authenticate itself to get the requested response.\n- \"REP-401001\" Unauthorized, bad JWT.\n- \"REP-403000\" Forbidden. The client does not have access rights to the content.\n- \"REP-403001\" App forbidden, the user does not have read permission on the app.\n- \"REP-403002\" Chart type not supported.\n- \"REP-404000\" Not found. The server can not find the requested resource.\n- \"REP-409043\" Filter name conflict. The filter name must be unique.\n- \"REP-429000\" Too many request. The user has sent too many requests in a given amount of time (\"rate limiting\").\n- \"REP-429012\" Exceeded max session tenant quota. A tenant has opened too many different sessions at the same time.\n- \"REP-429016\" Exceeded max session tenant quota per day.\n- \"REP-500000\" Fail to resolve resource.\n- \"REP-503005\" Engine unavailable, qix-sessions error no engines available.\n- \"REP-503013\" Session unavailable. The engine session used to create the report is unavailable.\n- \"REP-504042\" Context deadline exceeded applying selections of the Filter.\n- \"REP-500031\" Error creating bookmark.\n- \"REP-404032\" Bookmark not found after creating the bookmark.\n- \"REP-500033\" Error destroying bookmark.\n- \"REP-404033\" Bookmark not found destroying the bookmark.\n- \"REP-409043\" Dupliacate bookmark name.\n- \"REP-429034\" Filters quota exceeded.\n- \"REP-400044\" Missing or renamed field.\n- \"REP-403049\" Report filter access not allowed.\n"
                    },
                    "title": {
                        "type": "string",
                        "example": "Bad request. The server could not understand the request due to invalid syntax.",
                        "description": "A summary in english explaining what went wrong."
                    }
                },
                "description": "Error occured during the Filter creation."
            },
            "FilterErrors": {
                "type": "object",
                "required": [
                    "errors"
                ],
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterError"
                        }
                    }
                },
                "description": "Errors occured during the Filter creation."
            },
            "FilterField": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Region"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterFieldValue"
                        },
                        "minItems": 1,
                        "description": "The filter values."
                    },
                    "description": {
                        "type": "string",
                        "example": "This is the filter description",
                        "x-nullable": true,
                        "description": "Gets the resource description."
                    },
                    "overrideValues": {
                        "type": "boolean",
                        "example": false
                    },
                    "selectExcluded": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "FilterFieldValue": {
                "type": "object",
                "properties": {
                    "valueType": {
                        "enum": [
                            "string",
                            "number",
                            "evaluate",
                            "search"
                        ],
                        "type": "string",
                        "example": "string"
                    },
                    "valueAsText": {
                        "type": "string",
                        "example": "2001"
                    },
                    "valueAsNumber": {
                        "$ref": "#/components/schemas/Float64"
                    }
                }
            },
            "FilterItemPatch": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Filter 1",
                        "description": "The filter name."
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "649173fbc8ffcfde27412b99",
                        "description": "The user that owns the filter, if missing the same as the request user."
                    },
                    "filterV1_0": {
                        "$ref": "#/components/schemas/FilterV1_0"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is the filter description",
                        "description": "The filter description."
                    },
                    "filterVersion": {
                        "enum": [
                            "filter-1.0",
                            "filter-2.0"
                        ],
                        "type": "string"
                    }
                }
            },
            "FilterList": {
                "type": "object",
                "readOnly": true,
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterListItem"
                        },
                        "description": "a list of filters containing all the filters properties (like name,description...) except the filter definition (like FilterV1_0)"
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinksResponse"
                    }
                }
            },
            "FilterListItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "c61841ac-7b35-4434-aa74-4421f10fc68e",
                        "readOnly": true,
                        "description": "The filter ID (bookmarkId)"
                    },
                    "name": {
                        "type": "string",
                        "example": "Filter 1",
                        "readOnly": true,
                        "description": "The filter name."
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "649173fbc8ffcfde27412b99",
                        "readOnly": true,
                        "description": "The user that owns the filter, if missing the same as the request user."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-08-09T08:19:37.577Z",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-08-09T08:19:37.577Z",
                        "readOnly": true
                    },
                    "filterType": {
                        "$ref": "#/components/schemas/FilterType"
                    },
                    "filterV1_0": {
                        "$ref": "#/components/schemas/FilterV1_0"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is the filter description",
                        "readOnly": true,
                        "description": "The filter description."
                    },
                    "filterVersion": {
                        "enum": [
                            "filter-1.0",
                            "filter-2.0"
                        ],
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "FilterRequest": {
                "example": {
                    "name": "Filter sample",
                    "filterType": "REP",
                    "filterV1_0": {
                        "fieldsByState": {
                            "$": [
                                {
                                    "name": "Country",
                                    "values": [
                                        {
                                            "valueType": "string",
                                            "valueAsText": "1-Argentina"
                                        },
                                        {
                                            "valueType": "string",
                                            "valueAsText": "4-Brazil"
                                        }
                                    ],
                                    "overrideValues": false,
                                    "selectExcluded": false
                                },
                                {
                                    "name": "Order number",
                                    "values": [
                                        {
                                            "valueType": "number",
                                            "valueAsText": "61300",
                                            "valueAsNumber": 61300
                                        }
                                    ],
                                    "overrideValues": false,
                                    "selectExcluded": false
                                }
                            ]
                        }
                    },
                    "description": "this is a filter sample",
                    "filterVersion": "filter-1.0"
                },
                "required": [
                    "name",
                    "filterType",
                    "filterVersion"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Filter 1",
                        "description": "The filter name."
                    },
                    "appId": {
                        "type": "string",
                        "example": "1a60c348-4bc6-428a-b4e6-03bde68a5c19",
                        "description": "The App ID."
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "649173fbc8ffcfde27412b99",
                        "description": "The user that owns the filter, if missing the same as the request user."
                    },
                    "filterType": {
                        "$ref": "#/components/schemas/FilterType"
                    },
                    "filterV1_0": {
                        "$ref": "#/components/schemas/FilterV1_0"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is the filter description",
                        "x-nullable": true,
                        "description": "The filter description."
                    },
                    "filterVersion": {
                        "enum": [
                            "filter-1.0",
                            "filter-2.0"
                        ],
                        "type": "string"
                    }
                }
            },
            "FiltersCount": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "number",
                        "format": "int32",
                        "example": 20,
                        "readOnly": true,
                        "description": "The total number of filters."
                    }
                }
            },
            "FilterType": {
                "enum": [
                    "REP",
                    "SUB"
                ],
                "type": "string"
            },
            "FilterV1_0": {
                "type": "object",
                "example": {
                    "fieldsByState": {
                        "$": [
                            {
                                "name": "Country",
                                "values": [
                                    {
                                        "valueType": "string",
                                        "valueAsText": "1-Argentina"
                                    },
                                    {
                                        "valueType": "string",
                                        "valueAsText": "4-Brazil"
                                    }
                                ],
                                "overrideValues": false,
                                "selectExcluded": false
                            },
                            {
                                "name": "Order number",
                                "values": [
                                    {
                                        "valueType": "number",
                                        "valueAsText": "61300",
                                        "valueAsNumber": 61300
                                    }
                                ],
                                "overrideValues": false,
                                "selectExcluded": false
                            }
                        ]
                    }
                },
                "properties": {
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterVariable"
                        },
                        "description": "The filter variables."
                    },
                    "fieldsByState": {
                        "type": "object",
                        "description": "Map of fields to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FilterField"
                            },
                            "maxItems": 125
                        }
                    }
                }
            },
            "FilterVariable": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "variable 1"
                    },
                    "value": {
                        "type": "string",
                        "example": "v1"
                    },
                    "evaluate": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "Float64": {
                "type": "number",
                "format": "float64",
                "x-go-type": {
                    "type": "Float64",
                    "import": {
                        "alias": "cModels",
                        "package": "github.com/qlik-trial/reporting-service/v10/pkg/models"
                    }
                }
            },
            "FrequencyDistributionData": {
                "type": "object",
                "properties": {
                    "BinsEdges": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "format": "double"
                        },
                        "description": "Bins edges."
                    },
                    "Frequencies": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Bins frequencies."
                    },
                    "NumberOfBins": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of bins."
                    }
                }
            },
            "HardwareMeta": {
                "type": "object",
                "properties": {
                    "total_memory": {
                        "type": "integer",
                        "format": "int64",
                        "description": "RAM available."
                    },
                    "logical_cores": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of logical cores available."
                    }
                }
            },
            "href": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "link"
                    }
                }
            },
            "Href": {
                "type": "object",
                "example": {
                    "href": "http://example.com"
                },
                "properties": {
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "example": "http://example.com"
                    }
                }
            },
            "JsonObject": {
                "type": "object",
                "description": "Contains dynamic JSON data specified by the client."
            },
            "LastReloadMetadata": {
                "type": "object",
                "properties": {
                    "hardware": {
                        "$ref": "#/components/schemas/HardwareMeta"
                    },
                    "cpu_time_spent_ms": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of CPU milliseconds it took to reload the app."
                    },
                    "peak_memory_bytes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of bytes used during reload of the app."
                    },
                    "fullReloadPeakMemoryBytes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of bytes used during full reload of the app."
                    },
                    "partialReloadPeakMemoryBytes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of bytes used during partial reload of the app."
                    }
                }
            },
            "LineageInfoRest": {
                "type": "object",
                "properties": {
                    "statement": {
                        "type": "string",
                        "description": "The LOAD and SELECT script statements from the data load script."
                    },
                    "discriminator": {
                        "type": "string",
                        "description": "A string indicating the origin of the data:\n* [filename]: the data comes from a local file.\n* INLINE: the data is entered inline in the load script.\n* RESIDENT: the data comes from a resident table. The table name is listed.\n* AUTOGENERATE: the data is generated from the load script (no external table of data source).\n* Provider: the data comes from a data connection. The connector source name is listed.\n* [webfile]: the data comes from a web-based file.\n* STORE: path to QVD or TXT file where data is stored.\n* EXTENSION: the data comes from a Server Side Extension (SSE)."
                    }
                }
            },
            "LinkResponse": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "The URL for the link."
                    }
                },
                "additionalProperties": false
            },
            "Links": {
                "properties": {
                    "next": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string"
                            }
                        }
                    },
                    "prev": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string"
                            }
                        }
                    },
                    "self": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "Notifications links"
            },
            "LinksResponse": {
                "type": "object",
                "required": [
                    "next",
                    "prev",
                    "self"
                ],
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/LinkResponse"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/LinkResponse"
                    },
                    "self": {
                        "$ref": "#/components/schemas/LinkResponse"
                    }
                },
                "additionalProperties": false
            },
            "Log": {
                "type": "object",
                "properties": {
                    "log": {
                        "type": "string",
                        "description": "Provides a link to download the log file."
                    }
                }
            },
            "metadata": {
                "type": "object",
                "properties": {
                    "reloadmeta": {
                        "type": "object",
                        "properties": {
                            "cpuspent": {
                                "type": "number",
                                "example": "123983"
                            },
                            "peakmemorybytes": {
                                "type": "number",
                                "example": 112
                            }
                        }
                    },
                    "amountofrows": {
                        "type": "number",
                        "example": 1423423234
                    },
                    "amountoffields": {
                        "type": "number",
                        "example": 12
                    },
                    "amountoftables": {
                        "type": "number",
                        "example": 7
                    },
                    "staticbytesize": {
                        "type": "number",
                        "example": 1444234
                    },
                    "hassectionaccess": {
                        "type": "boolean",
                        "example": false
                    },
                    "amountoffieldvalues": {
                        "type": "number",
                        "example": 144423433
                    },
                    "amountofcardinalfieldvalues": {
                        "type": "number",
                        "example": 14442
                    }
                }
            },
            "NavigationLink": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    }
                }
            },
            "NavigationLinks": {
                "type": "object",
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/NavigationLink"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/NavigationLink"
                    }
                }
            },
            "numberFormat": {
                "type": "object",
                "properties": {
                    "qDec": {
                        "type": "string"
                    },
                    "qFmt": {
                        "type": "string"
                    },
                    "qThou": {
                        "type": "string"
                    },
                    "qType": {
                        "type": "string"
                    },
                    "qnDec": {
                        "type": "number"
                    },
                    "qUseThou": {
                        "type": "number"
                    }
                }
            },
            "NxApp": {
                "type": "object",
                "properties": {
                    "create": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxAppCreatePrivileges"
                        },
                        "description": "Object create privileges. Hints to the client what type of objects the user is allowed to create."
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/NxAttributes"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* reload\n* import\n* publish\n* duplicate\n* export\n* exportdata\n* change_owner\n* change_space"
                    }
                },
                "description": "Application attributes and user privileges."
            },
            "NxAppCreatePrivileges": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "Type of resource. For example, sheet, story, bookmark, etc."
                    },
                    "canCreate": {
                        "type": "boolean",
                        "description": "Is set to true if the user has privileges to create the resource."
                    }
                }
            },
            "NxAppObject": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/NxObjectAttributes"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Application object privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* publish\n* exportdata\n* change_owner"
                    }
                },
                "description": "Application object attributes and user privileges."
            },
            "NxAttributes": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The App ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "App name."
                    },
                    "owner": {
                        "type": "string",
                        "description": "Deprecated. Use the Users API to fetch user metadata.",
                        "x-qlik-deprecated": true
                    },
                    "usage": {
                        "$ref": "#/components/schemas/UsageEnum"
                    },
                    "custom": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Identifier of the app owner."
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "If set to true, the app is encrypted."
                    },
                    "published": {
                        "type": "boolean",
                        "description": "True if the app is published on-prem, distributed in QCS, false if not."
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "App thumbnail."
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the app was created."
                    },
                    "description": {
                        "type": "string",
                        "description": "App description."
                    },
                    "originAppId": {
                        "type": "string",
                        "description": "The Origin App ID for published apps."
                    },
                    "publishTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the app was published, empty if unpublished."
                    },
                    "dynamicColor": {
                        "type": "string",
                        "description": "The dynamic color of the app."
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the app was modified."
                    },
                    "lastReloadTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time of the last reload of the app."
                    },
                    "hasSectionAccess": {
                        "type": "boolean",
                        "description": "If set to true, the app has section access configured,"
                    },
                    "isDirectQueryMode": {
                        "type": "boolean",
                        "description": "True if the app is a Direct Query app, false if not"
                    }
                },
                "description": "App attributes. This structure can also contain extra user-defined attributes."
            },
            "NxObjectAttributes": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The object Id."
                    },
                    "name": {
                        "type": "string",
                        "description": "Object name."
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The object owner's Id."
                    },
                    "approved": {
                        "type": "boolean",
                        "description": "True if the object is approved."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the object was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the object was modified."
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The type of the object."
                    },
                    "description": {
                        "type": "string",
                        "description": "Object description."
                    },
                    "genericType": {
                        "$ref": "#/components/schemas/AppObjectGenericType"
                    },
                    "publishedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the object was published, empty if unpublished."
                    }
                },
                "description": "App object attributes. This structure can also contain extra user-defined attributes."
            },
            "NxPatch": {
                "required": [
                    "qOp",
                    "qPath"
                ],
                "properties": {
                    "qOp": {
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ],
                        "type": "string",
                        "example": "add"
                    },
                    "qPath": {
                        "type": "string",
                        "description": "Path to the property to add, remove or replace."
                    },
                    "qValue": {
                        "type": "string",
                        "description": "Corresponds to the value of the property to add or to the new value of the property to update."
                    }
                },
                "description": "Patches to apply to sense charts. Patches are soft properties meaning that are not persistent and they live within a session."
            },
            "NxPatchOperationType": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "add",
                        "description": "Add",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "remove",
                        "description": "Remove",
                        "x-qlik-const": 1
                    },
                    {
                        "title": "replace",
                        "description": "Replace",
                        "x-qlik-const": 2
                    }
                ]
            },
            "objectmetrics": {
                "type": "object",
                "properties": {
                    "cpuSeconds": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "example": 12.3
                        }
                    },
                    "cpuQuotients": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "example": 12.3
                        }
                    },
                    "responseTimeSeconds": {
                        "type": "number",
                        "example": 234.3
                    }
                }
            },
            "objectspec": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "string",
                        "example": "fjETFn"
                    },
                    "title": {
                        "type": "string",
                        "format": "string",
                        "example": "my chart"
                    },
                    "sheetId": {
                        "type": "string",
                        "format": "string",
                        "example": "41dbb01c-d1bd-4528-be05-910ee565988b"
                    },
                    "objectType": {
                        "type": "string",
                        "example": "table"
                    }
                }
            },
            "objecttopspec": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "format": "string",
                        "example": "some field/table"
                    },
                    "byte_size": {
                        "type": "number",
                        "example": 12873
                    },
                    "is_system": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "PartialNluInfo": {
                "properties": {
                    "role": {
                        "enum": [
                            "dimension",
                            "measure",
                            "date"
                        ],
                        "type": "string",
                        "description": "Role of the token or phrase from query"
                    },
                    "text": {
                        "type": "string",
                        "description": "Matching token or phrase from query"
                    },
                    "type": {
                        "enum": [
                            "field",
                            "filter",
                            "master_dimension",
                            "master_measure",
                            "custom_analysis"
                        ],
                        "type": "string",
                        "description": "Type of token from query"
                    },
                    "fieldName": {
                        "type": "string",
                        "description": "Qlik sense application field selected for given token or phrase"
                    },
                    "fieldValue": {
                        "type": "string",
                        "description": "Filter value found from query"
                    }
                },
                "description": "Contains break down of the asked question in the form of tokens with their classification."
            },
            "PatchFilter": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchFilterItem"
                }
            },
            "PatchFilterItem": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "operation (replace)."
                    },
                    "path": {
                        "enum": [
                            "/filter"
                        ],
                        "type": "string",
                        "description": "A JSON Pointer path (/)."
                    },
                    "value": {
                        "type": "object",
                        "properties": {
                            "Filter": {
                                "$ref": "#/components/schemas/FilterItemPatch"
                            }
                        },
                        "description": "The value to be used for this operation. The properties that cannot be patched include id, filterType, appId"
                    }
                },
                "additionalProperties": false
            },
            "PublishApp": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/PublishData"
                    },
                    "moveApp": {
                        "type": "boolean",
                        "default": false,
                        "description": "The original is moved instead of copied. The current published state of all objects is kept."
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "The managed space ID where the app will be published."
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/AppUpdateAttributes"
                    },
                    "originAppId": {
                        "type": "string",
                        "description": "If app is moved, originAppId needs to be provided."
                    }
                }
            },
            "PublishData": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "source",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "target",
                        "x-qlik-const": 1
                    }
                ]
            },
            "RecommendedAnalysis": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RecommendedAnalysisCore"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "parts": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecommendedAnalysisCore"
                                },
                                "description": "part analyses (only for macro analyses)"
                            }
                        }
                    }
                ]
            },
            "RecommendedAnalysisCore": {
                "type": "object",
                "properties": {
                    "options": {
                        "type": "object",
                        "description": "(chart options + hypercube definition)"
                    },
                    "analysis": {
                        "$ref": "#/components/schemas/AnalysisDetails"
                    },
                    "chartType": {
                        "$ref": "#/components/schemas/ChartType"
                    },
                    "relevance": {
                        "type": "number",
                        "description": "percentage of selected items in the analysis to the overall items passed to the endpoint"
                    }
                }
            },
            "RecommendFieldItem": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "overrides": {
                        "$ref": "#/components/schemas/FieldOverride"
                    }
                },
                "description": "structure for providing fields in recommendation request, user can retrieve the fields using insight-analyses/model endpoint\n"
            },
            "RecommendItems": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecommendFieldItem"
                        }
                    },
                    "libItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecommendMasterItem"
                        }
                    },
                    "targetAnalysis": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "id of the target analysis, returned by the GET insight-analyses endpoint"
                            }
                        }
                    }
                }
            },
            "RecommendMasterItem": {
                "type": "object",
                "properties": {
                    "libId": {
                        "type": "string"
                    },
                    "overrides": {
                        "type": "object",
                        "properties": {
                            "format": {
                                "$ref": "#/components/schemas/numberFormat"
                            }
                        }
                    }
                },
                "description": "structure for providing master items in recommendation request, user can retrieve the libId of master item using insight-analyses/model endpoint\n"
            },
            "RecommendNaturalLangQuery": {
                "type": "object",
                "required": [
                    "text"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The NL query."
                    }
                }
            },
            "ReloadIncludeFile": {
                "type": "object",
                "properties": {
                    "qri": {
                        "type": "string",
                        "description": "File QRI resource identifier."
                    },
                    "path": {
                        "type": "string",
                        "description": "File location within the connection."
                    },
                    "connection": {
                        "type": "string",
                        "description": "The connection name."
                    }
                }
            },
            "ReloadListMetadata": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReloadMeta"
                        },
                        "description": "Array of ReloadMeta."
                    }
                }
            },
            "ReloadMeta": {
                "type": "object",
                "properties": {
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time when reload ended."
                    },
                    "success": {
                        "type": "boolean",
                        "description": "true if the reload was successful."
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duration of reload (ms)."
                    },
                    "reloadId": {
                        "type": "string",
                        "description": "Reload identifier."
                    },
                    "rowLimit": {
                        "type": "integer",
                        "format": "int64",
                        "default": -1,
                        "description": "If greater than or equal 0, defines max number of rows loaded from a data source."
                    },
                    "appDbHash": {
                        "type": "string",
                        "description": "A Base64-encoded hash value of the new app database."
                    },
                    "skipStore": {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to skip Store statements.\nThe default value is false."
                    },
                    "storeHash": {
                        "type": "string",
                        "description": "A Base64-encoded hash value of all fields stored via the store statements."
                    },
                    "statements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReloadStatements"
                        },
                        "description": "List of external loaded or stored statements."
                    },
                    "accessDbHash": {
                        "type": "string",
                        "description": "A Base64-encoded hash value of the new section access database."
                    },
                    "includeFiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReloadIncludeFile"
                        },
                        "description": "Files brought into the script via include/mustInclude macros."
                    },
                    "loadFilesBytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "isPartialReload": {
                        "type": "boolean",
                        "description": "True if the reload is a partial reload."
                    },
                    "storeFilesBytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "loadExternalBytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "loadDataFilesBytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "storeDataFilesBytes": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ReloadStatements": {
                "type": "object",
                "properties": {
                    "qri": {
                        "type": "string",
                        "description": "Resource Identifier."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of statement, e.g. Store/Load."
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the resource level node in lineage."
                    },
                    "dataSize": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Data loaded from the network (bytes)."
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duration of data generation (ms)."
                    },
                    "nbrOfRows": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of rows loaded."
                    },
                    "tableName": {
                        "type": "string",
                        "description": "Name of the source table in lineage."
                    },
                    "connection": {
                        "type": "string",
                        "description": "The connecton name."
                    },
                    "nbrOfFields": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of fields loaded."
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "Connection ID."
                    },
                    "partialReloadOperation": {
                        "type": "string",
                        "description": "Partial load operation. e.g. add/replace/update/merge. n/a when not in partial load mode."
                    }
                }
            },
            "RepublishApp": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/PublishData"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "The target ID to be republished."
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/AppUpdateAttributes"
                    },
                    "checkOriginAppId": {
                        "type": "boolean",
                        "default": true,
                        "description": "Validate that source app is same as originally published."
                    }
                }
            },
            "result": {
                "type": "object",
                "properties": {
                    "sheets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjsheet"
                        }
                    },
                    "rowCount": {
                        "type": "number",
                        "example": 20000
                    },
                    "objNoCache": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjresponsetime"
                        }
                    },
                    "sheetCount": {
                        "type": "number",
                        "example": 5
                    },
                    "objectCount": {
                        "type": "number",
                        "example": 33
                    },
                    "objSlowCached": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjresponsetime"
                        }
                    },
                    "objMemoryLimit": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjMemoryLimit"
                        }
                    },
                    "documentSizeMiB": {
                        "type": "number",
                        "example": 12.3
                    },
                    "objSlowUncached": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjresponsetime"
                        }
                    },
                    "hasSectionAccess": {
                        "type": "boolean",
                        "example": false
                    },
                    "topFieldsByBytes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultmetadatatopfields"
                        }
                    },
                    "topTablesByBytes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultmetadatatoptables"
                        }
                    },
                    "objSingleThreaded": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultsingle"
                        }
                    }
                }
            },
            "resultentry": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "passes": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/objectmetrics"
                                }
                            }
                        }
                    }
                ]
            },
            "resultmetadatatopfields": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objecttopspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "a"
                            },
                            "byte_size": {
                                "type": "number",
                                "example": 1234
                            }
                        }
                    }
                ]
            },
            "resultmetadatatoptables": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objecttopspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "a"
                            },
                            "byte_size": {
                                "type": "number",
                                "example": 1234
                            }
                        }
                    }
                ]
            },
            "resultobjMemoryLimit": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "memoryLimitStatusCode": {
                                "type": "string",
                                "example": "OUT-OF-MEMORY"
                            }
                        }
                    }
                ]
            },
            "resultobjresponsetime": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "timeoutStatusCode": {
                                "type": "string",
                                "example": "CALC-TIMEOUT"
                            },
                            "responseTimeSeconds": {
                                "type": "number",
                                "example": 12.3
                            }
                        }
                    }
                ]
            },
            "resultobjsheet": {
                "type": "object",
                "properties": {
                    "sheet": {
                        "$ref": "#/components/schemas/resultobjresponsetime"
                    },
                    "objectCount": {
                        "type": "number",
                        "example": 1
                    },
                    "sheetObjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resultobjresponsetime"
                        }
                    }
                }
            },
            "resultsingle": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cpuQuotient1": {
                                "type": "number",
                                "example": 12.3
                            }
                        }
                    }
                ]
            },
            "ScriptLogList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScriptLogMeta"
                        },
                        "description": "Array of scriptLogMeta."
                    }
                }
            },
            "ScriptLogMeta": {
                "type": "object",
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/Log"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time when reload ended."
                    },
                    "success": {
                        "type": "boolean",
                        "description": "True if the reload was successful."
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Duration of reload (ms)."
                    },
                    "reloadId": {
                        "type": "string",
                        "description": "Reload identifier."
                    }
                }
            },
            "ScriptMeta": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Script size."
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "Script id."
                    },
                    "modifierId": {
                        "type": "string",
                        "description": "User last modifying script version."
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "Script version last modification time."
                    },
                    "versionMessage": {
                        "type": "string",
                        "description": "Description of this script version"
                    }
                }
            },
            "ScriptMetaList": {
                "type": "object",
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/NavigationLinks"
                    },
                    "scripts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScriptMeta"
                        },
                        "description": "Script versions metadata."
                    }
                }
            },
            "ScriptVersion": {
                "type": "object",
                "properties": {
                    "script": {
                        "type": "string",
                        "description": "Script text."
                    },
                    "versionMessage": {
                        "type": "string",
                        "description": "Description of this script version"
                    }
                }
            },
            "SimplifiedClassifications": {
                "type": "array",
                "items": {
                    "enum": [
                        "dimension",
                        "measure",
                        "temporal",
                        "geographical"
                    ],
                    "type": "string"
                }
            },
            "sortedcomparisonfields": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "list": {
                                "$ref": "#/components/schemas/comparisonfields"
                            },
                            "absoluteDiffAsc": {
                                "$ref": "#/components/schemas/comparisonfields"
                            },
                            "relativeDiffAsc": {
                                "$ref": "#/components/schemas/comparisonfields"
                            },
                            "absoluteDiffDesc": {
                                "$ref": "#/components/schemas/comparisonfields"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            },
                            "relativeDiffDesc": {
                                "$ref": "#/components/schemas/comparisonfields"
                            }
                        }
                    }
                ]
            },
            "sortedcomparisonobjresponsetime": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "list": {
                                "$ref": "#/components/schemas/comparisonobjresponsetime"
                            },
                            "absoluteDiffAsc": {
                                "$ref": "#/components/schemas/comparisonobjresponsetime"
                            },
                            "relativeDiffAsc": {
                                "$ref": "#/components/schemas/comparisonobjresponsetime"
                            },
                            "absoluteDiffDesc": {
                                "$ref": "#/components/schemas/comparisonobjresponsetime"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            },
                            "relativeDiffDesc": {
                                "$ref": "#/components/schemas/comparisonobjresponsetime"
                            }
                        }
                    }
                ]
            },
            "sortedcomparisonoobjheavy": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "list": {
                                "$ref": "#/components/schemas/comparisonoobjheavy"
                            },
                            "absoluteDiffAsc": {
                                "$ref": "#/components/schemas/comparisonoobjheavy"
                            },
                            "relativeDiffAsc": {
                                "$ref": "#/components/schemas/comparisonoobjheavy"
                            },
                            "absoluteDiffDesc": {
                                "$ref": "#/components/schemas/comparisonoobjheavy"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            },
                            "relativeDiffDesc": {
                                "$ref": "#/components/schemas/comparisonoobjheavy"
                            }
                        }
                    }
                ]
            },
            "sortedcomparisontables": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "list": {
                                "$ref": "#/components/schemas/comparisontables"
                            },
                            "absoluteDiffAsc": {
                                "$ref": "#/components/schemas/comparisontables"
                            },
                            "relativeDiffAsc": {
                                "$ref": "#/components/schemas/comparisontables"
                            },
                            "absoluteDiffDesc": {
                                "$ref": "#/components/schemas/comparisontables"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            },
                            "relativeDiffDesc": {
                                "$ref": "#/components/schemas/comparisontables"
                            }
                        }
                    }
                ]
            },
            "SymbolFrequency": {
                "type": "object",
                "properties": {
                    "Symbol": {
                        "$ref": "#/components/schemas/SymbolValue"
                    },
                    "Frequency": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Frequency of the above symbol in the field"
                    }
                }
            },
            "SymbolValue": {
                "type": "object",
                "properties": {
                    "Text": {
                        "type": "string",
                        "description": "String value of the symbol. This parameter is optional and present only if Symbol is a string."
                    },
                    "Number": {
                        "type": "number",
                        "format": "double",
                        "description": "Numeric value of the symbol. NaN otherwise."
                    }
                }
            },
            "TableMetadata": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the table."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Table comment."
                    },
                    "is_loose": {
                        "type": "boolean",
                        "description": "If set to true, the table is loose due to circular connection.\nThe default value is false."
                    },
                    "byte_size": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Static RAM memory used in bytes."
                    },
                    "is_system": {
                        "type": "boolean",
                        "description": "If set to true, the table is a system table.\nThe default value is false."
                    },
                    "no_of_rows": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of rows."
                    },
                    "is_semantic": {
                        "type": "boolean",
                        "description": "If set to true, the table is semantic.\nThe default value is false."
                    },
                    "no_of_fields": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of fields."
                    },
                    "no_of_key_fields": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of key fields."
                    }
                }
            },
            "TableProfilingData": {
                "type": "object",
                "properties": {
                    "NoOfRows": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of rows in the table."
                    },
                    "FieldProfiling": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FieldInTableProfilingData"
                        },
                        "description": "Field values profiling info"
                    }
                }
            },
            "UpdateApp": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/AppUpdateAttributes"
                    }
                }
            },
            "UpdateOwner": {
                "type": "object",
                "properties": {
                    "ownerId": {
                        "type": "string"
                    }
                }
            },
            "UpdateSpace": {
                "type": "object",
                "properties": {
                    "spaceId": {
                        "type": "string"
                    }
                }
            },
            "UsageEnum": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "ANALYTICS",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "DATA_PREPARATION",
                        "x-qlik-const": 1
                    },
                    {
                        "title": "DATAFLOW_PREP",
                        "x-qlik-const": 2
                    },
                    {
                        "title": "SINGLE_TABLE_PREP",
                        "x-qlik-const": 3
                    }
                ]
            },
            "UserPrivileges": {
                "type": "string",
                "oneOf": [
                    {
                        "title": "can_create_app",
                        "x-qlik-const": 0
                    },
                    {
                        "title": "can_import_app",
                        "x-qlik-const": 1
                    },
                    {
                        "title": "can_create_session_app",
                        "x-qlik-const": 2
                    }
                ]
            },
            "Assistant": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "tags",
                    "ownerId",
                    "createdBy",
                    "createdAt",
                    "updatedBy",
                    "updatedAt",
                    "tenantId",
                    "spaceId",
                    "knowledgeBases",
                    "welcomeMessage",
                    "customProperties"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the assistant."
                    },
                    "name": {
                        "type": "string",
                        "example": "Organization-wide Assistant",
                        "description": "The name of the assistant."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "The list of tags associated with the assistant."
                    },
                    "title": {
                        "type": "string",
                        "example": "Assistant for Sales activities",
                        "description": "The title of the assistant."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the assistant owner."
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the space containing the assistant."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the assistant tenant."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the assistant was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "Unique identifier of the user who created the assistant."
                    },
                    "hasAvatar": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates if the assistant has an avatar."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the assistant was updated."
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "Unique identifier of the user who last updated the assistant."
                    },
                    "description": {
                        "type": "string",
                        "example": "This assistant is used for...",
                        "description": "The description of the assistant."
                    },
                    "systemMessage": {
                        "type": "string",
                        "example": "You are helpful Sales assistant. Provide concise and actionable insights.",
                        "description": "System prompt setting up conversation context.",
                        "x-qlik-deprecated": true
                    },
                    "knowledgeBases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "507f191e810c19729de860ea"
                        ],
                        "description": "List of knowledgebases the assistant is using."
                    },
                    "welcomeMessage": {
                        "type": "string",
                        "example": "Welcome to Sales process support Assistant.",
                        "description": "Initial message in the chat conversation."
                    },
                    "customProperties": {
                        "type": "object",
                        "example": {
                            "customErrors": {
                                "outsideScopeError": "Outside of scope error",
                                "complexQuestionError": "Complex question error",
                                "promptInjectionError": "Prompt injection error"
                            }
                        },
                        "description": "freeform JSON to allow custom customization options."
                    },
                    "defaultPromptType": {
                        "enum": [
                            "thread",
                            "oneshot"
                        ],
                        "type": "string",
                        "example": "thread",
                        "description": "Default prompt type for the assistant."
                    },
                    "orderedStarterIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "507f191e810c19729de860ea",
                            "787f191e810c19729de860er"
                        ],
                        "description": "List of starter IDs in the order they will be sorted."
                    }
                }
            },
            "assistantsResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Assistant"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "ChunksRefs": {
                "type": "object",
                "example": {
                    "chunkIds": [
                        "c2ef42d9-7164-4fb0-bdbb-6534ae37263e",
                        "486ada2c-f895-4961-8ba5-7995f1026d26"
                    ]
                },
                "required": [
                    "chunkIds"
                ],
                "properties": {
                    "chunkIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identifier of the Chunk."
                        }
                    }
                }
            },
            "createAssistant": {
                "type": "object",
                "required": [
                    "name",
                    "title",
                    "description",
                    "tags",
                    "spaceId",
                    "knowledgeBases",
                    "welcomeMessage",
                    "customProperties"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Organization-wide assistant",
                        "description": "The name of the assistant."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "The list of tags for the assistant."
                    },
                    "title": {
                        "type": "string",
                        "example": "Assistant for Sales activities",
                        "description": "The title of the assistant."
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the space to contain the assistant."
                    },
                    "description": {
                        "type": "string",
                        "example": "This assistant is used for...",
                        "description": "The description of the assistant."
                    },
                    "systemMessage": {
                        "type": "string",
                        "example": "You are helpful Sales assistant. Provide concise and actionable insights.",
                        "description": "System prompt setting up conversation context.",
                        "x-qlik-deprecated": true
                    },
                    "knowledgeBases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "507f191e810c19729de860ea"
                        ],
                        "description": "List of knowledgebases the assistant is using."
                    },
                    "welcomeMessage": {
                        "type": "string",
                        "example": "Welcome to Sales process support Assistant.",
                        "description": "Initial message in the chat conversation."
                    },
                    "customProperties": {
                        "type": "object",
                        "example": {
                            "customErrors": {
                                "outsideScopeError": "Outside of scope error",
                                "complexQuestionError": "Complex question error",
                                "promptInjectionError": "Prompt injection error"
                            }
                        },
                        "description": "freeform JSON to allow custom customization options."
                    },
                    "defaultPromptType": {
                        "enum": [
                            "thread",
                            "oneshot"
                        ],
                        "type": "string",
                        "example": "thread",
                        "description": "Default prompt type for the assistant."
                    },
                    "orderedStarterIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "507f191e810c19729de860ea",
                            "787f191e810c19729de860er"
                        ],
                        "description": "List of starter IDs in the order they will be sorted."
                    }
                }
            },
            "createAssistantWithAvatar": {
                "type": "object",
                "required": [
                    "name",
                    "title",
                    "description",
                    "tags",
                    "spaceId",
                    "knowledgeBases",
                    "welcomeMessage",
                    "customProperties"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Organization-wide assistant",
                        "description": "The name of the assistant."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "The list of tags for the assistant."
                    },
                    "title": {
                        "type": "string",
                        "example": "Assistant for Sales activities",
                        "description": "The title of the assistant."
                    },
                    "avatar": {
                        "type": "string",
                        "format": "file",
                        "description": "user uploaded avatar, filetype must be png"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the space to contain the assistant."
                    },
                    "description": {
                        "type": "string",
                        "example": "This assistant is used for...",
                        "description": "The description of the assistant."
                    },
                    "systemMessage": {
                        "type": "string",
                        "example": "You are helpful Sales assistant. Provide concise and actionable insights.",
                        "description": "System prompt setting up conversation context.",
                        "x-qlik-deprecated": true
                    },
                    "knowledgeBases": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "507f191e810c19729de860ea"
                        ],
                        "description": "List of knowledgebases the assistant is using."
                    },
                    "welcomeMessage": {
                        "type": "string",
                        "example": "Welcome to Sales process support Assistant.",
                        "description": "Initial message in the chat conversation."
                    },
                    "customProperties": {
                        "type": "object",
                        "example": {
                            "customErrors": {
                                "outsideScopeError": "Outside of scope error",
                                "complexQuestionError": "Complex question error",
                                "promptInjectionError": "Prompt injection error"
                            }
                        },
                        "description": "freeform JSON to allow custom customization options."
                    },
                    "defaultPromptType": {
                        "enum": [
                            "thread",
                            "oneshot"
                        ],
                        "type": "string",
                        "example": "thread",
                        "description": "Default prompt type for the assistant."
                    }
                }
            },
            "createFeedback": {
                "type": "object",
                "required": [
                    "vote",
                    "reason"
                ],
                "properties": {
                    "vote": {
                        "type": "integer",
                        "example": 1,
                        "description": "Integer representation of feedback given (-1 = negative, 1 = positive)."
                    },
                    "reason": {
                        "type": "string",
                        "example": "inaccurate | irrelevant | repetitive | unhelpful | other",
                        "description": "Reason for feedback."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Optional comment for feedback."
                    }
                }
            },
            "createInteraction": {
                "type": "object",
                "required": [
                    "request",
                    "response",
                    "sources"
                ],
                "properties": {
                    "request": {
                        "type": "string",
                        "example": "Where was Genghis Khan buried?",
                        "description": "Interaction request content."
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageSource"
                        },
                        "description": "List of sources used to generate AI messages (interactions)."
                    },
                    "rejected": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicator the system marked request as suspicious."
                    },
                    "response": {
                        "type": "string",
                        "example": "Somewhere in an unmarked grave",
                        "description": "Interaction response content."
                    },
                    "rejectionReason": {
                        "$ref": "#/components/schemas/rejectionReason"
                    }
                }
            },
            "createReview": {
                "type": "object",
                "required": [
                    "reviewStatus"
                ],
                "properties": {
                    "reviewStatus": {
                        "type": "string",
                        "example": "reviewed | unreviewed",
                        "description": "Review status."
                    }
                }
            },
            "createStarter": {
                "type": "object",
                "required": [
                    "question",
                    "additionalContext",
                    "recommendedAnswer"
                ],
                "properties": {
                    "question": {
                        "type": "string",
                        "example": "Where was Genghis Khan buried?",
                        "description": "Starter sample question."
                    },
                    "followups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/followup"
                        },
                        "maxItems": 5,
                        "description": "List of followups."
                    },
                    "additionalContext": {
                        "type": "string",
                        "description": "Optional context collected from curated meant to be leveraged by LLM-based question recommendation system."
                    },
                    "recommendedAnswer": {
                        "$ref": "#/components/schemas/recommendedAnswer"
                    }
                }
            },
            "createThread": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Initial conversation",
                        "description": "The name of the thread."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was updated."
                    }
                }
            },
            "errorResponse": {
                "type": "object",
                "example": {
                    "error": "util.Error",
                    "errors": [
                        {
                            "code": "LICENSES-123",
                            "title": "error title"
                        }
                    ],
                    "message": "error message"
                },
                "required": [
                    "errors",
                    "error",
                    "message"
                ],
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "Error type",
                        "x-qlik-deprecated": true
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "Error code"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Error title"
                                },
                                "detail": {
                                    "type": "string",
                                    "description": "Additional error detail."
                                }
                            }
                        }
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "x-qlik-deprecated": true
                    }
                }
            },
            "errorResponseCode": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                }
            },
            "Feedback": {
                "type": "object",
                "required": [
                    "id",
                    "vote",
                    "createdAt",
                    "sources",
                    "reviewStatus",
                    "reason",
                    "reviewerId",
                    "comment"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique feedback identifier."
                    },
                    "vote": {
                        "type": "integer",
                        "example": 1,
                        "description": "Integer representation of feedback given (-1 = negative, 1 = positive)."
                    },
                    "reason": {
                        "type": "string",
                        "example": "inaccurate | irrelevant | repetitive | unhelpful | other",
                        "description": "Reason for feedback."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Optional comment for feedback."
                    },
                    "reviewedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "description": "Datetime when the feedback was reviewed."
                    },
                    "reviewerId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique feedback reviewer identifier."
                    },
                    "reviewStatus": {
                        "type": "string",
                        "example": "reviewed | unreviewed",
                        "description": "Feedback review status."
                    }
                }
            },
            "feedbackPatchArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/JSONPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/reason",
                        "value": "irrelevant"
                    }
                ],
                "description": "An array of JSON Patch documents."
            },
            "feedbackSummary": {
                "type": "object",
                "required": [
                    "likes",
                    "dislikes",
                    "interactions",
                    "reviews"
                ],
                "properties": {
                    "likes": {
                        "type": "integer",
                        "description": "Amount of likes for a thread or an assistant."
                    },
                    "other": {
                        "type": "integer",
                        "description": "Count of answers which users disliked and gave \"other\" as reason."
                    },
                    "reviews": {
                        "type": "integer",
                        "description": "Amount of reviews for a thread or an assistant."
                    },
                    "dislikes": {
                        "type": "integer",
                        "description": "Amount of dislikes for a thread or an assistant."
                    },
                    "unhelpful": {
                        "type": "integer",
                        "description": "Count of answers which users marked as \"unhelpful\"."
                    },
                    "inaccurate": {
                        "type": "integer",
                        "description": "Count of answers which users marked as \"inaccurate\"."
                    },
                    "irrelevant": {
                        "type": "integer",
                        "description": "Count of answers which users marked as \"irrelevant\"."
                    },
                    "repetitive": {
                        "type": "integer",
                        "description": "Count of answers which users marked as \"repetitive\"."
                    },
                    "unanswered": {
                        "type": "integer",
                        "description": "Count of questions for which the assistant provided no answer."
                    },
                    "interactions": {
                        "type": "integer",
                        "description": "Amount of interactions for a thread or an assistant."
                    }
                }
            },
            "followup": {
                "type": "object",
                "required": [
                    "question",
                    "followups",
                    "id",
                    "recommendedAnswer",
                    "additionalContext"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the Followup."
                    },
                    "question": {
                        "type": "string",
                        "example": "Where was Genghis Khan buried?",
                        "description": "Starter sample question."
                    },
                    "additionalContext": {
                        "type": "string",
                        "description": "Optional context collected from curated meant to be leveraged by LLM-based question recommendation system."
                    },
                    "recommendedAnswer": {
                        "$ref": "#/components/schemas/recommendedAnswer"
                    }
                }
            },
            "Interaction": {
                "type": "object",
                "required": [
                    "id",
                    "request",
                    "response",
                    "createdAt",
                    "updatedAt",
                    "sources",
                    "ownerId",
                    "threadId"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303"
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "65e310c43fb1cf46654e0878",
                        "description": "Unique identifier of user which created the interaction."
                    },
                    "request": {
                        "type": "string",
                        "example": "Where was Genghis Khan buried?",
                        "description": "Interaction request content."
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageSource"
                        },
                        "description": "List of sources used to generate AI messages (interactions)."
                    },
                    "feedback": {
                        "$ref": "#/components/schemas/Feedback"
                    },
                    "rejected": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicator the system marked request as suspicious."
                    },
                    "response": {
                        "type": "string",
                        "example": "Somewhere in an unmarked grave",
                        "description": "Interaction response content."
                    },
                    "threadId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "125c24c4-668c-4c97-bef8-30d910169913",
                        "description": "ID of the thread to which the interaction belongs."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the interaction was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:55.52Z",
                        "readOnly": true,
                        "description": "Datetime when the interaction was updated."
                    }
                }
            },
            "interactionsResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Interaction"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "JSONPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace",
                            "set",
                            "unset",
                            "add",
                            "renew"
                        ],
                        "type": "string",
                        "description": "The operation to be performed. The fields `set`, `unset`, and `add` are deprecated."
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/roles",
                            "/assignedRoles",
                            "/inviteExpiry",
                            "/preferredZoneinfo",
                            "/preferredLocale",
                            "/status",
                            "/assignedGroups"
                        ],
                        "type": "string",
                        "description": "A JSON Pointer. The field `roles` is deprecated."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "array"
                            },
                            {
                                "$ref": "#/components/schemas/RefIDs"
                            },
                            {
                                "$ref": "#/components/schemas/RefNames"
                            },
                            {
                                "$ref": "#/components/schemas/AssignedGroupsRefNames"
                            }
                        ],
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "JSONPatchArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/JSONPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "John"
                    },
                    {
                        "op": "replace",
                        "path": "/assignedRoles",
                        "value": [
                            {
                                "name": "Developer"
                            }
                        ]
                    },
                    {
                        "op": "replace",
                        "path": "/email",
                        "value": "unicorn@corp.example"
                    },
                    {
                        "op": "replace",
                        "path": "/preferredZoneInfo",
                        "value": "America/Halifax"
                    },
                    {
                        "op": "replace",
                        "path": "/preferredLocale",
                        "value": "en_US_POSIX"
                    },
                    {
                        "op": "replace",
                        "path": "/status",
                        "value": "active"
                    }
                ],
                "description": "An array of JSON Patch documents"
            },
            "Message": {
                "type": "object",
                "required": [
                    "id",
                    "role",
                    "content",
                    "createdAt",
                    "sources"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303"
                    },
                    "role": {
                        "type": "string",
                        "example": "ai",
                        "description": "human or ai role."
                    },
                    "content": {
                        "type": "string",
                        "example": "Somewhere in an unmarked grave",
                        "description": "Message content."
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageSource"
                        },
                        "description": "List of sources used to generate AI messages (interactions)."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the interaction was created."
                    }
                }
            },
            "MessageSource": {
                "type": "object",
                "required": [
                    "knowledgebaseId",
                    "datasourceId",
                    "documentId",
                    "source",
                    "chunks"
                ],
                "properties": {
                    "chunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageSourceChunk"
                        },
                        "description": "List of Chunks used for \"AI\" generated messages."
                    },
                    "source": {
                        "type": "string",
                        "example": "Reference.md",
                        "description": "Path to the document used."
                    },
                    "documentId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303",
                        "description": "Reference to Document used for \"AI\" generated messages."
                    },
                    "datasourceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303",
                        "description": "Reference to DataSource used for \"AI\" generated messages."
                    },
                    "lastIndexedAt": {
                        "type": "string",
                        "example": "2021-10-02T14:20:50.52Z",
                        "description": "Datetime when the knowledgebase was last indexed."
                    },
                    "knowledgebaseId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303",
                        "description": "Reference to KnowledgeBase used for \"AI\" generated messages."
                    }
                }
            },
            "MessageSourceChunk": {
                "type": "object",
                "required": [
                    "chunkId"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Chunk text for \"AI\" generated message source."
                    },
                    "chunkId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303",
                        "description": "Chunk unique identifier for \"AI\" generated message source."
                    }
                }
            },
            "pageLink": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    }
                }
            },
            "pageLinks": {
                "type": "object",
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/pageLink"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/pageLink"
                    },
                    "self": {
                        "$ref": "#/components/schemas/pageLink"
                    }
                }
            },
            "recommendedAnswer": {
                "type": "object",
                "required": [
                    "content",
                    "contentType"
                ],
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Starter answer content."
                    },
                    "contentType": {
                        "type": "string",
                        "example": "text | markdown | html",
                        "description": "Answer type of content."
                    }
                }
            },
            "rejectionReason": {
                "enum": [
                    1,
                    2,
                    3
                ],
                "type": "integer",
                "example": 1,
                "description": "Rejection reason for a question:\n  * 1 - PROMPT_INJECTION\n  * 2 - OUT_OF_CONTEXT\n  * 3 - TOO_COMPLEX\n"
            },
            "resultMeta": {
                "type": "object",
                "properties": {
                    "countTotal": {
                        "type": "integer"
                    }
                }
            },
            "sourcesPlaintext": {
                "type": "object",
                "properties": {
                    "textByChunkId": {
                        "type": "object",
                        "example": {
                            "chunk1_id": "chunk1_text",
                            "chunk2_id": "chunk2_text"
                        },
                        "additionalProperties": true
                    }
                }
            },
            "Starter": {
                "type": "object",
                "required": [
                    "id",
                    "question",
                    "createdAt",
                    "updatedAt",
                    "additionalContext",
                    "recommendedAnswer"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the starter."
                    },
                    "question": {
                        "type": "string",
                        "example": "Where was Genghis Khan buried?",
                        "description": "Starter sample question."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the starter was created."
                    },
                    "followups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/followup"
                        },
                        "description": "List of followups."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the starter was updated."
                    },
                    "additionalContext": {
                        "type": "string",
                        "description": "Optional context collected from curated meant to be leveraged by LLM-based question recommendation system."
                    },
                    "recommendedAnswer": {
                        "$ref": "#/components/schemas/recommendedAnswer"
                    }
                }
            },
            "startersResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Starter"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "Thread": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "ownerId",
                    "createdAt",
                    "updatedAt",
                    "hasFeedback",
                    "favorite",
                    "summaryStats"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the thread."
                    },
                    "name": {
                        "type": "string",
                        "example": "Initial conversation",
                        "description": "The name of the thread."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "10d347c4-f28a-4faf-93f0-48e781aaf303"
                    },
                    "favorite": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "If thread is marked as favorite."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was created."
                    },
                    "deletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was deleted."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was updated."
                    },
                    "hasFeedback": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "If feedback was provided for a thread interaction."
                    },
                    "summaryStats": {
                        "$ref": "#/components/schemas/feedbackSummary"
                    }
                }
            },
            "threadPatchArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/JSONPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "new name"
                    }
                ],
                "description": "An array of JSON Patch documents."
            },
            "threadsResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Thread"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "ThreadWithMessages": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "createdAt",
                    "updatedAt",
                    "ownerId",
                    "hasFeedback",
                    "favorite",
                    "messages",
                    "summaryStats"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the thread."
                    },
                    "name": {
                        "type": "string",
                        "example": "Initial conversation",
                        "description": "The name of the thread."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the thread owner."
                    },
                    "favorite": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "If thread is marked as favorite."
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was created."
                    },
                    "deletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was deleted."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the thread was updated."
                    },
                    "hasFeedback": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "If feedback was provided for a thread interaction."
                    },
                    "summaryStats": {
                        "$ref": "#/components/schemas/feedbackSummary"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "traceId": {
                        "type": "string",
                        "description": "A way to trace the source of the error."
                    }
                }
            },
            "EventExtensions": {
                "type": "object",
                "title": "Additional metadata and custom fields.",
                "properties": {
                    "actor": {
                        "type": "object",
                        "properties": {
                            "sub": {
                                "type": "string",
                                "description": "Opaque value identifying impersonating entity."
                            },
                            "subType": {
                                "type": "string",
                                "description": "The type of the impersonating entity."
                            }
                        },
                        "description": "Specifies the entity performing the action on behalf of another party listed as triggering the action."
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Id of the owner of the resource affected by the eventContext."
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "Id of the space related to the action performed on the eventContext."
                    },
                    "updates": {
                        "description": "Might be present if the action is of type \"updated\" and should contain information about the changes made to the resource."
                    },
                    "topLevelResourceId": {
                        "type": "string",
                        "description": "If the event originated from a sub resource the topLevelResourceId contains the id of the top level resource associated with the sub resource."
                    }
                },
                "description": "The availability of the properties depends on the event and the context it was triggered in."
            },
            "GetArchiveResult": {
                "type": "object",
                "title": "GetArchiveResult is the result type of the audit service GetArchive method.",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "description": "List of archived events. The structure of the events depend on their type and version."
                    }
                }
            },
            "GetByIDResult": {
                "type": "object",
                "title": "GetByIDResult is the result type of the audit service GetByID method.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The resource item's unique identifier."
                    },
                    "data": {
                        "type": "object",
                        "description": "Additional information about the event's details. The structure depends on the type and version of the event."
                    },
                    "links": {
                        "$ref": "#/components/schemas/GetLinks"
                    },
                    "source": {
                        "type": "string",
                        "description": "The source of the event message, usually the producing service."
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user who performed the action that triggered the event."
                    },
                    "eventId": {
                        "type": "string",
                        "description": "The event's unique identifier."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The ID of the tenant that owns the item. This is populated using the JWT."
                    },
                    "eventTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the event happened."
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The type of event that describes committed action."
                    },
                    "extensions": {
                        "$ref": "#/components/schemas/EventExtensions"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type that content is encoded in, always \"application/json\"."
                    },
                    "eventTypeVersion": {
                        "type": "string",
                        "description": "The version of the event type."
                    }
                }
            },
            "GetLinks": {
                "type": "object",
                "title": "GetLinks are the HAL links for a single result.",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/href"
                    }
                }
            },
            "GetObjectsResult": {
                "type": "object",
                "title": "GetObjectsResult is the result type of audit service generic resources.",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of requested resources."
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                }
            },
            "GetResult": {
                "type": "object",
                "title": "GetResult is the result type of the audit service Get method.",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetByIDResult"
                        },
                        "description": "List of audit items."
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                }
            },
            "GetSettingsResult": {
                "type": "object",
                "title": "GetSettingsResult is the result type of a getSettings request.",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "EventTTL": {
                                "type": "integer",
                                "description": "The events TTL in seconds."
                            },
                            "ArchiveEnabled": {
                                "type": "boolean",
                                "description": "Is Long Term Storage archiving enabled?."
                            }
                        },
                        "description": "Server configuration options."
                    }
                }
            },
            "ListLinks": {
                "type": "object",
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/Page"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/Page"
                    },
                    "self": {
                        "$ref": "#/components/schemas/Self"
                    }
                }
            },
            "AutomationConnectionChangeOwnerObject": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                        "description": "The unique identifier of the new owner."
                    }
                }
            },
            "AutomationConnectionChangeSpaceObject": {
                "type": "object",
                "properties": {
                    "spaceId": {
                        "type": "string",
                        "example": "5f0f78b239ff4f0001234567",
                        "description": "The unique identifier of the new space."
                    }
                }
            },
            "AutomationConnectionCheckObject": {
                "type": "object",
                "properties": {
                    "isConnected": {
                        "type": "boolean",
                        "description": "The connection status of the automation connection. When true, the automation connection is connected."
                    }
                }
            },
            "AutomationConnectionCreationObject": {
                "type": "object",
                "required": [
                    "connectorId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "connection",
                        "description": "The name of the created automation connection."
                    },
                    "params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationConnectionParamCreateObject"
                        }
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "5f0f78b239ff4f0001234567",
                        "description": "The unique identifier of the space in which the automation connection is created."
                    },
                    "connectorId": {
                        "type": "string",
                        "example": "3004e850-1985-11ee-b6df-8d800b305320",
                        "description": "The unique identifier of the connector from which the automation connection is created."
                    }
                }
            },
            "AutomationConnectionDetailObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "description": "The unique identifier of the automation connection."
                    },
                    "name": {
                        "type": "string",
                        "example": "connection",
                        "description": "The name of the automation connection."
                    },
                    "error": {
                        "type": "object",
                        "description": "This contains the error message if a connection is being created with an issue."
                    },
                    "params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationConnectionParamObject"
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                        "description": "The unique identifier of the owner of the automation connection."
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "5f0f78b239ff4f0001234567",
                        "description": "The space ID of the automation connection."
                    },
                    "redirect": {
                        "type": "string",
                        "description": "The redirect of the OAuth account."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "description": "The timestamp when the automation connection was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "description": "The timestamp when the automation connection was updated."
                    },
                    "connectorId": {
                        "type": "string",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "description": "The unique identifier of the automation connector."
                    },
                    "isConnected": {
                        "type": "boolean",
                        "example": true,
                        "description": "The connection status of the automation connection. When true, the automation connection is connected."
                    },
                    "oauthAccountName": {
                        "type": "string",
                        "example": "oauth",
                        "description": "The name of the OAuth account associated with the automation connection."
                    }
                }
            },
            "AutomationConnectionParamCreateObject": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "username",
                        "description": "The name of the automation connection parameter."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the automation connection parameter option."
                    }
                }
            },
            "AutomationConnectionParamObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "39a90780-8874-11ee-b16c-89512345678",
                        "description": "The unique identifier of the automation connection parameter."
                    },
                    "meta": {
                        "type": "array",
                        "items": {},
                        "description": "The metadata of the automation connection parameter."
                    },
                    "name": {
                        "type": "string",
                        "example": "region",
                        "description": "The name of the automation connection parameter."
                    },
                    "order": {
                        "type": "integer",
                        "example": 1,
                        "description": "The order that the automation connection configuration fields should be displayed in."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the automation connection parameter."
                    },
                    "fieldType": {
                        "type": "string",
                        "example": "enum",
                        "description": "The field type of the automation connection parameter."
                    },
                    "isOptional": {
                        "type": "boolean",
                        "example": "false",
                        "description": "When true, the parameter is optional."
                    },
                    "exampleValue": {
                        "type": "string",
                        "description": "The example value of the automation connection parameter."
                    },
                    "paramOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationConnectionParamOptionObject"
                        }
                    },
                    "documentation": {
                        "type": "string",
                        "description": "The documentation of the automation connection parameter."
                    }
                }
            },
            "AutomationConnectionParamOptionObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "39a90780-8874-11ee-b16c-89512345678",
                        "description": "The unique identifier of the automation connection parameter option."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the automation connection parameter option."
                    }
                }
            },
            "AutomationConnectionParamPutObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "39a90780-8874-11ee-b16c-89512345678",
                        "description": "The unique identifier of the automation connection parameter option."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the automation connection parameter option."
                    }
                }
            },
            "AutomationConnectionPutRequestObject": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "connection",
                        "description": "The new name of the automation connection to be renamed to."
                    },
                    "params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationConnectionParamPutObject"
                        }
                    }
                }
            },
            "AutomationConnectionsList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationConnectionsListObject"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "AutomationConnectionsListObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "description": "The unique identifier of an automation connection."
                    },
                    "name": {
                        "type": "string",
                        "example": "auto conn",
                        "description": "The name of an automation connection.",
                        "x-qlik-filterable": true
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                        "description": "The unique identifier of the owner of the automation connection.",
                        "x-qlik-filterable": true
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "5f0f78b239ff4f0001234567",
                        "description": "The space ID of the automation connection.",
                        "x-qlik-filterable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "description": "The timestamp when the automation connection is created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "description": "The timestamp when the automation connection is updated."
                    },
                    "connectorId": {
                        "type": "string",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "description": "The unique identifier of the connector the automation connection is created from.",
                        "x-qlik-filterable": true
                    },
                    "isConnected": {
                        "type": "boolean",
                        "example": true,
                        "description": "Returns true if the automtion connection is connected."
                    }
                }
            },
            "PaginationLink": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "The URL for the pagination link."
                    }
                },
                "additionalProperties": false
            },
            "AutomationDetailRequestObject": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "enum": [
                            "available",
                            "unavailable",
                            "disabled"
                        ],
                        "type": "string",
                        "default": "available",
                        "example": "available"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScheduleRequestObject"
                        }
                    },
                    "workspace": {
                        "type": "object",
                        "description": "The workspace generated by the Qlik Application Automations editor."
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "AutomationDetailResponseObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "enum": [
                            "available",
                            "unavailable",
                            "disabled"
                        ],
                        "type": "string",
                        "default": "available",
                        "example": "available"
                    },
                    "lastRun": {
                        "$ref": "#/components/schemas/RunDetailResponseObject"
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                        "readOnly": true
                    },
                    "runMode": {
                        "enum": [
                            "manual",
                            "scheduled",
                            "triggered",
                            "webhook"
                        ],
                        "type": "string",
                        "example": "triggered",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "lastRunAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScheduleResponseObject"
                        }
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "workspace": {
                        "type": "object",
                        "description": "The workspace generated by the Qlik Application Automations editor."
                    },
                    "snippetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "e0e720d0-4947-11ec-a1d2-9559fa35801d"
                        ],
                        "readOnly": true,
                        "description": "A list of snippets that were detected inside the workspace. This includes snippet blocks that are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "description": {
                        "type": "string"
                    },
                    "endpointIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "9d94bef0-b28c-11eb-8dba-01593c457362",
                            "53a6fb70-b28f-11eb-b601-b545a40867e0"
                        ],
                        "readOnly": true,
                        "description": "A list of endpoints that were detected inside the workspace. This includes Endpoints present in blocks which are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "connectorIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "0d87808f-27c0-11ea-921c-022e6b5ea1e2",
                            "0d86ee8a-27c0-11ea-921c-022e6b5ea1e2"
                        ],
                        "readOnly": true,
                        "description": "A list of connectors that were detected the workspace. This includes Connectors present in blocks which are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "lastRunStatus": {
                        "enum": [
                            "failed",
                            "finished",
                            "finished with warnings",
                            "must stop",
                            "not started",
                            "paused",
                            "running",
                            "starting",
                            "stopped"
                        ],
                        "type": "string",
                        "example": "finished",
                        "readOnly": true
                    },
                    "executionToken": {
                        "type": "string",
                        "example": "aZXuEogT9X3le0k0WXMBnzuYKq4xRlkDnurjs8NVhEAAW1BYx8C1PpIl3ielgRb1",
                        "readOnly": true
                    }
                }
            },
            "AutomationList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomationListObject"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "AutomationListObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "x-qlik-filterable": true
                    },
                    "state": {
                        "enum": [
                            "available",
                            "unavailable",
                            "disabled"
                        ],
                        "type": "string",
                        "default": "available",
                        "example": "available"
                    },
                    "lastRun": {
                        "$ref": "#/components/schemas/RunDetailResponseObject"
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                        "readOnly": true,
                        "x-qlik-filterable": true
                    },
                    "runMode": {
                        "enum": [
                            "manual",
                            "scheduled",
                            "triggered",
                            "webhook"
                        ],
                        "type": "string",
                        "example": "triggered",
                        "readOnly": true,
                        "x-qlik-filterable": true
                    },
                    "duration": {
                        "type": "integer",
                        "example": "9001",
                        "readOnly": true,
                        "description": "Duration of the last run, indicated in seconds. Calculated from start and stop times",
                        "x-qlik-filterable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "lastRunAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "workspace": {
                        "type": "object",
                        "example": {},
                        "readOnly": true,
                        "description": "The workspace contains the JSON representation of the used blocks"
                    },
                    "snippetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "e0e720d0-4947-11ec-a1d2-9559fa35801d"
                        ],
                        "readOnly": true,
                        "description": "A list of snippets that were detected inside the workspace. This includes snippet blocks that are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "description": {
                        "type": "string"
                    },
                    "endpointIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "9d94bef0-b28c-11eb-8dba-01593c457362",
                            "53a6fb70-b28f-11eb-b601-b545a40867e0"
                        ],
                        "readOnly": true,
                        "description": "A list of endpoints that were detected inside the workspace. This includes Endpoints present in blocks which are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "connectorIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "0d87808f-27c0-11ea-921c-022e6b5ea1e2",
                            "0d86ee8a-27c0-11ea-921c-022e6b5ea1e2"
                        ],
                        "readOnly": true,
                        "description": "A list of connectors that were detected the workspace. This includes Connectors present in blocks which are not connected to other blocks. Order of guids is not guaranteed."
                    },
                    "lastRunStatus": {
                        "enum": [
                            "failed",
                            "finished",
                            "finished with warnings",
                            "must stop",
                            "not started",
                            "paused",
                            "running",
                            "starting",
                            "stopped"
                        ],
                        "type": "string",
                        "example": "finished",
                        "readOnly": true,
                        "x-qlik-filterable": true
                    },
                    "executionToken": {
                        "type": "string",
                        "example": "aZXuEogT9X3le0k0WXMBnzuYKq4xRlkDnurjs8NVhEAAW1BYx8C1PpIl3ielgRb1",
                        "readOnly": true
                    }
                }
            },
            "AutomationUsageObject": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "description": "The unique identifier for the automation.",
                        "x-qlik-filterable": true
                    },
                    "name": {
                        "type": "string",
                        "example": "My Automation.",
                        "maxLength": 50,
                        "description": "The name for the automation."
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "KP1zJiPDn0gsla236GmETadFcxBW-J8F",
                        "description": "The unique identifier for the user who owns the automation",
                        "x-qlik-filterable": true
                    },
                    "duration": {
                        "type": "integer",
                        "example": 9001,
                        "description": "Duration of the last run, indicated in seconds. Calculated from start and stop times",
                        "x-qlik-filterable": true
                    }
                }
            },
            "RunDetailRequestObject": {
                "type": "object",
                "required": [
                    "context"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                        "readOnly": true
                    },
                    "inputs": {
                        "type": "object",
                        "x-qlik-stability": "private"
                    },
                    "context": {
                        "enum": [
                            "api"
                        ],
                        "type": "string",
                        "example": "api",
                        "description": "The source that triggers the automation will set the context."
                    }
                }
            },
            "RunDetailResponseObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                        "readOnly": true
                    },
                    "error": {
                        "type": "object"
                    },
                    "title": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "x-qlik-stability": "private"
                    },
                    "status": {
                        "enum": [
                            "failed",
                            "finished",
                            "finished with warnings",
                            "must stop",
                            "not started",
                            "running",
                            "starting",
                            "stopped"
                        ],
                        "type": "string"
                    },
                    "context": {
                        "enum": [
                            "test_run",
                            "editor",
                            "detail",
                            "api_sync",
                            "api_async",
                            "webhook",
                            "lookup"
                        ],
                        "type": "string",
                        "description": "The source that triggers the automation will set the context. Certain contexts impact the execution of an automation (for example, The \"test_run\" context will not process all results when listing items)."
                    },
                    "metrics": {
                        "type": "object",
                        "properties": {
                            "blocks": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "connectorGuid",
                                        "rxBytes",
                                        "txBytes"
                                    ],
                                    "properties": {
                                        "type": {
                                            "enum": [
                                                "snippetBlock",
                                                "endpointBlock"
                                            ],
                                            "type": "string",
                                            "example": "endpointBlock",
                                            "description": "Type of the block."
                                        },
                                        "rxBytes": {
                                            "type": "integer",
                                            "example": 18329921,
                                            "description": "Total amount of received bytes sent by the current block."
                                        },
                                        "txBytes": {
                                            "type": "integer",
                                            "example": 18329921,
                                            "description": "Total amount of sent bytes sent by the current block."
                                        },
                                        "apiCalls": {
                                            "type": "integer",
                                            "example": 40,
                                            "description": "API calls to external resources made by the current block."
                                        },
                                        "snippetId": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "Unique identifier for the snippet block used within the execution."
                                        },
                                        "endpointId": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "Unique identifier for the snippet block used within the execution."
                                        },
                                        "connectorId": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "Unique identifier for the connector used within the block of the execution."
                                        }
                                    },
                                    "description": "Information of the ended execution per block."
                                },
                                "description": "List of blocks used during execution. Note: this list currently only contains endpointBlocks and snippetBlocks"
                            },
                            "network": {
                                "type": "object",
                                "properties": {
                                    "rxBytes": {
                                        "type": "integer",
                                        "default": 0,
                                        "description": "The number of received bytes."
                                    },
                                    "txBytes": {
                                        "type": "integer",
                                        "default": 0,
                                        "description": "The number of received bytes."
                                    }
                                }
                            },
                            "totalApiCalls": {
                                "type": "integer",
                                "default": 0,
                                "description": "The number of API calls made."
                            }
                        }
                    },
                    "stopTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "isTestRun": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "isArchived": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "expectedInputs": {
                        "type": "object",
                        "x-qlik-stability": "private"
                    },
                    "scheduledStartTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    }
                }
            },
            "RunList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RunListObject"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "RunListObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                        "readOnly": true
                    },
                    "error": {
                        "type": "object"
                    },
                    "title": {
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            "failed",
                            "finished",
                            "finished with warnings",
                            "must stop",
                            "not started",
                            "running",
                            "starting",
                            "stopped"
                        ],
                        "type": "string",
                        "x-qlik-filterable": true
                    },
                    "context": {
                        "enum": [
                            "test_run",
                            "editor",
                            "detail",
                            "api_sync",
                            "api_async",
                            "webhook",
                            "lookup"
                        ],
                        "type": "string",
                        "x-qlik-filterable": true
                    },
                    "duration": {
                        "type": "integer",
                        "example": "9001",
                        "readOnly": true,
                        "description": "Duration of the run, indicated in seconds. Calculated from start and stop times",
                        "x-qlik-filterable": true
                    },
                    "stopTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "isTestRun": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    },
                    "isArchived": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "scheduledStartTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-23T12:28:21.000000Z",
                        "readOnly": true
                    }
                }
            },
            "ScheduleRequestObject": {
                "type": "object",
                "properties": {
                    "stopAt": {
                        "type": "string",
                        "example": "2022-12-01 00:00:00"
                    },
                    "startAt": {
                        "type": "string",
                        "example": "2022-01-01 00:00:00"
                    },
                    "interval": {
                        "type": "integer",
                        "example": 30,
                        "description": "time in seconds."
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/Stockholm"
                    }
                }
            },
            "ScheduleResponseObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                        "readOnly": true
                    },
                    "stopAt": {
                        "type": "string",
                        "example": "2022-12-01 00:00:00"
                    },
                    "startAt": {
                        "type": "string",
                        "example": "2021-12-01 00:00:00"
                    },
                    "interval": {
                        "type": "integer",
                        "example": 30,
                        "description": "time in seconds."
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/Stockholm"
                    },
                    "lastStartedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T12:28:21.000000Z"
                    }
                }
            },
            "UsageList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UsageObject"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "UsageObject": {
                "type": "object",
                "required": [
                    "name",
                    "date",
                    "value"
                ],
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2021-12-15",
                        "description": "The date for the metric"
                    },
                    "name": {
                        "enum": [
                            "runs",
                            "scheduledRun",
                            "triggeredRun",
                            "webhookRuns",
                            "duration",
                            "bandwidthIn",
                            "bandwidthOut"
                        ],
                        "type": "string",
                        "example": "bandwidthIn",
                        "maxLength": 50,
                        "description": "The name for the metric"
                    },
                    "value": {
                        "type": "integer",
                        "example": 310179713,
                        "description": "The value count of the metric"
                    },
                    "automation": {
                        "$ref": "#/components/schemas/AutomationUsageObject"
                    }
                }
            },
            "appErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/error"
                        }
                    }
                }
            },
            "error": {
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the HTTP status code."
                    },
                    "source": {
                        "type": "object",
                        "description": "Optional JSON patch object pointing to an invalid property."
                    },
                    "status": {
                        "type": "number",
                        "description": "The HTTP status code."
                    }
                },
                "description": "An error object."
            },
            "realtimePredictionInput": {
                "type": "object",
                "properties": {
                    "rows": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The rows of the dataset to produce predictions from."
                    },
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/realTimePredictionInputSchema"
                        },
                        "description": "The schema of the input dataset."
                    }
                }
            },
            "realTimePredictionInputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of a feature in the dataset."
                    }
                }
            },
            "Brand": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "files"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BrandFile"
                        },
                        "description": "Collection of resources that make up the brand."
                    },
                    "active": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the brand was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "ID of a user that created the brand."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the brand was last updated."
                    },
                    "updatedBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "ID of a user that last updated the brand."
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "description": "A brand is a collection of assets for applying custom branding. Only a single brand can be active in a tenant."
            },
            "BrandFile": {
                "type": "object",
                "properties": {
                    "id": {
                        "enum": [
                            "logo",
                            "favIcon",
                            "styles"
                        ],
                        "type": "string"
                    },
                    "eTag": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    }
                },
                "description": "Represents one of the assets used as part of the brand. These include logos, favicons, and some styles."
            },
            "BrandPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/description"
                        ],
                        "type": "string",
                        "example": "/description",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "BrandsList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Brand"
                        }
                    },
                    "links": {
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                },
                "description": "A collection of brands."
            },
            "ErrorResponse400": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-400"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Bad request"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "The request is incorrect."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse401": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-401"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Unauthorized"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "The user is not authorized to access the service."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse403": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-403"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Forbidden"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "You don't have sufficient permissions to access this resource."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse404": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-404"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Not found"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "The resource was not found."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse500": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-500"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Internal Server Error"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "Something went wrong in the server."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "NoActiveBrand": {
                "type": "object",
                "description": "Empty object inferring lack of active branding."
            },
            "CollectionByIdPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "The operation to be performed."
                        },
                        "path": {
                            "enum": [
                                "/name",
                                "/description",
                                "/type"
                            ],
                            "type": "string",
                            "description": "Field of collection to be patched."
                        },
                        "value": {
                            "type": "string",
                            "description": "The value to be used within the operations.\n- name: The name of the collection. Must not be \"\".\n- description: The description of the collection. Empty string \"\" is allowed.\n- type: The type of the collection. Via this path the collection type can be toggled between \"private\" and \"publicgoverned\".\n"
                        }
                    },
                    "description": "A JSONPatch document as defined by RFC 6902."
                }
            },
            "collectionLinksResponseBody": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "items": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "collectionMetaResponseBody": {
                "type": "object",
                "properties": {
                    "items": {
                        "$ref": "#/components/schemas/itemsResultResponseBody"
                    }
                },
                "description": "Collection metadata and computed fields."
            },
            "collectionResultResponseBody": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type",
                    "createdAt",
                    "updatedAt",
                    "tenantId",
                    "links",
                    "itemCount"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The collection's unique identifier."
                    },
                    "full": {
                        "type": "boolean",
                        "description": "States if a collection has reached its items limit or not"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/collectionMetaResponseBody"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "private",
                            "public",
                            "favorite",
                            "publicgoverned"
                        ],
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/collectionLinksResponseBody"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The ID of the tenant that owns the collection. This property is populated by using JWT."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the collection was created."
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "The ID of the user who created the collection. This property is only populated if the JWT contains a userId."
                    },
                    "itemCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of items that have been added to the collection that the user has access to."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the collection was last updated."
                    },
                    "updaterId": {
                        "type": "string",
                        "description": "The ID of the user who last updated the collection. This property is only populated if the JWT contains a userId."
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "description": "A collection."
            },
            "CollectionsAddCollectionItemRequestBody": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The item's unique identifier."
                    }
                }
            },
            "CollectionsCreateCollectionRequestBody": {
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "For `public` collections (tags), if name already exists in the tenant as a `public` collection, this call will fail with a `409` response."
                    },
                    "type": {
                        "$ref": "#/components/schemas/CollectionTypes"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "collectionsLinksResponseBody": {
                "type": "object",
                "properties": {
                    "item": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "next": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "self": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "CollectionsListCollectionItemsResponseBody": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemResultResponseBody"
                        }
                    }
                },
                "description": "ListCollectionItemsResponseBody result type"
            },
            "CollectionsListCollectionsResponseBody": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/collectionResultResponseBody"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/collectionsLinksResponseBody"
                    }
                },
                "description": "ListCollectionsResponseBody result type"
            },
            "CollectionsUpdateCollectionRequestBody": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "CollectionTypes": {
                "enum": [
                    "private",
                    "public",
                    "publicgoverned"
                ],
                "type": "string"
            },
            "ErrorResponseBody": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceError"
                        }
                    }
                }
            },
            "itemLinksResponseBody": {
                "type": "object",
                "properties": {
                    "open": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "self": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "collections": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "itemMetaResponseBody": {
                "type": "object",
                "required": [
                    "isFavorited",
                    "actions",
                    "tags",
                    "collections"
                ],
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemTagResponseBody"
                        },
                        "description": "An array of tags that the item is part of."
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The actions that the user can perform on the item."
                    },
                    "collections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemTagResponseBody"
                        },
                        "description": "An array of collections that the item is part of."
                    },
                    "isFavorited": {
                        "type": "boolean",
                        "description": "The flag that indicates if item is in the user's favorites collection."
                    }
                },
                "description": "Item metadata and computed fields."
            },
            "itemResourceTypeEnum": {
                "enum": [
                    "app",
                    "collection",
                    "qlikview",
                    "insight",
                    "qvapp",
                    "genericlink",
                    "sharingservicetask",
                    "note",
                    "dataasset",
                    "dataset",
                    "automation",
                    "automl-experiment",
                    "automl-deployment"
                ],
                "type": "string",
                "description": "The case-sensitive string defining the item's type."
            },
            "itemResultResponseBody": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "tenantId",
                    "createdAt",
                    "updatedAt",
                    "isFavorited",
                    "links",
                    "resourceType",
                    "resourceCreatedAt",
                    "resourceUpdatedAt",
                    "actions",
                    "collectionIds",
                    "resourceAttributes",
                    "resourceCustomAttributes",
                    "meta"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The item's unique identifier."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/itemMetaResponseBody"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "links": {
                        "$ref": "#/components/schemas/itemLinksResponseBody"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The actions that the user can perform on the item."
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of the user who owns the item."
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "The space's unique identifier."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The ID of the tenant that owns the item. This is populated using the JWT."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the item was created."
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "The ID of the user who created the item. This is only populated if the JWT contains a userId."
                    },
                    "itemViews": {
                        "$ref": "#/components/schemas/itemViewsResponseBody"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the item was last updated."
                    },
                    "updaterId": {
                        "type": "string",
                        "description": "ID of the user who last updated the item. This is only populated if the JWT contains a userId."
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    "description": {
                        "type": "string"
                    },
                    "isFavorited": {
                        "type": "boolean",
                        "description": "The flag that indicates if item is in the user's favorites collection."
                    },
                    "thumbnailId": {
                        "type": "string",
                        "description": "The item thumbnail's unique identifier. This is optional for internal resources."
                    },
                    "resourceLink": {
                        "type": "string",
                        "format": "uri",
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    "resourceSize": {
                        "$ref": "#/components/schemas/itemsResourceSizeResponseBody"
                    },
                    "resourceType": {
                        "$ref": "#/components/schemas/itemResourceTypeEnum"
                    },
                    "collectionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID of the collections that the item has been added to."
                    },
                    "resourceSubType": {
                        "type": "string",
                        "description": "Optional field defining the item's subtype, if any."
                    },
                    "resourceCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the resource that the item references was created."
                    },
                    "resourceUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the resource that the item references was last updated."
                    },
                    "resourceAttributes": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "resourceReloadStatus": {
                        "type": "string",
                        "description": "If the resource last reload was successful or not."
                    },
                    "resourceReloadEndTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the resource last reload ended."
                    },
                    "resourceCustomAttributes": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "description": "An item."
            },
            "itemsLinksResponseBody": {
                "type": "object",
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "self": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "collection": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "itemsResourceSizeResponseBody": {
                "type": "object",
                "properties": {
                    "appFile": {
                        "type": "number",
                        "description": "Size of the app on disk in bytes."
                    },
                    "appMemory": {
                        "type": "number",
                        "description": "Size of the app in memory in bytes."
                    }
                }
            },
            "itemsResultResponseBody": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemResultResponseBody"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/itemsLinksResponseBody"
                    }
                },
                "description": "Multiple items."
            },
            "itemTagResponseBody": {
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tag/collection."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag/collection."
                    }
                },
                "description": "Holds basic information about a tag or collection."
            },
            "itemViewsResponseBody": {
                "type": "object",
                "properties": {
                    "week": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemViewsWeeksResponseBody"
                        }
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total number of views the resource got during the last 28 days."
                    },
                    "trend": {
                        "type": "number",
                        "example": -4.2,
                        "description": "Trend in views over the last 4 weeks. The trend value is a float number representing a linear regression slope (the x-coefficient) calculated from the weekly unique users views in the preceding 4 weeks."
                    },
                    "unique": {
                        "type": "integer",
                        "description": "Number of unique users who viewed the resource during the last 28 days."
                    },
                    "usedBy": {
                        "type": "integer",
                        "description": "Number of apps this dataset is used in (datasets only)."
                    }
                }
            },
            "itemViewsWeeksResponseBody": {
                "type": "object",
                "properties": {
                    "start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime representing the start of the referenced week."
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total number of views the resource got during the referenced week."
                    },
                    "unique": {
                        "type": "integer",
                        "description": "Number of unique users who viewed the resource during the referenced week."
                    }
                }
            },
            "meta": {
                "properties": {
                    "stack": {
                        "type": "string",
                        "description": "Full stack trace of the error that was raised."
                    },
                    "message": {
                        "type": "string",
                        "description": "A more detailed message explaining the error."
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Name of the resource related to the error. If there is a conflict, it is the name of the model attempting to be created."
                    }
                },
                "description": "Object containing meta data regarding an error. It does not necessarily contain all the properties."
            },
            "ServiceError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Code is a unique identifier for this error class."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title is the name of this class of errors."
                    },
                    "detail": {
                        "type": "string",
                        "description": "Detail is a human-readable explanation specific to this occurrence of the problem."
                    }
                }
            },
            "APISettings": {
                "type": "object",
                "required": [
                    "enable-conditions"
                ],
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "example": "cgdsAumGmQ6l0Bi7CUKt9V8P_Y9GL0sC",
                        "readOnly": true,
                        "description": "These persisted api settings are only available for this tenant. Extracted from request JWT."
                    },
                    "enable-conditions": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether API endpoints for condition manager are enabled"
                    }
                }
            },
            "APISettingsUpload": {
                "type": "object",
                "required": [
                    "enable-sharing"
                ],
                "properties": {
                    "maxRecipients": {
                        "type": "number",
                        "example": 200,
                        "readOnly": true,
                        "description": "Maximum number of recipients when creating a sharing task"
                    },
                    "enable-sharing": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether API endpoints for sharing are enabled"
                    }
                }
            },
            "CausalEvent": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/CausalEventData"
                    },
                    "eventID": {
                        "type": "string",
                        "description": "the event id from eventing"
                    },
                    "extensions": {
                        "$ref": "#/components/schemas/CausalEventExtensions"
                    },
                    "manualTrigger": {
                        "type": "boolean"
                    },
                    "manualTriggerID": {
                        "type": "string",
                        "description": "the manual trigger id from eventing if present"
                    }
                }
            },
            "CausalEventData": {
                "type": "object",
                "properties": {
                    "eventID": {
                        "type": "string",
                        "description": "the event id from eventing service."
                    },
                    "lastReloadTime": {
                        "type": "string",
                        "format": "RFC3339",
                        "example": "2006-01-02T15:04:05Z07:00",
                        "description": "The time of the last reload"
                    }
                }
            },
            "CausalEventExtensions": {
                "type": "object",
                "properties": {
                    "userID": {
                        "type": "string"
                    },
                    "tenantID": {
                        "type": "string"
                    },
                    "sessionID": {
                        "type": "string"
                    }
                }
            },
            "CompoundCondition": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/CompoundCondition_data"
                    },
                    "conditionBase": {
                        "$ref": "#/components/schemas/ConditionBase"
                    }
                },
                "description": "A condition made up of other conditions",
                "x-discriminator-value": "compound",
                "x-ms-discriminator-value": "compound"
            },
            "CompoundCondition_data": {
                "type": "object",
                "properties": {
                    "history": {
                        "$ref": "#/components/schemas/HistoryProperties"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "rDDAcMEI1V0qzauEWepEVY8oSLJ9fvA2",
                            "qFPF1dAtPK4vfPTmKyyuKaqA6iERCwLi",
                            "4gnz8E6ZruG0lkSKwkau66P24CtORyLr",
                            "ATs--Z0b_NGyuHajcbQkxu7RrajgPaEQ"
                        ],
                        "description": "Array of condition ids"
                    },
                    "expression": {
                        "type": "string",
                        "example": "($0 OR $1) AND ($2 OR $3)",
                        "description": "Boolean expression made up of variable names defined from the conditions section"
                    }
                },
                "description": "Condition data"
            },
            "Condition": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "compound",
                            "data"
                        ],
                        "type": "string",
                        "example": "compound",
                        "description": "Indicates the condition type"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                        "description": "UserID of the condition owner"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "5GI7yWoJk9lvNtuEc66SXCypXVfhbVeH",
                        "description": "The tenant id"
                    },
                    "dataCondition": {
                        "$ref": "#/components/schemas/DataCondition"
                    },
                    "compoundCondition": {
                        "$ref": "#/components/schemas/CompoundCondition"
                    }
                },
                "description": "only one of compoundCondition or dataCondition should be set"
            },
            "ConditionBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "example": "5f31c6e8476ae50001030fb6",
                        "readOnly": true,
                        "description": "The unique id for the resource"
                    },
                    "type": {
                        "enum": [
                            "compound",
                            "data"
                        ],
                        "type": "string",
                        "example": "compound",
                        "description": "Indicates the condition type"
                    },
                    "appId": {
                        "type": "string",
                        "example": "4xQ1chLoHkOikyzUGcHJquteNrAfketW",
                        "description": "The id of the app the condition is evaluated against"
                    },
                    "created": {
                        "type": "string",
                        "format": "string",
                        "example": "2006-01-02T15:04:05Z07:00",
                        "readOnly": true,
                        "description": "When the resource was created"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                        "readOnly": true,
                        "description": "The id of the user the user which owns the condition"
                    },
                    "updated": {
                        "type": "string",
                        "format": "string",
                        "example": "2006-01-02T14:04:05Z07:00",
                        "readOnly": true,
                        "description": "When the resource was last updated"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "5GI7yWoJk9lvNtuEc66SXCypXVfhbVeH",
                        "readOnly": true,
                        "description": "The tenant id"
                    },
                    "bookmarkId": {
                        "type": "string",
                        "example": "anTjnOABmxlCirVx8IRfhWhLd9IZjENl",
                        "description": "The bookmark corresponding to the selection state to apply to the app at evaluation time"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "uid",
                        "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                        "readOnly": true,
                        "description": "The id of the user which created the condition"
                    },
                    "description": {
                        "type": "string",
                        "example": "My condition",
                        "description": "Description of the condition"
                    },
                    "lastReloadTime": {
                        "type": "string",
                        "format": "RFC3339",
                        "example": "2006-01-02T15:04:05Z07:00",
                        "readOnly": true,
                        "description": "The time of the last reload, if the scan is triggered by a reload. If exists and value does not match app's last reload time, the evaluation will fail."
                    }
                },
                "description": "A base condition"
            },
            "ConditionCreateRequest": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "compound",
                            "data"
                        ],
                        "type": "string",
                        "example": "compound",
                        "description": "Indicates the condition type"
                    },
                    "dataCondition": {
                        "$ref": "#/components/schemas/DataConditionCreateRequest"
                    },
                    "compoundCondition": {
                        "$ref": "#/components/schemas/CompoundCondition"
                    }
                },
                "description": "only one of compoundCondition or dataCondition should be set"
            },
            "ConditionDimensions": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConditionDimensions_inner"
                },
                "description": "List of returned dimensions"
            },
            "ConditionDimensions_inner": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "example": "Neighborhood",
                        "description": "Field referred to the dimension where the selection is made. This may be used to generate deep links."
                    },
                    "title": {
                        "type": "string",
                        "example": "Neighborhood",
                        "description": "Dimension title"
                    },
                    "qLibraryId": {
                        "type": "string",
                        "example": "PgQKNQ",
                        "description": "Refers to a dimension stored in the library"
                    }
                }
            },
            "ConditionHeaders": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "example": [
                    "sumnum"
                ],
                "description": "List of header labels"
            },
            "ConditionMeasures": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConditionMeasures_inner"
                },
                "description": "List of returned measures"
            },
            "ConditionMeasures_inner": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "sumnum",
                        "description": "Measure title"
                    },
                    "qLibraryId": {
                        "type": "string",
                        "example": "PgQKNQ",
                        "description": "Refers to a measure stored in the library"
                    },
                    "qNumFormat": {
                        "type": "object",
                        "example": {
                            "qDec": ".",
                            "qFmt": "###0",
                            "qType": "I",
                            "qnDec": 0,
                            "qUseThou": 1
                        },
                        "properties": {},
                        "description": "Format of the field"
                    }
                }
            },
            "ConditionPatch": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConditionPatch_inner"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/compoundCondition/conditionBase/ownerId",
                        "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitbX"
                    },
                    {
                        "op": "replace",
                        "path": "/dataCondition/conditionBase/description",
                        "value": "My description"
                    },
                    {
                        "op": "remove",
                        "path": "/compoundCondition/data/conditions/0"
                    },
                    {
                        "op": "replace",
                        "path": "/compoundCondition//data/expression",
                        "value": "$0 AND $1"
                    },
                    {
                        "op": "replace",
                        "path": "/dataCondition/conditionData/measure",
                        "value": "revenue"
                    }
                ],
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "ConditionPatch_inner": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace",
                            "remove",
                            "add"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to be used for this operation."
                    }
                }
            },
            "ConditionResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/Errors"
                    },
                    "condition": {
                        "$ref": "#/components/schemas/Condition"
                    }
                }
            },
            "CreateEvaluationRequest": {
                "type": "object",
                "required": [
                    "causalEvent",
                    "contextId"
                ],
                "properties": {
                    "alertId": {
                        "type": "string",
                        "example": "5f64885b2e11d23982c09e03",
                        "description": "The id of the alerting task the condition and evaluation is part of"
                    },
                    "contextId": {
                        "type": "string",
                        "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                        "description": "Extra context information to carry through to the result if any"
                    },
                    "causalEvent": {
                        "$ref": "#/components/schemas/CausalEvent"
                    }
                }
            },
            "CreateEvaluationResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/Errors"
                    },
                    "contextId": {
                        "type": "string",
                        "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                        "description": "Extra context information to carry through to the result if any"
                    },
                    "evaluationId": {
                        "type": "string",
                        "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                        "description": "Extra context information to carry through to the result if any"
                    }
                }
            },
            "DataCondition": {
                "type": "object",
                "properties": {
                    "headers": {
                        "$ref": "#/components/schemas/ConditionHeaders"
                    },
                    "history": {
                        "$ref": "#/components/schemas/HistoryProperties"
                    },
                    "measures": {
                        "$ref": "#/components/schemas/ConditionMeasures"
                    },
                    "dimensions": {
                        "$ref": "#/components/schemas/ConditionDimensions"
                    },
                    "selections": {
                        "$ref": "#/components/schemas/Selections"
                    },
                    "conditionBase": {
                        "$ref": "#/components/schemas/ConditionBase"
                    },
                    "conditionData": {
                        "type": "object",
                        "example": {},
                        "properties": {},
                        "description": "List of parameters specific to data condition are available in DCE and will be passed as is to DCE as per https://github.com/qlik-trial/data-condition-evaluator/blob/master/api-docs.yml"
                    }
                },
                "description": "A condition based on data within an app",
                "x-discriminator-value": "data",
                "x-ms-discriminator-value": "data"
            },
            "DataConditionCreateRequest": {
                "type": "object",
                "properties": {
                    "headers": {
                        "$ref": "#/components/schemas/ConditionHeaders"
                    },
                    "history": {
                        "$ref": "#/components/schemas/HistoryProperties"
                    },
                    "measures": {
                        "$ref": "#/components/schemas/ConditionMeasures"
                    },
                    "dimensions": {
                        "$ref": "#/components/schemas/ConditionDimensions"
                    },
                    "selections": {
                        "$ref": "#/components/schemas/Selections"
                    },
                    "conditionBase": {
                        "$ref": "#/components/schemas/ConditionBase"
                    },
                    "conditionData": {
                        "type": "object",
                        "example": {},
                        "properties": {},
                        "description": "List of parameters specific to data condition are available in DCE and will be passed as is to DCE as per https://github.com/qlik-trial/data-condition-evaluator/blob/master/api-docs.yml"
                    }
                },
                "description": "A condition based on data within an app",
                "x-discriminator-value": "data",
                "x-ms-discriminator-value": "data"
            },
            "Evaluation": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique id for the resource"
                    },
                    "result": {
                        "enum": [
                            "success",
                            "failure",
                            "error"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "The final result of the evalution"
                    },
                    "status": {
                        "enum": [
                            "RUNNING",
                            "FAILED",
                            "FINISHED"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "The status of the evaluation execution"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true,
                        "description": "The time the evaluation ended"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "userId of user being impersonated to evaluate the condition"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The tenant id"
                    },
                    "contextId": {
                        "type": "string",
                        "description": "Extra context information to carry through to the result if one was included on when the evaluation was triggered"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true,
                        "description": "The time the evaluation started"
                    },
                    "resultData": {
                        "type": "object",
                        "properties": {},
                        "description": "Condition type specific result, one of dataResult or compoundResult"
                    },
                    "causalEvent": {
                        "type": "object",
                        "properties": {},
                        "description": "Representation of the event that caused the condition to be evaluated if one was included on when the evaluation was triggered"
                    },
                    "conditionId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique id of the associated condition"
                    },
                    "dataConditionEvaluatorId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique id for the resource given from Data Condition Evaluator"
                    }
                }
            },
            "EvaluationError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error code specific to condition smanager."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/EvaluationError_meta"
                    },
                    "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error title."
                    },
                    "status": {
                        "readOnly": true,
                        "description": "Error status."
                    }
                }
            },
            "EvaluationError_meta": {
                "type": "object",
                "properties": {
                    "fatal": {
                        "type": "boolean",
                        "description": "defines whether an error is recoverable or not"
                    }
                }
            },
            "EvaluationErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EvaluationError"
                }
            },
            "GetEvaluationResponse": {
                "type": "object",
                "properties": {
                    "condition": {
                        "$ref": "#/components/schemas/Condition"
                    },
                    "evaluation": {
                        "$ref": "#/components/schemas/Evaluation"
                    }
                },
                "description": "Get response returns the evaluation and condition associated"
            },
            "HistoryProperties": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "description": "Is history enabled"
                    }
                },
                "description": "History properties"
            },
            "PreviewEvaluation": {
                "type": "object",
                "properties": {
                    "endTime": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true,
                        "description": "The time the evaluation ended"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "userId of user being impersonated to evaluate the condition"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The tenant id"
                    },
                    "resultUrl": {
                        "type": "string",
                        "description": "URL to download the condition results"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true,
                        "description": "The time the evaluation started"
                    }
                }
            },
            "PreviewResponse": {
                "type": "object",
                "properties": {
                    "previewId": {
                        "type": "string",
                        "format": "uid",
                        "example": "467ea9bc-bbd7-11ea-b3de-0242ac130004",
                        "readOnly": true,
                        "description": "When the resource was created"
                    }
                }
            },
            "PreviewStatusResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/Errors"
                    },
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "FAILED",
                            "RUNNING",
                            "SUCCESSFUL"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "condition": {
                        "$ref": "#/components/schemas/Condition"
                    },
                    "previewId": {
                        "type": "string",
                        "format": "uid",
                        "example": "467ea9bc-bbd7-11ea-b3de-0242ac130004",
                        "readOnly": true,
                        "description": "When the resource was created"
                    },
                    "evaluation": {
                        "$ref": "#/components/schemas/PreviewEvaluation"
                    }
                }
            },
            "Selections": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Selections_inner"
                },
                "description": "List of fields according to the bookmark definition"
            },
            "Selections_inner": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "example": 2,
                        "description": "The count"
                    },
                    "field": {
                        "type": "string",
                        "example": "SalesTerritoryCountry",
                        "description": "Field name"
                    },
                    "selectedSummary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "[ Germany, Australia ]",
                        "description": "Array of selected"
                    }
                }
            },
            "SingleErrorResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error code specific to usage-tracker."
                    },
                    "meta": {
                        "type": "object",
                        "properties": {},
                        "description": "meta properties for an error."
                    },
                    "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error title."
                    },
                    "detail": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error cause."
                    }
                }
            },
            "CSPEntry": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CSPEntryContent"
                    }
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The CSP entry's unique identifier."
                    }
                }
            },
            "CSPEntryContent": {
                "type": "object",
                "required": [
                    "origin"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 512,
                        "description": "The name for this entry."
                    },
                    "imgSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources of images and favicons."
                    },
                    "origin": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "The origin that the CSP directives should be applied to."
                    },
                    "fontSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for loading fonts."
                    },
                    "childSrc": {
                        "type": "boolean",
                        "description": "Defines the valid sources for loading web workers and nested browsing contexts using elements such as frame and iFrame."
                    },
                    "frameSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for loading nested browsing contexts using elements such as frame and iFrame."
                    },
                    "mediaSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for loading media using the audio and video elements."
                    },
                    "styleSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for stylesheets."
                    },
                    "objectSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for the object, embed, and applet elements."
                    },
                    "scriptSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for JavaScript."
                    },
                    "workerSrc": {
                        "type": "boolean",
                        "description": "Specifies valid sources for Worker, SharedWorker, or ServiceWorker scripts."
                    },
                    "connectSrc": {
                        "type": "boolean",
                        "description": "Restricts the URLs that can be loaded using script interfaces."
                    },
                    "formAction": {
                        "type": "boolean",
                        "description": "Allow forms to be submitted to the origin."
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the CSP entry was created."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 1024,
                        "description": "The reason for adding this origin to the Content Security Policy."
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the CSP entry was last modified."
                    },
                    "connectSrcWSS": {
                        "type": "boolean",
                        "description": "Restricts the URLs that can be connected to websockets (all sources will be prefixed with 'wss://')."
                    },
                    "frameAncestors": {
                        "type": "boolean",
                        "description": "Specifies valid sources for embedding the resource using frame, iFrame, object, embed and applet."
                    }
                }
            },
            "CSPEntryList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CSPEntry"
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                }
            },
            "CSPHeader": {
                "type": "object",
                "properties": {
                    "Content-Security-Policy": {
                        "type": "string",
                        "description": "The compiled CSP header."
                    }
                }
            },
            "AlertingActionsTriggerCreateRequest": {
                "type": "object",
                "required": [
                    "alertingTaskID"
                ],
                "properties": {
                    "alertingTaskID": {
                        "type": "string",
                        "example": "a1b2c3d4f5"
                    }
                }
            },
            "AlertingActionsTriggerCreateResponse": {
                "type": "object",
                "properties": {
                    "workflowID": {
                        "type": "string",
                        "example": "a1b2c3d4f5",
                        "description": "the workflow id created for the manual triggering of alert"
                    }
                }
            },
            "AlertingConditionResponse": {
                "type": "object",
                "properties": {
                    "hideSelections": {
                        "type": "boolean"
                    },
                    "conditionResponse": {
                        "type": "object",
                        "properties": {},
                        "description": "Should reference ConditionResponse type in condition-manager api docs"
                    }
                }
            },
            "AlertingExecutionError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error code specific to sharing service."
                    },
                    "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error title."
                    },
                    "detail": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error cause."
                    }
                }
            },
            "AlertingExecutionErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertingExecutionError"
                }
            },
            "AlertingExecutionListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StandardListResponseProps"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/ListLinks"
                            },
                            "executions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AlertingExecutionResponse"
                                },
                                "description": "Gets a list of alerting-executions."
                            }
                        }
                    }
                ]
            },
            "AlertingExecutionPersist": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gets the execution identifier.",
                        "x-go-custom-tag": "bson:\"_id\""
                    },
                    "errors": {
                        "$ref": "#/components/schemas/AlertingExecutionErrors"
                    },
                    "result": {
                        "$ref": "#/components/schemas/AlertingExecutionResult"
                    },
                    "alertId": {
                        "type": "string",
                        "description": "ID for the alerting task that this execution references"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The owner that this execution belongs to"
                    },
                    "measures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Measures applied in the condition"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant that this execution belongs to"
                    },
                    "accessMode": {
                        "enum": [
                            "SOURCE_ACCESS",
                            "TARGET_ACCESS"
                        ],
                        "type": "string"
                    },
                    "bookmarkId": {
                        "type": "string",
                        "description": "Id of the bookmark associated with an alert"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Dimensions applied in the condition"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "ID for the workflow, coming from eventing service"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "Id of the condition the alert is associated with"
                    },
                    "triggerTime": {
                        "type": "string",
                        "description": "Timestamp of execution start"
                    },
                    "evaluationId": {
                        "type": "string",
                        "description": "Id of the evaluation for the condition"
                    },
                    "executionType": {
                        "enum": [
                            "INDIVIDUAL",
                            "SHARED"
                        ],
                        "type": "string"
                    },
                    "conditionStatus": {
                        "enum": [
                            "FINISHED",
                            "FAILED"
                        ],
                        "type": "string"
                    },
                    "executionEvaluationStatus": {
                        "enum": [
                            "CONDITION_MET",
                            "CONDITION_NOT_MET",
                            "FAILED"
                        ],
                        "type": "string"
                    }
                }
            },
            "AlertingExecutionResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AlertingExecutionPersist"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/Links"
                            },
                            "evaluation": {
                                "$ref": "#/components/schemas/Evaluation"
                            }
                        }
                    }
                ]
            },
            "AlertingExecutionResult": {
                "type": "object",
                "properties": {
                    "alertTriggerStatus": {
                        "type": "string",
                        "example": "alertSent"
                    },
                    "throttlerTokensLeft": {
                        "type": "integer",
                        "example": 5
                    }
                }
            },
            "AlertingRecipientStats": {
                "type": "object",
                "required": [
                    "enabled"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "userid"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/AlertingRecipientStatsErrors"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "addedIndividually",
                            "group1",
                            "group2"
                        ],
                        "description": "A list of associated groups. If a user is added individually the \"addedIndividually\" pseudo group is included"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the recipient is enabled."
                    },
                    "lastScan": {
                        "type": "string",
                        "description": "last time a trigger was detected, but not sure if executed"
                    },
                    "subscribed": {
                        "type": "boolean",
                        "description": "Whether the recipient is subscribed."
                    },
                    "lastTrigger": {
                        "type": "string",
                        "description": "last time an execution had been created"
                    },
                    "conditionStatus": {
                        "enum": [
                            "OK",
                            "FAILED"
                        ],
                        "type": "string"
                    }
                }
            },
            "AlertingRecipientStatsError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error code specific to sharing service."
                    },
                    "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error title."
                    },
                    "detail": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Error cause."
                    }
                }
            },
            "AlertingRecipientStatsErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertingRecipientStatsError"
                }
            },
            "AlertingRecipientStatsResponse": {
                "type": "object",
                "properties": {
                    "recipientStats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingRecipientStats"
                        }
                    }
                }
            },
            "AlertingSettings": {
                "type": "object",
                "required": [
                    "enable-data-alerting"
                ],
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "example": "cgdsAumGmQ6l0Bi7CUKt9V8P_Y9GL0sC",
                        "readOnly": true,
                        "description": "These persisted alerting settings are only available for this tenant. Extracted from request JWT."
                    },
                    "dataAlertsLimits": {
                        "type": "number",
                        "example": 50,
                        "readOnly": true,
                        "description": "Represents the number of data alerts limit to be consumed by the user either as an owner or recipient"
                    },
                    "dataAlertsConsumed": {
                        "type": "number",
                        "example": 40,
                        "readOnly": true,
                        "description": "Represents the number of data alerts consumed by the user either as an owner or recipient"
                    },
                    "enable-data-alerting": {
                        "type": "boolean",
                        "example": true,
                        "description": "true if data-alerting feature is enabled for this tenant. Enabling this feature also requires that the license has this feature enabled."
                    },
                    "data-alerting-license-status": {
                        "enum": [
                            "enabled",
                            "disabled"
                        ],
                        "type": "string",
                        "description": "Whether the license for the tenant has the data alerting feature enabled."
                    },
                    "max-recipients-in-target-access": {
                        "type": "integer",
                        "example": 100,
                        "readOnly": true,
                        "description": "The maximum number of recipients that can be present in an alerting task in TARGET_ACCESS mode. New recipients cannot be added when this limit is exceeded"
                    },
                    "data-alerting-feature-operation-status": {
                        "enum": [
                            "none",
                            "enabling",
                            "disabling"
                        ],
                        "type": "string",
                        "example": "disabling",
                        "readOnly": true,
                        "description": "This indicates that there is an ongoing operation to either disable or enable the data alerting feature. none means that no such operation is ongoing. enabling/disabling means that system is currently enabling/disabling the feature"
                    },
                    "data-alerting-feature-operation-status-change": {
                        "type": "string",
                        "example": "2020-09-02T13:44:33Z",
                        "readOnly": true,
                        "description": "UTC timestamp of the most recent change of data-alerting-feature-operation-status. If there has not been any such change, this is the timestamp of the initial creation of the record."
                    }
                }
            },
            "AlertingSettingsUpload": {
                "type": "object",
                "required": [
                    "enable-data-alerting"
                ],
                "properties": {
                    "enable-data-alerting": {
                        "type": "boolean",
                        "example": true,
                        "description": "true if data-alerting feature is enabled. A status change could potentially result in a considerable amount of API operations to enable/disable triggers. Enabling this feature also requires that the license has this feature enabled."
                    }
                }
            },
            "AlertingTaskCreateRequest": {
                "type": "object",
                "required": [
                    "appId",
                    "conditionId",
                    "name",
                    "recipients",
                    "triggerType"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 78,
                        "description": "name associated to alerting task"
                    },
                    "appId": {
                        "type": "string",
                        "description": "appId associated to this alert definition"
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "if the alerting task is enabled"
                    },
                    "sheetId": {
                        "type": "string",
                        "description": "sheetId associated to this alert definition"
                    },
                    "bookmarkId": {
                        "type": "string",
                        "description": "bookmarkId associated to this alert definition"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/Recipients"
                    },
                    "throttling": {
                        "$ref": "#/components/schemas/ThrottlingResource"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "the id of the condition that determines if this data alert should be triggered"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "description associated to alerting task"
                    },
                    "triggerType": {
                        "enum": [
                            "RELOAD",
                            "SCHEDULED"
                        ],
                        "type": "string",
                        "description": "Type of job that triggered the task"
                    },
                    "scheduleOptions": {
                        "$ref": "#/components/schemas/ScheduleOptions"
                    }
                },
                "description": "a alerting task (a definition on an alert)"
            },
            "AlertingTaskError": {
                "type": "object",
                "properties": {
                    "added": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    },
                    "value": {
                        "enum": [
                            "OWNER_DISABLED",
                            "OWNER_ACCESS",
                            "OWNER_LICENSE",
                            "APP_DELETED",
                            "NO_RECIPIENTS",
                            "PARTIAL_ACCESS",
                            "EVAL_ERROR",
                            "ORPHAN",
                            "CONVERSION_DENIED",
                            "EXPIRED",
                            "PARTIAL_SENT",
                            "QUOTA_REACHED",
                            "OWNER_HAS_NO_VALID_USER_ENTITLEMENT"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on alerting task"
                    }
                }
            },
            "AlertingTaskExecutionStats": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StandardListResponseProps"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/ListLinks"
                            },
                            "executionsStats": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ExecutionStats"
                                }
                            }
                        }
                    }
                ],
                "x-qlik-deprecated": true
            },
            "AlertingTaskGroupRecipientError": {
                "type": "object",
                "properties": {
                    "added": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    },
                    "value": {
                        "enum": [
                            "GROUP_IS_DISABLED",
                            "MAX_ALERTS_LIMIT_REACHED",
                            "GROUP_WITH_NO_APP_ACCESS",
                            "GROUP_IS_DELETED"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on alerting task"
                    }
                }
            },
            "AlertingTaskListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StandardListResponseProps"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/ListLinks"
                            },
                            "tasks": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AlertingTaskResponse"
                                },
                                "description": "Gets a list of alerting tasks."
                            }
                        }
                    }
                ]
            },
            "AlertingTaskPatchRequestCompliant": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed"
                    },
                    "path": {
                        "enum": [
                            "/ownerName",
                            "/ownerId",
                            "/conditionId",
                            "/enabledAction",
                            "/bookmarkId",
                            "/name",
                            "/description",
                            "/throttling",
                            "/triggerType",
                            "/scheduleOptions"
                        ],
                        "type": "string",
                        "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902"
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to be used for this operation."
                    }
                }
            },
            "AlertingTaskPatchRequestCompliantList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertingTaskPatchRequestCompliant"
                }
            },
            "AlertingTaskRecipientError": {
                "type": "object",
                "properties": {
                    "added": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    },
                    "value": {
                        "enum": [
                            "USER_IS_DELETED",
                            "USER_DISABLED_IN_QCS",
                            "NO_ACCESS_TO_APP",
                            "UNSUBSCRIBED_FROM_ALERT",
                            "CONDITION_EVAL_ERROR",
                            "USER_DISABLED_IN_ALERT_BY_OWNER",
                            "MAX_ALERTS_LIMIT_REACHED"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on alerting task"
                    }
                }
            },
            "AlertingTaskRecipientPatch": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertingTaskRecipientPatch_inner"
                },
                "example": [
                    {
                        "op": "add",
                        "value": {
                            "value": "recipient-1",
                            "enabled": true
                        },
                        "recipientType": "userid"
                    },
                    {
                        "op": "remove",
                        "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                        "recipientType": "userid"
                    },
                    {
                        "op": "enable",
                        "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                        "recipientType": "userid"
                    },
                    {
                        "op": "disable",
                        "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                        "recipientType": "userid"
                    },
                    {
                        "op": "replace",
                        "value": [
                            {
                                "value": "recipient-1",
                                "enabled": true
                            },
                            {
                                "value": "recipient-2",
                                "enabled": false
                            }
                        ],
                        "recipientType": "userid"
                    }
                ],
                "description": "A custom custom JSON Patch document, as an array of objects with operation, recipient type and value. Original defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "AlertingTaskRecipientPatch_inner": {
                "type": "object",
                "required": [
                    "op",
                    "recipientType",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "remove",
                            "add",
                            "replace",
                            "enable",
                            "disable",
                            "subscribe",
                            "unsubscribe"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to be used for this operation."
                    },
                    "recipientType": {
                        "enum": [
                            "userid",
                            "groupid"
                        ],
                        "type": "string",
                        "description": "Defines the path for the given resource field to patch."
                    }
                }
            },
            "AlertingTaskResponse": {
                "type": "object",
                "required": [
                    "triggerStats"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "5da5825325dc9a0dd0260af9",
                        "description": "data alerting identifier (this is the alertID)",
                        "x-go-custom-tag": "bson:\"_id\""
                    },
                    "name": {
                        "type": "string",
                        "description": "name associated to alerting task"
                    },
                    "appId": {
                        "type": "string",
                        "description": "appId associated to this alert definition"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "status": {
                        "enum": [
                            "creating",
                            "deleting"
                        ],
                        "type": "string",
                        "description": "particular status of the alerting task"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "true if the alerting task is enabled"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "the owner of this alert"
                    },
                    "sheetId": {
                        "type": "string",
                        "description": "sheetId associated to this alert definition"
                    },
                    "lastScan": {
                        "type": "string",
                        "description": "last time a trigger was detected, but not sure if executed for requesting user"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "the tenant of this alert"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "the owner name of this alert"
                    },
                    "accessMode": {
                        "enum": [
                            "SOURCE_ACCESS",
                            "TARGET_ACCESS"
                        ],
                        "type": "string"
                    },
                    "bookmarkId": {
                        "type": "string",
                        "description": "bookmarkId associated to this alert definition"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/Recipients"
                    },
                    "throttling": {
                        "$ref": "#/components/schemas/ThrottlingResource"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "the id of the condition that determines if this data alert should be triggered"
                    },
                    "dateCreated": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the task (rfc3339 format)"
                    },
                    "description": {
                        "type": "string",
                        "description": "description associated to alerting task"
                    },
                    "errorStatus": {
                        "enum": [
                            "OK",
                            "FATAL-ERROR",
                            "PARTIAL-TRIGGER"
                        ],
                        "type": "string",
                        "description": "error labels from the latest workflow that happened within the task"
                    },
                    "lastTrigger": {
                        "type": "string",
                        "description": "last time an execution had been created for requesting user"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp of the most recent update."
                    },
                    "triggerType": {
                        "enum": [
                            "RELOAD",
                            "SCHEDULED",
                            "MANUAL"
                        ],
                        "type": "string",
                        "description": "Type of job that triggered the task"
                    },
                    "triggerStats": {
                        "$ref": "#/components/schemas/AlertingTaskTriggerStats"
                    },
                    "hideSelections": {
                        "type": "boolean",
                        "description": "Whether the selection needs to be hidden."
                    },
                    "evaluationCount": {
                        "type": "integer",
                        "description": "the number of actual evaluations with engine this task has consumed in the current month"
                    },
                    "scheduleOptions": {
                        "$ref": "#/components/schemas/ScheduleOptions"
                    },
                    "subscriptionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of subscriptions related to this alerting task"
                    },
                    "absoluteLastScan": {
                        "type": "string",
                        "description": "last time a trigger was detected, but not sure if executed"
                    },
                    "conditionResponse": {
                        "type": "object",
                        "properties": {},
                        "description": "Should reference ConditionResponse type in condition-manager api docs"
                    },
                    "alertingTaskErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskError"
                        },
                        "x-omitempty": true
                    },
                    "absoluteLastTrigger": {
                        "type": "string",
                        "description": "last time an execution had been created"
                    },
                    "hasHistoryCondition": {
                        "type": "boolean",
                        "description": "true if the alert has history condition enabled"
                    },
                    "lastExecutionStatus": {
                        "enum": [
                            "OK",
                            "FAILED"
                        ],
                        "type": "string"
                    },
                    "recipientsChangeHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecipientsChange"
                        }
                    },
                    "lastEvaluationCountUpdate": {
                        "type": "string",
                        "description": "the date when the evaluation count was updated"
                    }
                }
            },
            "AlertingTaskTriggerStats": {
                "type": "object",
                "required": [
                    "last100Scans",
                    "last10Scans",
                    "totalScans"
                ],
                "properties": {
                    "totalScans": {
                        "type": "integer",
                        "maximum": 100,
                        "description": "The number of scans for the current condition."
                    },
                    "last10Scans": {
                        "type": "integer",
                        "maximum": 10,
                        "description": "The number of triggers out of the last 10 scans for the current condition."
                    },
                    "last100Scans": {
                        "type": "integer",
                        "maximum": 100,
                        "description": "The number of triggers out of the last 100 scans for the current condition."
                    }
                }
            },
            "AlertingTaskValidation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifies for user id or condition id"
                    },
                    "type": {
                        "enum": [
                            "RECIPIENT",
                            "CONDITION",
                            "RECIPIENT_GROUP"
                        ],
                        "type": "string",
                        "description": "Identifier for type of a validation error occurring on alerting task"
                    },
                    "error": {
                        "enum": [
                            "NO_ACCESS",
                            "USER_IS_DISABLED",
                            "INVALID_CONDITION",
                            "GROUP_IS_DISABLED",
                            "GROUP_SIZE_EXCEEDED"
                        ],
                        "type": "string",
                        "description": "Identifier for a validation error occurring on alerting task",
                        "x-qlik-deprecated": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the error"
                    },
                    "validationErrors": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "NO_ACCESS",
                                "USER_IS_DISABLED",
                                "INVALID_CONDITION",
                                "MAX_ALERTS_LIMIT_REACHED",
                                "MAX_ALERT_RECIPIENTS_LIMIT_REACHED",
                                "GROUP_IS_DISABLED",
                                "GROUP_SIZE_EXCEEDED"
                            ],
                            "type": "string"
                        }
                    }
                }
            },
            "AlertingTaskValidationResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "FAILURE",
                            "SUCCESS"
                        ],
                        "type": "string"
                    },
                    "validations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskValidation"
                        }
                    }
                }
            },
            "Error_meta": {
                "type": "object",
                "properties": {
                    "httpCode": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "HTTP error code."
                    }
                }
            },
            "EvaluationGetResponse": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "object",
                        "properties": {}
                    },
                    "evaluation": {
                        "$ref": "#/components/schemas/Evaluation"
                    },
                    "hideSelections": {
                        "type": "boolean"
                    }
                }
            },
            "ExecutionStats": {
                "type": "object",
                "properties": {
                    "endTime": {
                        "type": "string"
                    },
                    "periodKey": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "totalExecutions": {
                        "type": "string"
                    },
                    "triggeredExecutions": {
                        "type": "string"
                    }
                }
            },
            "GroupIDRecipient": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "example": "group1",
                        "description": "Group ID of recipient."
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts."
                    },
                    "taskGroupRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskGroupRecipientError"
                        },
                        "nullable": true
                    },
                    "alertingTaskGroupRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskGroupRecipientError"
                        }
                    }
                },
                "description": "an internal recipient based on its group id."
            },
            "Page": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "example": "http://localhost:8787/v1/items?limit=12",
                        "description": "URL to particular set of elements"
                    },
                    "type": {
                        "enum": [
                            "prev",
                            "next"
                        ],
                        "type": "string",
                        "example": "next",
                        "description": "Page type, can be next or prev"
                    },
                    "token": {
                        "type": "string",
                        "example": "JwAAAAJfaWQAGQAAADVjZjUwM2NjMjVkYzlhMTM1MzYwZTVjZAAA",
                        "description": "Page unique token"
                    }
                }
            },
            "Recipients": {
                "type": "object",
                "required": [
                    "userIds"
                ],
                "properties": {
                    "DLUsers": {
                        "type": "array"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserIDRecipient"
                        }
                    },
                    "DLGroups": {
                        "type": "array"
                    },
                    "DLListId": {
                        "type": "string"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupIDRecipient"
                        }
                    }
                },
                "description": "List of recipients. An internal recipient is represented by either their user id or group id."
            },
            "RecipientsChange": {
                "type": "object",
                "properties": {
                    "dateTime": {
                        "type": "string",
                        "description": "time of recipient state change"
                    },
                    "patchAction": {
                        "$ref": "#/components/schemas/AlertingTaskRecipientPatch"
                    }
                },
                "description": "Change in a recipient for an alerting task"
            },
            "ScheduleOptions": {
                "type": "object",
                "properties": {
                    "timezone": {
                        "type": "string",
                        "example": "Canada/Pacific",
                        "nullable": true,
                        "description": "The timezone for time calculations in SCHEDULED triggers, optional."
                    },
                    "recurrence": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "RRULE:FREQ=HOURLY;INTERVAL=2"
                        ],
                        "description": "List of RRULEs for SCHEDULED triggers, as specified in RFC5545. Note that DTSTART and DTEND, UNTIL lines are not allowed in this field; start and end times are specified in the start and end fields. RDATE and EXDATE lines are not currently supported. EXRULE is not supported since it is deprecated by RFC5545. It is mandatory if the trigger type is SCHEDULED. At least 1 rule must be set and maximum 5 rules are allowed."
                    },
                    "endDateTime": {
                        "type": "string",
                        "default": "",
                        "example": "2026-01-02T16:04:05",
                        "nullable": true,
                        "description": "EndDateTime is a local date time with respect to the above timezone parameter. If the timezone parameter is missing, then the timezone used is the one retrieved from user infos. Therefore ISO8601 time offsets are not allowed (e.g. \"2026-01-02T16:04:05Z\" or \"2026-01-02T16:04:05+01\"), if passed an error will be returned. EndDateTime is an optional parameter, when not set or when it's an empty string, the recurrence is intended to be never ending."
                    },
                    "chronosJobID": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The chronos job identifier. It is set once the related chronos job is created."
                    },
                    "startDateTime": {
                        "type": "string",
                        "example": "2006-01-02T16:04:05",
                        "nullable": true,
                        "description": "StartDateTime is a local date time with respect to the above timezone parameter. If the timezone parameter is missing, then the timezone used is the one retrieved from user infos. Therefore ISO8601 time offsets are not allowed (e.g. \"2026-01-02T16:04:05Z\" or \"2026-01-02T16:04:05+01\"), if passed an error will be returned. StartDateTime should not be older than 1 year from current date. StartDateTime is an optional parameter, when not set or when it's an empty string, its value is set to the current local date time."
                    },
                    "lastExecutionTime": {
                        "type": "string",
                        "example": "2020-11-20T12:00:55.000Z",
                        "nullable": true,
                        "readOnly": true,
                        "description": "lastExecutionTime is the time of the chronos job last execution in RFC3339 format (a time with a fixed UTC offset). Could be empty if job has not run yet."
                    },
                    "nextExecutionTime": {
                        "type": "string",
                        "example": "2020-11-20T12:00:55.000Z",
                        "nullable": true,
                        "readOnly": true,
                        "description": "nextExecutionTime is the time of the chronos job next execution in RFC3339 format (a time with a fixed UTC offset). Could be empty if the job is completed."
                    }
                }
            },
            "Self": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "example": "http://localhost:8787/v1/items/5da5825325dc9a0dd0260af9"
                    }
                },
                "description": "Object with Href to a particular element or set of elements"
            },
            "StandardListResponseProps": {
                "type": "object",
                "required": [
                    "currentPageCount",
                    "totalCount"
                ],
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "total count of entries in the collection as a whole"
                    },
                    "currentPageCount": {
                        "type": "integer",
                        "description": "count of entries on the currently shown page"
                    }
                },
                "description": "properties that should be added to every list response"
            },
            "TaskGroupRecipientError": {
                "type": "object",
                "properties": {
                    "value": {
                        "enum": [
                            "GROUP_IS_DISABLED",
                            "MAX_ALERTS_LIMIT_REACHED",
                            "GROUP_WITH_NO_APP_ACCESS",
                            "GROUP_IS_DELETED",
                            "GROUP_NOT_FOUND_DL",
                            "GROUP_DISABLED_IN_DL"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on sharing task specific for group recipient"
                    },
                    "timestamp": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    }
                }
            },
            "TaskRecipientError": {
                "type": "object",
                "properties": {
                    "value": {
                        "enum": [
                            "USER_IS_DELETED",
                            "USER_DISABLED_IN_QCS",
                            "NO_ACCESS_TO_APP",
                            "UNSUBSCRIBED_FROM_SHARING",
                            "USER_DISABLED_IN_SHARING_BY_OWNER",
                            "CHART_NOT_FOUND",
                            "APP_NOT_FOUND",
                            "SHEET_NOT_FOUND",
                            "ENGINE_POD_NOT_AVAILABLE",
                            "CHART_TYPE_NOT_ALLOWED",
                            "GENERIC_EXECUTION_FAILURE",
                            "USER_NOT_FOUND_DL",
                            "USER_DISABLED_IN_DL",
                            "FILTER_NOT_FOUND",
                            "BOOKMARK_NOT_FOUND"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on sharing task specific for recipient"
                    },
                    "timestamp": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    }
                }
            },
            "ThrottlingResource": {
                "type": "object",
                "properties": {
                    "capacity": {
                        "type": "integer",
                        "description": "the maximum number of tokens that the bucket can contain"
                    },
                    "timezone": {
                        "type": "string",
                        "default": "Etc/UTC",
                        "description": "the timezone for time calculations in this throttlingresource, for current time and time reference."
                    },
                    "replenishRate": {
                        "type": "integer",
                        "description": "the amount of tokens to insert into the bucket on the specified interval. (tokens exceeding capacity are discarded)"
                    },
                    "recurrenceRule": {
                        "type": "string",
                        "description": "A string that supports a subset of RFC5545 recurrence rule directives."
                    },
                    "initialTokenCount": {
                        "type": "integer",
                        "description": "the initial amount of tokens in the bucket upon creation. cannot exceed capacity."
                    },
                    "referenceTimestamp": {
                        "type": "string",
                        "description": "a date and time reference specified in RFC3339 format"
                    }
                },
                "description": "The rules and setup for throttling"
            },
            "UserIDRecipient": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "example": "1b263bs8m0mm_s21s3f",
                        "description": "User ID of recipient (internal user)."
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "addedIndividually",
                            "group1",
                            "group2"
                        ],
                        "description": "A list of associated groups. If a user is added individually the \"addedIndividually\" pseudo group is included"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts."
                    },
                    "subscribed": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient is subscribed to alerts of a task"
                    },
                    "taskRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskRecipientError"
                        },
                        "nullable": true
                    },
                    "alertingTaskRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskRecipientError"
                        }
                    }
                },
                "description": "an internal recipient based on its user id."
            },
            "BatchIdDto": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    }
                }
            },
            "DataAsset": {
                "type": "object",
                "title": "Data Asset",
                "required": [
                    "appType",
                    "technicalName"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 0
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "appId": {
                        "type": "string"
                    },
                    "appType": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The value is automatically set by the application."
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "properties": {
                        "type": "object",
                        "description": "A Map of name-value pairs.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A Map of name-value pairs."
                        }
                    },
                    "createdTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    },
                    "dataFreshness": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date-time when the source data was last changed"
                    },
                    "dataStoreInfo": {
                        "$ref": "#/components/schemas/DataStoreInfo"
                    },
                    "technicalName": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "technicalDescription": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    }
                }
            },
            "DataStoreInfo": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "JsonPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "add",
                            "remove",
                            "replace",
                            "move",
                            "copy",
                            "test"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "from": {
                        "type": "string",
                        "description": "A JSON Pointer path pointing to the location to move/copy from."
                    },
                    "path": {
                        "type": "string",
                        "description": "A JSON pointer to the property being affected."
                    },
                    "value": {
                        "type": "object",
                        "description": "The value to add, replace or test."
                    }
                }
            },
            "ActionDeleteRequest": {
                "type": "object",
                "required": [
                    "connections"
                ],
                "properties": {
                    "connections": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "b2c1ab1f-392c-4cd1-87bd-4c3cd256f5fd",
                                    "description": "ID of connection"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "MyConnection",
                                    "description": "Connection name"
                                }
                            }
                        }
                    }
                }
            },
            "ActionDuplicateRequest": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "b2c1ab1f-392c-4cd1-87bd-4c3cd256f5fd",
                        "description": "ID of the source connection being duplicated"
                    },
                    "name": {
                        "type": "string",
                        "example": "ResourceName",
                        "description": "Optional name for the duplicated connection, must be unique in the target scope. If not specified, a name will be automatically generated"
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "611bcebaeec1203d88211ac4",
                        "description": "Optional target space ID for the duplicated connection. If not specified, the duplicated connection will be in the same space as the source connection"
                    },
                    "qPassword": {
                        "type": "string",
                        "example": "Password",
                        "description": "Optional credential password, specify to override credential embedded (or associated) with the source connection"
                    },
                    "qUsername": {
                        "type": "string",
                        "example": "UserName",
                        "description": "Optional credential username, specify to override credential embedded (or associated) with the source connection"
                    }
                }
            },
            "ActionUpdateRequest": {
                "type": "object",
                "required": [
                    "connections"
                ],
                "properties": {
                    "connections": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "b2c1ab1f-392c-4cd1-87bd-4c3cd256f5fd",
                                    "description": "Connection ID"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "MyConnection",
                                    "description": "Connection name"
                                },
                                "ownerId": {
                                    "type": "string",
                                    "example": "6K9xjsItDexffSlu5vg1oWYkY8x7f-06",
                                    "description": "User ID to which the connection will be updated. If not present, the connection's owner wont be changed"
                                },
                                "spaceId": {
                                    "type": "string",
                                    "example": "611bcebaeec1203d88211ac4",
                                    "description": "Space ID to which the connection will be updated. If not present, the connection's space wont be changed. If it is empty string, then the connection will be moved to the personal space of the user identified by ownerId (If ownerId is undefined, then the connection will be in oroginal owner's personal space)"
                                },
                                "spaceType": {
                                    "enum": [
                                        "personal",
                                        "shared",
                                        "managed",
                                        "data"
                                    ],
                                    "type": "string",
                                    "example": "personal",
                                    "description": "Space type. Required when spaceId is specified"
                                }
                            }
                        }
                    }
                }
            },
            "BulkResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "id",
                                "status"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "b2c1ab1f-392c-4cd1-87bd-4c3cd256f5fd",
                                    "description": "ID of the resource"
                                },
                                "error": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "status": {
                                    "type": "integer",
                                    "example": 204,
                                    "description": "Status code of operation on resource identified by ID"
                                }
                            }
                        }
                    }
                }
            },
            "ConnectionCreate": {
                "type": "object",
                "required": [
                    "qName",
                    "qConnectStatement",
                    "qType",
                    "datasourceID"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "b4a949cb-3aaf-4cd5-a140-dd3ea34f0d28",
                        "description": "Unique identifier (UUID) for the data connection. A UUID will be generated automatically if qID is not specified or empty"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "tag",
                            "description": "tag string (256 bytes or less)"
                        },
                        "example": "[\"tag1, \"tag2\"]",
                        "description": "List of tags attached to the connection (allow max 32 tags)"
                    },
                    "owner": {
                        "type": "string",
                        "example": "928e2a66-01ba-4678-aa32-e74c213896fa",
                        "description": "App ID"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyConnection",
                        "description": "Descriptive name of the data connection"
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvOdbcConnectorPackage.exe",
                        "description": "Type of connection - indicates connection provider type"
                    },
                    "space": {
                        "type": "string",
                        "example": "611bcebaeec1203d88211ac4",
                        "description": "ID of the space to which the connection belongs"
                    },
                    "qLogOn": {
                        "enum": [
                            "0",
                            "1",
                            "LOG_ON_SERVICE_USER",
                            "LOG_ON_CURRENT_USER"
                        ],
                        "type": "string",
                        "example": "1",
                        "description": "Indicates the type of user associated with the data connection."
                    },
                    "qPassword": {
                        "type": "string",
                        "example": "Connector encoded password",
                        "description": "Any logon password associated with the data connection (connector encoded)"
                    },
                    "qUsername": {
                        "type": "string",
                        "example": "MyUsername",
                        "description": "Any logon username associated with the data connection"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "snowflake",
                        "description": "ID of the datasource associated with this connection"
                    },
                    "qriInRequest": {
                        "type": "string",
                        "example": "qri:db:snowflake://BQ1-3F_BvWfxxCDDiz9vQepqHLAcHWqacoqwLq4wxWM",
                        "description": "QRI string of the connection. The string will be persisted to mongo when the request is originated from trusted client (i.e. dcaas) to avoid invalid QRi string."
                    },
                    "qArchitecture": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 0,
                        "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                    },
                    "qCredentialsID": {
                        "type": "string",
                        "example": "935ec250-65bc-47c0-965b-53554f3f87d8",
                        "description": "ID of the credential associated with the connection"
                    },
                    "qEngineObjectID": {
                        "type": "string",
                        "example": "b4a949cb-3aaf-4cd5-a140-dd3ea34f0d28",
                        "description": "Unique identifier (UUID) for the data connection as specified by the Sense engine. A UUID will be generated automatically if this field is not specified or empty"
                    },
                    "qCredentialsName": {
                        "type": "string",
                        "example": "MyCredential",
                        "description": "Name of the credential associated with the connection"
                    },
                    "qConnectStatement": {
                        "type": "string",
                        "example": "CUSTOM CONNECT TO \\\"provider=QvOdbcConnectorPackage.exe;driver=snowflake;server=...\\\"",
                        "description": "Connection string for the data connection"
                    },
                    "qConnectionSecret": {
                        "type": "string",
                        "example": "Any connection specific secret string",
                        "description": "String that contains connection specific secret (or password) that requires encryption before persist to database. This field is connection level secret"
                    },
                    "qSeparateCredentials": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Indicates whether or not to create a credential-less connection"
                    }
                },
                "description": "Schema used to create a connection with given connection string (i.e. qConnectStatement) along with other metadata"
            },
            "ConnectionCreateResponse": {
                "type": "object",
                "required": [
                    "qID",
                    "qName",
                    "qConnectStatement",
                    "qType",
                    "qLogOn",
                    "qEngineObjectID",
                    "qArchitecture",
                    "qSeparateCredentials",
                    "privileges"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "b4a949cb-3aaf-4cd5-a140-dd3ea34f0d28",
                        "description": "Unique identifier (UUID) for the data connection, must be same as qEngineObjectID"
                    },
                    "user": {
                        "type": "string",
                        "example": "rFdHeUOiVYgPX5iTbvL0x0Cs6F62QI",
                        "description": "User ID of the connection's creator"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyConnection",
                        "description": "Descriptive name of the data connection"
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvOdbcConnectorPackage.exe",
                        "description": "Type of connection - indicates connection provider type"
                    },
                    "space": {
                        "type": "string",
                        "example": "611bcebaeec1203d88211ac4",
                        "description": "ID of the space to which the connection belongs"
                    },
                    "qLogOn": {
                        "enum": [
                            "0",
                            "1",
                            "LOG_ON_SERVICE_USER",
                            "LOG_ON_CURRENT_USER"
                        ],
                        "type": "string",
                        "example": "1",
                        "description": "Indicates the type of user associated with the data connection."
                    },
                    "created": {
                        "type": "string",
                        "example": "2022-04-09T10:00:28.287Z",
                        "description": "Datetime when the connection was created"
                    },
                    "updated": {
                        "type": "string",
                        "example": "2022-04-09T10:00:28.287Z",
                        "description": "Datetime when the connection was last updated"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Privilege"
                        },
                        "example": "[update, delete, read]",
                        "description": "Array of string (i.e. update, delete, read) indicating the user's privileges on the associated connection"
                    },
                    "qArchitecture": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 0,
                        "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                    },
                    "qReferenceKey": {
                        "type": "string",
                        "example": "credential:key",
                        "description": "Reference key of credential in redis"
                    },
                    "qCredentialsID": {
                        "type": "string",
                        "example": "7b475581-2f68-4c81-ac52-25705b8229fb",
                        "description": "ID of the credential associated with the connection"
                    },
                    "qEngineObjectID": {
                        "type": "string",
                        "example": "b4a949cb-3aaf-4cd5-a140-dd3ea34f0d28",
                        "description": "Unique identifier (UUID) for the data connection, must be same as qID"
                    },
                    "qCredentialsName": {
                        "type": "string",
                        "example": "MyCredential",
                        "description": "Name of the credential associated with the connection"
                    },
                    "qConnectStatement": {
                        "type": "string",
                        "example": "CUSTOM CONNECT TO \\\"provider=QvOdbcConnectorPackage.exe;driver=snowflake;server=...\\\"",
                        "description": "Connection string for the data connection"
                    },
                    "qSeparateCredentials": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates whether or not this is a credential-less connection"
                    }
                },
                "description": "Essential fields of a connection"
            },
            "ConnectionGet": {
                "type": "object",
                "required": [
                    "qID",
                    "qName",
                    "qConnectStatement",
                    "qType",
                    "qLogOn",
                    "qEngineObjectID",
                    "qArchitecture",
                    "qSeparateCredentials",
                    "privileges",
                    "created",
                    "updated",
                    "user",
                    "tenant"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "a7eb530e-475a-4864-bc12-dacf4b081e72",
                        "description": "Unique identifier (UUID) for the data connection, must be same as qEngineObjectID"
                    },
                    "qri": {
                        "type": "string",
                        "example": "qri:db:snowflake://BQ1-3F_BvWfxxCDDiz9vQepqHLAcHWqacoqwLq4wxWM",
                        "description": "Encrypted base Qri string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "tag",
                            "description": "tag string"
                        },
                        "example": "[\"tag1, \"tag2\"]",
                        "description": "List of tags attached to the connection"
                    },
                    "user": {
                        "type": "string",
                        "example": "rFdHeUOiVYgPX5iTbvL0x0Cs6F62QI",
                        "description": "User ID of the connection's creator"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyConnection",
                        "description": "Descriptive name of the data connection",
                        "x-qlik-filterable": true
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvOdbcConnectorPackage.exe",
                        "description": "Type of connection, i.e. provider type of underlying connector",
                        "x-qlik-filterable": true
                    },
                    "space": {
                        "type": "string",
                        "example": "6226583d53a69876774d4f96",
                        "description": "ID of the space to which the connection belongs"
                    },
                    "qLogOn": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 1,
                        "description": "Indicates the type of user associated with the data connection"
                    },
                    "tenant": {
                        "type": "string",
                        "example": "xqFQ0k34vSR0d9G7J-vZtHZQkiYrCqc8",
                        "description": "Tenant ID of the connection's creator"
                    },
                    "created": {
                        "type": "string",
                        "example": "2022-04-08T10:00:28.287Z",
                        "description": "Datetime when the connection was created",
                        "x-qlik-filterable": true
                    },
                    "updated": {
                        "type": "string",
                        "example": "2022-04-09T10:00:28.287Z",
                        "description": "Datetime when the connection was last updated",
                        "x-qlik-filterable": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Privilege"
                        },
                        "example": "[update, delete, read]",
                        "description": "Array of string (i.e. update, delete, read) indicating the user's privileges on the associated connection"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "sfdc",
                        "description": "Data source ID",
                        "x-qlik-filterable": true
                    },
                    "qArchitecture": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 0,
                        "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                    },
                    "qCredentialsID": {
                        "type": "string",
                        "example": "a4e00184-8743-4a44-a1a8-07bba573afea",
                        "description": "ID of the credential associated with the connection"
                    },
                    "qEngineObjectID": {
                        "type": "string",
                        "example": "a7eb530e-475a-4864-bc12-dacf4b081e72",
                        "description": "Unique identifier (UUID) for the data connection, must be same as qID"
                    },
                    "qConnectStatement": {
                        "type": "string",
                        "example": "CUSTOM CONNECT TO \\\"provider=QvOdbcConnectorPackage.exe;driver=snowflake;server=...\\\"",
                        "description": "Connection string for the data connection"
                    },
                    "qConnectionSecret": {
                        "type": "string",
                        "example": "Connection_Specific_Secret",
                        "description": "String that contains connection specific secret (or password). This field will not be included in response of GET /data-connections, will only be included in the response of GET /data-connections/{qID}"
                    },
                    "connectionProperties": {
                        "type": "object",
                        "example": "{\"property1\": \"value\", \"property2\": \"value\"}",
                        "description": "List of connection parsed from connection string (only available when query parseConnection=true is set)"
                    },
                    "qSeparateCredentials": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates whether or not this is a credential-less connection"
                    }
                },
                "description": "Essential fields of a connection"
            },
            "Connections": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConnectionGet"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/TopLevelLink"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/Errors"
                    }
                }
            },
            "ConnectionUpdate": {
                "type": "object",
                "required": [
                    "qID",
                    "qName",
                    "qConnectStatement",
                    "qType",
                    "qEngineObjectID"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "55e13286-fbd8-4a59-a10d-807937a97443",
                        "description": "Unique identifier for the data connection"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyConnection",
                        "description": "Descriptive name of the data connection"
                    },
                    "qType": {
                        "type": "string",
                        "example": "snowflake",
                        "description": "Type of connection - indicates connection provider type"
                    },
                    "space": {
                        "type": "string",
                        "example": "611bcebaeec1203d88211ac4",
                        "description": "ID of the space to which the connection belongs"
                    },
                    "qLogOn": {
                        "enum": [
                            "0",
                            "1",
                            "LOG_ON_SERVICE_USER",
                            "LOG_ON_CURRENT_USER"
                        ],
                        "type": "string",
                        "example": "1",
                        "description": "Indicates the type of user associated with the data connection."
                    },
                    "qPassword": {
                        "type": "string",
                        "example": "password",
                        "description": "Any logon password associated with the data connection"
                    },
                    "qUsername": {
                        "type": "string",
                        "example": "MyUsername",
                        "description": "Any logon username associated with the data connection"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "snowflake",
                        "description": "ID of the datasource associated with this connection"
                    },
                    "qArchitecture": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 1,
                        "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                    },
                    "qCredentialsID": {
                        "type": "string",
                        "example": "cea94172-fa83-47c8-8171-b6f151918ad0",
                        "description": "ID of the credential associated with the connection"
                    },
                    "qEngineObjectID": {
                        "type": "string",
                        "example": "55e13286-fbd8-4a59-a10d-807937a97443",
                        "description": "Unique identifier for the data connection as specified by the Sense engine"
                    },
                    "qCredentialsName": {
                        "type": "string",
                        "example": "CredentialName",
                        "description": "Name of the credential associated with the connection"
                    },
                    "qConnectStatement": {
                        "type": "string",
                        "example": "CUSTOM CONNECT TO \\\"provider=QvOdbcConnectorPackage.exe;driver=snowflake;server=...\\\"",
                        "description": "Connection string for the data connection"
                    },
                    "qConnectionSecret": {
                        "type": "string",
                        "example": "connection specific secret string",
                        "description": "String that contains connection level secret (or password). If this field presents in request, then existing connection secret will be updated to its value. If is an empty string, then existing connection secret will be cleared. If this field is missing, existing secret will not be updated."
                    },
                    "qSeparateCredentials": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates whether or not this is a credential-less connection"
                    }
                }
            },
            "DcaasConnectionCreate": {
                "type": "object",
                "required": [
                    "qName",
                    "datasourceID",
                    "connectionProperties"
                ],
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "tag",
                            "description": "tag string (256 bytes or less)"
                        },
                        "example": "[\"tag1, \"tag2\"]",
                        "description": "List of tags attached to the connection (allow max 31 tags)"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyConnection",
                        "description": "Descriptive name of the data connection"
                    },
                    "space": {
                        "type": "string",
                        "example": "611bcebaeec1203d88211ac4",
                        "description": "ID of the space in which the connection shall be created. Connection will be created in user's personal space if undefined"
                    },
                    "authUrlOnly": {
                        "type": "boolean",
                        "example": true,
                        "description": "When set to true, only authentication URL will be returned (i.e. no connection will be created) if datasource supports OAuth, and other properties set in the request will ignored. This property will be ignored if the request is not OAuth or datasource doesn't support OAuth"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "rest",
                        "description": "ID of the datasource of the connection"
                    },
                    "connectionProperties": {
                        "type": "object",
                        "example": "{\"property1\": \"value1\", \"property2\": \"value2\", ...}",
                        "description": "Connection properties required to create dataconnection for the given datasource, which is defined by the response of 'GET /v1/data-sources/:{datasourceId}/api-specs'"
                    }
                },
                "description": "Schema used to create a connection using a list of connection properties for given datasource"
            },
            "DcaasConnectionCreateAuthResponse": {
                "type": "object",
                "required": [
                    "authUrl"
                ],
                "properties": {
                    "authUrl": {
                        "type": "string",
                        "example": "https://www.dropbox.com/oauth2/authorize?client_id=...",
                        "description": "Authentication URL used to generate authentication code for datasources supporting OAuth"
                    }
                },
                "description": "Authentication URL response for OAuth datasources (when authUrlOnly is set to true in request)"
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "unreadCount": {
                        "type": "number",
                        "maximum": 500,
                        "minimum": 0,
                        "description": "The total number of unread notification."
                    }
                },
                "description": "Notifications meta data"
            },
            "PatchRequest": {
                "type": "object",
                "required": [
                    "patchData"
                ],
                "properties": {
                    "patchData": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "op": {
                                    "enum": [
                                        "add",
                                        "replace",
                                        "remove"
                                    ],
                                    "type": "string",
                                    "example": "add",
                                    "description": "Operation type"
                                },
                                "path": {
                                    "type": "string",
                                    "example": "/qName",
                                    "description": "Path to the target field to be patched"
                                },
                                "value": {
                                    "type": "string",
                                    "example": "New value",
                                    "description": "The value used for the patch, only needed for 'add' or 'replace'. Value type could be either string or integer, should match with the type of the target field"
                                }
                            }
                        }
                    }
                }
            },
            "Privilege": {
                "enum": [
                    "list",
                    "update",
                    "delete",
                    "read",
                    "change_owner",
                    "change_space"
                ],
                "type": "string",
                "example": "list",
                "description": "Access type allowed on associated data connection"
            },
            "ResponseErrors": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicApiError"
                        }
                    }
                }
            },
            "TopLevelLink": {
                "type": "object",
                "required": [
                    "self"
                ],
                "properties": {
                    "next": {
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "type": "string",
                                "example": "https://mytenant.us.qlikcloud.com/...",
                                "description": "URL pointing to the next page of resources"
                            }
                        },
                        "description": "URL link to next page of requested resources (available to paged request only)"
                    },
                    "prev": {
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "type": "string",
                                "example": "https://mytenant.us.qlikcloud.com/...",
                                "description": "URL pointing to the previous page of resources"
                            }
                        },
                        "description": "URL link to previous page of requested resources (available to paged request only)"
                    },
                    "self": {
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "type": "string",
                                "example": "https://mytenant.us.qlikcloud.com/.../0e445014-a564-496a-9a8d-28baadcc3ef9",
                                "description": "URL pointing to the resource"
                            }
                        },
                        "description": "Link to current query"
                    }
                }
            },
            "ActionFilterOrphanRequest": {
                "type": "object",
                "properties": {
                    "qType": {
                        "type": "string",
                        "example": "QvOdbcConnectorPackage.exe",
                        "description": "Filtering on type of credentials"
                    },
                    "qSeparated": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "example": 0,
                        "description": "Filtering on separate status of credentials: * 0 - embedded credential * 1 - separated credential\n"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "snowflake",
                        "description": "Filtering on datasource ID of credentials"
                    }
                }
            },
            "ActionFilterOrphanResponse": {
                "type": "object",
                "required": [
                    "data",
                    "count"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrphanCredentialResItem"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "example": 1,
                        "description": "Number of orphan credentials found"
                    }
                }
            },
            "Credential": {
                "type": "object",
                "required": [
                    "qID",
                    "qName",
                    "qType",
                    "qConnCount"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "065f977e-6eca-408c-b78b-ecded823712c",
                        "description": "UUID of the credential"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyCredential for REST datasource",
                        "description": "Name of the credential",
                        "x-qlik-filterable": true
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvWebStorageProviderConnectorPackage.exe",
                        "description": "Type of credential",
                        "x-qlik-filterable": true
                    },
                    "created": {
                        "type": "string",
                        "example": "2022-04-08T10:00:28.287Z",
                        "description": "Datetime when the credential was created",
                        "x-qlik-filterable": true
                    },
                    "updated": {
                        "type": "string",
                        "example": "2022-04-09T10:00:28.287Z",
                        "description": "Datetime when the credential was last updated",
                        "x-qlik-filterable": true
                    },
                    "qConnCount": {
                        "type": "integer",
                        "example": 1,
                        "description": "Number of linked connections"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "rest",
                        "description": "ID datasource that the credential is created for",
                        "x-qlik-filterable": true
                    },
                    "qReferenceKey": {
                        "type": "string",
                        "example": "credential:key",
                        "description": "Reference key of credential in redis"
                    }
                }
            },
            "CredentialCreate": {
                "required": [
                    "qName",
                    "qType",
                    "qUsername",
                    "qPassword"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "c2dd20e3-1842-42d0-81fe-1ecf08e6abde",
                        "description": "UUID of the credential"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyCredential for REST datasource",
                        "description": "Name of the credential"
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvWebStorageProviderConnectorPackage.exe",
                        "description": "Type of credential (i.e. connector provider of the corresponding connection)"
                    },
                    "qPassword": {
                        "type": "string",
                        "example": "MyPassword",
                        "description": "Password"
                    },
                    "qUsername": {
                        "type": "string",
                        "example": "MyUsername",
                        "description": "User name"
                    },
                    "connectionId": {
                        "type": "string",
                        "example": "2eb98dea-5e3b-4f50-9967-841cec04b72f",
                        "description": "ID of connection that will be associated with the credential"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "rest",
                        "description": "ID datasource that the credential is created for"
                    }
                },
                "description": "Credential"
            },
            "OrphanCredentialResItem": {
                "required": [
                    "qID",
                    "qName",
                    "qType",
                    "userId",
                    "tenantId",
                    "created",
                    "updated"
                ],
                "properties": {
                    "qID": {
                        "type": "string",
                        "example": "c2dd20e3-1842-42d0-81fe-1ecf08e6abde",
                        "description": "UUID of the credential"
                    },
                    "user": {
                        "type": "string",
                        "example": "rFdHeUOiVYgPX5iTbvL0x0Cs6F62QI",
                        "description": "User ID of the credential's owner"
                    },
                    "qName": {
                        "type": "string",
                        "example": "MyCredential for REST datasource",
                        "description": "Name of the credential"
                    },
                    "qType": {
                        "type": "string",
                        "example": "QvWebStorageProviderConnectorPackage.exe",
                        "description": "Type of credential (i.e. connector provider of the corresponding connection)"
                    },
                    "tenant": {
                        "type": "string",
                        "example": "xqFQ0k34vSR0d9G7J-vZtHZQkiYrCqc8",
                        "description": "Tenant ID of the credential's owner"
                    },
                    "created": {
                        "type": "string",
                        "example": "2022-04-08T10:00:28.287Z",
                        "description": "Datetime when the credential was created"
                    },
                    "updated": {
                        "type": "string",
                        "example": "2022-04-09T10:00:28.287Z",
                        "description": "Datetime when the credential was last updated"
                    },
                    "datasourceID": {
                        "type": "string",
                        "example": "rest",
                        "description": "ID datasource that the credential is created for"
                    }
                },
                "description": "Orphan credential"
            },
            "BatchChangeSpaceItem": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "The ID of the data file whose space will be changed."
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "617979737a9f56e49dea2e6e",
                        "nullable": true,
                        "description": "The ID of the new space.  Passing in a null will result in the data file being moved to the user's\r\npersonal space."
                    }
                },
                "additionalProperties": false
            },
            "BatchDeleteAllBySpaceItem": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "617979737a9f56e49dea2e6e",
                        "minLength": 1,
                        "description": "The ID of the space whose data files will be deleted."
                    }
                },
                "additionalProperties": false
            },
            "BatchDeleteItem": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "The ID of the data file to delete."
                    }
                },
                "additionalProperties": false
            },
            "ChangeDataFileOwnerRequest": {
                "type": "object",
                "required": [
                    "ownerId"
                ],
                "properties": {
                    "ownerId": {
                        "type": "string",
                        "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                        "description": "The ID of the new owner."
                    }
                },
                "additionalProperties": false
            },
            "ChangeDataFileSpaceRequest": {
                "type": "object",
                "properties": {
                    "spaceId": {
                        "type": "string",
                        "example": "617979737a9f56e49dea2e6e",
                        "nullable": true,
                        "description": "The ID of the space.  If null, this data file will be moved to the user's personal space."
                    }
                },
                "additionalProperties": false
            },
            "ConnectionsResponse": {
                "type": "object",
                "required": [
                    "connectStatement",
                    "id",
                    "name",
                    "type"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "The unique identifier of the connection."
                    },
                    "name": {
                        "type": "string",
                        "example": "DataFiles",
                        "description": "The name of the connection."
                    },
                    "type": {
                        "type": "string",
                        "example": "qix-datafiles.exe",
                        "description": "The type of the connection."
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "617979737a9f56e49dea2e6e",
                        "nullable": true,
                        "description": "The team space that the given connection is associated with.  If null, the connection is not associated\r\nwith any specific team space."
                    },
                    "spaceStats": {
                        "$ref": "#/components/schemas/SpaceStatsResponse"
                    },
                    "connectStatement": {
                        "type": "string",
                        "example": "CUSTOM CONNECT TO \\\"provider=qix-datafiles.exe;path=mydatafiles;\\\"",
                        "description": "The connect statement that will be passed to the connector when invoked."
                    }
                },
                "additionalProperties": false
            },
            "DataFileBatchChangeSpaceRequest": {
                "type": "object",
                "required": [
                    "change-space"
                ],
                "properties": {
                    "change-space": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BatchChangeSpaceItem"
                        },
                        "description": "The list of data files to delete."
                    }
                },
                "description": "Specifies the list of data file change space operations in a single batch.",
                "additionalProperties": false
            },
            "DataFileBatchDeleteRequest": {
                "type": "object",
                "required": [
                    "delete"
                ],
                "properties": {
                    "delete": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BatchDeleteItem"
                        },
                        "description": "If specified, the explicit list of data files to delete."
                    },
                    "deleteAllBySpace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BatchDeleteAllBySpaceItem"
                        },
                        "nullable": true,
                        "description": "If specified, attempt to delete all of the data files from the specified shared spaces."
                    },
                    "deleteAllFromPersonalSpace": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If specified, attempt to delete all of the datafiles from ther user's personal space."
                    }
                },
                "additionalProperties": false
            },
            "DataFilePermission": {
                "enum": [
                    "read",
                    "update",
                    "delete",
                    "list",
                    "change_owner",
                    "change_space"
                ],
                "type": "string",
                "description": "<p>Members:</p><ul></ul>"
            },
            "DataFileUploadResponse": {
                "type": "object",
                "required": [
                    "actions",
                    "createdDate",
                    "folderStats",
                    "id",
                    "name",
                    "ownerId",
                    "size"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "The ID for the file or folder."
                    },
                    "qri": {
                        "type": "string",
                        "example": "qri:qdf:space://ooSOGoLLaq7EMaSdSsCiGvLwcd_VAf1oU0mzwSfp_Qs#wME89c8gKu_Tpz8W_a0JKSbKC4hzbNu0NLVgqi2UFS0",
                        "nullable": true,
                        "description": "The QRI generated from the datafile or folder's metadata."
                    },
                    "name": {
                        "type": "string",
                        "example": "some/folder/MyFile.csv",
                        "description": "The full name of the file or folder, including any folder path prefix."
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1024,
                        "description": "The size of the uploaded file, in bytes.  0 if this item represents a folder"
                    },
                    "appId": {
                        "type": "string",
                        "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                        "nullable": true,
                        "description": "If this file or folder is bound to the lifecycle of a specific app, this is the ID of this app."
                    },
                    "folder": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether or not this given item represents a folder or a file."
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataFilePermission"
                        },
                        "description": "The CRUD actions that are allowed on the given data file."
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                        "description": "The 'owner' of a file or folder is the user who last uploaded the item's content."
                    },
                    "spaceId": {
                        "type": "string",
                        "example": "617979737a9f56e49dea2e6e",
                        "nullable": true,
                        "description": "If the file or folder was created in a team space, this is the ID of that space."
                    },
                    "baseName": {
                        "type": "string",
                        "example": "MyFile.csv",
                        "nullable": true,
                        "description": "The name of the file or folder, not including any folder path prefix."
                    },
                    "folderId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "nullable": true,
                        "description": "If the file or folder resides in a parent folder, this is the parent folder ID.  If the file or folder\r\ndoes not reside in a parent folder, this value is null."
                    },
                    "folderPath": {
                        "type": "string",
                        "example": "some/folder",
                        "nullable": true,
                        "description": "If the file or folder resides in a parent folder, this is the parent folder path.  If the file or folder\r\ndoes not reside in a parent folder, this value is null."
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-07-07T20:52:40.8534780Z",
                        "description": "The date that the file or folder was created."
                    },
                    "folderStats": {
                        "$ref": "#/components/schemas/FolderStatsResponse"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-07-07T20:52:40.8534780Z",
                        "nullable": true,
                        "description": "The date that the updated file or folder was last modified."
                    }
                },
                "additionalProperties": false
            },
            "ErrorCode": {
                "enum": [
                    "HTTP-200",
                    "HTTP-201",
                    "HTTP-204",
                    "HTTP-400",
                    "HTTP-403",
                    "HTTP-404",
                    "HTTP-409",
                    "HTTP-413",
                    "HTTP-423",
                    "HTTP-500",
                    "HTTP-501",
                    "HTTP-503",
                    "DF-001",
                    "DF-002",
                    "DF-003",
                    "DF-004",
                    "DF-005",
                    "DF-006",
                    "DF-007",
                    "DF-008",
                    "DF-009",
                    "DF-010",
                    "DF-011",
                    "DF-012",
                    "DF-013",
                    "DF-014",
                    "DF-015",
                    "DF-016",
                    "DF-017",
                    "DF-018",
                    "DF-019",
                    "DF-020",
                    "DF-021",
                    "DF-022",
                    "DF-023",
                    "DF-024",
                    "DF-025",
                    "DF-026"
                ],
                "type": "string",
                "description": "Fine-grained error codes for data-files REST operations.  For operations which do not have a more fine-grained\r\nerror code, the error code is set to the HTTP status code.<p>Members:</p><ul><li><i>DF-001</i> - The page cursor passed as a parameter to the GET operation is invalid.</li><li><i>DF-002</i> - The sort specification passed as a parameter to the GET operation is invalid.</li><li><i>DF-003</i> - FolderPath and FolderId are mutually exclusive, they cannot both be passed as parameters.</li><li><i>DF-004</i> - The provided FolderPath must be in canonical form.</li><li><i>DF-005</i> - The specified parent folder cannot be found.</li><li><i>DF-006</i> - The specified owner cannot be found.</li><li><i>DF-007</i> - A connection corresponding to the specified space cannot be found.</li><li><i>DF-008</i> - THe specified ID must correspond to a folder, not a file.</li><li><i>DF-009</i> - The specified space cannot be found.</li><li><i>DF-010</i> - The specified file name contains an invalid file extension.</li><li><i>DF-011</i> - The specified file name is missing a file extension.</li><li><i>DF-012</i> - The specified temporary content file could not be found.</li><li><i>DF-013</i> - Access to the specified space is forbidden.</li><li><i>DF-014</i> - The specified connection cannot be found.</li><li><i>DF-015</i> - The provided filename must be in canonical form.</li><li><i>DF-016</i> - The datafile size quota for the given personal space has been exceeded.</li><li><i>DF-017</i> - The specified source file or folder could not be found.</li><li><i>DF-018</i> - The source and target of a datafile operation must either both be folders or both be files, but they are\n            not.</li><li><i>DF-019</i> - The specified target folder is a child of the specified source folder, which is not allowed.</li><li><i>DF-020</i> - The specified folder does not exist in the specified space.</li><li><i>DF-021</i> - The specified source file or folder is already locked.</li><li><i>DF-022</i> - The automatic creation of a missing parent folder failed.</li><li><i>DF-023</i> - An attempt to lock a parent folder of a given data file item failed.</li><li><i>DF-024</i> - The attempt to copy a source file or folder to a target failed.</li><li><i>DF-025</i> - The specified target file or folder is already locked.</li><li><i>DF-026</i> - The request results in the creation of a folder hierarchy which is beyond the max allowed folder\n            hierarchy depth.</li></ul>"
            },
            "ErrorResponseItem": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "REPTPL-400001",
                        "nullable": true,
                        "description": "The error code."
                    },
                    "title": {
                        "type": "string",
                        "example": "Cursor not formatted correctly.",
                        "nullable": true,
                        "description": "Summary of the problem."
                    },
                    "detail": {
                        "type": "string",
                        "example": "Invalid encoding of cursor.",
                        "nullable": true,
                        "description": "A human-readable explanation specific to this occurrence of the problem."
                    }
                },
                "additionalProperties": false
            },
            "FolderStatsResponse": {
                "type": "object",
                "required": [
                    "aggregateAppScopedFileSize",
                    "aggregateFileSize",
                    "aggregateInternalFileSize",
                    "directAppScopedFileCount",
                    "directFileCount",
                    "directFolderCount",
                    "directInternalFileCount",
                    "totalAppScopedFileCount",
                    "totalFileCount",
                    "totalFolderCount",
                    "totalInternalFileCount"
                ],
                "properties": {
                    "totalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of data files that reside as direct and indirect children of the given folder and it's sub-folder\r\nhierarchy."
                    },
                    "directFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of data files that reside as direct children of the given folder."
                    },
                    "totalFolderCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of folders that reside as direct and indirect children of the given folder and it's sub-folder\r\nhierarchy."
                    },
                    "aggregateFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all data files that reside as direct and indirect children of the given\r\nfolder and it's sub-folder hierarchy."
                    },
                    "directFolderCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of sub-folders that reside as direct children of the given folder."
                    },
                    "totalInternalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of 'internal' data files (IE, those that are not visible to end users by default) that reside as\r\ndirect and indirect children of the given folder and it's sub-folder hierarchy."
                    },
                    "directInternalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of 'internal' data files (IE, those that are not visible to end users by default) that reside as\r\ndirect children of the given folder."
                    },
                    "totalAppScopedFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of app-scoped data files that reside as direct and indirect children of the given folder and it's\r\nsub-folder hierarchy."
                    },
                    "directAppScopedFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of app-scoped data files that reside as direct children of the given folder."
                    },
                    "aggregateInternalFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all internal data files that reside as direct and indirect children of\r\nthe given folder and it's sub-folder hierarchy."
                    },
                    "aggregateAppScopedFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all app-scoped data files that reside as direct and indirect children of\r\nthe given folder and it's sub-folder hierarchy."
                    }
                },
                "additionalProperties": false
            },
            "GetConnectionsResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConnectionsResponse"
                        },
                        "description": "Properties of the connections to the tenant spaces."
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinksResponse"
                    }
                },
                "additionalProperties": false
            },
            "GetConnectionsSortField": {
                "enum": [
                    "spaceId",
                    "+spaceId",
                    "-spaceId"
                ],
                "type": "string",
                "description": "<p>Members:</p><ul></ul>"
            },
            "GetDataFileInfosResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataFileUploadResponse"
                        },
                        "description": "Properties of the uploaded data files."
                    },
                    "links": {
                        "$ref": "#/components/schemas/LinksResponse"
                    }
                },
                "additionalProperties": false
            },
            "GetDataFileInfosSortField": {
                "enum": [
                    "name",
                    "+name",
                    "-name",
                    "size",
                    "+size",
                    "-size",
                    "modifiedDate",
                    "+modifiedDate",
                    "-modifiedDate",
                    "folder",
                    "+folder",
                    "-folder",
                    "baseName",
                    "+baseName",
                    "-baseName"
                ],
                "type": "string",
                "description": "<p>Members:</p><ul></ul>"
            },
            "MultiStatusResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MultiStatusResponseItem"
                        },
                        "description": "List of individual results for the items in the specified batch."
                    }
                },
                "additionalProperties": false
            },
            "MultiStatusResponseItem": {
                "type": "object",
                "required": [
                    "code",
                    "id",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "The unique identifier of the file."
                    },
                    "code": {
                        "$ref": "#/components/schemas/ErrorCode"
                    },
                    "title": {
                        "type": "string",
                        "example": "Cursor not formatted correctly.",
                        "nullable": true,
                        "description": "Summary of the problem."
                    },
                    "detail": {
                        "type": "string",
                        "example": "Invalid encoding of cursor.",
                        "nullable": true,
                        "description": "A human-readable explanation specific to this occurrence of the problem."
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "example": 400,
                        "description": "The HTTP status code."
                    }
                },
                "additionalProperties": false
            },
            "PutDataFileFolderMergeBehavior": {
                "enum": [
                    "merge",
                    "replace"
                ],
                "type": "string",
                "description": "If a SourceId is specified, and a folder is being updated by this PUT operation, this specifies how the\r\nsource folder contents should be applied to the target folder, if the target folder is not empty.  'merge'\r\nimplies the contents of the source folder should be merged with the existing target contents.  That is, all\r\nexisting direct or indirect child items in the target folder are replaced by the same items in the source folder.\r\nAll existing items in the target folder that are not present in the source folder are left, as is, in the target.\r\n'replace' implies the contents of the source folder should replace the contents of the target folder.  That is,\r\nall direct or indirect items in the target folder are removed before the items from the source folder are copied\r\nover.  The resulting target folder only contains the items from the source folder.  If not specified, the default\r\nbehavior is 'merge'.<p>Members:</p><ul></ul>"
            },
            "QuotaResponse": {
                "type": "object",
                "required": [
                    "allowedExtensions",
                    "allowedInternalExtensions",
                    "maxFileSize",
                    "maxLargeFileSize",
                    "maxSize",
                    "size"
                ],
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "example": 5000,
                        "description": "The current aggregate size of all files uploaded by a given user.  If the current aggregate size is greater\r\nthan the maximum aggregate size, this is a quota violation."
                    },
                    "maxSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 9223372036854776000,
                        "description": "The maximum aggregate size of all files uploaded by a given user."
                    },
                    "maxFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 524288000,
                        "description": "Maximum allowable size of an uploaded file."
                    },
                    "maxLargeFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 6442450944,
                        "description": "Maximum allowable size for a single uploaded large data file (in bytes).  This is a file that was indirectly\r\nuploaded using the temp content service chunked upload capability."
                    },
                    "allowedExtensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The allowed file extensions on files that are uploaded."
                    },
                    "allowedInternalExtensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The allowed file extensions for files that are only used internally by the system (and thus not typically\r\nshown to end users)."
                    }
                },
                "additionalProperties": false
            },
            "SpaceStatsResponse": {
                "type": "object",
                "required": [
                    "aggregateAppScopedFileSize",
                    "aggregateFileSize",
                    "aggregateInternalFileSize",
                    "directAppScopedFileCount",
                    "directFileCount",
                    "directFolderCount",
                    "directInternalFileCount",
                    "totalAppScopedFileCount",
                    "totalFileCount",
                    "totalFolderCount",
                    "totalInternalFileCount"
                ],
                "properties": {
                    "totalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of data files that reside as direct and indirect children of the given folder and it's sub-folder\r\nhierarchy."
                    },
                    "directFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of data files that reside as direct children of the given folder."
                    },
                    "totalFolderCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of folders that reside as direct and indirect children of the given folder and it's sub-folder\r\nhierarchy."
                    },
                    "aggregateFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all data files that reside as direct and indirect children of the given\r\nfolder and it's sub-folder hierarchy."
                    },
                    "directFolderCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of sub-folders that reside as direct children of the given folder."
                    },
                    "totalInternalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of 'internal' data files (IE, those that are not visible to end users by default) that reside as\r\ndirect and indirect children of the given folder and it's sub-folder hierarchy."
                    },
                    "directInternalFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of 'internal' data files (IE, those that are not visible to end users by default) that reside as\r\ndirect children of the given folder."
                    },
                    "totalAppScopedFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of app-scoped data files that reside as direct and indirect children of the given folder and it's\r\nsub-folder hierarchy."
                    },
                    "directAppScopedFileCount": {
                        "type": "integer",
                        "format": "int64",
                        "example": 50,
                        "description": "The number of app-scoped data files that reside as direct children of the given folder."
                    },
                    "aggregateInternalFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all internal data files that reside as direct and indirect children of\r\nthe given folder and it's sub-folder hierarchy."
                    },
                    "aggregateAppScopedFileSize": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10000,
                        "description": "The sum of the file sizes, in bytes, of all app-scoped data files that reside as direct and indirect children of\r\nthe given folder and it's sub-folder hierarchy."
                    }
                },
                "additionalProperties": false
            },
            "CreateDiProjectReq": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "New Project",
                        "description": "The name of the project"
                    },
                    "type": {
                        "type": "string",
                        "example": "DATA_PIPELINE",
                        "description": "The type of the project"
                    },
                    "space": {
                        "type": "string",
                        "example": "space-456",
                        "description": "The ID of the space where the project will be created"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is a new data integration project.",
                        "description": "A description of the project"
                    },
                    "platformType": {
                        "type": "string",
                        "example": "SNOWFLAKE",
                        "description": "The platform type of the project"
                    },
                    "platformConnection": {
                        "type": "string",
                        "example": "connection-string",
                        "description": "The platform connection string"
                    },
                    "cloudStagingConnection": {
                        "type": "string",
                        "example": "storage-connection-string",
                        "description": "The cloud staging connection string"
                    }
                }
            },
            "DataTaskInstanceState": {
                "type": "object",
                "properties": {
                    "state": {
                        "enum": [
                            "STARTING",
                            "RUNNING",
                            "COMPLETED",
                            "FAILED",
                            "CANCELED"
                        ],
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "DataTaskItemRsp": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DataTaskType"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "DataTaskType": {
                "enum": [
                    "LANDING",
                    "STORAGE",
                    "QVD_STORAGE",
                    "TRANSFORM",
                    "DATAMART",
                    "REGISTERED_DATA",
                    "REPLICATION",
                    "DISTRIBUTION",
                    "LAKE_LANDING"
                ],
                "type": "string",
                "x-enum-varnames": [
                    "LANDING",
                    "STORAGE",
                    "QVD_STORAGE",
                    "TRANSFORM",
                    "DATAMART",
                    "REGISTERED_DATA",
                    "REPLICATION",
                    "DISTRIBUTION",
                    "LAKE_LANDING"
                ]
            },
            "DiProjectItemRsp": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ErrorSource": {
                "type": "object",
                "properties": {
                    "pointer": {
                        "type": "string"
                    },
                    "parameter": {
                        "type": "string"
                    }
                }
            },
            "ExportDiProjectReq": {
                "type": "object",
                "properties": {
                    "includeBindings": {
                        "type": "boolean",
                        "example": false,
                        "description": "Include bindings in the exported zip file (optional, default is false)"
                    }
                }
            },
            "GetDiExportProjectVariablesRsp": {
                "type": "object",
                "properties": {
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "variable1",
                                    "description": "The name of the variable"
                                },
                                "value": {
                                    "type": "string",
                                    "example": "value1",
                                    "description": "The value of the variable"
                                }
                            }
                        }
                    }
                }
            },
            "ImportDiProjectRsp": {
                "type": "object"
            },
            "ListDataTasksRsp": {
                "type": "object",
                "properties": {
                    "dataTasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataTaskItemRsp"
                        }
                    }
                }
            },
            "ListDiProjectsRsp": {
                "type": "object",
                "properties": {
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DiProjectItemRsp"
                        }
                    }
                }
            },
            "UpdateDiExportProjectVariablesReq": {
                "type": "object",
                "properties": {
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "variable1",
                                    "description": "The name of the variable"
                                },
                                "value": {
                                    "type": "string",
                                    "example": "value1",
                                    "description": "The value of the variable"
                                }
                            }
                        }
                    }
                }
            },
            "UpdateDiExportProjectVariablesRsp": {
                "type": "object"
            },
            "BinnedFrequency": {
                "type": "object",
                "properties": {
                    "binEdge": {
                        "type": "number",
                        "format": "double"
                    },
                    "frequency": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Classification": {
                "type": "object",
                "properties": {
                    "pii": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "sensitive": {
                        "type": "boolean"
                    },
                    "obfuscation": {
                        "type": "string"
                    }
                }
            },
            "DataAssetInfo": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "dataStoreInfo": {
                        "$ref": "#/components/schemas/DataStoreInfo"
                    }
                }
            },
            "DataField": {
                "type": "object",
                "required": [
                    "dataType",
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "An array of system tags"
                        },
                        "description": "An array of system tags",
                        "uniqueItems": true
                    },
                    "alias": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "orphan": {
                        "type": "boolean"
                    },
                    "dataType": {
                        "$ref": "#/components/schemas/FieldDataType"
                    },
                    "nullable": {
                        "type": "boolean"
                    },
                    "userTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTag"
                        },
                        "description": "An array of user-supplied tags",
                        "uniqueItems": true
                    },
                    "encrypted": {
                        "type": "boolean"
                    },
                    "sensitive": {
                        "type": "boolean"
                    },
                    "primaryKey": {
                        "type": "boolean"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "ordinalPositionInKey": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DataSet": {
                "type": "object",
                "title": "Data Set",
                "required": [
                    "dataAssetInfo",
                    "qri",
                    "secureQri",
                    "technicalName"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "qri": {
                        "type": "string",
                        "format": "qdf:<store-type>:<tenant-guid>:<<uid@/sid@>user/space guid>:<path-to-file>",
                        "maxLength": 1024,
                        "minLength": 8,
                        "description": "NOTE: this will be deprecated after migration to secureQri. Required user defined field. All the parts in the format must be separated by ':'. The first part denotes the resourceType, followed by dataStoreType and tenant guid. The spaceGuid or userGuid is to be populated based on if the dataset is in shared or private space and finally the full file name. This field is auto populated for the dataSet generated for qix-datafiles."
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 0
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/Schema"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The value is automatically set by the application."
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "secureQri": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "description": "A Map of name-value pairs.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A Map of name-value pairs."
                        }
                    },
                    "createdTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    },
                    "operational": {
                        "$ref": "#/components/schemas/Operational"
                    },
                    "dataAssetInfo": {
                        "$ref": "#/components/schemas/DataAssetInfo"
                    },
                    "technicalName": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "appTypeOverride": {
                        "type": "string",
                        "description": "Optional override of DataAsset appType."
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "additionalSchemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Schema"
                        },
                        "description": "Optional field to specify additional schemas for files where multiple tables or sheets are available. User must define primary schema in 'schema' attribute and rest of the sheets/ tables can be defined using this field. This field is not populated for the dataSets with single schema"
                    },
                    "technicalDescription": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    },
                    "createdByConnectionId": {
                        "type": "string",
                        "description": "The connectionId that created the Dataset. Optional."
                    }
                }
            },
            "DataSetProfile": {
                "type": "object",
                "title": "Data Set Profile",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/ProfileMetadata"
                    },
                    "samples": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TableSample"
                        },
                        "readOnly": true
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TableProfile"
                        },
                        "readOnly": true
                    }
                }
            },
            "FieldDataType": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "DATE",
                            "TIME",
                            "DATETIME",
                            "TIMESTAMP",
                            "STRING",
                            "DOUBLE",
                            "DECIMAL",
                            "INTEGER",
                            "BOOLEAN",
                            "BINARY",
                            "CUSTOM"
                        ],
                        "type": "string",
                        "description": "Each datatype may vary in terms of required properties. Example: Datatype DECIMAL requires two mandatory properties to be defined - precision and scale, each one accepts integer value. All other datatypes does not have any required properties."
                    },
                    "properties": {
                        "type": "object",
                        "description": "The properties map key is string and the value is of type object. Please note, Datatype DECIMAL requires two mandatory properties to be defined; these properties must be named: precision and scale, each of these property accepts integer value.  All other datatypes does not require any manadatory properties to be defined.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "The properties map key is string and the value is of type object. Please note, Datatype DECIMAL requires two mandatory properties to be defined; these properties must be named: precision and scale, each of these property accepts integer value.  All other datatypes does not require any manadatory properties to be defined."
                        }
                    },
                    "originalType": {
                        "type": "string"
                    }
                }
            },
            "FieldProfile": {
                "type": "object",
                "title": "Field Profile",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "median": {
                        "type": "number",
                        "format": "double"
                    },
                    "average": {
                        "type": "number",
                        "format": "double"
                    },
                    "dataType": {
                        "enum": [
                            "DATE",
                            "TIME",
                            "DATETIME",
                            "TIMESTAMP",
                            "STRING",
                            "DOUBLE",
                            "DECIMAL",
                            "INTEGER",
                            "BOOLEAN",
                            "BINARY",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "kurtosis": {
                        "type": "number",
                        "format": "double"
                    },
                    "skewness": {
                        "type": "number",
                        "format": "double"
                    },
                    "fractiles": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "sampleValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "technicalName": {
                        "type": "string"
                    },
                    "classification": {
                        "$ref": "#/components/schemas/Classification"
                    },
                    "nullValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "textValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "zeroValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "maxNumericValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "maxStringLength": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minNumericValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "minStringLength": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sumStringLength": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "emptyStringCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sumNumericValues": {
                        "type": "number",
                        "format": "double"
                    },
                    "numericValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "standardDeviation": {
                        "type": "number",
                        "format": "double"
                    },
                    "distinctValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "mostFrequentValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Frequency"
                        }
                    },
                    "negativeValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "positiveValueCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "averageStringLength": {
                        "type": "number",
                        "format": "double"
                    },
                    "frequencyDistribution": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BinnedFrequency"
                        }
                    },
                    "lastSortedStringValue": {
                        "type": "string"
                    },
                    "firstSortedStringValue": {
                        "type": "string"
                    },
                    "sumSquaredNumericValues": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "Frequency": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "frequency": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Operational": {
                "type": "object",
                "title": "Operational",
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string"
                    },
                    "rowCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "logMessage": {
                        "type": "string"
                    },
                    "tableOwner": {
                        "type": "string"
                    },
                    "lastLoadTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "contentUpdated": {
                        "type": "boolean"
                    },
                    "lastUpdateTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tableConnectionInfo": {
                        "$ref": "#/components/schemas/TableConnectionInfo"
                    }
                }
            },
            "PageDataSetProfile": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataSetProfile"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "pages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ProfileMetadata": {
                "type": "object",
                "title": "Profile Metadata",
                "properties": {
                    "status": {
                        "enum": [
                            "QUEUED",
                            "RUNNING",
                            "FINISHED",
                            "FAILED",
                            "INCOMPLETE",
                            "CANCELLED",
                            "STALE",
                            "PARTIAL",
                            "DEFERRED"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dataSetId": {
                        "type": "string"
                    },
                    "resultType": {
                        "enum": [
                            "NORMAL",
                            "BASIC"
                        ],
                        "type": "string"
                    },
                    "connectionId": {
                        "type": "string"
                    },
                    "lastLoadTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "computationEndTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "computationStartTime": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Schema": {
                "type": "object",
                "title": "Schema",
                "required": [
                    "dataFields"
                ],
                "properties": {
                    "anomalies": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Anomalies associated with this schema. Example: $warning-unknown-headers"
                        },
                        "description": "Anomalies associated with this schema. Example: $warning-unknown-headers",
                        "uniqueItems": true
                    },
                    "dataFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataField"
                        }
                    },
                    "schemaName": {
                        "type": "string"
                    },
                    "loadOptions": {
                        "type": "object",
                        "description": "Options for loading files. Example: \"qLabel\": \"embedded labels\"",
                        "additionalProperties": {
                            "type": "object",
                            "description": "Options for loading files. Example: \"qLabel\": \"embedded labels\""
                        }
                    },
                    "effectiveDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "overrideSchemaAnomalies": {
                        "type": "boolean"
                    }
                },
                "description": "Optional field to specify additional schemas for files where multiple tables or sheets are available. User must define primary schema in 'schema' attribute and rest of the sheets/ tables can be defined using this field. This field is not populated for the dataSets with single schema"
            },
            "TableConnectionInfo": {
                "type": "object",
                "properties": {
                    "tableName": {
                        "type": "string"
                    },
                    "selectionScript": {
                        "type": "string"
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "TableProfile": {
                "type": "object",
                "title": "Table Profile",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "sizeInBytes": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "numberOfRows": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "fieldProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FieldProfile"
                        },
                        "readOnly": true
                    }
                }
            },
            "TableRecord": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TableSample": {
                "type": "object",
                "title": "Table Sample",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TableRecord"
                        },
                        "readOnly": true
                    },
                    "fieldNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true
                    }
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "tag": {
                        "type": "string"
                    },
                    "score": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "UserTag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the tag in Collections"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 128,
                        "minLength": 1
                    }
                },
                "description": "An array of user-supplied tags"
            },
            "ApiSpecResponse": {
                "type": "object",
                "required": [
                    "connectorProvider",
                    "connectorVersion",
                    "connectionProperties"
                ],
                "properties": {
                    "connectorVersion": {
                        "type": "string",
                        "example": "1.180.0",
                        "description": "Datasource provider (i.e. connector) version"
                    },
                    "connectorProvider": {
                        "type": "string",
                        "example": "QvRestConnector.exe",
                        "description": "Datasource provider"
                    },
                    "connectionProperties": {
                        "type": "object",
                        "example": "{\"property1\": \"value\", \"property2\": \"value2\"}",
                        "description": "List of properties required for the given datasource"
                    }
                }
            },
            "ConnectorNodesInfo": {
                "type": "object",
                "required": [
                    "url",
                    "contractType",
                    "providerName",
                    "dataSourcesUpdated",
                    "state"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "example": "localhost:50060",
                        "description": "URL of connector node"
                    },
                    "state": {
                        "type": "string",
                        "example": "READY",
                        "description": "State of the connector node"
                    },
                    "contractType": {
                        "type": "number",
                        "example": 2,
                        "description": "Contract type used to communicate with the connector (between 0 and 3)"
                    },
                    "providerName": {
                        "type": "string",
                        "example": "Qlik® REST Connector",
                        "description": "Connector provider name"
                    },
                    "cachedDataSources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "rest"
                        ],
                        "description": "List of datasource Ids provided by the provider"
                    },
                    "dataSourcesUpdated": {
                        "type": "boolean",
                        "example": "true",
                        "description": "Indicates if the datasources is up to date"
                    }
                },
                "description": "Datasource metadata"
            },
            "DataSourceNew": {
                "type": "object",
                "required": [
                    "dataSourceId",
                    "name",
                    "provider",
                    "providerName"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Qlik® REST Connector",
                        "description": "Datasource name"
                    },
                    "uiInfo": {
                        "$ref": "#/components/schemas/UiInfo"
                    },
                    "provider": {
                        "type": "string",
                        "example": "QvRestConnector.exe",
                        "description": "Connector provider"
                    },
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "datasource-specific-capabity"
                        },
                        "description": "List of capabilities supported by the datasource"
                    },
                    "dataSourceId": {
                        "type": "string",
                        "example": "rest",
                        "description": "Unique identifier of datasource"
                    },
                    "providerName": {
                        "type": "string",
                        "example": "Qlik® REST Connector",
                        "description": "Provider name"
                    },
                    "qriDefinition": {
                        "$ref": "#/components/schemas/QriDefinition"
                    },
                    "dataLoadUrlOverride": {
                        "type": "string",
                        "example": "ml-endpoints:50055",
                        "description": "Override value of dataload URL (could be null)"
                    },
                    "dataSourcePropertyName": {
                        "type": "string",
                        "example": "sourceType",
                        "description": "Datasource property name (could be null)"
                    }
                },
                "description": "Datasource metadata"
            },
            "DataSourcesResponseNew": {
                "type": "object",
                "required": [
                    "dataSources",
                    "lastUpdated"
                ],
                "properties": {
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataSourceNew"
                        },
                        "description": "List of datasources metadata object"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "example": "2023-11-03T15:45:14.195Z",
                        "description": "Time stamp of last updated"
                    },
                    "connectorNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConnectorNodesInfo"
                        },
                        "description": "List of connector nodes (only present when query parameter 'detail' is set to true)"
                    }
                }
            },
            "PublicApiError": {
                "type": "object",
                "required": [
                    "code",
                    "title",
                    "details"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "DCAAS-2001",
                        "description": "A service specific error code string"
                    },
                    "meta": {
                        "type": "object",
                        "description": "Additional metadata associated with the error"
                    },
                    "title": {
                        "type": "string",
                        "example": "Data source is not enabled.",
                        "description": "Summary of the error"
                    },
                    "detail": {
                        "type": "string",
                        "example": "This resource requires app read privileges.",
                        "description": "Concrete detail about the error"
                    }
                }
            },
            "QriDefinition": {
                "type": "object",
                "required": [
                    "qriPrefix",
                    "connectionPart",
                    "pathPart"
                ],
                "properties": {
                    "itemPart": {
                        "allOf": [
                            {
                                "description": "Item part of QRI"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "prefix": {
                                        "type": "string",
                                        "example": "#",
                                        "description": "Prefix of the template"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/QriTemplate"
                            }
                        ]
                    },
                    "pathPart": {
                        "allOf": [
                            {
                                "description": "Path part of QRI"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "prefix": {
                                        "type": "string",
                                        "example": "#",
                                        "description": "Prefix of the template"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/QriTemplate"
                            }
                        ]
                    },
                    "qriPrefix": {
                        "type": "string",
                        "example": "qri:db:sap-sql://",
                        "description": "Qri prefix"
                    },
                    "connectionPart": {
                        "allOf": [
                            {
                                "description": "Connection part of Qri"
                            },
                            {
                                "$ref": "#/components/schemas/QriTemplate"
                            }
                        ]
                    }
                },
                "description": "Qri definition template"
            },
            "QriTemplate": {
                "type": "object",
                "required": [
                    "template",
                    "properties"
                ],
                "properties": {
                    "template": {
                        "type": "string",
                        "example": "{schema}.{table}",
                        "description": "Qri template"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "schema",
                            "description": "List of string values in template"
                        },
                        "description": "List of properties used in template"
                    }
                },
                "description": "Connection part of Qri template"
            },
            "UiInfo": {
                "type": "object",
                "properties": {
                    "iframe": {
                        "type": "boolean",
                        "example": true,
                        "description": "If support iframe"
                    },
                    "selectUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/standalone/select-dialog.html",
                        "description": "Select URL"
                    },
                    "connectUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/standalone/connect-dialog.html",
                        "description": "Connect URL"
                    },
                    "iconRectUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/Icons/rest.png",
                        "description": "Icon URL"
                    },
                    "iconSquareUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/Icons/rest-square.png",
                        "description": "Square icon URL"
                    },
                    "credentialsUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/standalone/credentials-dialog.html",
                        "description": "Credentials URL"
                    },
                    "connectorMainUrl": {
                        "type": "string",
                        "example": "/customdata/64/QvRestConnector/web/connector-main-iframe.js",
                        "description": "Connector main URL"
                    },
                    "loadModelSupport": {
                        "type": "string",
                        "example": "false",
                        "description": "Indicate if the datasource supports load model"
                    }
                },
                "description": "UI related metadata (only present when 'includeui' is set to true in query)"
            },
            "DataStore": {
                "type": "object",
                "title": "Data Store",
                "required": [
                    "technicalName",
                    "type"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "uri": {
                        "type": "string",
                        "maxLength": 512,
                        "minLength": 0
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 0
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "type": {
                        "type": "string",
                        "maxLength": 64,
                        "minLength": 1
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The value is automatically set by the application."
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Only required when updating the resource. Must be null for new resources."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "properties": {
                        "type": "object",
                        "description": "A Map of name-value pairs.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A Map of name-value pairs."
                        }
                    },
                    "createdTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    },
                    "technicalName": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The value is automatically set by the application. User defined value is ignored."
                    },
                    "technicalDescription": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 0
                    }
                }
            },
            "PageDataAsset": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataAsset"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "pages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PageDataSet": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataSet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "pages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PageDataStore": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataStore"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "pages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "DeleteConfigNotFoundError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "DELETE-1",
                                    "description": "The error code."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "No email config for tenant",
                                    "description": "Summary of the problem"
                                }
                            },
                            "description": "An error object"
                        }
                    }
                }
            },
            "email": {
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "email body"
                    },
                    "subject": {
                        "type": "string",
                        "description": "email subject"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "email recipient (email address)"
                    }
                }
            },
            "emailConfigFieldPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace, remove, add"
                        ],
                        "type": "string",
                        "example": "add",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/username",
                            "/serverAddress",
                            "/serverPort",
                            "/securityType",
                            "/emailAddress",
                            "/emailPassword"
                        ],
                        "type": "string",
                        "example": "/emailAddress",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "string",
                        "example": "john.smith@company.com",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "emailConfigPatch": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/emailConfigFieldPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/username",
                        "value": "New name"
                    }
                ]
            },
            "ErrorPublic": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The error code."
                    },
                    "title": {
                        "type": "string",
                        "description": "Summary of the problem."
                    }
                },
                "description": "An error object."
            },
            "ErrorsPublic": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorPublic"
                        }
                    }
                }
            },
            "getBasicAuthConfig": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "john.smith@company.com",
                        "description": "user name used for SMTP login"
                    },
                    "serverPort": {
                        "type": "number",
                        "example": 587,
                        "minimum": 1,
                        "description": "smtp server port"
                    },
                    "emailAddress": {
                        "type": "string",
                        "example": "abc@example.com",
                        "description": "The email address that should appear in From field when sending emails with this account"
                    },
                    "securityType": {
                        "type": "string",
                        "example": "StartTLS",
                        "description": "The selected SMTP security mechanism. Could be either 'none', 'StartTLS' or 'SSL/TLS'"
                    },
                    "serverAddress": {
                        "type": "string",
                        "example": "smtp.company.com",
                        "description": "domain name or IP address of SMTP server"
                    }
                }
            },
            "getEmailConfig": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/smtpConfigStatus"
                    },
                    "isValid": {
                        "type": "boolean",
                        "example": true,
                        "description": "Is the configuration valid"
                    },
                    "tenantId": {
                        "type": "string",
                        "example": "mcdd-mkw_Ebo0fR2vLl8_YsQYFsYrTdP",
                        "description": "The tenant Id"
                    },
                    "username": {
                        "type": "string",
                        "example": "john.smith@company.com",
                        "description": "user name"
                    },
                    "errorCode": {
                        "type": "string",
                        "example": "INVALID_CREDENTIALS",
                        "description": "Indicates error with this email configuration. OK means that no error is indicated. Possible values are OK, CONFIG_NOT_SET, INCOMPLETE_CONFIG, INVALID_CREDENTIALS, PROVIDER_ERROR"
                    },
                    "serverPort": {
                        "type": "number",
                        "example": 587,
                        "minimum": 1,
                        "description": "smtp server listening port"
                    },
                    "lastUpdated": {
                        "type": "string"
                    },
                    "authFailures": {
                        "type": "number",
                        "example": 0,
                        "description": "Number of authentication failures"
                    },
                    "emailAddress": {
                        "type": "string",
                        "example": "john.smith@company.com",
                        "description": "used for SMTP authentication"
                    },
                    "securityType": {
                        "type": "string",
                        "example": "StartTLS",
                        "description": "one of none, StartTLS or SSL/TLS"
                    },
                    "serverAddress": {
                        "type": "string",
                        "example": "smtp.company.com",
                        "description": "domain name or IP address of SMTP server"
                    },
                    "passwordExists": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates if password is defined for this smtp config. The password itself is not returned!"
                    },
                    "providerConfig": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/getMicrosoft365Config"
                            },
                            {
                                "$ref": "#/components/schemas/getBasicAuthConfig"
                            }
                        ]
                    },
                    "serviceProvider": {
                        "enum": [
                            "Microsoft365",
                            "BasicAuth"
                        ],
                        "type": "string",
                        "example": "Microsoft365",
                        "description": "Name of the service provider for authentication"
                    },
                    "modificationTime": {
                        "type": "string",
                        "example": "2022-06-30T09:57:40.954Z",
                        "description": "Last modification time. Formatted as a ISO 8601 string."
                    }
                }
            },
            "getMicrosoft365Config": {
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "example": "12345678-1234-1234-1234-123456789012",
                        "description": "Microsoft365 client identifier"
                    },
                    "emailAddress": {
                        "type": "string",
                        "example": "abc@example.com",
                        "description": "The email address that should appear in From field when sending emails with this account"
                    },
                    "providerTenantId": {
                        "type": "string",
                        "example": "12345678-1234-1234-1234-123456789012",
                        "description": "Microsoft365 tenant identifier"
                    }
                }
            },
            "SendTestMailConfigNotFoundError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "SENDTESTEMAIL-1",
                                    "description": "The error code."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "No email config for tenant",
                                    "description": "Summary of the problem"
                                }
                            },
                            "description": "An error object"
                        }
                    }
                }
            },
            "smtpCheck": {
                "type": "object",
                "properties": {
                    "isValid": {
                        "type": "boolean",
                        "description": "true if smtp config is correct and complete. Will return false if smtp-config does not exist at all"
                    },
                    "errorCode": {
                        "type": "string",
                        "example": "INVALID_CREDENTIALS",
                        "description": "Indicates error with this email configuration. OK means that no error is indicated. Possible values are OK, CONFIG_NOT_SET, INCOMPLETE_CONFIG, INVALID_CREDENTIALS, PROVIDER_ERROR"
                    }
                }
            },
            "smtpConfigStatus": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "example": 0,
                        "description": "Status code"
                    },
                    "statusReason": {
                        "type": "string",
                        "example": "OK",
                        "description": "Status reason"
                    }
                },
                "description": "Contains statusCode and statusReason"
            },
            "smtpResult": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "error message from SMTP middleware .. a bit technical but could be useful to administrator"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "was SMTP operation successful or not. Other fields herein provide more detail"
                    },
                    "connectionFailed": {
                        "type": "boolean",
                        "description": "could not resolve domain name, connection refused, connection timed out, SSL mismatch"
                    },
                    "smtpResponseCode": {
                        "type": "integer",
                        "description": "smtp result code string from the SMTP server. eg. \"250 2.6.0\""
                    }
                }
            },
            "TenantAdminError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "ROLECHECK-1",
                                    "description": "The error code."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Must be a tenant admin",
                                    "description": "Summary of the problem"
                                }
                            },
                            "description": "An error object"
                        }
                    }
                }
            },
            "UpdateEmailConfigError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "INPUTCHECK-1",
                                    "description": "The error code."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "serverAddress is not a string",
                                    "description": "Summary of the problem"
                                }
                            },
                            "description": "An error object"
                        }
                    }
                }
            },
            "VerifyConnectionConfigNotFoundError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "VERIFYCONNECTION-1",
                                    "description": "The error code."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "No email config for tenant",
                                    "description": "Summary of the problem"
                                }
                            },
                            "description": "An error object"
                        }
                    }
                }
            },
            "KeyProvider": {
                "type": "object",
                "example": {
                    "arn": "arn:aws:kms:eu-west-1:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                    "name": "test name",
                    "current": false,
                    "description": "test description",
                    "drCompliant": true,
                    "keyprovider": "AWS-KMS",
                    "multiRegion": true,
                    "replicaKeys": [
                        {
                            "arn": "arn:aws:kms:eu-west-3:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                            "region": "eu-west-3"
                        }
                    ],
                    "complianceError": [
                        {
                            "code": "",
                            "region": "",
                            "message": ""
                        }
                    ]
                },
                "required": [
                    "name",
                    "arn",
                    "keyprovider"
                ],
                "properties": {
                    "arn": {
                        "type": "string",
                        "description": "The provider resource notation for the key."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of key provider entry."
                    },
                    "current": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Indicates whether the key is being used to encrypt/decrypt secrets."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Tenant ID."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When key entry was created."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of key provider entry."
                    },
                    "keyProvider": {
                        "enum": [
                            "AWS-KMS"
                        ],
                        "type": "string",
                        "description": "Key Provider type."
                    },
                    "multiRegion": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Indicates whether the key has multi-region configurations and has replica key in qcs secondary region."
                    },
                    "replicaKeys": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "arn": {
                                    "type": "string",
                                    "description": "Replica key keeps list of backup keys from the supported qcs secondary region."
                                },
                                "region": {
                                    "type": "string",
                                    "description": "Region indicates the backup qcs-region link to the primary region."
                                }
                            }
                        },
                        "readOnly": true
                    },
                    "arnFingerPrint": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The ARN fingerprint."
                    },
                    "promotedToCurrentAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the key was promoted to being the current active one."
                    },
                    "demotedFromCurrentAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "When the key was demoted from being current to non active."
                    }
                }
            },
            "KeyProviderPatchBase": {
                "type": "object",
                "example": {
                    "op": "replace",
                    "path": "/name",
                    "value": "New Encryption Key"
                },
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "type": "string",
                        "description": "The property path."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "KeyProviderPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyProviderPatchBase"
                }
            },
            "KeyProviders": {
                "type": "object",
                "example": [
                    {
                        "arn": "arn:aws:kms:eu-west-1:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                        "name": "test name",
                        "current": true,
                        "description": "test description",
                        "drCompliant": true,
                        "keyprovider": "AWS-KMS",
                        "multiRegion": true,
                        "replicaKeys": [
                            {
                                "arn": "arn:aws:kms:eu-west-3:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                                "region": "eu-west-3"
                            }
                        ],
                        "complianceError": {
                            "code": "",
                            "region": "",
                            "message": ""
                        }
                    }
                ],
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyProvider"
                        }
                    }
                }
            },
            "KeyProvidersDeleteResponseBody": {
                "type": "object",
                "example": {
                    "message": "Key provider metadata deleted successfully"
                },
                "required": [
                    "message"
                ],
                "properties": {
                    "response": {
                        "type": "string",
                        "format": "text",
                        "description": "Successful response message."
                    }
                }
            },
            "ListKeyProviders": {
                "type": "object",
                "example": [
                    {
                        "arn": "#QLIK_MANAGED_KEY_PROVIDER#",
                        "name": "Qlik Internal Kms",
                        "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                        "createdAt": "Qlik managed",
                        "description": "Default key management service",
                        "keyprovider": "Qlik",
                        "arnFingerPrint": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                        "promotedToCurrentAt": "2023-06-21T18:45:57Z",
                        "demotedFromCurrentAt": "0001-01-01T00:00:00Z"
                    },
                    {
                        "arn": "arn:aws:kms:eu-west-1:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                        "name": "CMK - 01",
                        "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                        "createdAt": "2023-06-21T18:43:49Z",
                        "drCompliant": true,
                        "keyprovider": "AWS-KMS",
                        "multiRegion": true,
                        "replicaKeys": [
                            {
                                "arn": "arn:aws:kms:eu-west-3:111222334455:key/mrk-1237c011a37erft67ei987c7612q456",
                                "region": "eu-west-3"
                            }
                        ],
                        "arnFingerPrint": "9f352c5a9c1618485051892cb57467e4",
                        "complianceError": {
                            "code": "",
                            "region": "",
                            "message": ""
                        },
                        "promotedToCurrentAt": "2023-06-21T18:43:54Z",
                        "demotedFromCurrentAt": "2023-06-21T18:45:57Z"
                    },
                    {
                        "arn": "arn:aws:kms:eu-west-1:111222334455:key/mrk-2678f8123w236c3123469387dc2ce561",
                        "name": "CMK - 02",
                        "current": true,
                        "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                        "createdAt": "2023-06-21T18:59:17Z",
                        "description": "CMK migration test",
                        "drCompliant": false,
                        "keyprovider": "AWS-KMS",
                        "multiRegion": true,
                        "replicaKeys": [
                            {
                                "arn": "arn:aws:kms:eu-west-3:111222334455:key/mrk-2678f8123w236c3123469387dc2ce561",
                                "region": "eu-west-3"
                            }
                        ],
                        "arnFingerPrint": "12342c83b25f9e36543bca28f69e4210",
                        "complianceError": {
                            "code": "Encryption-88",
                            "region": "eu-west-3",
                            "message": "The policy of the provided key does not allow the required action [eu-west-3] [GenerateDataKey]."
                        },
                        "promotedToCurrentAt": "2023-06-21T18:59:18Z",
                        "demotedFromCurrentAt": "0001-01-01T00:00:00Z"
                    }
                ],
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KeyProvider"
                        }
                    }
                }
            },
            "MigrationInformation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "description": "Migration operation ID."
                    },
                    "state": {
                        "enum": [
                            "New",
                            "InProgress",
                            "Completed"
                        ],
                        "type": "string",
                        "description": "Migration operation state."
                    },
                    "progress": {
                        "type": "number",
                        "description": "Progress in percentage."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "Tenant ID."
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "initiatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "migratingTo": {
                        "type": "string",
                        "description": "The new key ARN that keys should be migrated to."
                    },
                    "migratingFrom": {
                        "type": "string",
                        "description": "The key ARN being migrated from (in case of QlikVault, could be a short name only)."
                    },
                    "migratingToPrefix": {
                        "type": "string",
                        "description": "The new key prefix (to help services know which prefix should NOT be migrated)."
                    },
                    "migratingToFingerprint": {
                        "type": "string",
                        "description": "The new key ARN fingerprint."
                    }
                }
            },
            "ResetMigrationNotNeeded": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Tenant is already using Qlik KMS, no migration is required.",
                        "description": "Tenant is already using Qlik KMS, no migration is required."
                    }
                }
            },
            "StandardError": {
                "type": "object",
                "required": [
                    "errors"
                ],
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StandardErrorItem"
                        }
                    }
                }
            },
            "StandardErrorItem": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The error code."
                    },
                    "meta": {
                        "type": "object",
                        "description": "Additional error object metadata."
                    },
                    "title": {
                        "type": "string",
                        "description": "Description of the error."
                    },
                    "detail": {
                        "type": "string",
                        "description": "Extra information about the error."
                    }
                }
            },
            "Enforcement": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Resource type to be blocked"
                    },
                    "actionToBlock": {
                        "type": "string",
                        "description": "Resource action type to be blocked"
                    }
                }
            },
            "ExecutionResponse": {
                "type": "object",
                "properties": {
                    "unit": {
                        "type": "string",
                        "description": "Unit of measurement for the resource consumption",
                        "x-qlik-filterable": true
                    },
                    "scope": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "user",
                                "tenant",
                                "resourceId",
                                "resourceType",
                                "resourceAction"
                            ],
                            "type": "string",
                            "x-omitempty": false,
                            "x-qlik-filterable": true
                        },
                        "example": [
                            "tenant",
                            "resourceType"
                        ]
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user id.",
                        "x-qlik-filterable": true
                    },
                    "blocked": {
                        "type": "boolean",
                        "format": "boolean",
                        "default": false,
                        "example": false,
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "overage": {
                        "type": "boolean",
                        "format": "boolean",
                        "default": false,
                        "example": false,
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "segments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "x-omitempty": true,
                            "x-qlik-filterable": false,
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        },
                        "example": [
                            {
                                "QDI": 10
                            },
                            {
                                "APP": 10
                            }
                        ],
                        "x-omitempty": true
                    },
                    "taskName": {
                        "type": "string",
                        "example": "task_name",
                        "description": "The resource task name.",
                        "x-qlik-filterable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant id.",
                        "x-qlik-filterable": true
                    },
                    "periodEnd": {
                        "type": "string",
                        "example": "2022-01-31",
                        "description": "The end of the associated period.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "localUsage": {
                        "type": "number",
                        "format": "number",
                        "example": 20,
                        "description": "The local usage.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "periodType": {
                        "enum": [
                            "day",
                            "month",
                            "year",
                            "",
                            "fixed",
                            "minute"
                        ],
                        "type": "string",
                        "example": "month",
                        "x-omitempty": true,
                        "x-qlik-filterable": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "228ac375-086e-4652-b9c0-fa8689bac75f",
                        "description": "The resource id.",
                        "x-omitempty": true,
                        "x-qlik-filterable": true
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The RFC3339 timestamp when the resource was updated.",
                        "x-qlik-filterable": true
                    },
                    "enforcement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Enforcement"
                        },
                        "description": "Contains a list of resources that are blocked when quota for this is reached.",
                        "x-omitempty": true,
                        "x-qlik-filterable": true
                    },
                    "globalUsage": {
                        "type": "number",
                        "format": "number",
                        "example": 29,
                        "description": "The global usage.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "periodStart": {
                        "type": "string",
                        "example": "2022-01-01",
                        "description": "The start of the associated period.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "resourceType": {
                        "enum": [
                            "app",
                            "automations",
                            "space",
                            "data.volume.consumption"
                        ],
                        "type": "string",
                        "example": "app",
                        "description": "The resource type.",
                        "x-omitempty": true,
                        "x-qlik-filterable": true
                    },
                    "scopeMapping": {
                        "type": "string",
                        "description": "The map to the resource scope.",
                        "x-qlik-filterable": true
                    },
                    "capacityLimit": {
                        "type": "number",
                        "example": 50,
                        "description": "The capacity limit.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "closeToOverage": {
                        "type": "boolean",
                        "format": "boolean",
                        "default": false,
                        "example": false,
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "customerFacing": {
                        "type": "boolean",
                        "description": "The field to determine if a resource should be visible on the client.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "guardrailLimit": {
                        "type": "number",
                        "example": 20,
                        "description": "The guardrail limit.",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "resourceAction": {
                        "enum": [
                            "report.generated",
                            "reload",
                            "scheduledReload",
                            "executed",
                            "aggregation",
                            "import",
                            "updated",
                            "deployed",
                            "3rd_party_executed"
                        ],
                        "type": "string",
                        "example": "reload",
                        "description": "The resource action.",
                        "x-omitempty": true,
                        "x-qlik-filterable": true
                    },
                    "taskDescription": {
                        "type": "string",
                        "example": "some description",
                        "description": "The resource task description.",
                        "x-qlik-filterable": true
                    },
                    "blockedEventTime": {
                        "type": "string",
                        "description": "RFC3339 timestamp when a block event was last emitted for this execution.",
                        "x-qlik-filterable": true
                    },
                    "overageEventTime": {
                        "type": "string",
                        "description": "RFC3339 timestamp when a overage event was last emitted for this execution.",
                        "x-qlik-filterable": true
                    },
                    "consumptionReportId": {
                        "type": "string",
                        "format": "uid",
                        "example": "01xQ1chLoHkOikyzUGcHJquteNrAfketW",
                        "description": "The id of the consumption report",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    }
                }
            },
            "ExecutionsByTenantList": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StandardListResponseProps"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ExecutionResponse"
                                }
                            },
                            "links": {
                                "$ref": "#/components/schemas/ListLinks"
                            },
                            "overage": {
                                "type": "boolean",
                                "example": false,
                                "x-omitempty": false
                            },
                            "closeToOverage": {
                                "type": "boolean",
                                "example": false,
                                "x-omitempty": false
                            },
                            "globalUsageAvailable": {
                                "type": "boolean",
                                "example": true,
                                "x-omitempty": false
                            }
                        }
                    }
                ]
            },
            "bundleMeta": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the bundle."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the bundle."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the bundle."
                    }
                },
                "description": "Object containing meta data regarding the bundle the extension belongs to. If it does not belong to a bundle, this object is not defined."
            },
            "extension": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "file": {
                        "type": "object",
                        "description": "The file that was uploaded with the extension."
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon to show in the client."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of this extension."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this extension (visualization, etc.)."
                    },
                    "author": {
                        "type": "string",
                        "description": "Author of the extension."
                    },
                    "bundle": {
                        "$ref": "#/components/schemas/bundleMeta"
                    },
                    "userId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "bundled": {
                        "type": "boolean",
                        "description": "If the extension is part of an extension bundle."
                    },
                    "license": {
                        "type": "string",
                        "description": "Under which license this extension is published."
                    },
                    "preview": {
                        "type": "string",
                        "description": "Path to an image that enables users to preview the extension."
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the extension."
                    },
                    "checksum": {
                        "type": "string",
                        "description": "Checksum of the extension contents."
                    },
                    "homepage": {
                        "type": "string",
                        "description": "Home page of the extension."
                    },
                    "keywords": {
                        "type": "string",
                        "description": "Keywords for the extension."
                    },
                    "loadpath": {
                        "type": "string",
                        "description": "Relative path to the extension's entry file, defaults to `filename` from the qext file."
                    },
                    "supplier": {
                        "type": "string",
                        "description": "Supplier of the extension."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "updateAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "supernova": {
                        "type": "boolean",
                        "description": "If the extension is a supernova extension or not."
                    },
                    "deprecated": {
                        "type": "string",
                        "format": "date",
                        "description": "A date noting when the extension was deprecated."
                    },
                    "repository": {
                        "type": "string",
                        "description": "Link to the extension source code."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the extension."
                    },
                    "qextVersion": {
                        "type": "string",
                        "description": "The version from the qext file that was uploaded with this extension."
                    },
                    "dependencies": {
                        "type": "object",
                        "description": "Map of dependencies describing version of the component it requires."
                    },
                    "qextFilename": {
                        "type": "string",
                        "description": "The name of the qext file that was uploaded with this extension."
                    }
                },
                "description": "The extension model."
            },
            "extensions": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/extension"
                        }
                    }
                }
            },
            "atlanEntity": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "typeName": {
                        "type": "string"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/atlanEntityAttributes"
                    },
                    "relationshipAttributes": {
                        "$ref": "#/components/schemas/atlanRelationshipAttributes"
                    }
                }
            },
            "atlanEntityAttributes": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "usage": {
                        "type": "string"
                    },
                    "examples": {},
                    "relations": {
                        "$ref": "#/components/schemas/atlanResourceLink"
                    },
                    "displayText": {
                        "type": "string"
                    },
                    "abbreviation": {
                        "type": "string"
                    },
                    "relationGuid": {
                        "type": "string"
                    },
                    "parentCategory": {
                        "type": "string"
                    },
                    "userDescription": {
                        "type": "string"
                    }
                }
            },
            "atlanGlossary": {
                "type": "object",
                "properties": {
                    "entity": {
                        "$ref": "#/components/schemas/atlanEntity"
                    },
                    "referredEntities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/atlanEntity"
                        }
                    }
                },
                "description": "Atlan glossary format. See https://apidocs.atlan.com/"
            },
            "atlanRelationEntity": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "typeName": {
                        "type": "string"
                    },
                    "displayText": {
                        "type": "string"
                    },
                    "entityStatus": {
                        "type": "string"
                    }
                }
            },
            "atlanRelationshipAttributes": {
                "type": "object",
                "properties": {
                    "isA": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    },
                    "terms": {
                        "$ref": "#/components/schemas/atlanRelationEntity"
                    },
                    "seeAlso": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    },
                    "antonyms": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    },
                    "synonyms": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    },
                    "categories": {
                        "$ref": "#/components/schemas/atlanRelationEntity"
                    },
                    "classifies": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    },
                    "replacedBy": {
                        "$ref": "#/components/schemas/atlanTermHeader"
                    }
                }
            },
            "atlanResourceLink": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "atlanTermHeader": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "steward": {
                        "type": "string"
                    },
                    "expression": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayText": {
                        "type": "string"
                    },
                    "entityStatus": {
                        "type": "string"
                    },
                    "relationGuid": {
                        "type": "string"
                    }
                }
            },
            "atlasCategory": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayText": {
                        "type": "string"
                    },
                    "categoryGuid": {
                        "type": "string"
                    },
                    "relationGuid": {
                        "type": "string"
                    },
                    "parentCategoryGuid": {
                        "type": "string"
                    }
                }
            },
            "atlasGlossary": {
                "type": "object",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/atlasTerm"
                        }
                    },
                    "usage": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/atlasCategory"
                        }
                    },
                    "qualifiedName": {
                        "type": "string"
                    },
                    "longDescription": {
                        "type": "string"
                    },
                    "shortDescription": {
                        "type": "string"
                    }
                }
            },
            "atlasTerm": {
                "type": "object",
                "properties": {
                    "source": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "steward": {
                        "type": "string"
                    },
                    "termGuid": {
                        "type": "string"
                    },
                    "expression": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayText": {
                        "type": "string"
                    },
                    "relationGuid": {
                        "type": "string"
                    }
                }
            },
            "categoriesResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/category"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "category": {
                "type": "object",
                "required": [
                    "id",
                    "glossaryId",
                    "name",
                    "description",
                    "createdBy",
                    "createdAt",
                    "updatedBy",
                    "updatedAt"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The id for resolving updates in future imports/updates. \nOpposed to the id of terms, id on category are not resolved by backend. Any category referred in the category array in terms will have to be identical to the id property of the category. If not, the category reference will be discarded.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uid"
                        },
                        "example": [
                            "6305e8691a1d504df06efab9",
                            "63075b341a1d504df06efabc"
                        ],
                        "description": "This list contains the uids of the stewards of the category."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The uid of the user who last updated the category"
                    },
                    "glossaryId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "createCategory": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the category. May not be identical to another category belonging to the same parent.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uid"
                        },
                        "example": [
                            "6305e8691a1d504df06efab9",
                            "63075b341a1d504df06efabc"
                        ],
                        "description": "This list contains the uids of the stewards of the category."
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "createGlossary": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Organization wide glossary",
                        "description": "Name of the glossary"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "List of tags for glossary"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique unique identifier of the space to contain the glossary"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview of the glossary content"
                    },
                    "description": {
                        "type": "string",
                        "example": "This glossary contains definitions and concepts of business terms.",
                        "description": "Description of the glossary"
                    },
                    "termTemplate": {
                        "$ref": "#/components/schemas/termTemplate"
                    }
                }
            },
            "createTerm": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Earnings Before Interest and Tax (EBIT)"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Finance",
                            "Accounting"
                        ]
                    },
                    "linksTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termCreateLinksTo"
                        }
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "6305e8691a1d504df06efab9",
                            "63075b341a1d504df06efabc"
                        ],
                        "description": "This list contain the uids for the term's stewards"
                    },
                    "relatesTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termRelatesTo"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000",
                            "123e4567-e89b-12d3-a456-426614174001"
                        ],
                        "description": "Category Ids that the term belongs to. NOTE! In case of import the string refers to the index of the category in the import document."
                    },
                    "description": {
                        "type": "string"
                    },
                    "abbreviation": {
                        "type": "string",
                        "example": "EBIT"
                    },
                    "relatedInformation": {
                        "type": "string",
                        "example": "In accounting and finance, earnings before interest and taxes (EBIT) is a measure of a firm's profit that includes all incomes and expenses (operating and non-operating) except interest expenses and income tax expenses."
                    }
                }
            },
            "errorResponseBadRequest": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/errorResponseCode"
                        }
                    },
                    "traceId": {
                        "type": "string",
                        "example": "795dedf8cf38b60088a6e4feb6eace75"
                    }
                },
                "description": "### Custom error codes\n* BG-1 - Context JWT is missing tenantId.\n* BG-2 - Context JWT is missing userId.\n* BG-4 - Invalid or unsupported Content Type. Valid types are: application/json, application/json+qlik, application/json+atlan, application/json+atlas\n* BG-5 - Failed to decode JSON payload.\n* BG-6 - A glossary name is required.\n* BG-7 - Two categories with the same name cannot have the same parent.\n* BG-11 - Glossary validation failed - A value or parameter is invalid or not set\n* BG-12 - Category validation failed - A value or parameter is invalid or not set\n* BG-13 - Term validation failed - A value or parameter is invalid or not set\n* BG-14 - Two or more categories share Id\n* BG-15 - Two or more terms share Id\n* BG-16 - Not detecting proper Atlas format\n* BG-17 - Not detecting proper Atlan format\n* BG-18 - Not detecting proper Qlik format\n* BG-19 - Invalid format in term\n* BG-20 - Duplicate link definition\n* BG-21 - Rich text validation failed\n* BG-22 - Import cancelled\n* BG-23 - Duplicate link related\n"
            },
            "errorResponseForbidden": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/errorResponseCode"
                        }
                    },
                    "traceId": {
                        "type": "string",
                        "example": "795dedf8cf38b60088a6e4feb6eace75"
                    }
                },
                "description": "### Custom error codes\n* BG-3 - Access denied, no read access\n"
            },
            "errorResponseNotFound": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/errorResponseCode"
                        }
                    },
                    "traceId": {
                        "type": "string",
                        "example": "795dedf8cf38b60088a6e4feb6eace75"
                    }
                },
                "description": "### Custom error codes\n* BG-8 - Glossary not found\n* BG-9 - Category not found\n* BG-10 - Term not found\n"
            },
            "exportCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The id for resolving updates in future imports/updates. \nOpposed to the id of terms, id on category are not resolved by backend. Any category referred in the category array in terms will have to be identical to the id property of the category. If not, the category reference will be discarded.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the category. May not be identical to another category belonging to the same parent.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "description": {
                        "type": "string"
                    },
                    "stewardDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    }
                }
            },
            "exportGlossary": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "tag1",
                            "tag2"
                        ]
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/exportTerm"
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea"
                    },
                    "overview": {
                        "type": "string",
                        "example": "glossary overview"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The uid of the user who last updated the glossary"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/exportCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "termTemplate": {
                        "$ref": "#/components/schemas/termTemplate"
                    }
                }
            },
            "exportTerm": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The id of the term. Used to identify the term in future updates. If not provided, will use the leading 30 chars of the term name and an incremental index\n"
                    },
                    "name": {
                        "type": "string",
                        "example": "name"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "tag1",
                            "tag2"
                        ]
                    },
                    "owner": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/importOwner"
                        }
                    },
                    "linksTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termCreateLinksTo"
                        }
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    },
                    "relatesTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termRelatesTo"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000"
                        ],
                        "description": "Categories that the term belongs to. Refers to the `id` property of the category object\n"
                    },
                    "description": {
                        "type": "string",
                        "example": "description"
                    },
                    "abbreviation": {
                        "type": "string",
                        "example": "abbr"
                    },
                    "stewardDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    }
                }
            },
            "glossariesResult": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/glossary"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "glossary": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "tags",
                    "ownerId",
                    "createdBy",
                    "createdAt",
                    "updatedBy",
                    "updatedAt",
                    "spaceId",
                    "termTemplate",
                    "overview"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Unique identifier of the glossary"
                    },
                    "name": {
                        "type": "string",
                        "example": "Organization wide glossary",
                        "description": "Name of the glossary"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "List of tags associated with the glossary."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the glossary owner"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the space containg the glossary"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview of the glossary contents"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the glossary was created"
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "Unique identifier of the user who created the glossary"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the glossary was updated"
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The unique identifier of the user who last updated the glossary"
                    },
                    "description": {
                        "type": "string",
                        "example": "This glossary contains definitions and concepts of business terms.",
                        "description": "Description of the glossary"
                    },
                    "termTemplate": {
                        "$ref": "#/components/schemas/termTemplate"
                    }
                }
            },
            "importCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The id for resolving updates in future imports/updates. \nOpposed to the id of terms, id on category are not resolved by backend. Any category referred in the category array in terms will have to be identical to the id property of the category. If not, the category reference will be discarded.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the category. May not be identical to another category belonging to the same parent.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "stewardDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    }
                }
            },
            "importOwner": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Joe Smith"
                    },
                    "email": {
                        "type": "string",
                        "example": "joe.smith@qlik.com"
                    },
                    "userId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea"
                    }
                }
            },
            "importTerm": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The id of the term. Used to identify the term in future updates. If not provided, will use the leading 30 chars of the term name and an incremental index\n"
                    },
                    "name": {
                        "type": "string",
                        "example": "name"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "tag1",
                            "tag2"
                        ]
                    },
                    "owner": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/importOwner"
                        }
                    },
                    "linksTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termCreateLinksTo"
                        }
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    },
                    "relatesTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termRelatesTo"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000"
                        ],
                        "description": "Categories that the term belongs to. Refers to the `id` property of the category object\n"
                    },
                    "description": {
                        "type": "string",
                        "example": "description"
                    },
                    "abbreviation": {
                        "type": "string",
                        "example": "abbr"
                    },
                    "stewardDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/stewardDetail"
                        }
                    }
                }
            },
            "linksResult": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termLinksTo"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "qlikGlossary": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "tag1",
                            "tag2"
                        ]
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/importTerm"
                        }
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea"
                    },
                    "overview": {
                        "type": "string"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/importCategory"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "termTemplate": {
                        "$ref": "#/components/schemas/termTemplate"
                    }
                }
            },
            "stewardDetail": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "format": "uid"
                    }
                }
            },
            "term": {
                "type": "object",
                "required": [
                    "id",
                    "glossaryId",
                    "revision",
                    "name",
                    "description",
                    "relatedInformation",
                    "abbrevation",
                    "tags",
                    "stewards",
                    "createdBy",
                    "createdAt",
                    "updatedBy",
                    "updatedAt",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "Earnings Before Interest and Tax (EBIT)"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Finance",
                            "Accounting"
                        ]
                    },
                    "status": {
                        "$ref": "#/components/schemas/termStatus"
                    },
                    "linksTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termLinksTo"
                        }
                    },
                    "revision": {
                        "type": "number",
                        "example": 0
                    },
                    "stewards": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "6305e8691a1d504df06efab9",
                            "63075b341a1d504df06efabc"
                        ],
                        "description": "This list contains the uids of the terms data stewards."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true
                    },
                    "relatesTo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/termRelatesTo"
                        }
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The uid of the user who last updated the term"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": [
                            "123e4567-e89b-12d3-a456-426614174000",
                            "123e4567-e89b-12d3-a456-426614174001"
                        ]
                    },
                    "glossaryId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "description": {
                        "type": "string"
                    },
                    "abbreviation": {
                        "type": "string",
                        "example": "EBIT"
                    },
                    "relatedInformation": {
                        "type": "string",
                        "example": "In accounting and finance, earnings before interest and taxes (EBIT) is a measure of a firm's profit that includes all incomes and expenses (operating and non-operating) except interest expenses and income tax expenses."
                    }
                }
            },
            "termCreateLinksTo": {
                "type": "object",
                "required": [
                    "resourceType",
                    "resourceId"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "definition",
                            "related"
                        ],
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "resourceType": {
                        "enum": [
                            "app",
                            "dataset"
                        ],
                        "type": "string"
                    },
                    "subResourceId": {
                        "type": "string"
                    },
                    "subResourceName": {
                        "type": "string"
                    },
                    "subResourceType": {
                        "enum": [
                            "master_dimension",
                            "master_measure",
                            "field"
                        ],
                        "type": "string"
                    }
                },
                "description": "Describes links to other data assets such as analytics applications or dataset."
            },
            "termLinksTo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "x-qlik-filterable": true
                    },
                    "name": {
                        "type": "string",
                        "example": "Sales App"
                    },
                    "type": {
                        "enum": [
                            "definition",
                            "related"
                        ],
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "description": "Describes reason for item status during batch operation. E.g. why an error occurs during creation."
                    },
                    "status": {
                        "type": "number",
                        "example": 201,
                        "description": "Http status code for item during batch operation."
                    },
                    "openUrl": {
                        "type": "string",
                        "example": "https://tenant.qlik.com/sense/app/52bc4307-f9f2-4ce6-b521-67ca87018759"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "x-qlik-filterable": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Different formats based on resource type. Could be e.g. OID or UUID.",
                        "x-qlik-filterable": true
                    },
                    "resourceType": {
                        "enum": [
                            "app",
                            "dataset"
                        ],
                        "type": "string",
                        "x-qlik-filterable": true
                    },
                    "subResourceId": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Different formats based on subresource type. Could be e.g. OID or UUID.",
                        "x-qlik-filterable": true
                    },
                    "resourceSpaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea"
                    },
                    "subResourceName": {
                        "type": "string",
                        "example": "Sales YTD"
                    },
                    "subResourceType": {
                        "enum": [
                            "master_dimension",
                            "master_measure",
                            "field"
                        ],
                        "type": "string",
                        "x-qlik-filterable": true
                    },
                    "subResourceInvalid": {
                        "type": "boolean",
                        "description": "Populated and true if no matching subresource is found on parent resource. E.g. if a dataset field no longer exist but a link to that field exists."
                    }
                },
                "description": "Describes links to other entities such as qlik charts, dataset columns etc."
            },
            "termRelatesTo": {
                "type": "object",
                "required": [
                    "termId",
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "isA",
                            "hasA",
                            "seeAlso",
                            "synonym",
                            "antonym",
                            "classifies",
                            "other"
                        ],
                        "type": "string",
                        "description": "How the term related to the other object"
                    },
                    "termId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "The unique identifier of the related term. NOTE! In case of import the string refers to the index of the term in the import document."
                    }
                }
            },
            "termsResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/term"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/resultMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "termStatus": {
                "type": "object",
                "required": [
                    "type",
                    "updatedBy",
                    "updatedAt"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "draft",
                            "verified",
                            "deprecated"
                        ],
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "description": "Time when the state was changed"
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the user who last changed the status of the term"
                    }
                },
                "description": "Terms status is used determine the status of a term"
            },
            "termTemplate": {
                "type": "object",
                "properties": {
                    "relatedInformation": {
                        "type": "string",
                        "description": "Template text for new terms"
                    }
                }
            },
            "AssignedRoles": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "id",
                        "name",
                        "type",
                        "level"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea",
                            "description": "The unique role identitier"
                        },
                        "name": {
                            "type": "string",
                            "example": "Developer",
                            "readOnly": true,
                            "description": "The role name",
                            "x-qlik-filterable": true
                        },
                        "type": {
                            "enum": [
                                "default",
                                "custom"
                            ],
                            "type": "string",
                            "example": "default",
                            "readOnly": true,
                            "description": "The type of role"
                        },
                        "level": {
                            "enum": [
                                "admin",
                                "user"
                            ],
                            "type": "string",
                            "example": "user",
                            "readOnly": true,
                            "description": "The role level"
                        }
                    },
                    "description": "represents a role entity stored in the database"
                },
                "description": "An array of role references. Visibility dependant on access level. Must have access to roles to view other users' assigned roles."
            },
            "AssignedRolesRefIDs": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "id"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea",
                            "description": "The unique role identitier"
                        }
                    },
                    "description": "represents a role entity stored in the database"
                },
                "example": [
                    {
                        "id": "507f191e810c19729de860ea"
                    }
                ],
                "description": "An array of role reference identifiers."
            },
            "AssignedRolesRefNames": {
                "type": "array",
                "items": {
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "TenantAdmin",
                            "description": "The name of the role"
                        }
                    }
                },
                "example": [
                    {
                        "name": "TenantAdmin"
                    }
                ],
                "description": "An array of role reference names."
            },
            "Group": {
                "type": "object",
                "required": [
                    "id",
                    "tenantId",
                    "name",
                    "status",
                    "createdAt",
                    "lastUpdatedAt",
                    "links"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The unique identifier for the group",
                        "x-qlik-filterable": true
                    },
                    "name": {
                        "type": "string",
                        "example": "Development",
                        "maxLength": 256,
                        "minLength": 1,
                        "description": "The name of the group.",
                        "x-qlik-filterable": true
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/groups/507f191e810c19729de860ea",
                                        "description": "Link to the current group document"
                                    }
                                }
                            }
                        },
                        "description": "Contains Links for current document"
                    },
                    "status": {
                        "enum": [
                            "active",
                            "disabled"
                        ],
                        "type": "string",
                        "example": "active",
                        "description": "The state of the group.",
                        "x-qlik-filterable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "q3VRZ4YMixRaLKEPhkZWM-XMIDN7cO8f",
                        "description": "The tenant identifier associated with the given group"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-03-21T17:32:28Z",
                        "description": "The timestamp for when the group record was created.",
                        "x-qlik-filterable": true
                    },
                    "assignedRoles": {
                        "$ref": "#/components/schemas/AssignedRoles"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-03-22T10:01:02Z",
                        "description": "The timestamp for when the group record was last updated.",
                        "x-qlik-filterable": true
                    }
                },
                "description": "represents a Group document"
            },
            "GroupPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "example": "replace",
                        "description": "The operation to be performed. Currently \"replace\" is the only supported operation."
                    },
                    "path": {
                        "enum": [
                            "assignedRoles"
                        ],
                        "type": "string",
                        "example": "assignedRoles",
                        "description": "Attribute name of a field of the Groups entity."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefIDs"
                            },
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefNames"
                            }
                        ],
                        "description": "The roles to assign to the group (limit of 100 roles per group)."
                    }
                },
                "description": "A JSON Patch document."
            },
            "GroupPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/GroupPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/assignedRoles",
                        "value": [
                            {
                                "name": "TenantAdmin"
                            },
                            {
                                "name": "AnalyticsAdmin"
                            }
                        ]
                    }
                ],
                "description": "An array of JSON Patches for a group."
            },
            "GroupPostSchema": {
                "type": "object",
                "example": {
                    "name": "Development",
                    "status": "active",
                    "assignedRoles": [
                        {
                            "name": "Developer"
                        }
                    ]
                },
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Development",
                        "description": "The name of the group (maximum length of 256 characters)."
                    },
                    "status": {
                        "enum": [
                            "active"
                        ],
                        "type": "string",
                        "example": "active",
                        "description": "The status of the created group within the tenant. Defaults to active if empty."
                    },
                    "assignedRoles": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefIDs"
                            },
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefNames"
                            }
                        ],
                        "description": "The roles to assign to the group (limit of 100 roles per group)."
                    }
                }
            },
            "Groups": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "description": "An array of groups."
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/groups?next=FgAAAAdfaWQAYF33ydumcVj1cawoAA",
                                        "description": "Link to the next page of items"
                                    }
                                }
                            },
                            "prev": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/groups?prev=FgAACAdfaWQAYF33ydumcVj1cawoAA",
                                        "description": "Link to the previous page of items"
                                    }
                                }
                            },
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/groups",
                                        "description": "Link to the current page of items"
                                    }
                                }
                            }
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "Indicates the total number of matching documents. Will only be returned if the query parameter \"totalResults\" is true."
                    }
                },
                "description": "A result object when listing groups."
            },
            "GroupSettings": {
                "type": "object",
                "required": [
                    "tenantId",
                    "autoCreateGroups",
                    "syncIdpGroups",
                    "links"
                ],
                "properties": {
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/groups/settings",
                                        "description": "Link to the current group settings document"
                                    }
                                }
                            }
                        },
                        "description": "Contains Links for current document"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The unique tenant identifier."
                    },
                    "systemGroups": {
                        "type": "object",
                        "properties": {
                            "000000000000000000000001": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "enum": [
                                            "000000000000000000000001"
                                        ],
                                        "type": "string",
                                        "description": "The ID of the Everyone group. This value will not change and is immutable."
                                    },
                                    "name": {
                                        "enum": [
                                            "com.qlik.Everyone"
                                        ],
                                        "type": "string",
                                        "description": "The name of the Everyone group. This value will not change and is immutable."
                                    },
                                    "enabled": {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "For Everyone, this is always `true` and can't be patched."
                                    },
                                    "createdAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2021-03-22T10:01:02Z",
                                        "description": "The timestamp for when the Everyone group was created."
                                    },
                                    "assignedRoles": {
                                        "$ref": "#/components/schemas/AssignedRoles"
                                    },
                                    "lastUpdatedAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2021-03-22T10:01:02Z",
                                        "description": "The timestamp for when the Everyone group was last updated."
                                    }
                                }
                            }
                        }
                    },
                    "syncIdpGroups": {
                        "type": "boolean",
                        "example": false,
                        "description": "Determines if groups should be created on login."
                    },
                    "autoCreateGroups": {
                        "type": "boolean",
                        "example": false,
                        "description": "Determines if groups should be created on login."
                    }
                },
                "description": "represents a GroupSetting document"
            },
            "SettingsPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/autoCreateGroups",
                            "/syncIdpGroups",
                            "/systemGroups/{id}/assignedRoles"
                        ],
                        "type": "string",
                        "description": "A JSON Pointer."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefIDs"
                            },
                            {
                                "$ref": "#/components/schemas/AssignedRolesRefNames"
                            }
                        ],
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "SettingsPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/SettingsPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/syncIdpGroups",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/autoCreateGroups",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/systemGroups/000000000000000000000001/assignedRoles",
                        "value": [
                            {
                                "name": "Steward"
                            }
                        ]
                    }
                ],
                "description": "An array of JSON Patches for the groups settings."
            },
            "BaseIDP": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the IdP."
                    },
                    "meta": {
                        "type": "object"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicates whether the IdP is available for use."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the IdP was created."
                    },
                    "protocol": {
                        "$ref": "#/components/schemas/IDPProtocol"
                    },
                    "provider": {
                        "$ref": "#/components/schemas/IDPProvider"
                    },
                    "tenantIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tenant identifiers associated with the given IdP."
                    },
                    "description": {
                        "type": "string"
                    },
                    "interactive": {
                        "type": "boolean",
                        "description": "Indicates the type of connection with the IdP, either interactive login or a machine to machine connection."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the IdP was last updated."
                    },
                    "clockToleranceSec": {
                        "type": "integer"
                    },
                    "createNewUsersOnLogin": {
                        "type": "boolean",
                        "description": "When the flag is true, new users should be created when logging in for the first time."
                    },
                    "postLogoutRedirectUri": {
                        "type": "string",
                        "description": "Direct the user on logout to a specific URI."
                    }
                }
            },
            "CertificateInfo": {
                "type": "object",
                "required": [
                    "certificate"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Given name for this certificate."
                    },
                    "signature": {
                        "type": "boolean",
                        "default": true,
                        "description": "Indicates whether the certificate is used for the signature."
                    },
                    "encryption": {
                        "type": "boolean",
                        "default": false,
                        "description": "Indicates whether the certificate is used for encryption."
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The X.509 certificate for validating signed SAML responses."
                    }
                }
            },
            "claimsMappingInteractive": {
                "type": "object",
                "properties": {
                    "sub": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's subject."
                    },
                    "name": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's name."
                    },
                    "email": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's email."
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's groups."
                    },
                    "locale": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's locale."
                    },
                    "picture": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's picture."
                    },
                    "zoneinfo": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's zoneinfo."
                    },
                    "client_id": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's client ID."
                    },
                    "email_verified": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's email_verified claim."
                    }
                },
                "description": "Mappings from claim name to an array of JSON pointers that point to locations in the claims from the IdP to retrieve the value from."
            },
            "claimsMappingNonInteractive": {
                "type": "object",
                "properties": {
                    "sub": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's subject."
                    },
                    "client_id": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of JSON pointers used to map the user's client ID."
                    }
                },
                "description": "Mappings from claim name to an array of JSON pointers that point to locations in the claims from the IdP to retrieve the value from."
            },
            "claimsMappingSAML": {
                "type": "object",
                "required": [
                    "sub",
                    "name",
                    "email",
                    "picture",
                    "groups"
                ],
                "properties": {
                    "sub": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SAML attributes used to map the user's subject."
                    },
                    "name": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SAML attributes used to map the user's name."
                    },
                    "email": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SAML attributes used to map the user's email."
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SAML attributes used to map the user's groups."
                    },
                    "picture": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SAML attributes used to map the user's picture."
                    }
                },
                "description": "Mappings from claim name to an array of SAML attribute names that point to locations in the claims from the IdP to retrieve the value from."
            },
            "CreateJWTAuthPayload": {
                "type": "object",
                "required": [
                    "provider",
                    "protocol",
                    "options"
                ],
                "properties": {
                    "options": {
                        "type": "object",
                        "required": [
                            "issuer",
                            "staticKeys"
                        ],
                        "properties": {
                            "issuer": {
                                "type": "string",
                                "description": "The JWT issuer."
                            },
                            "staticKeys": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "kid",
                                        "pem"
                                    ],
                                    "properties": {
                                        "kid": {
                                            "type": "string",
                                            "description": "Key ID used to sign the JWTs."
                                        },
                                        "pem": {
                                            "type": "string",
                                            "description": "Pem-encoded public key for verifying the JWTs."
                                        }
                                    }
                                },
                                "description": "Keys for verifying JWTs. Limited to 1 key per identity provider."
                            }
                        },
                        "description": "Required IdP configurations."
                    },
                    "protocol": {
                        "enum": [
                            "jwtAuth"
                        ],
                        "type": "string",
                        "description": "The protocol to be used for communicating with the identity provider."
                    },
                    "provider": {
                        "enum": [
                            "external"
                        ],
                        "type": "string",
                        "description": "The identity provider to be used."
                    },
                    "tenantIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tenant identifiers that map to the given IdP."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "clockToleranceSec": {
                        "type": "integer",
                        "default": 5,
                        "maximum": 7200,
                        "minimum": 0,
                        "description": "There can be clock skew between the IdP and Qlik's login server. In these cases, a tolerance can be set."
                    }
                },
                "description": "Payload for creating an identity provider using JWT authentication."
            },
            "CreateOIDCPayload": {
                "type": "object",
                "required": [
                    "provider",
                    "protocol",
                    "interactive"
                ],
                "properties": {
                    "options": {
                        "type": "object",
                        "required": [
                            "claimsMapping"
                        ],
                        "properties": {
                            "realm": {
                                "type": "string",
                                "pattern": "^[A-Za-z0-9][A-Za-z0-9.\\-_]+$",
                                "maxLength": 254,
                                "description": "The realm identifier for the IdP."
                            },
                            "audience": {
                                "type": "string",
                                "maxLength": 256,
                                "description": "Allows for setting audience in access tokens."
                            },
                            "discoveryUrl": {
                                "type": "string",
                                "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration). Required if openid_configuration is not given."
                            },
                            "claimsMapping": {
                                "$ref": "#/components/schemas/claimsMappingNonInteractive"
                            },
                            "allowedClientIds": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Only clients with IDs in this list will be allowed API access. A blank list or empty value means any client IDs authenticated against the IdP will be allowed access."
                            },
                            "openid_configuration": {
                                "$ref": "#/components/schemas/OpenIDConfiguration"
                            }
                        },
                        "description": "Required OIDC configurations for non-interactive IdPs and interactive IdPs with `skipVerify` flag enabled."
                    },
                    "protocol": {
                        "enum": [
                            "OIDC"
                        ],
                        "type": "string",
                        "description": "The protocol to be used for communicating with the identity provider."
                    },
                    "provider": {
                        "enum": [
                            "auth0",
                            "okta",
                            "generic",
                            "salesforce",
                            "keycloak",
                            "adfs",
                            "azureAD"
                        ],
                        "type": "string",
                        "description": "The identity provider to be used."
                    },
                    "tenantIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tenant identifiers that map to the given IdP."
                    },
                    "skipVerify": {
                        "type": "boolean",
                        "default": false,
                        "description": "If set to `true`, skips IdP verification process and assumes the IdP is verified."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "interactive": {
                        "type": "boolean",
                        "default": false,
                        "description": "Indicates whether the IdP is meant for interactive login."
                    },
                    "pendingOptions": {
                        "type": "object",
                        "required": [
                            "clientId",
                            "clientSecret",
                            "claimsMapping"
                        ],
                        "properties": {
                            "realm": {
                                "type": "string",
                                "pattern": "^[A-Za-z0-9][A-Za-z0-9.\\-_]+$",
                                "maxLength": 254,
                                "description": "The realm identifier for the IdP."
                            },
                            "scope": {
                                "type": "string",
                                "maxLength": 254,
                                "description": "Scope which will be sent along with token requests to the IdP. Scopes should be space delimited. Will default to certain values depending on the IdP provider."
                            },
                            "clientId": {
                                "type": "string",
                                "description": "The client identifier used as part of authenticating an interactive identity provider."
                            },
                            "clientSecret": {
                                "type": "string",
                                "description": "The client secret used as part of authenticating an interactive identity provider."
                            },
                            "discoveryUrl": {
                                "type": "string",
                                "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration). Required if openid_configuration is not given."
                            },
                            "claimsMapping": {
                                "$ref": "#/components/schemas/claimsMappingInteractive"
                            },
                            "decryptingKey": {
                                "$ref": "#/components/schemas/decryptingKey"
                            },
                            "idTokenSignatureAlg": {
                                "enum": [
                                    "RS256",
                                    "RS512"
                                ],
                                "type": "string",
                                "default": "RS256",
                                "description": "The algorithm used to sign the ID token. The default algorithm is RS256."
                            },
                            "openid_configuration": {
                                "$ref": "#/components/schemas/OpenIDConfiguration"
                            },
                            "useClaimsFromIdToken": {
                                "type": "boolean",
                                "description": "If true, will use the claims from the ID token. By default it is set to true for ADFS and AzureAD."
                            },
                            "blockOfflineAccessScope": {
                                "type": "boolean",
                                "description": "When true, the `offline_access` scope will not be requested from the IdP where applicable."
                            },
                            "emailVerifiedAlwaysTrue": {
                                "type": "boolean",
                                "description": "Only ADFS and AzureAD IdPs can set this property. For ADFS and AzureAD, it defaults to false. For other IdPs, it defaults to undefined."
                            }
                        },
                        "description": "Required OIDC configurations for interactive IdPs that require verification."
                    },
                    "clockToleranceSec": {
                        "type": "integer",
                        "default": 5,
                        "maximum": 7200,
                        "minimum": 0,
                        "description": "There can be clock skew between the IdP and Qlik's login server. In these cases, a tolerance can be set."
                    },
                    "createNewUsersOnLogin": {
                        "type": "boolean",
                        "default": true,
                        "description": "Tells the consumer of the IdP that new users should be created on login if they don't exist."
                    },
                    "postLogoutRedirectUri": {
                        "type": "string",
                        "maxLength": 2083,
                        "description": "Direct the user on logout to a specific URI."
                    }
                },
                "description": "Payload for creating an OIDC-compatible identity provider."
            },
            "CreateSAMLPayload": {
                "type": "object",
                "required": [
                    "provider",
                    "protocol",
                    "interactive"
                ],
                "properties": {
                    "options": {
                        "type": "object",
                        "required": [
                            "claimsMapping"
                        ],
                        "properties": {
                            "entityId": {
                                "type": "string",
                                "description": "The entity ID for the SAML IdP. Required if metadata is not provided."
                            },
                            "metadata": {
                                "type": "object",
                                "required": [
                                    "raw"
                                ],
                                "properties": {
                                    "raw": {
                                        "type": "string",
                                        "format": "byte",
                                        "description": "The IDP metadata XML in base64-encoded format."
                                    }
                                },
                                "description": "Metadata for the SAML IdP. Required if individual SAML parameters are not provided."
                            },
                            "signOnUrl": {
                                "type": "string",
                                "description": "The sign on URL for the SAML IdP. Required if metadata is not provided."
                            },
                            "certificates": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CertificateInfo"
                                },
                                "maxItems": 5,
                                "minItems": 1,
                                "description": "The certificates used for validating signed responses. Required if metadata is not provided."
                            },
                            "nameIdFormat": {
                                "enum": [
                                    "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                                    "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                                    "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
                                ],
                                "type": "string",
                                "description": "The name identifier format that will be requested from the identity provider."
                            },
                            "claimsMapping": {
                                "$ref": "#/components/schemas/claimsMappingSAML"
                            },
                            "allowIdpInitiatedLogin": {
                                "type": "boolean",
                                "default": false,
                                "description": "Toggle to allow IdP initated login by the SAML IdP."
                            }
                        },
                        "description": "Required SAML configurations for IdPs with `skipVerify` flag enabled."
                    },
                    "protocol": {
                        "enum": [
                            "SAML"
                        ],
                        "type": "string",
                        "description": "The protocol to be used for communicating with the identity provider."
                    },
                    "provider": {
                        "enum": [
                            "okta",
                            "generic",
                            "adfs",
                            "azureAD"
                        ],
                        "type": "string",
                        "description": "The identity provider to be used."
                    },
                    "tenantIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tenant identifiers that map to the given IdP."
                    },
                    "skipVerify": {
                        "type": "boolean",
                        "default": false,
                        "description": "If set to `true`, skips IdP verification process and assumes the IdP is verified."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "interactive": {
                        "type": "boolean",
                        "description": "Indicates whether the IdP is meant for interactive login. Must be true for SAML IdPs."
                    },
                    "pendingOptions": {
                        "type": "object",
                        "required": [
                            "claimsMapping"
                        ],
                        "properties": {
                            "entityId": {
                                "type": "string",
                                "description": "The entity ID for the SAML IdP. Required if metadata is not provided."
                            },
                            "metadata": {
                                "type": "object",
                                "required": [
                                    "raw"
                                ],
                                "properties": {
                                    "raw": {
                                        "type": "string",
                                        "format": "byte",
                                        "description": "The IDP metadata XML in base64-encoded format."
                                    }
                                },
                                "description": "Metadata for the SAML IdP. Required if individual SAML parameters are not provided."
                            },
                            "signOnUrl": {
                                "type": "string",
                                "description": "The sign on URL for the SAML IdP. Required if metadata is not provided."
                            },
                            "certificates": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CertificateInfo"
                                },
                                "description": "The certificates used for validating signed responses. Required if metadata is not provided."
                            },
                            "nameIdFormat": {
                                "enum": [
                                    "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                                    "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                                    "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
                                ],
                                "type": "string",
                                "description": "The name identifier format that will be requested from the identity provider."
                            },
                            "claimsMapping": {
                                "$ref": "#/components/schemas/claimsMappingSAML"
                            },
                            "allowIdpInitiatedLogin": {
                                "type": "boolean",
                                "default": false,
                                "description": "Toggle to allow IdP initated login by the SAML IdP."
                            }
                        },
                        "description": "Required configurations for SAML IdPs that require verification."
                    },
                    "clockToleranceSec": {
                        "type": "integer",
                        "default": 5,
                        "maximum": 7200,
                        "minimum": 0,
                        "description": "There can be clock skew between the IdP and Qlik's login server. In these cases, a tolerance can be set."
                    },
                    "createNewUsersOnLogin": {
                        "type": "boolean",
                        "default": true,
                        "description": "Tells the consumer of the IdP that new users should be created on login if they don't exist."
                    },
                    "postLogoutRedirectUri": {
                        "type": "string",
                        "maxLength": 2083,
                        "description": "Direct the user on logout to a specific URI."
                    }
                },
                "description": "Payload for creating a SAML compatible identity provider."
            },
            "decryptingKey": {
                "type": "object",
                "required": [
                    "keyType",
                    "keySize"
                ],
                "properties": {
                    "jwks": {
                        "type": "string",
                        "description": "The public key in jwk format"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The id of the decrypting key"
                    },
                    "keySize": {
                        "type": "integer",
                        "description": "The algorithm size of the decrypting key"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "The algorithm type of the decrypting key"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the decrypting key was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user id of the user who created the decrypting key"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key in pem format"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The key's certificate in pem format"
                    }
                },
                "description": "A decrypting key used to decrypt OIDC encrypted assertions"
            },
            "IDP": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/IDPOIDC"
                    },
                    {
                        "$ref": "#/components/schemas/IDPSAML"
                    },
                    {
                        "$ref": "#/components/schemas/IDPJWTAuth"
                    }
                ],
                "discriminator": {
                    "propertyName": "protocol"
                }
            },
            "IDPArray": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDP"
                        },
                        "description": "An array of IdPs."
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "IDPJWTAuth": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseIDP"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "options": {
                                "type": "object",
                                "properties": {
                                    "issuer": {
                                        "type": "string",
                                        "description": "The expected JWT issuer"
                                    },
                                    "staticKeys": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "kid": {
                                                    "type": "string",
                                                    "description": "Key ID used to sign the JWTs."
                                                },
                                                "pem": {
                                                    "type": "string",
                                                    "description": "Pem-encoded public key for verifying the JWTs."
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "description": "An identity provider for JWT authentication."
            },
            "IDPMeta": {
                "type": "object",
                "properties": {
                    "userPortalLink": {
                        "type": "string",
                        "description": "A link to direct you to where you can manage your Qlik account. Only available if the default identity provider is used (no custom interactive identity providers are active)."
                    },
                    "upgradeSubscriptionLink": {
                        "type": "string",
                        "description": "A link to direct you to where you can upgrade your trial or manage your subscriptions. Only available if the default identity provider is used (no custom interactive identity providers are active)."
                    }
                }
            },
            "IDPOIDC": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseIDP"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "options": {
                                "$ref": "#/components/schemas/IDPOIDCOptions"
                            },
                            "pendingState": {
                                "enum": [
                                    "verified",
                                    "pending",
                                    "error"
                                ],
                                "type": "string",
                                "description": "The state of pendingOptions. This represents the latest IdP test result."
                            },
                            "pendingResult": {
                                "$ref": "#/components/schemas/PendingResult"
                            },
                            "pendingOptions": {
                                "$ref": "#/components/schemas/IDPOIDCOptions"
                            }
                        }
                    }
                ],
                "description": "An OIDC-compliant identity provider."
            },
            "IDPOIDCOptions": {
                "type": "object",
                "properties": {
                    "realm": {
                        "type": "string",
                        "description": "The realm identifier for the IdP."
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope that will be sent along with token requests to the IdP."
                    },
                    "issuer": {
                        "type": "string",
                        "description": "This field is only used in Qlik Sense Enterprise Client-Managed IdPs."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client identifier used as part of authenticating an interactive identity provider."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret used as part of authenticating an interactive identity provider."
                    },
                    "discoveryUrl": {
                        "type": "string",
                        "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration)."
                    },
                    "claimsMapping": {
                        "$ref": "#/components/schemas/claimsMappingInteractive"
                    },
                    "decryptingKey": {
                        "$ref": "#/components/schemas/decryptingKey"
                    },
                    "openid_configuration": {
                        "$ref": "#/components/schemas/OpenIDConfiguration"
                    },
                    "blockOfflineAccessScope": {
                        "type": "boolean",
                        "description": "If true, the `offline_access` scope will not be requested from the IdP, where applicable."
                    },
                    "emailVerifiedAlwaysTrue": {
                        "type": "boolean",
                        "description": "Determines if email_verified should be always true. This field is only used in ADFS and AzureAD IdPs."
                    }
                }
            },
            "IDPPatchSchema": {
                "oneOf": [
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PatchOIDCPayload"
                        }
                    },
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PatchSAMLPayload"
                        }
                    },
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PatchJWTAuthPayload"
                        }
                    }
                ]
            },
            "IDPPostSchema": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreateOIDCPayload"
                    },
                    {
                        "$ref": "#/components/schemas/CreateJWTAuthPayload"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSAMLPayload"
                    }
                ],
                "discriminator": {
                    "propertyName": "protocol"
                }
            },
            "IDPProtocol": {
                "enum": [
                    "OIDC",
                    "SAML",
                    "jwtAuth",
                    "qsefw-local-bearer-token"
                ],
                "type": "string",
                "description": "The protocol to be used for communicating with the identity provider. Valid values are `OIDC`, `SAML`, `jwtAuth`, and `qsefw-local-bearer-token`."
            },
            "IDPProvider": {
                "enum": [
                    "auth0",
                    "okta",
                    "qlik",
                    "generic",
                    "salesforce",
                    "keycloak",
                    "adfs",
                    "external",
                    "azureAD"
                ],
                "type": "string",
                "description": "The identity provider to be used. If protocol is `OIDC`, the valid values are `auth0`, `okta`, `generic`, `salesforce`, `keycloak`, `adfs`, and `azureAD`. If protocol is `jwtAuth`, the valid value is `external`."
            },
            "IDPSAML": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseIDP"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "options": {
                                "$ref": "#/components/schemas/IDPSAMLOptions"
                            },
                            "pendingState": {
                                "enum": [
                                    "verified",
                                    "pending",
                                    "error"
                                ],
                                "type": "string",
                                "description": "The state of pendingOptions. This represents the latest IdP test result."
                            },
                            "pendingResult": {
                                "$ref": "#/components/schemas/PendingResult"
                            },
                            "pendingOptions": {
                                "$ref": "#/components/schemas/IDPSAMLOptions"
                            }
                        }
                    }
                ],
                "description": "A SAML-compliant identity provider."
            },
            "IDPSAMLOptions": {
                "type": "object",
                "properties": {
                    "entityId": {
                        "type": "string",
                        "description": "The entity URL for the SAML IdP."
                    },
                    "signOnUrl": {
                        "type": "string",
                        "description": "The sign on URL for the SAML IdP."
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SigningKey"
                        },
                        "description": "Set of certificates used to sign SAMLRequest payloads. Not present in `pendingOptions`."
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CertificateInfo"
                        },
                        "description": "The certificates used for validating signed responses."
                    },
                    "nameIdFormat": {
                        "enum": [
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
                        ],
                        "type": "string",
                        "description": "The name identifier format that will be requested from the identity provider."
                    },
                    "claimsMapping": {
                        "$ref": "#/components/schemas/claimsMappingSAML"
                    },
                    "allowIdpInitiatedLogin": {
                        "type": "boolean",
                        "description": "Toggle to allow IdP initated login by the SAML IdP."
                    },
                    "signingKeySelectedRefId": {
                        "type": "string",
                        "description": "The reference ID of the chosen signing key pair."
                    }
                }
            },
            "IDPsStatus": {
                "type": "object",
                "properties": {
                    "idps_metadata": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "active": {
                                    "type": "boolean",
                                    "description": "Indicates whether the IdP is available for use."
                                },
                                "provider": {
                                    "$ref": "#/components/schemas/IDPProvider"
                                },
                                "interactive": {
                                    "type": "boolean",
                                    "description": "Indicates whether the IdP is meant for interactive login."
                                }
                            }
                        },
                        "description": "A list of IdP metadata."
                    },
                    "active_interactive_idps_count": {
                        "type": "number",
                        "description": "The number of active interactive IdPs."
                    }
                }
            },
            "OpenIDConfiguration": {
                "type": "object",
                "required": [
                    "issuer",
                    "authorization_endpoint",
                    "token_endpoint",
                    "jwks_uri"
                ],
                "properties": {
                    "issuer": {
                        "type": "string",
                        "description": "OpenID Provider issuer"
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "URL of the OP's JSON Web Key Set [JWK] document"
                    },
                    "token_endpoint": {
                        "type": "string",
                        "description": "OAuth 2.0 Token Endpoint"
                    },
                    "userinfo_endpoint": {
                        "type": "string",
                        "description": "URL of the OP's UserInfo Endpoint"
                    },
                    "end_session_endpoint": {
                        "type": "string",
                        "description": "URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP."
                    },
                    "authorization_endpoint": {
                        "type": "string",
                        "description": "OAuth 2.0 Authorization Endpoint"
                    },
                    "introspection_endpoint": {
                        "type": "string",
                        "description": "The introspection endpoint is an OAuth 2.0 endpoint that takes a parameter representing an OAuth 2.0 token and returns a JSON [RFC7159] document representing the meta information."
                    }
                },
                "description": "OpenID configuration"
            },
            "PatchJWTAuthPayload": {
                "type": "object",
                "required": [
                    "op"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The \"operation\" to be performed on a given IdP."
                    },
                    "path": {
                        "enum": [
                            "/description"
                        ],
                        "type": "string",
                        "description": "The \"path\" to the part of the IdP document."
                    },
                    "value": {
                        "description": "The \"value\" data type is dependent on the path value being used."
                    }
                },
                "description": "A patch request for an identity provider using the `jwtAuth` protocol."
            },
            "PatchOIDCPayload": {
                "type": "object",
                "required": [
                    "op"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace",
                            "promote-options"
                        ],
                        "type": "string",
                        "description": "The \"operation\" to be performed on a given IdP. Currently supports a custom operation value called \"promote-options\" that allows the test configuration to be promoted to the current configuration used for login."
                    },
                    "path": {
                        "enum": [
                            "/active",
                            "/description",
                            "/meta",
                            "/options",
                            "/options/realm",
                            "/options/discoveryUrl",
                            "/options/claimsMapping",
                            "/pendingOptions",
                            "/pendingOptions/realm",
                            "/pendingOptions/discoveryUrl",
                            "/pendingOptions/clientId",
                            "/pendingOptions/clientSecret",
                            "/pendingOptions/emailVerifiedAlwaysTrue",
                            "/pendingOptions/claimsMapping",
                            "/postLogoutRedirectUri",
                            "/clockToleranceSec",
                            "/pendingOptions/idTokenSignatureAlg",
                            "/pendingOptions/decryptingKey"
                        ],
                        "type": "string",
                        "description": "The \"path\" to the part of the IdP document."
                    },
                    "value": {
                        "description": "The \"value\" data type is dependent on the path value being used."
                    }
                },
                "description": "A patch request for an identity provider using the `OIDC` protocol."
            },
            "PatchSAMLPayload": {
                "type": "object",
                "required": [
                    "op"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace",
                            "promote-options"
                        ],
                        "type": "string",
                        "description": "The \"operation\" to be performed on a given IdP."
                    },
                    "path": {
                        "enum": [
                            "/active",
                            "/description",
                            "/pendingOptions",
                            "/pendingOptions/nameIdFormat",
                            "/pendingOptions/allowIdpInitiatedLogin",
                            "/pendingOptions/entityId",
                            "/pendingOptions/signOnUrl",
                            "/pendingOptions/metadata",
                            "/pendingOptions/certificates",
                            "/pendingOptions/claimsMapping",
                            "/postLogoutRedirectUri",
                            "/clockToleranceSec"
                        ],
                        "type": "string",
                        "description": "The \"path\" to the part of the IdP document."
                    },
                    "value": {
                        "description": "The \"value\" data type is dependent on the path value being used."
                    }
                },
                "description": "A patch request for an identity provider using the `SAML` protocol. Supports a custom operation value called `promote-options` that allows the test configuration (`pendingOptions`) to be promoted to the live configuration (`options`) used for login.'"
            },
            "PendingResult": {
                "type": "object",
                "required": [
                    "status"
                ],
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "A unique readable error message based on the error that has occurred."
                    },
                    "status": {
                        "enum": [
                            "success",
                            "pending",
                            "error",
                            "claimsError",
                            "callbackError",
                            "tokenError",
                            "protocolError",
                            "networkError",
                            "configChangedDuringTestError"
                        ],
                        "type": "string",
                        "description": "The status of the IdP configuration being tested."
                    },
                    "started": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the test was started for an IdP configuration. This field is only available during lifespan of the test."
                    },
                    "protocol": {
                        "enum": [
                            "OIDC",
                            "SAML"
                        ],
                        "type": "string",
                        "description": "The protocol used to communicate with the IdP during the test flow."
                    },
                    "idpClaims": {
                        "type": "object",
                        "description": "The claims retrieved from the external IdP."
                    },
                    "oauth2Error": {
                        "type": "object",
                        "required": [
                            "error"
                        ],
                        "properties": {
                            "error": {
                                "type": "string",
                                "description": "An error code to identity the authentication error."
                            },
                            "errorURI": {
                                "type": "string",
                                "description": "An optional URI that includes additional information about the given error."
                            },
                            "errorDescription": {
                                "type": "string",
                                "description": "An optional human-readable description for the given error code."
                            }
                        }
                    },
                    "resultantClaims": {
                        "type": "object",
                        "description": "The resultant claims based on the claims received from the external IdP."
                    }
                }
            },
            "SigningKey": {
                "type": "object",
                "properties": {
                    "refId": {
                        "type": "string",
                        "description": "The reference ID for choosing this key pair."
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The certificate to be uploaded to the identity provider for verifying SAML requests."
                    }
                }
            },
            "ItemsListItemCollectionsResponseBody": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/collectionResultResponseBody"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/collectionsLinksResponseBody"
                    }
                },
                "description": "ListItemCollectionsResponseBody result type"
            },
            "ItemsListItemsResponseBody": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/itemResultResponseBody"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/itemsLinksResponseBody"
                    }
                },
                "description": "ListItemsResponseBody result type"
            },
            "ItemsSettingsPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "The operation to be performed. Only \"replace\" is supported."
                        },
                        "path": {
                            "enum": [
                                "/usageMetricsEnabled"
                            ],
                            "type": "string",
                            "description": "Field of Settings to be patched (updated)."
                        },
                        "value": {
                            "type": "boolean",
                            "description": "The value to be used within the operations.\n"
                        }
                    },
                    "description": "A JSONPatch document as defined by RFC 6902."
                }
            },
            "ItemsSettingsResponseBody": {
                "type": "object",
                "required": [
                    "usageMetricsEnabled"
                ],
                "properties": {
                    "usageMetricsEnabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Decides if the usage metrics will be shown in the hub UI."
                    }
                }
            },
            "ItemsUpdateItemRequestBody": {
                "type": "object",
                "required": [
                    "resourceType"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "The space's unique identifier."
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    "description": {
                        "type": "string"
                    },
                    "thumbnailId": {
                        "type": "string",
                        "description": "The item thumbnail's unique identifier. This is optional for internal resources."
                    },
                    "resourceLink": {
                        "type": "string",
                        "format": "uri",
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    "resourceType": {
                        "$ref": "#/components/schemas/itemResourceTypeEnum"
                    },
                    "resourceSubType": {
                        "type": "string",
                        "description": "Optional field defining the item's subtype, if any."
                    },
                    "resourceUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The RFC3339 datetime when the resource that the item references was last updated."
                    },
                    "resourceAttributes": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "resourceCustomAttributes": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            },
            "spaceTypeEnum": {
                "enum": [
                    "shared",
                    "managed",
                    "personal",
                    "data"
                ],
                "type": "string",
                "description": "The case-sensitive string defining the space type."
            },
            "chunking": {
                "type": "object",
                "required": [
                    "type",
                    "size",
                    "overlap",
                    "separators",
                    "keepSeparator"
                ],
                "properties": {
                    "size": {
                        "type": "integer",
                        "default": 1024,
                        "example": 1024,
                        "description": "Size of chunks"
                    },
                    "type": {
                        "type": "string",
                        "example": "recursive",
                        "description": "Chunking strategy"
                    },
                    "overlap": {
                        "type": "integer",
                        "example": 20,
                        "description": "Chunk overlap, should be less than size"
                    },
                    "separators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "\n",
                            ".",
                            " "
                        ],
                        "description": "List of separators to chunk by"
                    },
                    "keepSeparator": {
                        "type": "boolean",
                        "example": false,
                        "description": "Allows to keep or remove separators used"
                    }
                }
            },
            "contentSummary": {
                "type": "object",
                "required": [
                    "fileCount",
                    "effectivePages",
                    "textSize",
                    "fileSize"
                ],
                "properties": {
                    "fileSize": {
                        "type": "integer"
                    },
                    "textSize": {
                        "type": "integer"
                    },
                    "fileCount": {
                        "type": "integer"
                    },
                    "effectivePages": {
                        "type": "integer"
                    }
                }
            },
            "createDataSource": {
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the datasource"
                    },
                    "type": {
                        "enum": [
                            "file",
                            "web",
                            "database"
                        ],
                        "type": "string"
                    },
                    "fileConfig": {
                        "$ref": "#/components/schemas/dataSourceFileConfig"
                    },
                    "crawlerConfig": {
                        "$ref": "#/components/schemas/dataSourceCrawlConfig"
                    }
                },
                "description": "Specification on where to fetch the files for. This is required when the type == 'file'. Only one of path and files can be set. Path takes precedence if both are provided."
            },
            "createKnowledgeBase": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "tags",
                    "spaceId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Organization wide knowledgebase",
                        "description": "Name of the knowledgebase"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "List of tags for knowledgebase"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the space to contain the knowledgebase"
                    },
                    "description": {
                        "type": "string",
                        "example": "This knowledgebase is used for...",
                        "description": "Description of the knowledgebase"
                    },
                    "selectedErrorsCount": {
                        "type": "integer",
                        "example": 10,
                        "description": "Number of selected errors to store in the case of any failed datasources. Optional value with a default of 10."
                    }
                }
            },
            "dataSource": {
                "type": "object",
                "required": [
                    "id",
                    "type",
                    "contentSummary"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "Unique identifier of the datasource"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datasource"
                    },
                    "type": {
                        "enum": [
                            "file",
                            "web",
                            "database"
                        ],
                        "type": "string"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the space containing the datasource"
                    },
                    "chunking": {
                        "$ref": "#/components/schemas/chunking"
                    },
                    "syncInfo": {
                        "$ref": "#/components/schemas/dataSourceSyncStatus"
                    },
                    "fileConfig": {
                        "$ref": "#/components/schemas/dataSourceFileConfig"
                    },
                    "sourceCount": {
                        "type": "integer",
                        "example": 10,
                        "description": "The number of times that a datasource was referenced as a source in an answer"
                    },
                    "crawlerConfig": {
                        "$ref": "#/components/schemas/dataSourceCrawlConfig"
                    },
                    "contentSummary": {
                        "$ref": "#/components/schemas/contentSummary"
                    }
                },
                "description": "Specification on where to fetch the files for. This is required when the type == 'file'. Only one of path and files can be set. Path takes precedence if both are provided."
            },
            "dataSourceCrawlConfig": {
                "type": "object",
                "required": [
                    "url",
                    "scope"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "example": "http://www.example.com",
                        "description": "Seed URL that crawling will start on."
                    },
                    "scope": {
                        "$ref": "#/components/schemas/dataSourceCrawlScope"
                    },
                    "crawlPatterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/dataSourceCrawlPattern"
                        },
                        "description": "Pattern matching links to crawl"
                    },
                    "indexPatterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/dataSourceCrawlPattern"
                        },
                        "description": "Pattern matching links to index"
                    }
                },
                "description": "Configuration for webcrawling"
            },
            "dataSourceCrawlPattern": {
                "type": "object",
                "required": [
                    "type",
                    "pattern"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "include",
                            "exclude"
                        ],
                        "type": "string",
                        "example": "include",
                        "description": "include or exclude"
                    },
                    "pattern": {
                        "type": "string",
                        "example": "(.*)example(.*)",
                        "description": "Regex patterna to filter links on"
                    }
                },
                "description": "Include or exclude pattern"
            },
            "dataSourceCrawlScope": {
                "type": "object",
                "required": [
                    "scope",
                    "depth"
                ],
                "properties": {
                    "depth": {
                        "type": "integer",
                        "example": 1,
                        "description": "The number of levels of links the crawler will traverse"
                    },
                    "scope": {
                        "enum": [
                            "all",
                            "domain",
                            "subdomain"
                        ],
                        "type": "string",
                        "example": "all",
                        "description": "The scope that the crawler will crawl."
                    },
                    "maxSize": {
                        "type": "integer",
                        "example": 1000000,
                        "description": "Optional parameter. Max size of downloaded files in bytes"
                    },
                    "maxLinks": {
                        "type": "integer",
                        "example": 100,
                        "description": "Maximum number of links per page that will be extracted"
                    },
                    "downloadFiles": {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "if set to true crawler will try to download and index other supported content like pdf:s from links"
                    }
                },
                "description": "Scope for th webcrawler"
            },
            "dataSourceFileConfig": {
                "type": "object",
                "required": [
                    "connectionId",
                    "userId"
                ],
                "properties": {
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scope": {
                        "$ref": "#/components/schemas/dataSourceFileCrawlScope"
                    },
                    "folder": {
                        "type": "string",
                        "example": "folderA/folderB",
                        "description": "Root folder for traversing."
                    },
                    "userId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "userId of the owner of the datasource fileConfig"
                    },
                    "connectionId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "connection id to be used to retrieve the raw data"
                    },
                    "crawlPatterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/dataSourceCrawlPattern"
                        },
                        "description": "Pattern matching links to crawl"
                    }
                },
                "description": "Specification on where to fetch the files for. This is required when the type == 'file'. Only one of path and files can be set. Path takes precedence if both are provided."
            },
            "dataSourceFileCrawlScope": {
                "type": "object",
                "required": [
                    "depth"
                ],
                "properties": {
                    "depth": {
                        "type": "integer",
                        "example": 1,
                        "description": "The number of levels of sub folders that should be considered"
                    },
                    "maxSize": {
                        "type": "integer",
                        "example": 1000000,
                        "description": "Optional parameter. Max size of downloaded files in bytes"
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "pdf"
                        ],
                        "description": "list of file extensions to be considered"
                    },
                    "maxFilesTotal": {
                        "type": "integer",
                        "example": 50,
                        "description": "Total number of files that should be considered"
                    },
                    "modifiedAfter": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "description": "only files modified after this time should be indexed. If set older files will be removed from index."
                    },
                    "maxFilesPerFolder": {
                        "type": "integer",
                        "example": 100,
                        "description": "Maximum number of files per folder that should be considered"
                    }
                },
                "description": "Scope for the file crawler."
            },
            "dataSourceSync": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "Unique identifier of the sync"
                    }
                },
                "description": "Response when a datasource sync is started, contains the sync Id"
            },
            "dataSourceSyncStatus": {
                "type": "object",
                "required": [
                    "syncId",
                    "startedAt",
                    "completedAt",
                    "status"
                ],
                "properties": {
                    "status": {
                        "enum": [
                            "neverIndexed",
                            "progress",
                            "completed",
                            "completedWithError"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "Sync status"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the sync task was started"
                    },
                    "lastSyncId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "sync Id"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the sync task was completed"
                    }
                }
            },
            "docStats": {
                "type": "object",
                "required": [
                    "added",
                    "updated",
                    "deleted",
                    "errors",
                    "deltaBytes",
                    "largestFileSize",
                    "totalBytesProcessed",
                    "deltaEffectivePages",
                    "deltaTextSize"
                ],
                "properties": {
                    "added": {
                        "type": "integer",
                        "example": 1,
                        "readOnly": true
                    },
                    "errors": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "deleted": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "updated": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "deltaBytes": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "deltaTextSize": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "largestFileSize": {
                        "type": "integer",
                        "example": 123044444,
                        "readOnly": true
                    },
                    "deltaEffectivePages": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "totalBytesProcessed": {
                        "type": "integer",
                        "example": 123044444,
                        "readOnly": true
                    }
                },
                "description": "Summary of documents processed"
            },
            "downloadFile": {
                "type": "object",
                "required": [
                    "path"
                ],
                "properties": {
                    "path": {
                        "type": "string",
                        "example": "folder/file.pdf",
                        "description": "file path to the file to downlaod."
                    }
                }
            },
            "downloadFileResponse": {
                "type": "object",
                "required": [
                    "url",
                    "name",
                    "mimeType",
                    "spaceId",
                    "lastUpdatedAt",
                    "fileSize"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "example": "/v1/temp-contents/65f4287d785c400fe6d1e861",
                        "description": "URL to download the file."
                    },
                    "name": {
                        "type": "string",
                        "example": "stories/content/billy.txt",
                        "description": "The requested file name."
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Space id the file belongs in."
                    },
                    "fileSize": {
                        "type": "integer",
                        "example": 542,
                        "description": "Size of downloaded file."
                    },
                    "mimeType": {
                        "type": "string",
                        "example": "text/plain",
                        "description": "The mimetype of the file."
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-04-16T23:17:28Z",
                        "description": "Date for last time the file was modified."
                    }
                },
                "description": "Download information for the file."
            },
            "duration": {
                "type": "object",
                "required": [
                    "download",
                    "parse",
                    "chunk",
                    "embed",
                    "store"
                ],
                "properties": {
                    "chunk": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "embed": {
                        "type": "integer",
                        "example": 996,
                        "readOnly": true
                    },
                    "parse": {
                        "type": "integer",
                        "example": 0,
                        "readOnly": true
                    },
                    "store": {
                        "type": "integer",
                        "example": 3653363805,
                        "readOnly": true
                    },
                    "download": {
                        "type": "integer",
                        "example": 207,
                        "readOnly": true
                    }
                }
            },
            "knowledgeBase": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/knowledgeBaseLight"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "name",
                            "description",
                            "tags",
                            "ownerId",
                            "createdBy",
                            "createdAt",
                            "updatedBy",
                            "updatedAt",
                            "spaceId",
                            "contentSummary"
                        ],
                        "properties": {
                            "datasources": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/dataSource"
                                }
                            }
                        }
                    }
                ]
            },
            "knowledgeBaseLight": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "tags",
                    "ownerId",
                    "createdBy",
                    "createdAt",
                    "updatedBy",
                    "updatedAt",
                    "spaceId",
                    "contentSummary"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "Unique identifier of the knowledgebase"
                    },
                    "name": {
                        "type": "string",
                        "example": "Organization wide knowledgebase",
                        "description": "Name of the knowledgebase"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Red",
                            "Sales"
                        ],
                        "description": "List of tags associated with the knowledgebase."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the knowledgebase owner"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique identifier of the space containing the knowledgebase"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "description": "Unique identifier of the tenant"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the knowledgebase was created"
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "Unique identifier of the user who created the knowledgebase"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the knowledgebase was updated"
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The unique identifier of the user who last updated the knowledgebase"
                    },
                    "description": {
                        "type": "string",
                        "example": "This knowledgebase is used for...",
                        "description": "Description of the knowledgebase"
                    },
                    "lastIndexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the knowledgebase was last indexed"
                    },
                    "contentSummary": {
                        "$ref": "#/components/schemas/contentSummary"
                    },
                    "selectedErrorsCount": {
                        "type": "integer",
                        "example": 10,
                        "description": "Number of selected errors to store in the case of any failed datasources."
                    }
                }
            },
            "knowledgeBasesResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/knowledgeBaseLight"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "schedule": {
                "type": "object",
                "properties": {
                    "calendars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleCalendar"
                        }
                    },
                    "intervals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleInterval"
                        }
                    }
                }
            },
            "scheduleCalendar": {
                "type": "object",
                "required": [
                    "second",
                    "minute",
                    "hour",
                    "dayOfMonth",
                    "month",
                    "year",
                    "dayOfWeek",
                    "comment"
                ],
                "properties": {
                    "hour": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "Hour range to match (0-23). Default matches 0"
                    },
                    "year": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "Year range to match. Default matches all years"
                    },
                    "month": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "Month range to match (1-12). Default matches all months"
                    },
                    "minute": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "Minute range to match (0-59). Default matches 0"
                    },
                    "second": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "Second range to match (0-59). Default matches 0"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Description of the intention of this schedule"
                    },
                    "dayOfWeek": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "DayOfWeek range to match (0-6; 0 is Sunday). Default matches all days of the week"
                    },
                    "dayOfMonth": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleRange"
                        },
                        "description": "DayOfMonth range to match (1-31). Default matches all days"
                    }
                },
                "description": "An event specification relative to the calendar, similar to a traditional cron specification."
            },
            "scheduleInterval": {
                "type": "object",
                "required": [
                    "every"
                ],
                "properties": {
                    "every": {
                        "type": "string",
                        "example": "5h30m",
                        "description": "The period to repeat the interval"
                    },
                    "offset": {
                        "type": "string",
                        "default": "0s",
                        "example": "19m",
                        "description": "A fixed offset added to the intervals period. Optional, defaults to 0"
                    }
                },
                "description": "For example, an `every` of 1 hour with `offset` of zero would match every hour, on the hour. The same `every` but an `offset` of 19 minutes would match every `xx:19:00`."
            },
            "scheduleRange": {
                "type": "object",
                "required": [
                    "start"
                ],
                "properties": {
                    "end": {
                        "type": "integer",
                        "description": "End of the range (inclusive). If end < start, then end is interpreted as equal to start. Optional, defaulted to Start"
                    },
                    "step": {
                        "type": "integer",
                        "default": 1,
                        "description": "Step to be take between each value. Optional, defaulted to 1"
                    },
                    "start": {
                        "type": "integer",
                        "description": "Start of the range (inclusive)"
                    }
                },
                "description": "ScheduleRange represents a set of integer values, used to match fields of a calendar time in scheduleCalendar. If end < start, then end is interpreted as equal to start"
            },
            "scheduleWithManifest": {
                "type": "object",
                "required": [
                    "tenantId",
                    "ownerId",
                    "knowledgebaseId",
                    "calendars"
                ],
                "properties": {
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ed"
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ec"
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860eb"
                    },
                    "calendars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleCalendar"
                        }
                    },
                    "intervals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/scheduleInterval"
                        }
                    },
                    "datasourceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                    },
                    "knowledgebaseId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d"
                    }
                }
            },
            "syncHistory": {
                "type": "object",
                "required": [
                    "id",
                    "datasourceId",
                    "startedAt",
                    "status",
                    "triggerType",
                    "docStats",
                    "connectionId"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "sync id"
                    },
                    "status": {
                        "enum": [
                            "neverIndexed",
                            "progress",
                            "completed",
                            "completedWithError"
                        ],
                        "type": "string",
                        "example": [
                            "neverIndexed | progress | completed | completedWithError"
                        ],
                        "readOnly": true,
                        "description": "Sync status"
                    },
                    "docStats": {
                        "$ref": "#/components/schemas/docStats"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the sync task was started"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the sync task was completed"
                    },
                    "triggerType": {
                        "type": "string",
                        "example": [
                            "manual | schedule"
                        ],
                        "description": "Datasource trigger type, was it manually or automatically synced"
                    },
                    "connectionId": {
                        "type": "string",
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "Connection id that the datasource used"
                    },
                    "datasourceId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "datasource id"
                    },
                    "selectedErrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "unsupported file extension"
                        ],
                        "description": "populated with up to the first selectedErrorsCount errors if there were any during sync"
                    }
                }
            },
            "syncHistoryDetails": {
                "type": "object",
                "required": [
                    "syncId",
                    "action",
                    "syncedAt",
                    "id",
                    "source",
                    "explicitPages"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "document Id"
                    },
                    "error": {
                        "type": "string",
                        "example": "unsupported file extension",
                        "description": "error if one happened during sync"
                    },
                    "action": {
                        "enum": [
                            "add",
                            "delete",
                            "update"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "acion performed"
                    },
                    "chunks": {
                        "type": "integer",
                        "example": 10,
                        "readOnly": true,
                        "description": "number of chunks"
                    },
                    "source": {
                        "type": "string",
                        "example": "myfile.pdf",
                        "readOnly": true,
                        "description": "Source of the document"
                    },
                    "syncId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f256b3e4-03e0-4f74-ae46-a4d43882ee5d",
                        "description": "sync Id"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/duration"
                    },
                    "fileSize": {
                        "type": "integer",
                        "example": 123044444,
                        "readOnly": true,
                        "description": "file size"
                    },
                    "syncedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the sync task was executed"
                    },
                    "chunkSize": {
                        "type": "integer",
                        "example": 14721,
                        "readOnly": true,
                        "description": "chunk size"
                    },
                    "explicitPages": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "page count"
                    },
                    "fileStartedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:20:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the file processing started"
                    },
                    "fileCompletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-02T14:21:50.52Z",
                        "readOnly": true,
                        "description": "Datetime when the file processing finished"
                    },
                    "fileLastModified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-02-16T20:06:02Z",
                        "readOnly": true,
                        "description": "Datetime when the file was last modified"
                    }
                }
            },
            "syncHistoryResult": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/syncHistory"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/pageLinks"
                    }
                }
            },
            "assignmentsActionsAddRequest": {
                "type": "object",
                "example": {
                    "add": [
                        {
                            "type": "professional",
                            "subject": "qlik\\kalle"
                        },
                        {
                            "type": "analyzer",
                            "subject": "qlik\\nalle"
                        }
                    ]
                },
                "required": [
                    "add"
                ],
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "subject",
                                "type"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User name"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Allotment type"
                                },
                                "userId": {
                                    "type": "string",
                                    "description": "User ID",
                                    "x-qlik-deprecated": true
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "User subject"
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsActionsAddResponse": {
                "type": "object",
                "example": {
                    "data": [
                        {
                            "type": "professional",
                            "status": 201,
                            "subject": "qlik\\kalle"
                        },
                        {
                            "code": "LICENSES-011",
                            "type": "analyzer",
                            "title": "No available allotment error, No available allotment.",
                            "status": 403,
                            "subject": "qlik\\nalle"
                        }
                    ]
                },
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "subject",
                                "status"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "Error code"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Allotment type"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Error title"
                                },
                                "status": {
                                    "type": "integer",
                                    "description": "Response status"
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "Subject"
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsActionsDeleteRequest": {
                "type": "object",
                "example": {
                    "delete": [
                        {
                            "type": "analyzer",
                            "subject": "qlik\\malik"
                        }
                    ]
                },
                "required": [
                    "delete"
                ],
                "properties": {
                    "delete": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "subject",
                                "type"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Allotment type"
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "User subject"
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsActionsDeleteResponse": {
                "type": "object",
                "example": {
                    "data": [
                        {
                            "type": "professional",
                            "status": 200,
                            "subject": "qlik\\malik"
                        },
                        {
                            "code": "LICENSES-016",
                            "type": "analyzer",
                            "title": "Assignment not found.",
                            "status": 404,
                            "subject": "qlik\\no"
                        }
                    ]
                },
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "status"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "Error code"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Allotment type"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Error title"
                                },
                                "status": {
                                    "type": "integer",
                                    "description": "Response status"
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "Subject"
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsActionsUpdateRequest": {
                "type": "object",
                "example": {
                    "update": [
                        {
                            "type": "professional",
                            "subject": "qlik\\malik",
                            "sourceType": "analyzer"
                        }
                    ]
                },
                "required": [
                    "update"
                ],
                "properties": {
                    "update": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "subject"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Target assignment type."
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "User subject, the current or the desired after the patch."
                                },
                                "sourceType": {
                                    "type": "string",
                                    "description": "Current assignment type."
                                },
                                "sourceSubject": {
                                    "type": "string",
                                    "description": "The current user subject, in case that should be patched."
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsActionsUpdateResponse": {
                "type": "object",
                "example": {
                    "data": [
                        {
                            "type": "professional",
                            "status": 200,
                            "subject": "qlik\\malik",
                            "sourceType": "analyzer"
                        },
                        {
                            "code": "LICENSES-016",
                            "title": "Assignment not found.",
                            "status": 404,
                            "subject": "qlik/sara",
                            "sourceType": "analyzer"
                        }
                    ]
                },
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "status"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "Error code"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Target allotment type."
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Error title"
                                },
                                "status": {
                                    "type": "integer",
                                    "description": "HTTP status code indicating the result of the individual assignment operation. A value of 200 represents a successful update, while 201 indicates a new resource was created due to a subject update. Any 400-level status codes indicate an error."
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "Target subject."
                                },
                                "sourceType": {
                                    "type": "string",
                                    "description": "Current allotment type."
                                },
                                "sourceSubject": {
                                    "type": "string",
                                    "description": "Current subject."
                                }
                            }
                        }
                    }
                }
            },
            "assignmentsResponse": {
                "type": "object",
                "example": {
                    "data": [
                        {
                            "type": "analyzer",
                            "excess": false,
                            "created": "2020-12-03T09:24:48.114Z",
                            "subject": "qlik\\kalle"
                        },
                        {
                            "type": false,
                            "created": "2020-12-03T09:24:48.114Z",
                            "subject": "qlik\\nalle"
                        }
                    ],
                    "links": {
                        "next": {
                            "href": "http://license/v1/licenses/assignments?limit=4&page=bmV4dDpGZ0FBQUFkZmFXUUFYOHBUcTlpM1U4UU1YWHZrQUE%3D"
                        },
                        "prev": {
                            "href": "http://license/v1/licenses/assignments?limit=4&page=cHJldjpGZ0FBQUFkZmFXUUFYOHBUcTlpM1U4UU1YWHZ0QUE%3D"
                        }
                    }
                },
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "type",
                                "subject",
                                "excess",
                                "created"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Allotment type"
                                },
                                "excess": {
                                    "type": "boolean",
                                    "description": "Assignment excess status."
                                },
                                "created": {
                                    "type": "string",
                                    "description": "Assignment created date."
                                },
                                "subject": {
                                    "type": "string",
                                    "description": "Subject"
                                }
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/href"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/href"
                            }
                        }
                    }
                }
            },
            "consumptionEventsResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "ID"
                                },
                                "appId": {
                                    "type": "string",
                                    "description": "App ID"
                                },
                                "userId": {
                                    "type": "string",
                                    "description": "User ID"
                                },
                                "endTime": {
                                    "type": "string",
                                    "description": "Engine session end time.",
                                    "x-qlik-filterable": true
                                },
                                "duration": {
                                    "type": "string",
                                    "description": "Engine session duration."
                                },
                                "sessionId": {
                                    "type": "string",
                                    "description": "Engine session ID."
                                },
                                "allotmentId": {
                                    "type": "string",
                                    "description": "Allotment ID"
                                },
                                "minutesUsed": {
                                    "type": "integer",
                                    "description": "Analyzer capacity minutes consumed."
                                },
                                "capacityUsed": {
                                    "type": "integer",
                                    "description": "Analyzer capacity chunks consumed."
                                },
                                "licenseUsage": {
                                    "type": "string",
                                    "description": "License usage"
                                }
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/href"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/href"
                            }
                        }
                    }
                }
            },
            "licenseOverview": {
                "type": "object",
                "example": {
                    "trial": false,
                    "valid": "2018-01-01/2018-12-31",
                    "origin": "Internal",
                    "status": "Ok",
                    "product": "Qlik Sense Enterprise SaaS",
                    "allotments": [
                        {
                            "name": "analyzer_time",
                            "units": 300,
                            "overage": 100,
                            "unitsUsed": 242,
                            "usageClass": "time"
                        },
                        {
                            "name": "professional",
                            "units": 200,
                            "unitsUsed": 15,
                            "usageClass": "assigned"
                        }
                    ],
                    "licenseKey": "hejhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IktFWTEifQ.eyJqdGkiOiIxZjZkZTc0Zi04MDcyLTRjMTQtYjc1OS02ZjlkYmJmYWM5MjAiLCJsaWNlbnNlIjoiOTk5OTAwMDAwMDAwMTIzNCJ9.fwa6l6gY1MR_Ja2OMnV65V68fbzQYW5OAKUFnLfG9oZjNAbjhdDkZvS2S2zHaBnSrSva1ARh5iq_S0KTBOKKcJJDTb7jRVURyaAvbCuBDk_0ITrUudHaT9U_Mc9EKkfT8mR6vthhZxVzEhyYPFS7gDw7M6bav2ntpDsoJFPgous",
                    "parameters": [
                        {
                            "name": "qlikAlerting",
                            "valid": "./.",
                            "values": {
                                "saas_alerting": "FULL"
                            }
                        }
                    ],
                    "licenseNumber": "9999000000001204",
                    "secondaryNumber": "12345"
                },
                "required": [
                    "allotments",
                    "licenseKey",
                    "licenseNumber",
                    "origin",
                    "updated",
                    "parameters",
                    "product",
                    "status",
                    "trial",
                    "valid",
                    "secondaryNumber"
                ],
                "properties": {
                    "trial": {
                        "type": "boolean",
                        "description": "Boolean indicating if it is a trial license."
                    },
                    "valid": {
                        "type": "string",
                        "description": "Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end."
                    },
                    "origin": {
                        "enum": [
                            "Internal",
                            "External"
                        ],
                        "type": "string",
                        "description": "Origin of license key."
                    },
                    "status": {
                        "enum": [
                            "Ok",
                            "Blacklisted",
                            "Expired"
                        ],
                        "type": "string",
                        "description": "Enum with status of license. Only status Ok grants license. access."
                    },
                    "product": {
                        "type": "string",
                        "description": "The product the license is valid for."
                    },
                    "updated": {
                        "type": "string",
                        "description": "An ISO 8601 timestamp for when the license was last updated."
                    },
                    "allotments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "name",
                                "units",
                                "unitsUsed",
                                "usageClass"
                            ],
                            "properties": {
                                "name": {
                                    "enum": [
                                        "professional",
                                        "analyzer",
                                        "analyzer_time"
                                    ],
                                    "type": "string"
                                },
                                "units": {
                                    "type": "integer"
                                },
                                "overage": {
                                    "type": "integer",
                                    "description": "Overage value; -1 means unbounded overage."
                                },
                                "unitsUsed": {
                                    "type": "integer"
                                },
                                "usageClass": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "changeTime": {
                        "type": "string",
                        "description": "An ISO 8601 timestamp for when the license was last changed."
                    },
                    "licenseKey": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "name",
                                "valid"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Parameter set (provision) name."
                                },
                                "valid": {
                                    "type": "string",
                                    "pattern": "^(\\.|\\d{4}-\\d{2}-\\d{2})/(\\.|\\d{4}-\\d{2}-\\d{2})$",
                                    "description": "Time interval for parameter validity."
                                },
                                "access": {
                                    "type": "object",
                                    "properties": {
                                        "allotment": {
                                            "type": "string",
                                            "description": "Name of an allotment that the user must have access to. to"
                                        }
                                    },
                                    "description": "Parameters for licenses to control access to the parameters."
                                },
                                "values": {
                                    "type": "object",
                                    "properties": {},
                                    "description": "Parameter values"
                                }
                            }
                        },
                        "description": "The license parameters."
                    },
                    "licenseType": {
                        "type": "string"
                    },
                    "licenseNumber": {
                        "type": "string"
                    },
                    "latestValidTime": {
                        "type": "string",
                        "description": "An ISO 8601 timestamp for when the latest time the license has been known to be valid, a missing value indicates the indefinite future."
                    },
                    "secondaryNumber": {
                        "type": "string",
                        "description": "The secondary number of a definition."
                    },
                    "parentLicenseNumber": {
                        "type": "string",
                        "description": "the parent number of the license. can be shared by multiple license numbers"
                    }
                }
            },
            "licenseStatus": {
                "type": "object",
                "example": {
                    "type": "Signed",
                    "trial": false,
                    "valid": "2018-01-01/2018-12-31",
                    "origin": "Internal",
                    "status": "Ok",
                    "product": "Qlik Sense Business"
                },
                "required": [
                    "origin",
                    "product",
                    "status",
                    "trial",
                    "type",
                    "valid"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "Signed",
                            "Plain"
                        ],
                        "type": "string",
                        "description": "Type of license key."
                    },
                    "trial": {
                        "type": "boolean",
                        "description": "Boolean indicating if it is a trial license."
                    },
                    "valid": {
                        "type": "string",
                        "description": "Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end."
                    },
                    "origin": {
                        "enum": [
                            "Internal",
                            "External"
                        ],
                        "type": "string",
                        "description": "Origin of license key."
                    },
                    "status": {
                        "enum": [
                            "Ok",
                            "Blacklisted",
                            "Expired",
                            "Missing"
                        ],
                        "type": "string",
                        "description": "Enum with status of license. Only status Ok grants license. access."
                    },
                    "product": {
                        "type": "string",
                        "description": "The product the license is valid for."
                    }
                }
            },
            "settingsBody": {
                "type": "object",
                "example": {
                    "autoAssignAnalyzer": true,
                    "autoAssignProfessional": false
                },
                "properties": {
                    "autoAssignAnalyzer": {
                        "type": "boolean",
                        "description": "If analyzer users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available."
                    },
                    "autoAssignProfessional": {
                        "type": "boolean",
                        "description": "If professional users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available."
                    }
                }
            },
            "dataAsset": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "qri:app:landing://65083739daf9b2658503f93c",
                        "description": "The id (QRI) of the data asset"
                    },
                    "type": {
                        "type": "string",
                        "example": "DI_APP",
                        "description": "The type of the data asset"
                    },
                    "label": {
                        "type": "string",
                        "example": "example.Landing.Asset",
                        "description": "The lable of the data asset"
                    },
                    "subtype": {
                        "type": "string",
                        "example": "LANDING_SAAS_MANAGED",
                        "description": "The subtype of the data asset"
                    }
                },
                "description": "The data integration data asset where the node belongs to"
            },
            "edge": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The index of edges. This is only used in the POST request."
                    },
                    "source": {
                        "type": "string",
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "description": "The id (QRI) of the source node on this edge."
                    },
                    "target": {
                        "type": "string",
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "description": "The id (QRI) of the target node on this edge."
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            }
                        }
                    },
                    "relation": {
                        "type": "string",
                        "example": [
                            "LOAD",
                            "STORE",
                            "READ",
                            "FROM"
                        ]
                    }
                }
            },
            "emptyReturn": {
                "type": "object"
            },
            "errorResponse-400": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-400"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Bad Request"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "Something is not right in the request."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "errorResponse-403": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-403"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Forbidden"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "You don't have sufficient permissions to access this resource."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "errorResponse-404": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-404"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Not Found"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "The resource either never existed, or may have been deleted."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "errorResponse-429": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "RATE-001"
                    },
                    "title": {
                        "type": "string",
                        "example": "Too many requests"
                    }
                }
            },
            "errorResponse-500": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-500"
                                },
                                "meta": {
                                    "type": "object",
                                    "example": "{\"id\":\"e5c651d5-1198-45a2-be5d-f016cee0baf5\"}",
                                    "description": "The meta contains additional inforomation when requests fail due to internal errors."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Internal Server Error"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "Something went wrong in the server."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "errorResponse-503": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "HTTP-503"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Service Unavailable"
                                },
                                "detail": {
                                    "type": "string",
                                    "example": "The service is unavailable."
                                }
                            }
                        }
                    },
                    "traceId": {
                        "type": "string"
                    }
                }
            },
            "graph": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "edges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/edge"
                        }
                    },
                    "label": {
                        "type": "string",
                        "description": "Label string for this graph."
                    },
                    "nodes": {
                        "$ref": "#/components/schemas/nodes"
                    },
                    "directed": {
                        "type": "boolean",
                        "description": "Returns true if the graph is directed."
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "total": {
                                "type": "integer",
                                "description": "The total number of nodes retrieved in this graph."
                            },
                            "createdAt": {
                                "type": "string",
                                "description": "The date and time when the graph is created."
                            },
                            "producerId": {
                                "type": "string",
                                "example": "qri:db:oracle://LfxVj_3du3GYdWdNaa721lOWvbhENXEArBpl58h96YE#ZfH0lkXnTTGu7QGnIvKZpIxFNagQivBtnbC_cAoCPOs",
                                "description": "The id (QRI) of the graph producer."
                            },
                            "specVersion": {
                                "type": "string"
                            },
                            "producerType": {
                                "type": "string",
                                "example": [
                                    "QDA",
                                    "EXTERNAL"
                                ],
                                "description": "The type of the graph producer."
                            }
                        }
                    }
                },
                "description": "The lineage graph containing the node."
            },
            "graphLevelsResponse": {
                "type": "object",
                "title": "Response with graphs for requested levels",
                "properties": {
                    "graph": {
                        "$ref": "#/components/schemas/graph"
                    },
                    "graphs": {
                        "$ref": "#/components/schemas/graphs"
                    }
                }
            },
            "graphResponse": {
                "type": "object",
                "title": "Response with a single graph",
                "properties": {
                    "graph": {
                        "$ref": "#/components/schemas/graph"
                    }
                }
            },
            "graphs": {
                "type": "object",
                "title": "Graphs",
                "properties": {
                    "graphs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/graph"
                        }
                    }
                },
                "description": "The list of lineage graphs."
            },
            "graphsResponse": {
                "type": "object",
                "title": "Response with all graphs",
                "properties": {
                    "graphs": {
                        "$ref": "#/components/schemas/graphs"
                    }
                }
            },
            "lineageOverviewInfo": {
                "type": "object",
                "properties": {
                    "tableQRI": {
                        "type": "string",
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "nullable": true,
                        "description": "Table level QRI that the field belongs to."
                    },
                    "tableLabel": {
                        "type": "string",
                        "nullable": true,
                        "description": "Table level label"
                    },
                    "resourceQRI": {
                        "type": "string",
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "nullable": true,
                        "description": "Resource level QRI"
                    },
                    "resourceLabel": {
                        "type": "string",
                        "nullable": true,
                        "description": "Resource level label"
                    }
                }
            },
            "multiStatusResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/multiStatusResponseItem"
                        }
                    }
                }
            },
            "multiStatusResponseItem": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "HTTP-404"
                    },
                    "title": {
                        "type": "string",
                        "example": "Resource not found."
                    },
                    "status": {
                        "type": "integer",
                        "example": 404
                    },
                    "resource": {
                        "$ref": "#/components/schemas/overviewItem"
                    }
                }
            },
            "node": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Name label of the node."
                    },
                    "metadata": {
                        "type": "object",
                        "required": [
                            "id",
                            "type"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "qri:app:sense://3634fc0d-273d-429e-8d0b-1b4b1b66a1f2",
                                "description": "The id (QRI) of the node"
                            },
                            "type": {
                                "type": "string",
                                "example": [
                                    "DA_APP",
                                    "DA_APP_LINK",
                                    "DATASET",
                                    "TABLE",
                                    "FIELD"
                                ],
                                "description": "The type of the node."
                            },
                            "fields": {
                                "type": "integer",
                                "example": 1,
                                "description": "The number of fields that are impacted. \nThis will be returned as part of the response from /impact/{id}/overview and /impact/{id}/actions/expand on the table level.\n"
                            },
                            "tables": {
                                "type": "integer",
                                "example": 1,
                                "description": "The number of tables that are impacted. \nThis will be returned as part of the response from /impact/{id}/overview.\n"
                            },
                            "subtype": {
                                "type": "string",
                                "example": [
                                    "PROCESSOR",
                                    "APPLICATION",
                                    "FILE"
                                ],
                                "description": "The subtype of the node."
                            },
                            "filePath": {
                                "type": "string",
                                "example": "example.qvd",
                                "description": "The file path of a node"
                            },
                            "dataAsset": {
                                "$ref": "#/components/schemas/dataAsset"
                            }
                        },
                        "description": "This contains additional node information such as node types, subtypes, queryExpressions, etc."
                    }
                }
            },
            "nodes": {
                "type": "object",
                "example": "{\"qri:app:sense://3634fc0d-273d-429e-8d0b-1b4b1b66a1f2\":{\"label\":\"a\",\"metadata\":{\"id\":\"qri:app:sense://3634fc0d-273d-429e-8d0b-1b4b1b66a1f2\",\"subtype\":\"PROCESSOR\",\"type\":\"DA_APP\",\"filePath\":\"example.qvd\"}}}",
                "description": "All the nodes contained in a graph.",
                "additionalProperties": {
                    "$ref": "#/components/schemas/node"
                }
            },
            "overviewItem": {
                "type": "object",
                "properties": {
                    "qri": {
                        "type": "string",
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "description": "Input QRI that we are getting the overview for."
                    },
                    "lineage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/lineageOverviewInfo"
                        }
                    }
                }
            },
            "overviewItems": {
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/overviewItem"
                        }
                    }
                }
            },
            "qris": {
                "type": "array",
                "items": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "description": "List of qri to find direct lineage for."
                }
            },
            "AnyType": {
                "description": "Use for fields that can be `any` type (string, number, etc.)"
            },
            "APIError": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Qlik error code (not HTTP response status code)"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "issue": {
                                "type": "string",
                                "description": "The issue code"
                            },
                            "details": {
                                "type": "string",
                                "description": "Extra details for what may have caused the error"
                            },
                            "errorId": {
                                "type": "string",
                                "description": "The unique id of the error instance"
                            },
                            "argument": {
                                "type": "string",
                                "description": "The argument"
                            },
                            "resource": {
                                "type": "string",
                                "description": "The resource type that the error occurred on"
                            },
                            "resourceId": {
                                "type": "string",
                                "description": "The resource id that the error occurred on"
                            }
                        },
                        "description": "Additional details about the error. These may vary by error.\n",
                        "additionalProperties": false
                    },
                    "title": {
                        "type": "string",
                        "description": "Short summary of error"
                    },
                    "detail": {
                        "type": "string",
                        "description": "Description of the error"
                    }
                },
                "description": "An error object",
                "additionalProperties": false
            },
            "BatchPrediction": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EntityName"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": "[{\"code\":\"AML-145\",\"title\":\"datasync dependent service error, service profile\",\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\",\"meta\":{\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\"}}]\n",
                        "description": "JSON string with list of error objects."
                    },
                    "status": {
                        "enum": [
                            "modified",
                            "ready",
                            "error",
                            "cancelled",
                            "pending"
                        ],
                        "type": "string",
                        "description": "Status of this batch prediction"
                    },
                    "ownerId": {
                        "$ref": "#/components/schemas/OwnerId"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/BatchPredictionSchedule"
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "ID of the owner/user that ran this prediction batch"
                    },
                    "dataSetId": {
                        "$ref": "#/components/schemas/DataSetId"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "ID of the dataset with the prediction results\n"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "writeback": {
                        "$ref": "#/components/schemas/BatchPredictionWriteback"
                    },
                    "indexColumn": {
                        "type": "string",
                        "description": "A column name upon which to create an index"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "ID of the deployment that processes these predictions"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "JSON string of error object"
                    },
                    "outputDataset": {
                        "type": "string",
                        "description": "Where to output dataset"
                    }
                },
                "description": "A batch prediction job configuration",
                "additionalProperties": false
            },
            "BatchPredictionActionResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "job"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/PredictionJobResponse"
                            }
                        }
                    }
                },
                "description": "Response for batch prediction predict action that indicates job and status"
            },
            "BatchPredictionFindResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "id",
                                "attributes"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/EntityId"
                                },
                                "type": {
                                    "enum": [
                                        "batch-prediction"
                                    ],
                                    "type": "string"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/BatchPrediction"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/FindResponseMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResponseLinks"
                    }
                },
                "additionalProperties": false
            },
            "BatchPredictionGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "batch-prediction"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/BatchPrediction"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "BatchPredictionInput": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "batch-prediction"
                                ],
                                "type": "string",
                                "default": "batch-prediction"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "$ref": "#/components/schemas/EntityName"
                                    },
                                    "schedule": {
                                        "$ref": "#/components/schemas/BatchPredictionScheduleInputAttributes"
                                    },
                                    "dataSetId": {
                                        "$ref": "#/components/schemas/DataSetId"
                                    },
                                    "writeback": {
                                        "$ref": "#/components/schemas/BatchPredictionWriteback"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "indexColumn": {
                                        "type": "string",
                                        "description": "A column name upon which to create an index (empty string or undefined will default to automl-generated index)"
                                    },
                                    "deploymentId": {
                                        "type": "string",
                                        "description": "The ID of the deployment used to make these predictions"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "description": "Input values for creating a batch prediction configuration",
                "additionalProperties": false
            },
            "BatchPredictionPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "example": {
                        "op": "replace",
                        "path": "/name",
                        "value": "New Name"
                    },
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "All patch requests use the replace operation"
                        },
                        "path": {
                            "enum": [
                                "/name",
                                "/description",
                                "/dataSetId",
                                "/indexColumn",
                                "/applyDatasetChangeOnly",
                                "/ownerId",
                                "/writeback/spaceId",
                                "/writeback/format",
                                "/writeback/dstName",
                                "/writeback/dstShapName",
                                "/writeback/dstCoordShapName",
                                "/writeback/dstNotPredictedName",
                                "/writeback/dstSourceName"
                            ],
                            "type": "string",
                            "description": "Path for the property you want to update"
                        },
                        "value": {
                            "$ref": "#/components/schemas/AnyType"
                        }
                    },
                    "description": "Values that can be patched.\n- name: Name of this entity\n- description: Description of this entity\n- dataSetId\n- outputDataset\n- indexColumn: Column name upon which to create an index (empty string or undefined will default to automl-generated index)\n- applyDatasetChangeOnly\n- ownerId: ID of batch owner/user\n- writeback: Where to write prediction results\n",
                    "additionalProperties": false
                }
            },
            "BatchPredictionPostResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "batch-prediction"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/BatchPrediction"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "BatchPredictionSchedule": {
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "pending",
                            "active",
                            "error",
                            "error_scheduler_unreachable",
                            "error_scheduler_callback_error",
                            "licence_advanced_features_required",
                            "failing_schedule_permission"
                        ],
                        "type": "string",
                        "description": "The status of the schedule"
                    },
                    "timezone": {
                        "type": "string",
                        "example": "America/Toronto",
                        "description": "Timezone used for the date-time fields"
                    },
                    "recurrence": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": [
                                "Daily at 11:10:00 AM [\"RRULE:FREQ=DAILY;BYHOUR=11;BYMINUTE=10;BYSECOND=0\"]",
                                "Weekly on Mondays at 11:10:00 AM [\"RRULE:FREQ=WEEKLY;INTERVAL:1;BYDAY=MO;BYHOUR=11;BYMINUTE=10;BYSECOND=0\"]"
                            ],
                            "description": "A recurrence rule"
                        },
                        "description": "Recurrence rules. Maximum is DAILY but you can specify the\nhour, minute, and second it runs each day.\nOne string per rule.\n"
                    },
                    "endDateTime": {
                        "type": "string",
                        "description": "When the job finished"
                    },
                    "chronosJobId": {
                        "type": "string",
                        "description": "The ID of the chronos job"
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "When the job is scheduled to start"
                    },
                    "failureAttempts": {
                        "type": "number",
                        "description": "Number of times a scheduled prediction job has failed"
                    },
                    "applyDatasetChangeOnly": {
                        "type": "boolean",
                        "default": true,
                        "description": "If true, only run prediction if dataset has changed to avoid\nduplicates. If set to false, re-runs predictions on unchanged\ndatasets.\n"
                    },
                    "lastSuccessfulDateTime": {
                        "type": "string",
                        "description": "When the last successful job happened"
                    }
                },
                "description": "Batch prediction job schedule",
                "additionalProperties": false
            },
            "BatchPredictionScheduleGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "batch-prediction-schedule"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/BatchPredictionSchedule"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "BatchPredictionScheduleInput": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "batch-prediction-schedule"
                                ],
                                "type": "string",
                                "default": "batch-prediction-schedule"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/BatchPredictionScheduleInputAttributes"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "description": "Input values for a batch prediction schedule",
                "additionalProperties": false
            },
            "BatchPredictionScheduleInputAttributes": {
                "type": "object",
                "required": [
                    "startDateTime",
                    "timezone"
                ],
                "properties": {
                    "timezone": {
                        "type": "string",
                        "example": "America/Toronto",
                        "description": "Timezone used for the date-time fields"
                    },
                    "recurrence": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "A recurrence rule"
                        },
                        "example": [
                            "RRULE:FREQ=DAILY;INTERVAL=1;BYHOUR=16;BYMINUTE=30;BYSECOND=0"
                        ],
                        "description": "Recurrence rules. Maximum is DAILY but you can specify the\nhour, minute, and second it runs each day.\nOne string per rule.\n"
                    },
                    "endDateTime": {
                        "type": "string",
                        "example": "2025-12-31T23:59:00",
                        "description": "When the job is scheduled to finish"
                    },
                    "startDateTime": {
                        "type": "string",
                        "example": "2025-12-25T00:00:00",
                        "description": "When the job is scheduled to start"
                    },
                    "applyDatasetChangeOnly": {
                        "type": "boolean",
                        "default": true,
                        "description": "If true, only run prediction if dataset has changed to avoid\nduplicates. If set to false, re-runs predictions on unchanged\ndatasets.\n"
                    }
                },
                "description": "Configuration to schedule a batch prediction",
                "additionalProperties": false
            },
            "BatchPredictionSchedulePatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "example": {
                        "op": "replace",
                        "path": "/startDateTime",
                        "value": "2022-09-14T12:00:00"
                    },
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "All patch requests use the replace operation"
                        },
                        "path": {
                            "enum": [
                                "/startDateTime",
                                "/endDateTime",
                                "/timezone",
                                "/recurrence",
                                "/applyDatasetChangeOnly"
                            ],
                            "type": "string",
                            "description": "Path for the property you want to update"
                        },
                        "value": {
                            "$ref": "#/components/schemas/AnyType"
                        }
                    },
                    "description": "Values that can be patched.\n- startDateTime: When the batch starts, if scheduled\n- endDateTime: When batch ends, if scheduled\n- timeZone: Timezone used for scheduling\n- recurrence: Array of strings to indicate when this batch recurs\n- applyDatasetChangeOnly: Only run prediction if dataset has changed?\n",
                    "additionalProperties": false
                }
            },
            "BatchPredictionSchedulePutResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "batch-prediction-schedule"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/BatchPredictionSchedule"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "BatchPredictionWriteback": {
                "type": "object",
                "required": [
                    "spaceId",
                    "format",
                    "dstName"
                ],
                "properties": {
                    "format": {
                        "enum": [
                            "qvd",
                            "parquet",
                            "csv"
                        ],
                        "type": "string",
                        "default": "parquet",
                        "description": "File format for write back files (this applies to all)"
                    },
                    "dstName": {
                        "type": "string"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "Space ID where you want to save batch prediction writebacks or\nempty string ('') save them to your personal space.\n"
                    },
                    "dstShapName": {
                        "type": "string"
                    },
                    "dstSourceName": {
                        "type": "string"
                    },
                    "dstCoordShapName": {
                        "type": "string"
                    },
                    "dstNotPredictedName": {
                        "type": "string"
                    }
                },
                "description": "Sets which files, file names, and spaces are used to write results of\nbatch predictions (output files) to the catalog.\n"
            },
            "BinaryImbalanceSampling": {
                "type": "object",
                "properties": {
                    "sampleClass": {
                        "type": "string"
                    },
                    "sampleRatio": {
                        "type": "number"
                    },
                    "sampleDirection": {
                        "enum": [
                            "up",
                            "down"
                        ],
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ChangeType": {
                "enum": [
                    "categorical",
                    "numeric",
                    "date",
                    "freetext"
                ],
                "type": "string",
                "default": null,
                "nullable": true,
                "description": "Indicates if you want to change the featureType for this\nfeature within the experiment version\n"
            },
            "CorrType": {
                "enum": [
                    "batch-prediction",
                    "experiment-version"
                ],
                "type": "string",
                "description": "Types names of correlated resources (batch 'prediction' and\nexperiment_version)\n"
            },
            "CreatedAt": {
                "type": "string",
                "description": "Timestamp when this was created"
            },
            "DataSetId": {
                "type": "string",
                "example": "672e55cfcadfb8a18281523e",
                "description": "The Qlik catalog dataset ID"
            },
            "DatasetOrigin": {
                "enum": [
                    "new",
                    "changed",
                    "refreshed",
                    "same"
                ],
                "type": "string",
                "default": "new",
                "description": "Whether this is a new or other dataset"
            },
            "DataType": {
                "enum": [
                    "DATE",
                    "TIME",
                    "DATETIME",
                    "TIMESTAMP",
                    "STRING",
                    "DOUBLE",
                    "DECIMAL",
                    "INTEGER",
                    "BOOLEAN",
                    "BINARY",
                    "CUSTOM",
                    "FLOAT",
                    "OBJECT"
                ],
                "type": "string",
                "example": "STRING",
                "description": "The data type of this feature in your dataset\n"
            },
            "DateIndexes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "maxItems": 1,
                "minItems": 0,
                "description": "A optional date column name to index"
            },
            "DeletedAt": {
                "type": "string",
                "description": "Timestamp when this is deleted"
            },
            "Deployment": {
                "type": "object",
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "spaceId",
                    "description",
                    "modelId",
                    "enablePredictions",
                    "deprecated",
                    "createdBy",
                    "ownerId"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EntityName"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": "[{\"code\":\"AML-145\",\"title\":\"datasync dependent service error, service profile\",\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\",\"meta\":{\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\"}}]\n",
                        "description": "JSON string with list of error objects."
                    },
                    "modelId": {
                        "$ref": "#/components/schemas/ModelId"
                    },
                    "ownerId": {
                        "$ref": "#/components/schemas/OwnerId"
                    },
                    "spaceId": {
                        "$ref": "#/components/schemas/SpaceId"
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "ID of the owner/user that created this entity"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether this deployment is deprecated"
                    },
                    "description": {
                        "$ref": "#/components/schemas/EntityDescription"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "JSON string of error object"
                    },
                    "enablePredictions": {
                        "type": "boolean",
                        "description": "Whether to allow predictions",
                        "x-qlik-filterable": true
                    }
                },
                "description": "A deployed model against which you can run predictions\n",
                "additionalProperties": false
            },
            "DeploymentFindResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "id",
                                "attributes"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/EntityId"
                                },
                                "type": {
                                    "enum": [
                                        "deployment"
                                    ],
                                    "type": "string"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/FindResponseMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResponseLinks"
                    }
                },
                "additionalProperties": false
            },
            "DeploymentGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "deployment"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/Deployment"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "DeploymentInput": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "deployment"
                                ],
                                "type": "string",
                                "default": "deployment"
                            },
                            "attributes": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "spaceId",
                                    "modelId"
                                ],
                                "properties": {
                                    "name": {
                                        "$ref": "#/components/schemas/EntityName"
                                    },
                                    "modelId": {
                                        "$ref": "#/components/schemas/ModelId"
                                    },
                                    "spaceId": {
                                        "$ref": "#/components/schemas/SpaceId"
                                    },
                                    "deprecated": {
                                        "type": "boolean",
                                        "description": "Whether this deployment is deprecated"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/EntityDescription"
                                    },
                                    "enablePredictions": {
                                        "type": "boolean",
                                        "description": "Whether to allow real-time predictions"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "description": "Input for creating a new deployment",
                "additionalProperties": false
            },
            "DeploymentPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "example": {
                        "op": "replace",
                        "path": "/name",
                        "value": "New Name"
                    },
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "All patch requests use the replace operation"
                        },
                        "path": {
                            "enum": [
                                "/name",
                                "/description",
                                "/spaceId"
                            ],
                            "type": "string",
                            "description": "Path for the property you want to update"
                        },
                        "value": {
                            "$ref": "#/components/schemas/AnyType"
                        }
                    },
                    "description": "Values that can be patched.",
                    "additionalProperties": false
                }
            },
            "DeploymentPostResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "deployment"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/Deployment"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "DroppedFeature": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of dropped feature in the dataset"
                    },
                    "reason": {
                        "enum": [
                            "highly_correlated",
                            "has_target_leakage",
                            "is_date_engineered",
                            "feature_with_low_importance"
                        ],
                        "type": "string",
                        "description": "Reason the feature was dropped"
                    }
                },
                "description": "Feature dropped during preprocessing",
                "additionalProperties": false
            },
            "EntityDescription": {
                "type": "string",
                "description": "Description of this entity"
            },
            "EntityId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of this entity",
                "x-qlik-filterable": true
            },
            "EntityName": {
                "type": "string",
                "description": "Name of this entity",
                "x-qlik-filterable": true
            },
            "EnumSortBatchPredictions": {
                "enum": [
                    "createdAt",
                    "+createdAt",
                    "-createdAt",
                    "description",
                    "+description",
                    "-description",
                    "name",
                    "+name",
                    "-name",
                    "updatedAt",
                    "+updatedAt",
                    "-updatedAt"
                ],
                "type": "string"
            },
            "EnumSortDeployments": {
                "enum": [
                    "createdAt",
                    "+createdAt",
                    "-createdAt",
                    "name",
                    "+name",
                    "-name",
                    "updatedAt",
                    "+updatedAt",
                    "-updatedAt"
                ],
                "type": "string"
            },
            "EnumSortExperiments": {
                "enum": [
                    "createdAt",
                    "+createdAt",
                    "-createdAt",
                    "description",
                    "+description",
                    "-description",
                    "name",
                    "+name",
                    "-name",
                    "updatedAt",
                    "+updatedAt",
                    "-updatedAt"
                ],
                "type": "string"
            },
            "EnumSortExperimentVersions": {
                "enum": [
                    "createdAt",
                    "+createdAt",
                    "-createdAt",
                    "description",
                    "+description",
                    "-description",
                    "experimentMode",
                    "+experimentMode",
                    "-experimentMode",
                    "experimentType",
                    "+experimentType",
                    "-experimentType",
                    "name",
                    "+name",
                    "-name",
                    "status",
                    "+status",
                    "-status",
                    "updatedAt",
                    "+updatedAt",
                    "-updatedAt",
                    "versionNumber",
                    "+versionNumber",
                    "-versionNumber"
                ],
                "type": "string"
            },
            "EnumSortModels": {
                "enum": [
                    "createdAt",
                    "+createdAt",
                    "-createdAt",
                    "description",
                    "+description",
                    "-description",
                    "name",
                    "+name",
                    "-name",
                    "updatedAt",
                    "+updatedAt",
                    "-updatedAt"
                ],
                "type": "string"
            },
            "Experiment": {
                "type": "object",
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "tenantId",
                    "ownerId",
                    "spaceId"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EntityName"
                    },
                    "ownerId": {
                        "$ref": "#/components/schemas/OwnerId"
                    },
                    "spaceId": {
                        "$ref": "#/components/schemas/SpaceId"
                    },
                    "tenantId": {
                        "$ref": "#/components/schemas/TenantId"
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "description": {
                        "$ref": "#/components/schemas/EntityDescription"
                    }
                },
                "description": "An AutoML experiment",
                "additionalProperties": false
            },
            "ExperimentFindResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "id",
                                "attributes"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/EntityId"
                                },
                                "type": {
                                    "enum": [
                                        "experiment"
                                    ],
                                    "type": "string"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/Experiment"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/FindResponseMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResponseLinks"
                    }
                },
                "additionalProperties": false
            },
            "ExperimentGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "experiment"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/Experiment"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "ExperimentId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the experiment"
            },
            "ExperimentInput": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "experiment"
                                ],
                                "type": "string",
                                "default": "experiment"
                            },
                            "attributes": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "spaceId"
                                ],
                                "properties": {
                                    "name": {
                                        "$ref": "#/components/schemas/EntityName"
                                    },
                                    "spaceId": {
                                        "$ref": "#/components/schemas/SpaceId"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/EntityDescription"
                                    }
                                },
                                "description": "Experiment input attributes",
                                "additionalProperties": false
                            }
                        },
                        "description": "Data container for ExperimentInput",
                        "additionalProperties": false
                    }
                },
                "description": "Input for creating this entity",
                "additionalProperties": false
            },
            "ExperimentMode": {
                "enum": [
                    "intelligent",
                    "manual",
                    "manual_hpo"
                ],
                "type": "string",
                "default": "intelligent",
                "description": "The model training mode for the experiment version"
            },
            "ExperimentPatch": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ExperimentPatchItem"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "New name"
                    },
                    {
                        "op": "replace",
                        "path": "/description",
                        "value": "New description"
                    },
                    {
                        "op": "replace",
                        "path": "/spaceId",
                        "value": "NEW_SPACE_ID"
                    }
                ]
            },
            "ExperimentPatchItem": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "All patch requests use the replace operation"
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/description",
                            "/spaceId"
                        ],
                        "type": "string",
                        "description": "Path for the property you want to update"
                    },
                    "value": {
                        "$ref": "#/components/schemas/AnyType"
                    }
                },
                "description": "Experiment fields that can be patched. The following paths all require `value` to be a string: `/name`, `/spaceId`, and `/description`",
                "additionalProperties": false
            },
            "ExperimentPostResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "experiment"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/Experiment"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "ExperimentType": {
                "enum": [
                    "binary",
                    "multiclass",
                    "regression"
                ],
                "type": "string",
                "description": "Experiment type"
            },
            "ExperimentVersion": {
                "type": "object",
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "createdByUserId",
                    "experimentId",
                    "status",
                    "target",
                    "dataSetId",
                    "experimentType"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EntityName"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": "[{\"code\":\"AML-145\",\"title\":\"datasync dependent service error, service profile\",\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711299999\",\"meta\":{\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711255555\"}}]\n",
                        "description": "List of errors"
                    },
                    "status": {
                        "enum": [
                            "ready",
                            "error",
                            "cancelled"
                        ],
                        "type": "string",
                        "default": "pending",
                        "description": "Current status of this entity",
                        "x-qlik-filterable": true
                    },
                    "target": {
                        "type": "string",
                        "example": "TargetColumn",
                        "description": "The target field in the dataset"
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "dataSetId": {
                        "$ref": "#/components/schemas/DataSetId"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "ID of the dataset profile with metadata about source data"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "algorithms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ModelAlgorithm"
                        },
                        "description": "List of algorithms selected for model training in this version\n"
                    },
                    "topModelId": {
                        "type": "string",
                        "description": "ID of the top model (based on training scores) in this experiment\nversion\n"
                    },
                    "dateIndexes": {
                        "$ref": "#/components/schemas/DateIndexes"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "JSON string of error object"
                    },
                    "experimentId": {
                        "$ref": "#/components/schemas/ExperimentId"
                    },
                    "featuresList": {
                        "$ref": "#/components/schemas/FeaturesList"
                    },
                    "lastBatchNum": {
                        "type": "integer",
                        "description": "Number of the last batch"
                    },
                    "datasetOrigin": {
                        "$ref": "#/components/schemas/DatasetOrigin"
                    },
                    "versionNumber": {
                        "type": "integer",
                        "description": "1-based sequential version number within the experiment"
                    },
                    "experimentMode": {
                        "$ref": "#/components/schemas/ExperimentMode"
                    },
                    "experimentType": {
                        "$ref": "#/components/schemas/ExperimentType"
                    },
                    "createdByUserId": {
                        "$ref": "#/components/schemas/OwnerId"
                    },
                    "trainingDuration": {
                        "$ref": "#/components/schemas/TrainingDuration"
                    },
                    "preprocessedInsights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PreprocessedInsightColumn"
                        },
                        "description": "Preprocessed insights. Like feature insights but with fewer details.\n"
                    }
                },
                "description": "An AutoML experiment version. This is a configuration for training\nmodels within an experiment.\n",
                "additionalProperties": false
            },
            "ExperimentVersionFindResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "id",
                                "attributes"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/EntityId"
                                },
                                "type": {
                                    "enum": [
                                        "experiment-version"
                                    ],
                                    "type": "string"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/ExperimentVersion"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/FindResponseMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResponseLinks"
                    }
                },
                "additionalProperties": false
            },
            "ExperimentVersionGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "experiment-version"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/ExperimentVersion"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "ExperimentVersionId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the experiment version",
                "x-qlik-filterable": true
            },
            "ExperimentVersionInput": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "attributes"
                        ],
                        "properties": {
                            "type": {
                                "enum": [
                                    "experiment-version"
                                ],
                                "type": "string",
                                "default": "experiment-version"
                            },
                            "attributes": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "dataSetId",
                                    "experimentMode",
                                    "featuresList",
                                    "target",
                                    "experimentType"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "default": "Experiment version name. Defaults to current date.",
                                        "example": "1999-12-31T23:59:59.123Z"
                                    },
                                    "target": {
                                        "type": "string",
                                        "example": "TargetColumn",
                                        "description": "The target field in the dataset. Set in first experiment\nversion and can't be changed in subsequent versions.\n"
                                    },
                                    "dataSetId": {
                                        "$ref": "#/components/schemas/DataSetId"
                                    },
                                    "algorithms": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ModelAlgorithm"
                                        },
                                        "description": "Algorithms used for model training in this version. See\ndocumentation for valid algorithms for each\n`experimentType`.\n\nIf not provided, defaults to all valid algorithms for your\nexperimentType.\n"
                                    },
                                    "dateIndexes": {
                                        "$ref": "#/components/schemas/DateIndexes"
                                    },
                                    "featuresList": {
                                        "$ref": "#/components/schemas/FeaturesList"
                                    },
                                    "datasetOrigin": {
                                        "$ref": "#/components/schemas/DatasetOrigin"
                                    },
                                    "experimentMode": {
                                        "$ref": "#/components/schemas/ExperimentMode"
                                    },
                                    "experimentType": {
                                        "$ref": "#/components/schemas/ExperimentType"
                                    },
                                    "trainingDuration": {
                                        "$ref": "#/components/schemas/TrainingDuration"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "description": "Input for creating a new experiment version. Defaults provided in the\nProfileInsights response.\n",
                "additionalProperties": false
            },
            "ExperimentVersionPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "example": {
                        "op": "replace",
                        "path": "/name",
                        "value": "New name"
                    },
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "All patch requests use the replace operation"
                        },
                        "path": {
                            "enum": [
                                "/name"
                            ],
                            "type": "string",
                            "description": "Path for the properties you can update.\n"
                        },
                        "value": {
                            "$ref": "#/components/schemas/AnyType"
                        }
                    },
                    "description": "Values that can be patched.\n",
                    "additionalProperties": false
                }
            },
            "ExperimentVersionPostResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "experiment-version"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/ExperimentVersion"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "Failure": {
                "type": "object",
                "required": [
                    "errors"
                ],
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "uniqueItems": true
                    }
                },
                "additionalProperties": false
            },
            "Feature": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "ColumnA",
                        "description": "Name of the feature column"
                    },
                    "include": {
                        "type": "boolean",
                        "description": "Include this feature in your experiment version? Default\nhere is based on insights for this feature\n(e.g. willBeDropped).\n"
                    },
                    "dataType": {
                        "$ref": "#/components/schemas/DataType"
                    },
                    "changeType": {
                        "$ref": "#/components/schemas/ChangeType"
                    },
                    "featureType": {
                        "$ref": "#/components/schemas/FeatureType"
                    },
                    "parentFeature": {
                        "type": "string",
                        "default": null,
                        "nullable": true,
                        "description": "The parent feature name for engineered features. e.g. `OrderDate` may be the parent of its engineered features (features extracted from parent) like `OrderDate.YEAR`, `OrderDate.MONTH`, etc."
                    }
                },
                "description": "A feature (column) from your dataset",
                "additionalProperties": false
            },
            "FeatureInsights": {
                "type": "object",
                "required": [
                    "name",
                    "experimentTypes",
                    "willBeDropped",
                    "insights",
                    "cannotBeTarget"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the feature insight"
                    },
                    "insights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Insights"
                        },
                        "description": "List of insights about this feature.\n"
                    },
                    "willBeDropped": {
                        "type": "boolean",
                        "description": "Whether this feature will be dropped. Traits like high cardinality\nmake some features less predictive or too costly to merit use.\n"
                    },
                    "cannotBeTarget": {
                        "type": "boolean",
                        "description": "Whether a feature cannot be the target field"
                    },
                    "experimentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExperimentType"
                        },
                        "description": "Experiment types in this feature insight"
                    },
                    "engineeredFeatures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "[\n  `${featureName}.YEAR`,\n  `${featureName}.MONTH`\n]\n",
                        "description": "Preliminary list of engineered features as strings. If subsequent\nprocessing validates them, they'll be converted to EngineeredFeature\nobjects within a NestedColumn, each of which may contain its own\nFeatureInsights.\n"
                    }
                },
                "description": "Metadata about the features in your dataset, generated when you create\nProfileInsights.\n",
                "additionalProperties": false
            },
            "FeaturesList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Feature"
                },
                "description": "List of features from your dataset for creating Experiment\nVersions. This appears in from ProfileInsights response (in the\ndefaultVersionConfig). You can adjust the default settings before\nusing it as input to create or update Experiment Versions.\n"
            },
            "FeatureType": {
                "enum": [
                    "categorical",
                    "numeric",
                    "date",
                    "freetext"
                ],
                "type": "string",
                "description": "The type this feature is interpreted as within an experiment version.\nIf you want a value to be interpreted differently (e.g. see 0/1\nas categorical/boolean instead of numeric), use `changeType`.\n"
            },
            "FindResponseMeta": {
                "type": "object",
                "required": [
                    "count"
                ],
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "description": "Meta for FIND operations",
                "additionalProperties": false
            },
            "Insights": {
                "enum": [
                    "constant",
                    "high_cardinality",
                    "high_cardinality_integer",
                    "too_many_nulls",
                    "will_be_impact_encoded",
                    "will_be_one_hot_encoded",
                    "possible_free_text_encoded",
                    "valid_index",
                    "underrepresented_class",
                    "invalid_column_name",
                    "will_be_date_engineered"
                ],
                "type": "string",
                "description": "Insights about a feature, such as why it's not included in a model\n"
            },
            "Model": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EntityName"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": "[{\"code\":\"AML-145\",\"title\":\"datasync dependent service error, service profile\",\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\",\"meta\":{\"errorId\":\"c1546687-ad5d-4002-87f6-8c9711298db1\"}}]\n",
                        "description": "JSON string with list of error objects"
                    },
                    "hpoNum": {
                        "type": "number",
                        "description": "Version number of the hyperparameter optimization"
                    },
                    "seqNum": {
                        "type": "number",
                        "description": "Model sequence number within the experiment version"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ModelStatus"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Dataset columns selected as features"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/ModelMetrics"
                    },
                    "batchNum": {
                        "type": "number",
                        "description": "Batch number indicates the index of the experiment version fold\n(most relevant when HPO is enabled)\n",
                        "x-qlik-filterable": true
                    },
                    "algoAbbrv": {
                        "$ref": "#/components/schemas/ModelAlgorithmAbbreviation"
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm used by this model",
                        "x-qlik-filterable": true
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "modelState": {
                        "$ref": "#/components/schemas/ModelState"
                    },
                    "description": {
                        "$ref": "#/components/schemas/EntityDescription"
                    },
                    "anomalyRatio": {
                        "type": "number",
                        "nullable": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "JSON string of error object"
                    },
                    "samplingRatio": {
                        "type": "number",
                        "description": "Ratio of sample data in relation to the dataset",
                        "x-qlik-filterable": true
                    },
                    "binningFeatures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "droppedFeatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DroppedFeature"
                        },
                        "description": "Features dropped because they're unsuitable"
                    },
                    "experimentVersionId": {
                        "$ref": "#/components/schemas/ExperimentVersionId"
                    },
                    "powerTransformFeatures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "binaryImbalanceSampling": {
                        "$ref": "#/components/schemas/BinaryImbalanceSampling"
                    }
                },
                "description": "A model based on an algorithm within an experiment version.\n",
                "additionalProperties": false
            },
            "ModelAlgorithm": {
                "enum": [
                    "catboost_classifier",
                    "catboost_regression",
                    "elasticnet_regression",
                    "gaussian_nb",
                    "kneighbors_classifier",
                    "lasso_regression",
                    "lasso",
                    "lgbm_classifier",
                    "lgbm_regression",
                    "linear_regression",
                    "logistic_regression",
                    "random_forest_classifier",
                    "random_forest_regression",
                    "sgd_regression",
                    "xgb_classifier",
                    "xgb_regression"
                ],
                "type": "string",
                "description": "Enumeration of model algorithms.\n\nA subset of these may be provided based on your ExperimentType. This is\nbased on your target's featureType. When you select a target feature\nfrom your ProfileInsights response (defaultVersionConfig.featuresList),\nit tells you which algorithms will be available if you choose it as your\ntarget.\n"
            },
            "ModelAlgorithmAbbreviation": {
                "enum": [
                    "CATBC",
                    "CATBR",
                    "ELNC",
                    "GNBC",
                    "LGBMC",
                    "LGBMR",
                    "LINR",
                    "LOGC",
                    "LSOC",
                    "RAFC",
                    "RAFR",
                    "SGDR",
                    "XGBC",
                    "XGBR"
                ],
                "type": "string",
                "description": "Model algorithm name abbreviation"
            },
            "ModelFindResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "id",
                                "attributes"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/EntityId"
                                },
                                "type": {
                                    "enum": [
                                        "model"
                                    ],
                                    "type": "string"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/Model"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/FindResponseMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResponseLinks"
                    }
                },
                "additionalProperties": false
            },
            "ModelGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "model"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/Model"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "ModelId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the model",
                "x-qlik-filterable": true
            },
            "ModelMetrics": {
                "type": "object",
                "properties": {
                    "binary": {
                        "$ref": "#/components/schemas/ModelMetricsBinary"
                    },
                    "multiclass": {
                        "$ref": "#/components/schemas/ModelMetricsMulticlass"
                    },
                    "regression": {
                        "$ref": "#/components/schemas/ModelMetricsRegression"
                    }
                },
                "description": "Model metrics based on the type of model\n",
                "additionalProperties": false
            },
            "ModelMetricsBinary": {
                "type": "object",
                "properties": {
                    "f1": {
                        "type": "number",
                        "description": "The harmonic mean of precision and recall for training data"
                    },
                    "auc": {
                        "type": "number",
                        "description": "Area under curve (training data)"
                    },
                    "mcc": {
                        "type": "number",
                        "description": "Matthews correlation coefficient (training data)"
                    },
                    "npv": {
                        "type": "number",
                        "description": "Negative predictive value (training data)"
                    },
                    "f1Test": {
                        "type": "number",
                        "description": "The harmonic mean of precision and recall for test data"
                    },
                    "recall": {
                        "type": "number",
                        "description": "The true positive rate (training data)"
                    },
                    "aucTest": {
                        "type": "number",
                        "description": "Area under curve (test data)"
                    },
                    "fallout": {
                        "type": "number",
                        "description": "The false positive rate (training data)"
                    },
                    "logLoss": {
                        "type": "number",
                        "description": "Measures accuracy in logistic regression (training data)"
                    },
                    "mccTest": {
                        "type": "number",
                        "description": "Matthews correlation coefficient (test data)"
                    },
                    "npvTest": {
                        "type": "number",
                        "description": "Negative predictive value (test data)"
                    },
                    "accuracy": {
                        "type": "number",
                        "description": "Average measure of how often the model made correct predictions\n(training data)\n"
                    },
                    "missRate": {
                        "type": "number",
                        "description": "The false negative rate (training data)"
                    },
                    "precision": {
                        "type": "number",
                        "description": "Positive predictive value. Probability that the model was correct\nwhen it predicted something was true. (training data)\n"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "Probability that a prediction is true (training data)"
                    },
                    "recallTest": {
                        "type": "number",
                        "description": "The true positive rate (test data)"
                    },
                    "falloutTest": {
                        "type": "number",
                        "description": "The false positive rate (test data)"
                    },
                    "logLossTest": {
                        "type": "number",
                        "description": "Measures accuracy in logistic regression (test data)"
                    },
                    "specificity": {
                        "type": "number",
                        "description": "The true negative rate (training data)"
                    },
                    "accuracyTest": {
                        "type": "number",
                        "description": "Average measure of how often the model made correct predictions\n(test data)\n"
                    },
                    "missRateTest": {
                        "type": "number",
                        "description": "The false negative rate (test data)"
                    },
                    "trueNegative": {
                        "type": "number",
                        "description": "Actual false values correctly predicted as false (training data)\n"
                    },
                    "truePositive": {
                        "type": "number",
                        "description": "Actual true values correctly predicted as true (training data)\n"
                    },
                    "falseNegative": {
                        "type": "number",
                        "description": "Actual true values incorrectly predicted as false (training data)\n"
                    },
                    "falsePositive": {
                        "type": "number",
                        "description": "Actual false values incorrectly predicted as true (training data)\n"
                    },
                    "precisionTest": {
                        "type": "number",
                        "description": "Positive predictive value. Probability that the model was correct\nwhen it predicted something was true. (test data)\n"
                    },
                    "thresholdTest": {
                        "type": "number",
                        "description": "Probability that a prediction is true (test data)"
                    },
                    "specificityTest": {
                        "type": "number",
                        "description": "The true negative rate (test data)"
                    },
                    "trueNegativeTest": {
                        "type": "number",
                        "description": "Actual false values correctly predicted as false (test data)\n"
                    },
                    "truePositiveTest": {
                        "type": "number",
                        "description": "Actual true values correctly predicted as true (test data)\n"
                    },
                    "falseNegativeTest": {
                        "type": "number",
                        "description": "Actual true values incorrectly predicted as false (test data)\n"
                    },
                    "falsePositiveTest": {
                        "type": "number",
                        "description": "Actual false values incorrectly predicted as true (test data)\n"
                    }
                },
                "description": "Binary metrics for categorical values with two options. Details:\nhttps://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/AutoML/scoring-binary-classification.htm\n",
                "additionalProperties": false
            },
            "ModelMetricsMulticlass": {
                "type": "object",
                "properties": {
                    "f1Macro": {
                        "type": "number",
                        "description": "Macro F1 is the averaged F1 value for each class without weighting\n(training data)\n"
                    },
                    "f1Micro": {
                        "type": "number",
                        "description": "Micro F1 is the F1 value calculated across the entire confusion\nmatrix (training data)\n"
                    },
                    "accuracy": {
                        "type": "number",
                        "description": "Average of how often the model made a correct prediction (training\ndata)\n"
                    },
                    "f1Weighted": {
                        "type": "number",
                        "description": "Weighted F1 (training data)"
                    },
                    "f1MacroTest": {
                        "type": "number",
                        "description": "Macro F1 is the averaged F1 value for each class without weighting\n(test data)\n"
                    },
                    "f1MicroTest": {
                        "type": "number",
                        "description": "Micro F1 is the F1 value calculated across the entire confusion\nmatrix (test data)\n"
                    },
                    "accuracyTest": {
                        "type": "number",
                        "description": "Average of how often the model made a correct prediction (test data)\n"
                    },
                    "f1WeightedTest": {
                        "type": "number",
                        "description": "Weighted F1 (test data)"
                    },
                    "confusionMatrix": {
                        "type": "string",
                        "description": "A matrix summary of the accuracy of predictions in a classification\nmodel (training data)\n"
                    },
                    "confusionMatrixTest": {
                        "type": "string",
                        "description": "A matrix summary of the accuracy of predictions in a classification\nmodel (training data)\n"
                    }
                },
                "description": "Multiclass metrics for categorical values with 3+ options. Details:\nhttps://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/AutoML/scoring-multiclass-classification.htm\n",
                "additionalProperties": false
            },
            "ModelMetricsRegression": {
                "type": "object",
                "properties": {
                    "r2": {
                        "type": "number",
                        "description": "R squared (training data)"
                    },
                    "mae": {
                        "type": "number",
                        "description": "Mean absolute error (training data)"
                    },
                    "mse": {
                        "type": "number",
                        "description": "Mean squared error (training data)"
                    },
                    "rmse": {
                        "type": "number",
                        "description": "Root mean squared error (training data)"
                    },
                    "r2Test": {
                        "type": "number",
                        "description": "R squared (test data)"
                    },
                    "maeTest": {
                        "type": "number",
                        "description": "Mean absolute error (test data)"
                    },
                    "mseTest": {
                        "type": "number",
                        "description": "Mean squared error (test data)"
                    },
                    "rmseTest": {
                        "type": "number",
                        "description": "Root mean squared error (test data)"
                    }
                },
                "description": "Regression metrics for numeric values. Details:\nhttps://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/AutoML/scoring-regression.htm\n",
                "additionalProperties": false
            },
            "ModelState": {
                "enum": [
                    "pending",
                    "enabled",
                    "disabled",
                    "inactive"
                ],
                "type": "string",
                "description": "Model state. These are the state of the model in relation to\ndeployments.\n",
                "x-qlik-filterable": true
            },
            "ModelStatus": {
                "enum": [
                    "pending",
                    "training_requested",
                    "training_done",
                    "ready",
                    "error"
                ],
                "type": "string",
                "description": "Model status. These are the status of the model in relation to\nexperiments (i.e. training status).\n"
            },
            "OutputFile": {
                "type": "object",
                "required": [
                    "key",
                    "fileName",
                    "fileType",
                    "spaceId",
                    "path"
                ],
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "spaceId": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "fileType": {
                        "type": "string"
                    }
                }
            },
            "OwnerId": {
                "type": "string",
                "description": "ID of owner/user for this entity",
                "x-qlik-filterable": true
            },
            "PredictionJobResponse": {
                "type": "object",
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "deletedAt",
                    "tenantId",
                    "createdBy",
                    "jobType",
                    "parentJobId",
                    "corrType",
                    "corrId",
                    "status",
                    "name",
                    "parentName",
                    "experimentVersionNumber",
                    "details",
                    "deploymentId",
                    "trigger",
                    "success",
                    "rowsPredicted",
                    "modelId"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EntityId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "corrId": {
                        "type": "string",
                        "description": "The ID of a correlated resource of corrType"
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "completed",
                            "cancelled",
                            "error"
                        ],
                        "type": "string",
                        "description": "Status of this job"
                    },
                    "details": {
                        "type": "object",
                        "required": [
                            "lineageSchemaUpdated",
                            "outputFiles",
                            "isScheduled"
                        ],
                        "properties": {
                            "isScheduled": {
                                "type": "boolean"
                            },
                            "outputFiles": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OutputFile"
                                }
                            },
                            "lineageSchemaUpdated": {
                                "type": "boolean"
                            }
                        }
                    },
                    "jobType": {
                        "enum": [
                            "prediction"
                        ],
                        "type": "string"
                    },
                    "modelId": {
                        "$ref": "#/components/schemas/ModelId"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "trigger": {
                        "type": "string"
                    },
                    "corrType": {
                        "$ref": "#/components/schemas/CorrType"
                    },
                    "tenantId": {
                        "$ref": "#/components/schemas/TenantId"
                    },
                    "createdAt": {
                        "$ref": "#/components/schemas/CreatedAt"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "ID of the owner/user that created this entity"
                    },
                    "deletedAt": {
                        "$ref": "#/components/schemas/DeletedAt"
                    },
                    "updatedAt": {
                        "$ref": "#/components/schemas/UpdatedAt"
                    },
                    "parentName": {
                        "type": "string"
                    },
                    "parentJobId": {
                        "type": "string"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The ID of the deployment used to make these predictions"
                    },
                    "rowsPredicted": {
                        "type": "number"
                    },
                    "experimentVersionNumber": {
                        "type": "string"
                    }
                }
            },
            "PreprocessedInsightColumn": {
                "type": "object",
                "required": [
                    "name",
                    "insights",
                    "willBeDropped"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the preprocessed insight column"
                    },
                    "insights": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "is_free_text",
                                "cannot_be_processed_as_free_text",
                                "is_date_engineered",
                                "has_target_leakage",
                                "feature_type_change_invalid",
                                "feature_type_change_failed",
                                "feature_type_change_successful"
                            ],
                            "type": "string"
                        },
                        "default": [],
                        "description": "Preliminary list of column/feature insights available after\npreprocessing but before feature insights are available\n"
                    },
                    "willBeDropped": {
                        "type": "boolean",
                        "description": "Whether this feature insight will be dropped due to free text or\nhigh cardinality that makes it less useful\n"
                    }
                },
                "description": "Metadata about features/columns from dataset after preprocessing\n",
                "additionalProperties": false
            },
            "ProfileInsights": {
                "type": "object",
                "required": [
                    "tenantId",
                    "ownerId",
                    "status",
                    "dataSetId"
                ],
                "properties": {
                    "status": {
                        "enum": [
                            "pending",
                            "error",
                            "ready"
                        ],
                        "type": "string",
                        "default": "pending",
                        "description": "Status of profile insights. Not available until `ready`.\n"
                    },
                    "ownerId": {
                        "$ref": "#/components/schemas/OwnerId"
                    },
                    "insights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureInsights"
                        },
                        "description": "List of feature insights object, one per feature in the dataset\n"
                    },
                    "tenantId": {
                        "$ref": "#/components/schemas/TenantId"
                    },
                    "defaultVersionConfig": {
                        "type": "object",
                        "required": [
                            "name",
                            "datasetOrigin",
                            "dataSetId",
                            "experimentMode"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "default": "Experiment version name. Defaults to current date/time.",
                                "example": "1999-12-31T23:59:59.123Z"
                            },
                            "dataSetId": {
                                "$ref": "#/components/schemas/DataSetId"
                            },
                            "featuresList": {
                                "$ref": "#/components/schemas/FeaturesList"
                            },
                            "datasetOrigin": {
                                "$ref": "#/components/schemas/DatasetOrigin"
                            },
                            "experimentMode": {
                                "$ref": "#/components/schemas/ExperimentMode"
                            }
                        }
                    }
                },
                "description": "Insights (metadata) about an experiment dataset",
                "additionalProperties": false
            },
            "ProfileInsightsGetResponse": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "object",
                        "required": [
                            "type",
                            "id",
                            "attributes"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/EntityId"
                            },
                            "type": {
                                "enum": [
                                    "profile-insights"
                                ],
                                "type": "string"
                            },
                            "attributes": {
                                "$ref": "#/components/schemas/ProfileInsights"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "ProfileInsightsInput": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "profile-insights"
                                ],
                                "type": "string",
                                "default": "profile-insights"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "dataSetId": {
                                        "$ref": "#/components/schemas/DataSetId"
                                    }
                                },
                                "description": "The request body for this resource",
                                "additionalProperties": false
                            }
                        },
                        "description": "Data wrapper for request input",
                        "additionalProperties": false
                    }
                },
                "description": "Input to get dataset and feature metadata needed to create\nexperiment versions\n",
                "additionalProperties": false
            },
            "RealtimePrediction": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "realtime-prediction"
                                ],
                                "type": "string",
                                "default": "realtime-prediction"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "rows": {
                                        "type": "array",
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "description": "Rows of the dataset from which to produce predictions\n"
                                    },
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/RealTimePredictionSchema"
                                        },
                                        "description": "List of features in the dataset"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "description": "Input values for creating realtime predictions",
                "additionalProperties": false
            },
            "RealtimePredictionInput": {
                "type": "object",
                "properties": {
                    "rows": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Rows of the dataset from which to produce predictions\n"
                    },
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RealTimePredictionInputSchema"
                        },
                        "description": "List of features in the dataset"
                    }
                },
                "description": "Input values for creating realtime predictions",
                "additionalProperties": false
            },
            "RealTimePredictionInputSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of a feature in the dataset"
                    }
                },
                "additionalProperties": false
            },
            "RealTimePredictionSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of a feature in the dataset"
                    }
                },
                "additionalProperties": false
            },
            "ResponseLinks": {
                "type": "object",
                "required": [
                    "first",
                    "prev",
                    "self",
                    "next",
                    "last"
                ],
                "properties": {
                    "last": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "Link to the last set of responses from `limit` minus `offset` to\n`limit`\n"
                            }
                        }
                    },
                    "next": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "Link to the next set of responses\n"
                            }
                        }
                    },
                    "prev": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "Link to the previous set of responses\n"
                            }
                        }
                    },
                    "self": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "Link to the current set of responses\n"
                            }
                        }
                    },
                    "first": {
                        "type": "object",
                        "properties": {
                            "href": {
                                "type": "string",
                                "format": "uri",
                                "description": "Link to the first set of responses from `offset` 0 to count `limit``\n"
                            }
                        }
                    }
                },
                "description": "Resource links included in paginated responses",
                "additionalProperties": false
            },
            "SpaceId": {
                "type": "string",
                "description": "Space ID for this entity (empty string for personal space)",
                "x-qlik-filterable": true
            },
            "TenantId": {
                "type": "string",
                "format": "uuid",
                "description": "Tenant ID for this entity",
                "x-qlik-filterable": true
            },
            "TrainingDuration": {
                "type": "integer",
                "maximum": 21600,
                "minimum": 900,
                "description": "Training duration in seconds. If provided, minimum is 900 (15m) and\nmax is 21600 (6h).\n"
            },
            "UpdatedAt": {
                "type": "string",
                "description": "Timestamp when this was updated"
            },
            "AppMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "space_id": {
                        "type": "string"
                    },
                    "space_name": {
                        "type": "string"
                    },
                    "space_type": {
                        "type": "string"
                    },
                    "limited_access": {
                        "type": "boolean"
                    },
                    "last_reload_date": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "Metadata for app"
            },
            "ConversationalResponsePart": {
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "infoType": {
                        "type": "string"
                    },
                    "sentence": {
                        "properties": {
                            "text": {
                                "type": "string"
                            }
                        }
                    },
                    "narrative": {
                        "$ref": "#/components/schemas/NarrativeResponse"
                    },
                    "infoValues": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QlikApp"
                                    }
                                }
                            ]
                        }
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "followupSentence": {
                        "type": "string"
                    },
                    "renderVisualization": {
                        "$ref": "#/components/schemas/RenderVisualization"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "NarrativeResponse": {
                "properties": {
                    "text": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "NLMetricRecommendation": {
                "type": "object",
                "properties": {
                    "dims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Dimension(s) considered for recommendation"
                    },
                    "msrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Measure(s) considered for recommendation"
                    },
                    "analysis": {
                        "$ref": "#/components/schemas/Analysis"
                    },
                    "chartType": {
                        "$ref": "#/components/schemas/ChartType"
                    },
                    "relevance": {
                        "type": "number"
                    },
                    "analysisGroup": {
                        "$ref": "#/components/schemas/AnalysisGroup"
                    }
                },
                "description": "Visualisation recommendation specs for the query"
            },
            "NLMetricRecord": {
                "type": "object",
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "appId",
                    "questionId",
                    "version"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique record id stored in database"
                    },
                    "apps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppMetadata"
                        }
                    },
                    "lang": {
                        "type": "string",
                        "description": "language selected for query from insight advisor or insight advisor chat or third party api"
                    },
                    "appId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Qlik sense app id that is being used to answer the question"
                    },
                    "appName": {
                        "type": "string",
                        "description": "Qlik sense app name that is being used to answer the question"
                    },
                    "nluInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartialNluInfo"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the metric model"
                    },
                    "feedback": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecFeedback"
                        }
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Qlik sense tenant Id"
                    },
                    "channelId": {
                        "type": "string",
                        "description": "Source from which conversation is happening"
                    },
                    "chartType": {
                        "type": "string",
                        "description": "Chart type for given query. For insight advisor it would be 'native' and for insight advisor chat, it could be 'static' or 'responsive'"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Record created date",
                        "x-qlik-filterable": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Qlik sense user id who is interacting with insight advisor or insight advisor chat or third party api"
                    },
                    "queryText": {
                        "type": "string",
                        "description": "Query asked by user in insight advisor or insight advisor or third party api"
                    },
                    "queryType": {
                        "enum": [
                            "appList",
                            "appSuggested",
                            "dimensionList",
                            "exploreThisFurther",
                            "followup",
                            "greetings",
                            "measureList",
                            "query",
                            "sampleQuestion"
                        ],
                        "type": "string",
                        "description": "Nature of query being asked during the conversation e.g. query, applist, measurelist, dimensionlist"
                    },
                    "responses": {
                        "$ref": "#/components/schemas/NLResponses"
                    },
                    "stopWords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tokens from question parsed which are ignored"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Record modified date",
                        "x-qlik-filterable": true
                    },
                    "queryError": {
                        "type": "boolean",
                        "default": false
                    },
                    "questionId": {
                        "type": "string",
                        "description": "Unique id assigned to user query"
                    },
                    "queryOrigin": {
                        "enum": [
                            "askQuestion",
                            "iaAnalysis",
                            "iaAssetsPanel"
                        ],
                        "type": "string",
                        "default": "askQuestion",
                        "description": "Refers to source from where narrative request is called"
                    },
                    "recommendations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NLMetricRecommendation"
                        }
                    },
                    "isContextualQuery": {
                        "type": "boolean",
                        "default": false,
                        "description": "Boolean value indicates whether given query is contextual or not. It would be false for insight advisor"
                    },
                    "unmatchedEntities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tokens parsed as entities but not matched with app's field/dimension/measure"
                    }
                }
            },
            "NLMetricsRequest": {
                "required": [
                    "filter"
                ],
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) for the syntax.\n\nFilter on createdAt and updatedAt fields are encouraged and support `eq`, `ne`, `gt`, `ge`, `lt`, `le` comparison operators along with `and` and `or` logical operators.\n\nFilter on tenantId field is not supported.\n\n`co`, `sw` and `ew` operators are not supported.\n\nExamples:\n```\nappId eq 'appId1'\n```\n```\n(appId eq 'appId1' or appId eq 'appId2')\n```\n```\n(appId eq 'appId1' or appId eq 'appId2') and (createdAt gt '2022-08-03T00:00:00.000Z' and createdAt lt '2022-08-04T00:00:00.000Z')\n```\n\n```\n(appId eq 'appId1') and (createdAt ge '2022-08-03T00:00:00.000Z')\n```\n\n```\n(appId eq 'appId1') and (createdAt le '2022-08-23:59:59.000Z')\n```\n\n```\n(appId eq 'appId1') and (questionId eq '12345')\n```\n"
                    }
                }
            },
            "NLMetricsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NLMetricRecord"
                        }
                    },
                    "meta": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "total"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "description": "The total number of metrics matching the current filter."
                            }
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "NLResponses": {
                "type": "object",
                "properties": {
                    "hasChart": {
                        "type": "boolean",
                        "description": "Chart was provided"
                    },
                    "hasInsights": {
                        "type": "boolean",
                        "description": "Narrative was provided"
                    },
                    "hasSuggestions": {
                        "type": "boolean",
                        "description": "Suggestion questions was provided"
                    },
                    "hasMetadataApps": {
                        "type": "boolean",
                        "description": "App list was provided"
                    },
                    "hasSampleQueries": {
                        "type": "boolean",
                        "description": "Sample questions was provided"
                    },
                    "hasMetadataMeasures": {
                        "type": "boolean",
                        "description": "Measures list was provided"
                    },
                    "hasMetadataDimensions": {
                        "type": "boolean",
                        "description": "Dimensions list was provided"
                    }
                },
                "description": "Provides info what was included in response for given query"
            },
            "NluInfo": {
                "properties": {
                    "elements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NluInfoElements"
                        }
                    }
                },
                "x-qlik-visibility": "public"
            },
            "NluInfoElements": {
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "entity": {
                        "type": "boolean"
                    },
                    "isFilter": {
                        "type": "boolean"
                    },
                    "typeName": {
                        "type": "string"
                    },
                    "errorText": {
                        "type": "string"
                    },
                    "filterText": {
                        "type": "string"
                    },
                    "typeTranslated": {
                        "type": "string"
                    },
                    "filterFieldName": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "QlikApp": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "QueryCreate": {
                "type": "object",
                "required": [
                    "text"
                ],
                "properties": {
                    "app": {
                        "$ref": "#/components/schemas/QlikApp"
                    },
                    "lang": {
                        "type": "string",
                        "description": "The language to assume when parsing, specified as an ISO-639-1 code.\nDefaults to 'en' (English).\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The sentence that will be parsed."
                    },
                    "disableFollowups": {
                        "type": "boolean",
                        "default": false,
                        "description": "The flag specifies whether to disable follow-up recommendations."
                    },
                    "disableNarrative": {
                        "type": "boolean",
                        "default": false,
                        "description": "Flag that specifies whether the narratives should be generated for the user query or not."
                    },
                    "recommendationId": {
                        "type": "string",
                        "description": "property that contains the Id of the recommendation for which the response should be generated."
                    },
                    "clearEntityContext": {
                        "type": "boolean",
                        "default": false,
                        "description": "Flag that clears the entity context."
                    },
                    "visualizationTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specify visualizationTypes for only which visualization object should be provided if enableVisualizations is set to true. For eg. ['linechart', 'barchart']"
                    },
                    "enableVisualizations": {
                        "type": "boolean",
                        "default": false,
                        "description": "Flag that specifies whether visualization object should be provided or not."
                    },
                    "disableConversationContext": {
                        "type": "boolean",
                        "default": false,
                        "description": "Flag that specifies either to enable converastion context."
                    }
                },
                "x-qlik-visibility": "public"
            },
            "QueryCreated": {
                "type": "object",
                "properties": {
                    "apps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QlikApp"
                        }
                    },
                    "nluInfo": {
                        "$ref": "#/components/schemas/NluInfo"
                    },
                    "conversationalResponse": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QueryResponse"
                        },
                        "description": "A list of conversational responses."
                    }
                },
                "description": "The attributes of sentences.",
                "x-qlik-visibility": "public"
            },
            "QueryNotCreated": {
                "type": "object",
                "properties": {
                    "apps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QlikApp"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "nluInfo": {
                        "$ref": "#/components/schemas/NluInfo"
                    },
                    "conversationalResponse": {
                        "$ref": "#/components/schemas/QueryResponse"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "QueryResponse": {
                "type": "object",
                "properties": {
                    "apps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QlikApp"
                        }
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConversationalResponsePart"
                        }
                    },
                    "contextInfo": {
                        "type": "string",
                        "description": "For contextual responses, this string contains a list of entities that are used to produce the response."
                    },
                    "drillDownURI": {
                        "type": "string",
                        "description": "The URL with the query injected to insight advisor of the app to which the query belongs."
                    },
                    "sentenceWithMatches": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "RecFeedback": {
                "type": "object",
                "required": [
                    "recommendationAddedToSheet",
                    "recommendationAddedToHub",
                    "recommendationDisliked",
                    "recommendationLiked"
                ],
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "chartType": {
                        "type": "string"
                    },
                    "analysisType": {
                        "type": "string"
                    },
                    "recommendationLiked": {
                        "type": "boolean"
                    },
                    "recommendationDisliked": {
                        "type": "boolean"
                    },
                    "recommendationAddedToHub": {
                        "type": "boolean"
                    },
                    "recommendationAddedToSheet": {
                        "type": "boolean"
                    }
                },
                "description": "Any feedback from the user about a given recommendation"
            },
            "RenderVisualization": {
                "properties": {
                    "data": {
                        "type": "object",
                        "description": "Data object should be used to render visualization"
                    },
                    "language": {
                        "type": "string"
                    }
                },
                "x-qlik-visibility": "public"
            },
            "ConfigReasonCode": {
                "enum": [
                    "deployment",
                    "toggle",
                    "license"
                ],
                "type": "string",
                "description": "The possible states for the status of notes configuration GET or POST operation"
            },
            "NoteSettingsPutPayload": {
                "type": "object",
                "properties": {
                    "toggledOn": {
                        "type": "boolean",
                        "description": "pass 'true' to enable the note toggle for the tenant, 'false' to disable the toggle (other values are ignore)."
                    }
                }
            },
            "NoteSettingsPutResponse": {
                "type": "object",
                "properties": {
                    "toggleOn": {
                        "type": "boolean",
                        "description": "'true' if the note feature is enabled for this tenant and user otherwise 'false'."
                    }
                }
            },
            "NotesUserSettings": {
                "type": "object",
                "required": [
                    "available"
                ],
                "properties": {
                    "reason": {
                        "$ref": "#/components/schemas/ConfigReasonCode"
                    },
                    "available": {
                        "type": "boolean",
                        "description": "'true' if the note feature is enabled for this tenant and user otherwise 'false'."
                    },
                    "lastFetch": {
                        "type": "string",
                        "description": "The timestamp for the last time this users notes settings were fetched from downstream services."
                    }
                }
            },
            "NotificationItem": {
                "type": "object",
                "required": [
                    "notificationNamePattern",
                    "transports",
                    "isSubscribable"
                ],
                "properties": {
                    "transports": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "transport names are stored and retrived based on action"
                        },
                        "description": "Type of Transport e.g. Email, Notification, Slack message etc..."
                    },
                    "isSubscribable": {
                        "type": "boolean",
                        "description": "Indicates if the notification can be subscribed to by users.  If true, the object will also contain 'subscriptionInfo' object"
                    },
                    "presentationInfo": {
                        "type": "object",
                        "properties": {
                            "scopes": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "one of 'tenant', 'space' or 'resource'"
                                },
                                "description": "Information about the scopes to which this notification applies.  Helps determine the placement of the notification in the UI"
                            },
                            "friendlyName": {
                                "type": "string",
                                "description": "Localized, human-readable string representing the name of the notification suitable to use in a UI"
                            },
                            "scopeFriendlyNames": {
                                "type": "object",
                                "description": "Friendly name to be displayed for each scope.",
                                "additionalProperties": {
                                    "type": "string",
                                    "description": "Localized, human-readable string representing the name of the notification suitable to use in a UI."
                                }
                            }
                        },
                        "description": "Object containing information pertaining to the presentaion of a notification in the UI"
                    },
                    "subscriptionInfo": {
                        "type": "object",
                        "required": [
                            "resourceType",
                            "action"
                        ],
                        "properties": {
                            "action": {
                                "type": "string"
                            },
                            "target": {
                                "type": "string"
                            },
                            "resourceId": {
                                "type": "string"
                            },
                            "resourceType": {
                                "type": "string"
                            },
                            "resourceSubType": {
                                "type": "string"
                            }
                        },
                        "description": "Object indicating what properties to use to subscribe to this notification via the 'Subscriptions' service.  For info about its properties, refer to the Subscription sevice's API doc."
                    },
                    "isManageableInHub": {
                        "type": "boolean",
                        "description": "Indicates if the notification can be managed in the hub. If true, the object will also contain 'subscriptionInfo' object and a 'presentationInfo' object with a non-empty scopes array."
                    },
                    "notificationNamePattern": {
                        "type": "string",
                        "description": "Notification name pattern that will trigger this notification e.g resource.action"
                    }
                },
                "description": "Notification result item"
            },
            "NotificationsObject": {
                "type": "object",
                "required": [
                    "notifications"
                ],
                "properties": {
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationItem"
                        },
                        "description": "list of notifications"
                    }
                },
                "description": "Object containing array representing list of supported notifications"
            },
            "oauth-authorization-code-request": {
                "required": [
                    "grant_type",
                    "code",
                    "code_verifier",
                    "redirect_uri",
                    "client_id"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The authorization code created by the server."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client identifier."
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "The type of the user device the authorization token is generated for (Tablet, Phone etc.)."
                    },
                    "grant_type": {
                        "enum": [
                            "authorization_code"
                        ],
                        "type": "string",
                        "description": "The grant type used to exchange an authorization code for an access token."
                    },
                    "description": {
                        "type": "string",
                        "description": "A user-friendly description to distinguish between multiple tokens."
                    },
                    "redirect_uri": {
                        "type": "string",
                        "description": "The original redirect URI provided during authorization. For verification purposes only."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client secret."
                    },
                    "code_verifier": {
                        "type": "string",
                        "maxLength": 128,
                        "minLength": 43,
                        "description": "Required when grant_type is \"authorization_code\". The code verifier to verify original code challenge created by the client. It must be between 43 and 128 characters long and consists of [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\""
                    }
                }
            },
            "oauth-client-credentials-request": {
                "required": [
                    "client_id",
                    "client_secret",
                    "grant_type"
                ],
                "properties": {
                    "scope": {
                        "type": "string",
                        "example": "user_default offline_access",
                        "description": "The scope of access that is being requested. The scope should already be assigned to the OAuth client. For a list of available scopes, visit: https://qlik.dev/authenticate/oauth/scopes/#available-scopes"
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client identifier."
                    },
                    "grant_type": {
                        "enum": [
                            "client_credentials"
                        ],
                        "type": "string",
                        "example": "client_credentials",
                        "description": "The grant type used to obtain an access token outside of the context of a user."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client secret."
                    }
                }
            },
            "oauth-refresh-request": {
                "required": [
                    "grant_type",
                    "refresh_token"
                ],
                "properties": {
                    "grant_type": {
                        "enum": [
                            "refresh_token"
                        ],
                        "type": "string",
                        "example": "refresh_token",
                        "description": "The grant type used to exchange a refresh token for an access token."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client secret."
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh token to use."
                    }
                }
            },
            "oauth-revoke-request": {
                "type": "object",
                "required": [
                    "token"
                ],
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token to revoke."
                    },
                    "token_type_hint": {
                        "enum": [
                            "access_token",
                            "refresh_token"
                        ],
                        "type": "string",
                        "description": "Type of the provided token."
                    }
                }
            },
            "oauth-token-exchange": {
                "required": [
                    "grant_type",
                    "client_id",
                    "subject_token_type",
                    "subject_token",
                    "purpose"
                ],
                "properties": {
                    "purpose": {
                        "enum": [
                            "websocket",
                            "webresource"
                        ],
                        "type": "string",
                        "description": "The intended use for the requested token."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client identifier."
                    },
                    "grant_type": {
                        "enum": [
                            "urn:ietf:params:oauth:grant-type:token-exchange"
                        ],
                        "type": "string",
                        "description": "Specifies the method in which the token will be granted."
                    },
                    "subject_token": {
                        "type": "string",
                        "description": "The token that represents the identity of the party on behalf of whom the request is being made."
                    },
                    "subject_token_type": {
                        "enum": [
                            "urn:ietf:params:oauth:token-type:access_token"
                        ],
                        "type": "string",
                        "example": "urn:ietf:params:oauth:token-type:access_token",
                        "description": "The type of the subject token."
                    }
                },
                "description": "Exchanges one token for another. Implementation is based on this spec: https://datatracker.ietf.org/doc/html/rfc8693."
            },
            "oauth-token-response": {
                "type": "object",
                "required": [
                    "access_token",
                    "token_type"
                ],
                "properties": {
                    "scope": {
                        "type": "string",
                        "example": "offline_access user_default",
                        "description": "The scope of access that is being granted, delimited by space."
                    },
                    "auth_time": {
                        "type": "number",
                        "example": 1628524367,
                        "description": "Unix time of when the last authentication occurred."
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "1970-01-18T13:17:10.931Z",
                        "description": "The date and time in ISO format for when the access token will expire."
                    },
                    "token_type": {
                        "enum": [
                            "bearer"
                        ],
                        "type": "string",
                        "description": "The type of the token issued."
                    },
                    "access_token": {
                        "type": "string",
                        "description": "The access token granted."
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token to be used to obtain a new access token without user intervention."
                    },
                    "issued_token_type": {
                        "enum": [
                            "urn:ietf:params:oauth:token-type:access_token"
                        ],
                        "type": "string",
                        "description": "The type of the token issued for a token exchange. See https://datatracker.ietf.org/doc/html/rfc8693#section-2.2.1 for more details."
                    }
                }
            },
            "oauth-user-impersonation-request": {
                "required": [
                    "client_id",
                    "client_secret",
                    "grant_type",
                    "user_lookup"
                ],
                "properties": {
                    "scope": {
                        "type": "string",
                        "example": "user_default offline_usage",
                        "description": "The scope of access that is being requested. The scope should already be assigned to the OAuth client. For a list of available scopes, visit: https://qlik.dev/authenticate/oauth/scopes/#available-scopes"
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client identifier."
                    },
                    "grant_type": {
                        "enum": [
                            "urn:qlik:oauth:user-impersonation"
                        ],
                        "type": "string",
                        "description": "The grant type used to obtain an access token on behalf of an existing user."
                    },
                    "user_lookup": {
                        "type": "object",
                        "required": [
                            "field",
                            "value"
                        ],
                        "properties": {
                            "field": {
                                "enum": [
                                    "subject",
                                    "userId"
                                ],
                                "type": "string",
                                "description": "The identifier to impersonate the user by."
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of the identifier to impersonate the user by."
                            }
                        }
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client secret."
                    }
                }
            },
            "ClientSecrets": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "hint"
                    ],
                    "properties": {
                        "hint": {
                            "type": "string",
                            "maxLength": 5,
                            "description": "Hint of a client application secret"
                        },
                        "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp for when the client-secret record was created."
                        },
                        "createdBy": {
                            "type": "string",
                            "description": "The identifier for the user that created the client-secret record."
                        }
                    }
                },
                "readOnly": true,
                "description": "Hints of any client application secrets"
            },
            "ConnectionConfigReadResponse": {
                "type": "object",
                "required": [
                    "consentMethod"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Status"
                    },
                    "consentMethod": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Consent method"
                    },
                    "deletedByOwner": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "OAuth client has been deleted by owning tenant, only applies for published clients."
                    }
                },
                "description": "Response schema for reading a connection config"
            },
            "OAuthClientAdminListItem": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/OAuthClientBase"
                    }
                ],
                "required": [
                    "clientId"
                ],
                "properties": {
                    "clientId": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 512,
                        "description": "Client application id"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed redirect URIs for login"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed origins for client"
                    },
                    "connectionConfig": {
                        "$ref": "#/components/schemas/ConnectionConfigReadResponse"
                    }
                },
                "description": "Schema for a OAuth client when listing as an admin user"
            },
            "OAuthClientAdminListResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OAuthClientAdminListItem"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "totalResults": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Total number of oauth clients, included only if `totalResults` query parameter is set to true."
                    }
                },
                "description": "Response schema for listing OAuth clients as an admin user"
            },
            "OAuthClientAdminReadResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/OAuthClientBase"
                    }
                ],
                "required": [
                    "clientId"
                ],
                "properties": {
                    "clientId": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 512,
                        "description": "Client application id"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed redirect URIs for login"
                    },
                    "clientSecrets": {
                        "$ref": "#/components/schemas/ClientSecrets"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed origins for client"
                    }
                },
                "description": "Response schema for reading an OAuth client as an admin user"
            },
            "OAuthClientBase": {
                "type": "object",
                "required": [
                    "appType",
                    "clientName",
                    "createdAt",
                    "ownerId"
                ],
                "properties": {
                    "appType": {
                        "enum": [
                            "web",
                            "native",
                            "spa",
                            "anonymous-embed"
                        ],
                        "type": "string",
                        "maxLength": 64,
                        "description": "Application type"
                    },
                    "logoUri": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "URI for logo of client"
                    },
                    "clientUri": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "URI for homepage of client"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the oauth-clients record was created."
                    },
                    "deletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the oauth-clients record was deleted."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the oauth-clients record was updated."
                    },
                    "clientName": {
                        "type": "string",
                        "maxLength": 512,
                        "description": "Client application name"
                    },
                    "disableTag": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Is set if client disabled"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 4096,
                        "description": "Client description"
                    },
                    "publishedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp which is set, if the client is published."
                    },
                    "allowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed scopes for this client. For a full list of scopes see [qlik.dev/authenticate/oauth/scopes/](https://qlik.dev/authenticate/oauth/scopes/)."
                    },
                    "allowedGrantTypes": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "client_credentials",
                                "urn:qlik:oauth:user-impersonation"
                            ],
                            "type": "string"
                        },
                        "description": "Allowed grant types, only for use with appType: 'web'"
                    }
                },
                "description": "Base schema for OAuth client requests and responses"
            },
            "OAuthClientCreateRequest": {
                "type": "object",
                "required": [
                    "appType",
                    "clientName"
                ],
                "properties": {
                    "appType": {
                        "enum": [
                            "web",
                            "native",
                            "spa",
                            "anonymous-embed"
                        ],
                        "type": "string",
                        "maxLength": 64,
                        "description": "Application type"
                    },
                    "logoUri": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "URI for logo of client"
                    },
                    "clientUri": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "URI for homepage of client"
                    },
                    "clientName": {
                        "type": "string",
                        "maxLength": 512,
                        "description": "Client application name"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 4096,
                        "description": "Client description"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed redirect URIs for login"
                    },
                    "allowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed scopes for this client. For a full list of scopes see [qlik.dev/authenticate/oauth/scopes/](https://qlik.dev/authenticate/oauth/scopes/)."
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed origins for this client, only available with SPA application type"
                    },
                    "allowedGrantTypes": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "client_credentials",
                                "urn:qlik:oauth:user-impersonation"
                            ],
                            "type": "string"
                        },
                        "description": "Allowed grant types, only for use with appType: 'web'"
                    }
                },
                "description": "Request schema for OAuth client creation"
            },
            "OAuthClientCreateResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/OAuthClientBase"
                    }
                ],
                "required": [
                    "clientId",
                    "clientSecret"
                ],
                "properties": {
                    "clientId": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 512,
                        "description": "Client application id"
                    },
                    "clientSecret": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 64,
                        "description": "Client application secret"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed redirect URIs for login"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxItems": 5,
                            "maxLength": 256,
                            "uniqueItems": true
                        },
                        "description": "List of allowed redirect URIs for login"
                    }
                },
                "description": "Response schema for OAuth client creation"
            },
            "OAuthClientListResponse": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OAuthClientReadResponse"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                },
                "description": "Response schema for listing OAuth clients"
            },
            "OAuthClientPublishResponse": {
                "type": "object",
                "required": [
                    "publishedAt"
                ],
                "properties": {
                    "publishedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp which is set, if the client is published."
                    }
                },
                "description": "Response schema for successfully publishing an OAuth client"
            },
            "OAuthClientReadResponse": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/OAuthClientBase"
                    }
                ],
                "required": [
                    "clientId"
                ],
                "properties": {
                    "clientId": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 512,
                        "description": "Client application id"
                    }
                },
                "description": "Response schema for reading an OAuth client"
            },
            "OAuthClientSecretResponse": {
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "hint"
                ],
                "properties": {
                    "hint": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Client application hint"
                    },
                    "clientId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Client application id"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp for when the client-secret record was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The identifier for the user that created the client-secret record."
                    },
                    "clientSecret": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Client application secret"
                    }
                },
                "description": "Response schema for creating an OAuth client application secret"
            },
            "OAuthClientUpdate": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed"
                    },
                    "path": {
                        "enum": [
                            "/allowedOrigins",
                            "/clientName",
                            "/clientUri",
                            "/description",
                            "/logoUri",
                            "/redirectUris",
                            "/allowedScopes",
                            "/allowedGrantTypes"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902"
            },
            "OAuthConnectionConfigUpdate": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed"
                    },
                    "path": {
                        "enum": [
                            "/consentMethod"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch"
                    },
                    "value": {
                        "enum": [
                            "required",
                            "trusted"
                        ],
                        "type": "string",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902"
            },
            "link": {
                "required": [
                    "href"
                ],
                "properties": {
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL for the link."
                    }
                }
            },
            "oauth-token": {
                "required": [
                    "tenantId",
                    "userId",
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The token ID."
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the owning user."
                    },
                    "lastUsed": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The last time the token was used."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The ID of the owning tenant."
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "The type of the user device the authorization token is generated for (Tablet, Phone etc.)."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the token."
                    }
                }
            },
            "oauth-token-page": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/oauth-token"
                        }
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/link"
                            }
                        }
                    }
                }
            },
            "oauth-metadata": {
                "type": "object",
                "properties": {
                    "issuer": {
                        "type": "string",
                        "example": "https://your-tenant.us.qlikcloud.com",
                        "description": "The issuer of the tokens."
                    },
                    "jwks_uri": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://your-tenant.us.qlikcloud.com/.well-known/jwks.json",
                        "description": "The public keys endpoint."
                    },
                    "token_endpoint": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://your-tenant.us.qlikcloud.com/oauth/token",
                        "description": "The token endpoint."
                    },
                    "revocation_endpoint": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://your-tenant.us.qlikcloud.com/oauth/revoke",
                        "description": "The token endpoint."
                    },
                    "grant_types_supported": {
                        "type": "array",
                        "description": "List of supported grant types."
                    },
                    "authorization_endpoint": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://your-tenant.us.qlikcloud.com/oauth/authorize",
                        "description": "The authorization endpoint."
                    },
                    "response_types_supported": {
                        "type": "array",
                        "description": "List of supported authorization code responses."
                    }
                }
            },
            "GetQuotaByIdResult": {
                "type": "object",
                "title": "Result containing an array with a single quota item.",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Quota"
                        },
                        "description": "Quota item."
                    }
                }
            },
            "GetQuotasResult": {
                "type": "object",
                "title": "Result containing an array of quota items.",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Quota"
                        },
                        "description": "Array of quota items."
                    }
                }
            },
            "Quota": {
                "type": "object",
                "title": "One single quota with attributes.",
                "required": [
                    "type",
                    "id",
                    "attributes"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the quota item. For example, \"app_mem_size\", \"app_upload_disk_size\", or \"shared_spaces\"."
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type of the quota item. Always equal to \"quotas\"."
                    },
                    "attributes": {
                        "type": "object",
                        "required": [
                            "quota",
                            "unit"
                        ],
                        "properties": {
                            "unit": {
                                "type": "string",
                                "description": "The unit of the quota limit. For memory quotas, the unit is always \"bytes\". For other discrete units, the item counted is used as unit, for example \"spaces\"."
                            },
                            "quota": {
                                "type": "number",
                                "format": "double",
                                "description": "The quota limit. If there is no quota limit, -1 is returned."
                            },
                            "usage": {
                                "type": "number",
                                "format": "double",
                                "description": "The current quota usage, if applicable. This attribute is only present if it is requested using the reportUsage query parameter."
                            },
                            "warningThresholds": {
                                "type": "array",
                                "items": {
                                    "type": "number",
                                    "format": "float"
                                },
                                "example": [
                                    0.9
                                ],
                                "description": "The warning thresholds at which \"close to quota\" warnings can be issued when exceeded. If omitted, no warning threshold shall be used. Currently, the array will contain only one threshold value. In the future, this may be extended. The threshold is a number between 0 and 1, relating to the quota limit. For example, a value of 0.9 means that a warning should be issued when exceeding 90% of the quota limit."
                            }
                        },
                        "description": "The attributes of the quota."
                    }
                }
            },
            "PaginationLinks": {
                "type": "object",
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/PaginationLink"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/PaginationLink"
                    },
                    "self": {
                        "$ref": "#/components/schemas/PaginationLink"
                    }
                },
                "additionalProperties": false
            },
            "PostTaskBody": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskBase"
                    },
                    {
                        "required": [
                            "appId",
                            "timeZone"
                        ],
                        "properties": {
                            "type": {
                                "enum": [
                                    "scheduled_reload"
                                ],
                                "type": "string",
                                "example": "scheduled_reload",
                                "description": "Type of task being created - only contains the \"scheduled_reload\" value. Type value is not used for creating a schedule reload. It has been deprecated since 2022-04-05.",
                                "x-qlik-deprecated": true
                            }
                        }
                    }
                ]
            },
            "PutTaskBody": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskBase"
                    },
                    {
                        "properties": {
                            "state": {
                                "enum": [
                                    "Enabled",
                                    "Disabled",
                                    "Completed"
                                ],
                                "type": "string",
                                "example": "Disabled",
                                "description": "Toggle for enabling and disabling the reload task"
                            }
                        }
                    }
                ]
            },
            "SelfLink": {
                "type": "object",
                "required": [
                    "self"
                ],
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Href"
                    }
                }
            },
            "Task": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskBase"
                    },
                    {
                        "required": [
                            "id",
                            "appId",
                            "jobId",
                            "userId",
                            "tenantId",
                            "timeZone",
                            "state",
                            "links"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "5be59decca62aa00097268a4",
                                "description": "The ID of the task."
                            },
                            "log": {
                                "type": "string",
                                "example": "Scheduled reload has been disabled since exceeded limit of 5 consecutive reload failures. Please fix error and re-enable schedule.",
                                "description": "The reason why the task was disabled.",
                                "x-qlik-deprecated": true
                            },
                            "links": {
                                "$ref": "#/components/schemas/SelfLink"
                            },
                            "state": {
                                "enum": [
                                    "Enabled",
                                    "Disabled",
                                    "Completed"
                                ],
                                "type": "string",
                                "example": "Enabled",
                                "description": "Toggle for enabling and disabling the reload task"
                            },
                            "userId": {
                                "type": "string",
                                "example": "FyPG6xWp6prDU6BXQ3g7LY9gWR_YRkkx",
                                "description": "The ID of the user who owns the task."
                            },
                            "spaceId": {
                                "type": "string",
                                "example": "602c2c2be2be220002a22a22",
                                "description": "The space ID of the application"
                            },
                            "tenantId": {
                                "type": "string",
                                "example": "efSCcpNYuayTysONkUcE3F80zYQ_LV9w",
                                "description": "The ID of the tenant who owns the task."
                            },
                            "fortressId": {
                                "type": "string",
                                "example": "5c5b097116d25a0001a48b06",
                                "description": "The fortress ID of the application",
                                "x-qlik-deprecated": true
                            },
                            "disabledCode": {
                                "enum": [
                                    "MANUALLY",
                                    "CONSECUTIVE-FAILURES",
                                    "OWNER-DELETED",
                                    "OWNER-DISABLED"
                                ],
                                "type": "string",
                                "example": "CONSECUTIVE-FAILURES",
                                "description": "The reason why the task was disabled."
                            },
                            "lastExecutionTime": {
                                "type": "string",
                                "example": "2022-09-20T17:17:00Z",
                                "description": "The last time the task executed."
                            },
                            "nextExecutionTime": {
                                "type": "string",
                                "example": "2022-09-20T17:17:00Z",
                                "description": "The next time the task will execute."
                            }
                        }
                    }
                ]
            },
            "TaskBase": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                        "description": "The ID of the app."
                    },
                    "partial": {
                        "type": "boolean",
                        "default": false,
                        "description": "The task is partial reload or not"
                    },
                    "timeZone": {
                        "type": "string",
                        "example": "America/Toronto",
                        "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. Europe/Zurich.) This field specifies the time zone in which the event start/end are expanded. If missing the start/end fields must specify a UTC offset in RFC3339 format."
                    },
                    "autoReload": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag that indicates whether a reload is triggered when data of the app is changed"
                    },
                    "recurrence": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "RRULE:FREQ=DAILY;INTERVAL=1;BYHOUR=11;BYMINUTE=18;BYSECOND=0",
                            "RRULE:FREQ=WEEKLY;INTERVAL=2;BYDAY=MO,TU;BYHOUR=13;BYMINUTE=17;BYSECOND=0"
                        ],
                        "description": "List of RECUR lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events"
                    },
                    "endDateTime": {
                        "type": "string",
                        "example": "2022-10-12T23:59:00",
                        "description": "The time that the task will stop recurring. If the time zone is missing, this is a combined date-time value expressing a time with a fixed UTC offset (formatted according to RFC3339). If a time zone is given, the zone offset must be omitted."
                    },
                    "startDateTime": {
                        "type": "string",
                        "example": "2022-09-19T11:18:00",
                        "description": "The time that the task execution start recurring. If the time zone is missing, this is a combined date-time value expressing a time with a fixed UTC offset (formatted according to RFC3339). If a time zone is given, the zone offset must be omitted. Field startDateTime should not be before the Unix epoch 00:00:00 UTC on 1 January 1970. Note that the empty string value with the empty recurrence array indicates the scheduled job is not set."
                    },
                    "autoReloadPartial": {
                        "type": "boolean",
                        "default": false,
                        "description": "A flag that indicates whether it is a partial reload or not for the auto reload"
                    }
                }
            },
            "Tasks": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/PaginationLinks"
                    }
                }
            },
            "Partial": {
                "type": "boolean",
                "example": false,
                "description": "The boolean value used to present the reload is partial or not."
            },
            "Reload": {
                "type": "object",
                "required": [
                    "id",
                    "appId",
                    "tenantId",
                    "userId",
                    "type",
                    "status",
                    "creationTime"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "5be59decca62aa00097268a4",
                        "description": "The ID of the reload."
                    },
                    "log": {
                        "type": "string",
                        "example": "ReloadID: 5be59decca62aa00097268a4\\nStarted loading\\n(A detailed script progress log can be downloaded when the reload is finished)\\nApp saved\\nFinished successfully\\n",
                        "description": "The log describing the result of the latest reload execution from the request."
                    },
                    "type": {
                        "$ref": "#/components/schemas/Type"
                    },
                    "appId": {
                        "type": "string",
                        "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                        "description": "The ID of the app."
                    },
                    "links": {
                        "$ref": "#/components/schemas/ReloadLinks"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Status"
                    },
                    "userId": {
                        "type": "string",
                        "example": "FyPG6xWp6prDU6BXQ3g7LY9gWR_YRkkx",
                        "description": "The ID of the user who created the reload."
                    },
                    "endTime": {
                        "type": "string",
                        "example": "2020-11-03T17:00:11.865Z",
                        "description": "The time the reload job finished."
                    },
                    "partial": {
                        "$ref": "#/components/schemas/Partial"
                    },
                    "tenantId": {
                        "type": "string",
                        "example": "efSCcpNYuayTysONkUcE3F80zYQ_LV9w",
                        "description": "The ID of the tenant who owns the reload."
                    },
                    "errorCode": {
                        "type": "string",
                        "example": "EngineConnectionError",
                        "description": "The error code when the status is FAILED."
                    },
                    "startTime": {
                        "type": "string",
                        "example": "2020-11-03T17:00:06.351Z",
                        "description": "The time the reload job was consumed from the queue."
                    },
                    "engineTime": {
                        "type": "string",
                        "example": "2020-11-03T17:00:07.048Z",
                        "description": "The timestamp returned from the Sense engine upon successful reload."
                    },
                    "creationTime": {
                        "type": "string",
                        "example": "2020-11-03T17:00:00.164Z",
                        "description": "The time the reload job was created."
                    },
                    "errorMessage": {
                        "type": "string",
                        "example": "failed to complete reload: unexpected EOF",
                        "description": "The error message when the status is FAILED."
                    }
                }
            },
            "ReloadLinks": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Href"
                    }
                }
            },
            "ReloadRequest": {
                "required": [
                    "appId"
                ],
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                        "description": "The ID of the app to be reloaded."
                    },
                    "partial": {
                        "type": "boolean",
                        "example": false,
                        "description": "The boolean value used to present the reload is partial or not"
                    }
                }
            },
            "Reloads": {
                "type": "object",
                "required": [
                    "data",
                    "links"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reload"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ReloadsLinks"
                    }
                }
            },
            "ReloadsLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ReloadLinks"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Href"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Href"
                            }
                        }
                    }
                ]
            },
            "Status": {
                "enum": [
                    "QUEUED",
                    "RELOADING",
                    "CANCELING",
                    "SUCCEEDED",
                    "FAILED",
                    "CANCELED",
                    "EXCEEDED_LIMIT"
                ],
                "type": "string",
                "example": "FAILED",
                "description": "The status of the reload. There are seven statuses. `QUEUED`, `RELOADING`, `CANCELING` are the active statuses. `SUCCEEDED`, `FAILED`, `CANCELED`, `EXCEEDED_LIMIT` are the end statuses."
            },
            "Type": {
                "enum": [
                    "hub",
                    "external",
                    "chronos",
                    "automations",
                    "data-refresh",
                    "choreographer"
                ],
                "type": "string",
                "example": "chronos",
                "description": "What initiated the reload: hub = one-time reload manually triggered in hub, chronos = time based scheduled reload triggered by chronos, external = reload triggered via external API request, automations = reload triggered in automation, data-refresh = reload triggered by refresh of data, choreographer = reload triggered by choreographer."
            },
            "CreateTemplateRequest": {
                "type": "object",
                "required": [
                    "name",
                    "temporaryContentId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1,
                        "description": "Template name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Template description"
                    },
                    "sourceAppId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The ID of the app that this template is using as data source. The id stored in the template file metadata is used if no value is specified."
                    },
                    "sourceAppAction": {
                        "enum": [
                            "validate",
                            "replace"
                        ],
                        "type": "string",
                        "description": "Specifies the action to perform with the given source app id. Use \"validate\" to verify that the template source app matches the provided value. Use \"replace\" to migrate the template to a different app by replacing the source app id."
                    },
                    "temporaryContentId": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The ID of a previously uploaded temporary content file"
                    }
                },
                "additionalProperties": false
            },
            "ErrorResult": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorResponseItem"
                        },
                        "nullable": true,
                        "description": "List of errors and their properties."
                    },
                    "statusCode": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "GetTemplatesResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportTemplateResponse"
                        },
                        "nullable": true,
                        "description": "The current page data."
                    },
                    "links": {
                        "$ref": "#/components/schemas/PaginationLinks"
                    }
                },
                "additionalProperties": false
            },
            "Operation": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "nullable": true
                    },
                    "from": {
                        "type": "string",
                        "nullable": true
                    },
                    "path": {
                        "type": "string",
                        "nullable": true
                    },
                    "value": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ReportTemplateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "c35f4b70-3ce4-4a30-b62b-2aef16943bc4",
                        "nullable": true,
                        "description": "The template ID"
                    },
                    "name": {
                        "type": "string",
                        "example": "Qlik report",
                        "nullable": true,
                        "description": "Template name"
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "0rTsxGg_rtsZAs19Zib_421n6haydjIh",
                        "nullable": true,
                        "description": "The user that this template is scoped to."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The date and time when the template was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "example": "0rTsxGg_rtsZAs19Zib_421n6htydjIh",
                        "nullable": true,
                        "description": "The id of the user who created the template."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The date and time when the template was last updated."
                    },
                    "updatedBy": {
                        "type": "string",
                        "example": "0rTsxGg_rtsZAs19Zib_421n6htydjIh",
                        "nullable": true,
                        "description": "The id of the user who last updated the template."
                    },
                    "description": {
                        "type": "string",
                        "example": "A daily report of interesting data",
                        "nullable": true,
                        "description": "Template description"
                    },
                    "sourceAppId": {
                        "type": "string",
                        "example": "c4c70012-29c7-47c2-820d-4ff74cb164a9",
                        "nullable": true,
                        "description": "The id of the app that this template is using as data source."
                    },
                    "sourceAppName": {
                        "type": "string",
                        "example": "Qlik app",
                        "nullable": true,
                        "description": "The name of the app that this template is using as data source."
                    },
                    "metadataVersion": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "description": "The template metadata version"
                    }
                },
                "additionalProperties": false
            },
            "UpdateTemplateRequest": {
                "type": "object",
                "required": [
                    "name",
                    "temporaryContentId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 1,
                        "description": "Template name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Template description"
                    },
                    "sourceAppAction": {
                        "enum": [
                            "validate",
                            "replace"
                        ],
                        "type": "string",
                        "description": "Specifies the action to perform with the new source app. Use \"validate\" to verify that the source app of the uploaded template matches the target app. Use \"replace\" to migrate the uploaded template to the target app by replacing the source app id."
                    },
                    "temporaryContentId": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The ID of a previously uploaded temporary content file"
                    }
                },
                "additionalProperties": false
            },
            "AppError": {
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "11ecf638-0be4-4b94-a9e6-91218f34e175",
                        "description": "app id"
                    },
                    "method": {
                        "type": "string",
                        "example": "GetObject",
                        "description": "The method that is failing."
                    },
                    "parameters": {
                        "type": "object",
                        "description": "Parameters of method that fails.",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "description": "Error in resource handling"
            },
            "AppErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AppError"
                },
                "description": "Errors occurring when dealing with the app."
            },
            "CallBackAction": {
                "properties": {
                    "httpRequest": {
                        "$ref": "#/components/schemas/HttpRequest"
                    }
                },
                "description": "The callback to be performed once the report is done."
            },
            "ChainableSelection": {
                "required": [
                    "selectionType"
                ],
                "properties": {
                    "selectionType": {
                        "$ref": "#/components/schemas/ChainableSelectionType"
                    },
                    "selectionFilter": {
                        "$ref": "#/components/schemas/SelectionFilter"
                    },
                    "persistentBookmark": {
                        "$ref": "#/components/schemas/SensePersistentBookmark"
                    },
                    "temporaryBookmarkV2": {
                        "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                    }
                }
            },
            "ChainableSelectionType": {
                "enum": [
                    "selectionFilter",
                    "persistentBookmark",
                    "temporaryBookmarkV2"
                ],
                "type": "string",
                "default": "selectionFilter"
            },
            "ComposableTemplate": {
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "sense-image-1.0",
                            "sense-sheet-1.0"
                        ],
                        "type": "string",
                        "description": "Template type and version using semantic versioning. It must have the following name convention, dashed-separated-template-name-MAJOR.MINOR"
                    },
                    "senseImageTemplate": {
                        "$ref": "#/components/schemas/SenseImageTemplate"
                    },
                    "senseSheetTemplate": {
                        "$ref": "#/components/schemas/SenseSheetTemplate"
                    }
                }
            },
            "Definitions": {
                "properties": {
                    "selectionsByState": {
                        "type": "object",
                        "description": "It maps an ID to a selectionsByState object.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A selectionsByState definition that can be shared between templates in a composition.",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/QSelection"
                                }
                            }
                        }
                    }
                },
                "description": "Definitions of common properties that are shared between templates, e.g. selectionsByState can be the same for all templates within a composition of templates."
            },
            "DocProperties": {
                "properties": {
                    "title": {
                        "type": "string",
                        "maxLength": 10000
                    },
                    "author": {
                        "type": "string",
                        "maxLength": 10000
                    },
                    "subject": {
                        "type": "string",
                        "maxLength": 10000
                    }
                },
                "description": "Properties of the document. In case of multiple composition, only properties specified in the composition output are taken and the ones specified in each output item are ignored."
            },
            "ExcelOutput": {
                "properties": {
                    "outFormat": {
                        "enum": [
                            "xlsx"
                        ],
                        "type": "string",
                        "default": "xlsx",
                        "description": "The output format of the report to be produced."
                    }
                },
                "description": "Output to be used to export an excel template."
            },
            "ExportError": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The unique code for the error\n\n- \"REP-400000\" Bad request. The server could not understand the request due to invalid syntax.\n- \"REP-400008\" Selections error.\n- \"REP-400009\" Maximum 16384 columns limit exceeded. Download data in a visualization can't generate an .xlsx file due to limitations to the number of columns you can download.\n- \"REP-400010\" Maximum 1048566 rows limit exceeded. Download data in a visualization can't generate an .xlsx file due to limitations to the number of rows you can download.\n- \"REP-400011\" The size of the downloaded Excel file exceed 100 MB limit. Download data in a visualization can't generate an .xlsx file due to limitations to the amount of data you can download.\n- \"REP-400015\" Bad request in enigma request. The patch value has invalid JSON format.\n- \"REP-401000\" Unauthorized. The client must authenticate itself to get the requested response.\n- \"REP-401001\" Unauthorized, bad JWT.\n- \"REP-403000\" Forbidden. The client does not have access rights to the content.\n- \"REP-403001\" App forbidden, the user does not have read permission on the app.\n- \"REP-403002\" Chart type not supported.\n- \"REP-404000\" Not found. The server can not find the requested resource.\n- \"REP-404001\" App not found, the app does not exist or it has been deleted.\n- \"REP-404002\" Chart not found, the chart does not exist or it has been deleted.\n- \"REP-404003\" Sheet not found, the sheet does not exist or it has been deleted or it is unavailable.\n- \"REP-404004\" Story not found, the story does not exist or it has been deleted or it is unavailable.\n- \"REP-429000\" Too many request. The user has sent too many requests in a given amount of time (\"rate limiting\").\n- \"REP-429012\" Exceeded max session tenant quota. A tenant has opened too many different sessions at the same time.\n- \"REP-429014\" The export could not be completed within the requested deadline.\n- \"REP-429016\" Exceeded max session tenant quota per day.\n- \"REP-500000\" Fail to resolve resource.\n- \"REP-500006\" Fail to get report session parameters.\n- \"REP-503005\" Engine unavailable, qix-sessions error no engines available.\n- \"REP-503013\" Session unavailable. The engine session used to create the report is unavailable.\n- \"REP-500100\" Image rendering generic error on Sense client.\n- \"REP-500101\" Image rendering could not set cookies error on Sense client.\n- \"REP-400102\" Image rendering invalid strategy error on Sense client.\n- \"REP-500103\" Image rendering JS timeout error on Sense client.\n- \"REP-500104\" Image rendering load URL timeout error on Sense client.\n- \"REP-500105\" Image rendering max paint attempts exceeded error on Sense client.\n- \"REP-500106\" Image rendering max JS attempts exceeded error on Sense client.\n- \"REP-500107\" Image rendering render timeout error on Sense client.\n- \"REP-500108\" Image rendering JS failure due to timeout error on Sense client.\n- \"REP-500109\" Image rendering generic JS failure error on Sense client.\n- \"REP-400029\" Reload Entitlement Limit Reached.\n- \"REP-409046\" Report aborted due to app reload.\n- \"REP-500047\" Error setting GroupState.\n- \"REP-403048\" Forbidden. User does not have permission to export the report (access control usePermission)\n- \"REP-422051\" There is no report to produce due to empty dataset or missing fields (the measure/dimension was removed or omitted in Section Access)\n- \"REP-500014\" The app did not open within 10 minutes.\n- \"REP-400017\" Static App size exceeded.\n- \"REP-400018\" Excel string length exceeded.\n- \"REP-403019\" Export is not available for app with enabled directQuery feature.\n- \"REP-409001\" App conflict.\n- \"REP-503001\" Rest Engine Error.\n- \"REP-400020\" Invalid Issuer.\n- \"REP-400028\" Invalid Tags.\n- \"REP-409021\" Reload timestamp constraint not met.\n- \"REP-429022\" Enigma generic abort.\n- \"REP-500023\" Validate Report Request Tags failure.\n- \"REP-400024\" Cannot extract claims from JWT.\n- \"REP-403025\" No entitlement to perform the operation.\n- \"REP-403026\" No entitlement to perform the operation. Export capability is off.\n- \"REP-403027\" Object without Hypercube or unsupported object type.\n- \"REP-422030\" Apply variables error.\n- \"REP-500200\" Report Generator error.\n- \"REP-400035\" Multiple selections detected in a field having OneAndOnlyone attribute.\n- \"REP-400036\" No selection detected in a field having OneAndOnlyone attribute.\n- \"REP-400037\" Max number of images exceeded in a report.\n- \"REP-400038\" Max number of nested levels exceeded in report.\n- \"REP-400039\" Max number of objects exceeded in a report.\n- \"REP-400040\" Max number of templates exceeded in a report.\n- \"REP-400041\" Unsupported dimension type for level tag.\n- \"REP-500240\" Engine Global generic closure error.\n- \"REP-500260\" Engine Websocket generic closure error.\n- \"REP-500280\" Engine proxy generic closure error.\n- \"REP-400240\" Engine Client Global generic closure error\n- \"REP-400260\" Engine Client generic closure error.\n- \"REP-400280\" Engine Client proxy generic closure error.\n- \"REP-500045\" Failure setting Bookmark timestamp.\n- \"REP-400050\" Error retrieving outputs.\n- \"REP-400052\" Report Request Aborted from internal error.\n- \"REP-500053\" Unexpected number of generated cycle reports.\n- \"REP-400054\" The number of generated cycle reports exceeds the maximum allowed.\n"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaExportError"
                    },
                    "title": {
                        "type": "string",
                        "description": "A summary in english explaining what went wrong."
                    },
                    "detail": {
                        "type": "string",
                        "description": "Optional. MAY be used to provide more concrete details."
                    }
                },
                "description": "Error occured during report generation."
            },
            "ExportErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ExportError"
                },
                "description": "Errors occured during report generation."
            },
            "HttpRequest": {
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "URI of the request."
                    }
                },
                "description": "Http callback. The provided uri will be called once the report is done."
            },
            "ImageOutput": {
                "properties": {
                    "outDpi": {
                        "type": "integer",
                        "format": "int32",
                        "maximum": 1000,
                        "description": "Image resolution in DPI (default 96 DPI)."
                    },
                    "outZoom": {
                        "type": "number",
                        "format": "float",
                        "description": "The scale factor to be applied in image scaling. A zoom greater than 5 will not be applied to the device pixel ratio which will remain fixed at 5."
                    },
                    "outFormat": {
                        "enum": [
                            "png",
                            "jsondata"
                        ],
                        "type": "string",
                        "default": "png",
                        "description": "The image format of the report to be produced."
                    }
                },
                "description": "Output to be used to export a single visualization as image."
            },
            "MetaExportError": {
                "properties": {
                    "appErrors": {
                        "$ref": "#/components/schemas/AppErrors"
                    },
                    "selectionErrors": {
                        "$ref": "#/components/schemas/SelectionErrors"
                    }
                },
                "description": "Define the export error metadata. Each property is filled if it is related to the export error type."
            },
            "OutputItem": {
                "example": {
                    "type": "pdf",
                    "outputId": "output1",
                    "pdfOutput": {
                        "size": "A4",
                        "align": {
                            "vertical": "middle",
                            "horizontal": "center"
                        },
                        "resizeData": {
                            "fit": "210mmx287mm"
                        },
                        "resizeType": "fit",
                        "orientation": "P",
                        "imageRenderingDpi": 300
                    }
                },
                "required": [
                    "outputId",
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "image",
                            "pdf",
                            "xlsx",
                            "jsondata",
                            "pdfcomposition",
                            "excel",
                            "pptx",
                            "pptxcomposition",
                            "csv",
                            "cycle",
                            "html"
                        ],
                        "type": "string",
                        "description": "The generated report type.\n\nEach template type supports specific output types:\n   - composition-1.0 supports only pdfcomposition and pptxcomposition output types\n   - sense-excel-template-1.0 supports only excel and pdf output type\n   - sense-image-1.0 supports pdf, pptx and image output types\n   - sense-sheet-1.0 supports pdf and pptx output type\n   - sense-data-1.0 supports xlsx output type\n\nEach output type requires a specific output to be provided:\n   - excel requires excelOutput to be set\n   - pdfcomposition requires pdfCompositionOutput to be set\n   - pptxcomposition requires pptxCompositionOutput to be set\n   - pdf requires pdfOuput to be set\n   - pptx requires pptxOuput to be set\n   - image requires imageOutput to be set\n   - csv doesn't have csv output\n   - xlsx requires xlsxOutput to be set\n"
                    },
                    "outputId": {
                        "type": "string",
                        "example": "output1",
                        "maxLength": 1000,
                        "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request. It does not need to be a GUID. No spaces and colons are allowed in the outputId string."
                    },
                    "pdfOutput": {
                        "$ref": "#/components/schemas/PdfOutput"
                    },
                    "pptxOutput": {
                        "$ref": "#/components/schemas/PptxOutput"
                    },
                    "excelOutput": {
                        "$ref": "#/components/schemas/ExcelOutput"
                    },
                    "imageOutput": {
                        "$ref": "#/components/schemas/ImageOutput"
                    },
                    "callBackAction": {
                        "$ref": "#/components/schemas/CallBackAction"
                    },
                    "pdfCompositionOutput": {
                        "$ref": "#/components/schemas/PdfCompositionOutput"
                    },
                    "pptxCompositionOutput": {
                        "$ref": "#/components/schemas/PptxCompositionOutput"
                    }
                }
            },
            "PdfCompositionOutput": {
                "properties": {
                    "pdfOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PdfOutput"
                        },
                        "description": "The ordered list of PDF outputs, the number must match the composable templates."
                    },
                    "properties": {
                        "$ref": "#/components/schemas/DocProperties"
                    }
                },
                "description": "Output to be used to export a composition of templates as pdf."
            },
            "PdfOutput": {
                "properties": {
                    "size": {
                        "enum": [
                            "A1",
                            "A2",
                            "A3",
                            "A4",
                            "A5",
                            "A6",
                            "Letter",
                            "Legal",
                            "Tabloid"
                        ],
                        "type": "string",
                        "default": "A4",
                        "description": "Size of the pdf page."
                    },
                    "align": {
                        "type": "object",
                        "properties": {
                            "vertical": {
                                "enum": [
                                    "top",
                                    "middle",
                                    "bottom"
                                ],
                                "type": "string",
                                "default": "top"
                            },
                            "horizontal": {
                                "enum": [
                                    "left",
                                    "center",
                                    "right"
                                ],
                                "type": "string",
                                "default": "left"
                            }
                        },
                        "description": "Content alignment."
                    },
                    "properties": {
                        "$ref": "#/components/schemas/DocProperties"
                    },
                    "resizeData": {
                        "type": "object",
                        "properties": {
                            "fit": {
                                "type": "string",
                                "example": "297mmx210mm",
                                "description": "The size of the area in the following format \"{width}{cm|mm}x{height}{cm|mm}\" (e.g. \"297mmx210mm\"). Please remember that PDF page orientation (landscape or portrait) should match the width and height set for this field (eg. A4 landscape is \"297mmx210mm\", A4 portrait is \"210mmx287mm\"). Note that the minimum printable area is 1.5cmx1.5cm (corresponding to 0.6x0.6 inches at 96 DPI)."
                            }
                        },
                        "description": "The area where the object (eg. sheet, chart) is printed. Required in case of \"fit\" resizeType."
                    },
                    "resizeType": {
                        "enum": [
                            "none",
                            "autofit",
                            "fit"
                        ],
                        "type": "string",
                        "default": "none",
                        "description": "The type of resize to be performed:\n  - none is used to export a visualization, sheet or story as is (e.g. normal size), regardless of its size. This may result in cropping.\n  - autofit automatically fits the visualization, sheet or story into the output size (i.e. A4, A3 etc.). Any provided resizeData parameter will be ignored for this configuration.\n  - fit fits the visualization, sheet or story into the area specified in resizeData. The content will be rescaled to fit in that area.\n"
                    },
                    "orientation": {
                        "enum": [
                            "P",
                            "L",
                            "A"
                        ],
                        "type": "string",
                        "default": "P",
                        "description": "P for portrait, L for landscape and A for auto-detect. Auto-detect sets the orientation depending on the content width and height proportions: if content width > height the orientation is automatically set to landscape, portrait otherwise."
                    },
                    "imageRenderingDpi": {
                        "type": "number",
                        "format": "int32",
                        "default": 300,
                        "maximum": 1000,
                        "x-nullable": true,
                        "description": "This value is used for rendered images only, set to a default of 300 dpi."
                    }
                },
                "description": "Output to be used to export a single visualization, a sheet, Sense Excel template as pdf. For Sense Excel template (sense-excel-template-1.0) no properties are needed, any property specified has no effect."
            },
            "PptxCompositionOutput": {
                "properties": {
                    "pptxOutput": {
                        "$ref": "#/components/schemas/PptxOutput"
                    }
                },
                "description": "Output to be used to export a composition of templates as pptx."
            },
            "PptxOutput": {
                "properties": {
                    "size": {
                        "enum": [
                            "Widescreen",
                            "OnScreen",
                            "OnScreen16x9",
                            "OnScreen16x10"
                        ],
                        "type": "string",
                        "default": "Widescreen",
                        "description": "Size of the PowerPoint slide:\n  - Widescreen: 960x540\n  - OnScreen: 720x540\n  - OnScreen16x9: 720x405\n  - OnScreen16x10: 720x450\n"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/DocProperties"
                    },
                    "resizeType": {
                        "enum": [
                            "autofit"
                        ],
                        "type": "string",
                        "default": "autofit",
                        "description": "The type of resize to be performed. Autofit automatically fits the visualization, sheet or story into the output size (i.e. Widescreen, OnScreen etc.).\n"
                    },
                    "orientation": {
                        "enum": [
                            "L",
                            "P",
                            "A"
                        ],
                        "type": "string",
                        "default": "L",
                        "description": "L for landscape, P for portrait and A for auto-detect. Auto-detect sets landscape, the default PowerPoint orientation."
                    },
                    "imageRenderingDpi": {
                        "type": "number",
                        "format": "int32",
                        "default": 300,
                        "maximum": 1000,
                        "x-nullable": true,
                        "description": "This value is used for rendered images only, set to a default of 300 dpi."
                    }
                },
                "description": "Output to be used to export a single visualization or a sheet as PowerPoint presentation."
            },
            "QFieldValue": {
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "2021",
                        "description": "String value of the field value."
                    },
                    "number": {
                        "$ref": "#/components/schemas/Float64"
                    },
                    "isNumeric": {
                        "type": "boolean",
                        "example": true,
                        "x-nullable": true,
                        "description": "IsNumeric tells whether the field value is text or number. Default value is equal to defaultIsNumeric property in QSelection."
                    }
                },
                "description": "In order to apply a selection just one of text/number needs to be set, this must be associated with the correct isNumeric bool. In some scenarios both text and number may be set."
            },
            "QSelection": {
                "required": [
                    "fieldName",
                    "values",
                    "defaultIsNumeric"
                ],
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QFieldValue"
                        },
                        "maxItems": 150000,
                        "description": "The values of the field to be selected."
                    },
                    "fieldName": {
                        "type": "string",
                        "example": "Year",
                        "description": "The name of the field to be selected."
                    },
                    "defaultIsNumeric": {
                        "type": "boolean",
                        "example": true,
                        "description": "Default value that QFieldValue isNumeric property takes if missing."
                    }
                }
            },
            "Reason": {
                "properties": {
                    "traceId": {
                        "type": "string",
                        "example": "00000000000000000000000000000000"
                    },
                    "outputId": {
                        "type": "string",
                        "example": "output1",
                        "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request."
                    },
                    "exportErrors": {
                        "$ref": "#/components/schemas/ExportErrors"
                    }
                }
            },
            "reloadTimestampMatchType": {
                "enum": [
                    "noCheck",
                    "requestTimeExact"
                ],
                "type": "string",
                "default": "noCheck",
                "example": "noCheck",
                "description": "Choose the reloadTimestamp constraint to apply. An empty value leads to the default noCheck."
            },
            "ReportRequest": {
                "example": {
                    "type": "composition-1.0",
                    "output": {
                        "type": "pdfcomposition",
                        "outputId": "composition1",
                        "pdfCompositionOutput": {
                            "pdfOutputs": [
                                {
                                    "size": "A4",
                                    "align": {
                                        "vertical": "middle",
                                        "horizontal": "center"
                                    },
                                    "resizeType": "autofit",
                                    "orientation": "A"
                                },
                                {
                                    "size": "A4",
                                    "align": {
                                        "vertical": "middle",
                                        "horizontal": "center"
                                    },
                                    "resizeType": "autofit",
                                    "orientation": "A"
                                }
                            ]
                        }
                    },
                    "definitions": {
                        "selectionsByState": {
                            "sel1": {
                                "$": [
                                    {
                                        "values": [
                                            {
                                                "text": "Arizona",
                                                "isNumeric": false
                                            }
                                        ],
                                        "fieldName": "Region",
                                        "defaultIsNumeric": false
                                    }
                                ]
                            }
                        }
                    },
                    "compositionTemplates": [
                        {
                            "type": "sense-sheet-1.0",
                            "senseSheetTemplate": {
                                "appId": "2451e58e-a1b9-4047-abf6-315e91d8a610",
                                "sheet": {
                                    "id": "5ffe3801-1b6d-439d-a849-84d0748358f1"
                                },
                                "selectionsByStateDef": "sel1"
                            }
                        },
                        {
                            "type": "sense-sheet-1.0",
                            "senseSheetTemplate": {
                                "appId": "2451e58e-a1b9-4047-abf6-315e91d8a610",
                                "sheet": {
                                    "id": "ffrxJyA"
                                },
                                "selectionsByStateDef": "sel1"
                            }
                        }
                    ]
                },
                "required": [
                    "type",
                    "output"
                ],
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    },
                    "type": {
                        "enum": [
                            "composition-1.0",
                            "sense-image-1.0",
                            "sense-data-1.0",
                            "sense-sheet-1.0",
                            "sense-story-1.0",
                            "qv-data-1.0",
                            "qv-data-2.0",
                            "sense-excel-template-1.0",
                            "sense-pixel-perfect-template-1.0",
                            "sense-html-template-1.0"
                        ],
                        "type": "string",
                        "description": "Template type and version using semantic versioning. It must have the following name convention: dashed-separated-template-name-MAJOR.MINOR.\nPlease note that sense-pixel-perfect-template-1.0, sense-html-template-1.0, sense-story-x.0 and qv-data-x.0 are only for internal use.\n\nEach type requires a specific template to be provided:\n  - composition-1.0 requires compositionTemplates to be set\n  - sense-excel-template-1.0 requires senseExcelTemplate to be set\n  - sense-image-1.0 requires senseImageTemplate to be set\n  - sense-sheet-1.0 requires senseSheetTemplate to be set\n  - sense-data-1.0 requires senseDataTemplate to be set\n\nEach template type supports specific output types:\n  - composition-1.0 supports pdfcomposition and pptxComposition output type\n  - sense-excel-template-1.0 supports excel and pdf output type\n  - sense-image-1.0 supports pdf, pptx and png output types\n  - sense-sheet-1.0 supports pdf, pptx output type\n  - sense-data-1.0 supports xlsx output type\n"
                    },
                    "output": {
                        "$ref": "#/components/schemas/OutputItem"
                    },
                    "definitions": {
                        "$ref": "#/components/schemas/Definitions"
                    },
                    "senseDataTemplate": {
                        "$ref": "#/components/schemas/SenseDataTemplate"
                    },
                    "senseHtmlTemplate": {
                        "$ref": "#/components/schemas/SenseFileTemplate"
                    },
                    "senseExcelTemplate": {
                        "$ref": "#/components/schemas/SenseFileTemplate"
                    },
                    "senseImageTemplate": {
                        "$ref": "#/components/schemas/SenseImageTemplate"
                    },
                    "senseSheetTemplate": {
                        "$ref": "#/components/schemas/SenseSheetTemplate"
                    },
                    "compositionTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ComposableTemplate"
                        },
                        "minItems": 1,
                        "description": "Composition of senseSheetTemplate and/or senseImageTemplate templates."
                    },
                    "requestCallBackAction": {
                        "$ref": "#/components/schemas/CallBackAction"
                    },
                    "sensePixelPerfectTemplate": {
                        "$ref": "#/components/schemas/SenseFileTemplate"
                    }
                }
            },
            "ReportStatus": {
                "type": "object",
                "example": {
                    "status": "done",
                    "results": [
                        {
                            "location": "https://qlikcloud.com:443/api/v1/temp-contents/619baab68023910001efcb86?inline=1",
                            "outputId": "output1"
                        }
                    ],
                    "statusLocation": "/reports/01562a37-23e3-4b43-865d-84c26122276c/status",
                    "resolutionAttempts": 1
                },
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "enum": [
                            "queued",
                            "processing",
                            "done",
                            "failed",
                            "aborted",
                            "visiting",
                            "aborting"
                        ],
                        "type": "string",
                        "example": "processing",
                        "description": "Status of the requested report."
                    },
                    "reasons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reason"
                        },
                        "deprecated": true,
                        "description": "Present when status is failed. Deprecated. Use /reports/{id}/outputs instead.",
                        "x-qlik-deprecated": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Result"
                        },
                        "deprecated": true,
                        "description": "Present when the status is \"done\". Deprecated. Use /reports/{id}/outputs instead.",
                        "x-qlik-deprecated": true
                    },
                    "requestErrors": {
                        "$ref": "#/components/schemas/ExportErrors"
                    },
                    "statusLocation": {
                        "type": "string",
                        "format": "uri",
                        "example": "/reports/c86132d2-109e-47c5-bccc-83c5d3a40185/status",
                        "description": "Relative path to status location."
                    },
                    "resolutionAttempts": {
                        "type": "integer",
                        "format": "int32",
                        "example": 2,
                        "description": "Count how many times the resolution of this report was attempted."
                    }
                }
            },
            "Result": {
                "type": "object",
                "required": [
                    "outputId",
                    "location"
                ],
                "properties": {
                    "location": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://t.eu.qlikcloud.com:443/api/v1/temp-contents/619b77be498fea00018de0e1?inline=1",
                        "description": "Location to download the generated report."
                    },
                    "outputId": {
                        "type": "string",
                        "example": "output1",
                        "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request."
                    },
                    "exportErrors": {
                        "$ref": "#/components/schemas/ExportErrors"
                    }
                },
                "description": "Result and info about the generated report."
            },
            "SelectionChain": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ChainableSelection"
                },
                "maxItems": 50,
                "minItems": 1,
                "description": "Array of ChainableSelection"
            },
            "SelectionError": {
                "properties": {
                    "detail": {
                        "type": "string",
                        "description": "Details about the field selection error."
                    },
                    "errorType": {
                        "enum": [
                            "fieldMissing",
                            "fieldValuesMissing",
                            "stateMissing",
                            "groupStateGroupMissing",
                            "groupStateGroupNotApplicable",
                            "groupStateFieldDefMissing"
                        ],
                        "type": "string"
                    },
                    "fieldName": {
                        "type": "string",
                        "example": "Year",
                        "description": "The field name that is missing."
                    },
                    "stateName": {
                        "type": "string",
                        "description": "The state name that is missing."
                    },
                    "missingValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QFieldValue"
                        }
                    },
                    "isFieldNameMissing": {
                        "type": "boolean",
                        "example": false,
                        "description": "Deprecated, use errorType instead. True if the fieldName is missing. The missingValues array is empty in this case",
                        "x-qlik-deprecated": true
                    }
                },
                "description": "Selection error related to a fieldName. The field name is missing or some of his selection values are missing or a state is missing"
            },
            "SelectionErrors": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/SelectionError"
                },
                "description": "Errors occurring in selections."
            },
            "SelectionFilter": {
                "properties": {
                    "variables": {
                        "type": "array",
                        "maxItems": 1100
                    },
                    "patchesById": {
                        "type": "object",
                        "description": "A map for applying soft properties, aka patches, to specific visualization IDs within the sheet.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/NxPatch"
                            },
                            "maxItems": 100
                        }
                    },
                    "selectionsByState": {
                        "type": "object",
                        "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and Maximum number of overall field values allowed is 150000.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/QSelection"
                            },
                            "maxItems": 125
                        }
                    }
                }
            },
            "SelectionStrategy": {
                "enum": [
                    "failOnErrors",
                    "ignoreErrorsReturnDetails",
                    "ignoreErrorsNoDetails"
                ],
                "type": "string",
                "default": "ignoreErrorsNoDetails"
            },
            "SenseDataTemplate": {
                "required": [
                    "appId",
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "QbtwdFg",
                        "description": "Sense visualization id. Visualizations created \"on the fly\" are not supported."
                    },
                    "appId": {
                        "type": "string"
                    },
                    "patches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxPatch"
                        },
                        "maxItems": 100
                    },
                    "variables": {
                        "type": "array",
                        "maxItems": 1100
                    },
                    "selectionType": {
                        "$ref": "#/components/schemas/SenseSelectionType"
                    },
                    "selectionStrategy": {
                        "$ref": "#/components/schemas/SelectionStrategy"
                    },
                    "selectionsByState": {
                        "type": "object",
                        "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/QSelection"
                            },
                            "maxItems": 125
                        }
                    },
                    "persistentBookmark": {
                        "$ref": "#/components/schemas/SensePersistentBookmark"
                    },
                    "temporaryBookmarkV2": {
                        "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                    },
                    "reloadTimestampMatchType": {
                        "$ref": "#/components/schemas/reloadTimestampMatchType"
                    }
                }
            },
            "SenseFileTemplate": {
                "required": [
                    "templateLocation"
                ],
                "properties": {
                    "jsOpts": {
                        "type": "object",
                        "description": "A JSON object that is passed as-is to the mashup page while rendering, this will be applied to all charts within the sheet. It includes properties of the whole sheet such as theme, gradient etc. Currently only the \"theme\" property is supported."
                    },
                    "selectionChain": {
                        "$ref": "#/components/schemas/SelectionChain"
                    },
                    "templateLocation": {
                        "$ref": "#/components/schemas/TemplateLocation"
                    },
                    "reloadTimestampMatchType": {
                        "$ref": "#/components/schemas/reloadTimestampMatchType"
                    }
                },
                "description": "Used to produce reports from a template file."
            },
            "SenseImageTemplate": {
                "required": [
                    "appId",
                    "visualization"
                ],
                "properties": {
                    "appId": {
                        "type": "string"
                    },
                    "selectionType": {
                        "$ref": "#/components/schemas/SenseSelectionType"
                    },
                    "visualization": {
                        "$ref": "#/components/schemas/Visualization"
                    },
                    "selectionStrategy": {
                        "$ref": "#/components/schemas/SelectionStrategy"
                    },
                    "selectionsByState": {
                        "type": "object",
                        "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/QSelection"
                            },
                            "maxItems": 125
                        }
                    },
                    "persistentBookmark": {
                        "$ref": "#/components/schemas/SensePersistentBookmark"
                    },
                    "temporaryBookmarkV2": {
                        "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                    },
                    "selectionsByStateDef": {
                        "type": "string",
                        "x-nullable": true,
                        "description": "The definition ID referring to a selectionsByState definition declared in definitions."
                    },
                    "reloadTimestampMatchType": {
                        "$ref": "#/components/schemas/reloadTimestampMatchType"
                    }
                },
                "description": "Used to export a single visualization as pdf, pptx or png."
            },
            "SensePersistentBookmark": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "21edf789-0be4-4b94-a9e6-31456kl4e175",
                        "description": "Sense Persistence Bookmark id."
                    }
                }
            },
            "SenseSelectionType": {
                "enum": [
                    "selectionsByState",
                    "temporaryBookmark",
                    "persistentBookmark",
                    "temporaryBookmarkV2"
                ],
                "type": "string",
                "default": "selectionsByState"
            },
            "SenseSheetTemplate": {
                "required": [
                    "appId",
                    "sheet"
                ],
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                    },
                    "sheet": {
                        "$ref": "#/components/schemas/Sheet"
                    },
                    "selectionType": {
                        "$ref": "#/components/schemas/SenseSelectionType"
                    },
                    "selectionStrategy": {
                        "$ref": "#/components/schemas/SelectionStrategy"
                    },
                    "selectionsByState": {
                        "type": "object",
                        "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/QSelection"
                            },
                            "maxItems": 125
                        }
                    },
                    "persistentBookmark": {
                        "$ref": "#/components/schemas/SensePersistentBookmark"
                    },
                    "temporaryBookmarkV2": {
                        "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                    },
                    "selectionsByStateDef": {
                        "type": "string",
                        "x-nullable": true,
                        "description": "The definition ID referring to a selectionsByState definition declared in definitions."
                    },
                    "reloadTimestampMatchType": {
                        "$ref": "#/components/schemas/reloadTimestampMatchType"
                    }
                },
                "description": "Used to export a sheet as pdf or pptx."
            },
            "SenseTemporaryBookmarkV2": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "21edf789-0be4-4b94-a9e6-31456kl4e175",
                        "description": "Sense Temporary Bookmark id."
                    }
                },
                "description": "The temporary bookmark to apply. Patches and Variables are ignored if passed to the API, because they already are applied in the backend."
            },
            "Sheet": {
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "75a5cf3c-18fb-405d-b03e-2d7912260872",
                        "description": "The id of the sheet."
                    },
                    "jsOpts": {
                        "type": "object",
                        "description": "A JSON object that is passed as-is to the mashup page while rendering, this will be applied to all charts within the sheet. It includes properties of the whole sheet such as theme, gradient etc."
                    },
                    "widthPx": {
                        "type": "number",
                        "format": "float",
                        "example": 800,
                        "maximum": 4000,
                        "minimum": 20,
                        "x-nullable": true,
                        "description": "The width of the sheet in pixels. Default value is: - 1680 pixels for responsive sheet - 1120 pixels for extended sheet - same width set in sheet properties for custom sheet"
                    },
                    "heightPx": {
                        "type": "number",
                        "format": "float",
                        "example": 1000,
                        "maximum": 4000,
                        "minimum": 20,
                        "x-nullable": true,
                        "description": "The height of the sheet in pixels. Default value is: - 1120 pixels for responsive sheet - 1680 pixels for extended sheet - same height set in sheet properties for custom sheet"
                    },
                    "jsOptsById": {
                        "type": "object",
                        "description": "A map for applying jsOpts to specific visualization IDs within the sheet.",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A JSON object that is passed as-is to the mashup page while rendering."
                        }
                    },
                    "patchesById": {
                        "type": "object",
                        "description": "A map for applying soft properties, aka patches, to specific visualization IDs within the sheet.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/NxPatch"
                            },
                            "maxItems": 100
                        }
                    }
                },
                "description": "It refers to the Sense Sheet to be exported. Note that if widthPx and heightPx are not specified, default values will be applied depending on the actual size and layout properties of the Sense Sheet object."
            },
            "TemplateLocation": {
                "required": [
                    "path"
                ],
                "properties": {
                    "path": {
                        "type": "string",
                        "example": "https://qlikcloud.com:443/api/v1/report-templates/223940f7-3170-46b7-91ea-e0c81230adf7",
                        "description": "The report template location path."
                    },
                    "format": {
                        "enum": [
                            "url"
                        ],
                        "type": "string",
                        "default": "url"
                    }
                },
                "description": "The location of the report template. Currently it can be an absolute or relative URL to a persisted report template, or to a template file saved as temporary content, as in the following examples: - https://qlikcloud.com:443/api/v1/report-templates/223940f7-3170-46b7-91ea-e0c81230adf7 - https://qlikcloud.com:443/api/v1/temp-contents/653bb4acae966r0730da15fc"
            },
            "Visualization": {
                "required": [
                    "id",
                    "widthPx",
                    "heightPx"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "QbtwdFg",
                        "description": "The sense visualization id or json definition."
                    },
                    "type": {
                        "enum": [
                            "visualization",
                            "sessionobject"
                        ],
                        "type": "string",
                        "example": "visualization",
                        "description": "Choose visualization to export an image of a sense chart, sessionobject for a visualization to be created on-the-fly. An empty value leads to the type being inferred by its id."
                    },
                    "jsOpts": {
                        "type": "object",
                        "description": "A JSON object that is passed as-is to the mashup page while rendering."
                    },
                    "patches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxPatch"
                        },
                        "maxItems": 100,
                        "description": "Soft properties, aka patches, to be applied to the visualization."
                    },
                    "widthPx": {
                        "type": "number",
                        "format": "float",
                        "example": 400,
                        "maximum": 4000,
                        "minimum": 5,
                        "description": "Width in pixels."
                    },
                    "heightPx": {
                        "type": "number",
                        "format": "float",
                        "example": 500,
                        "maximum": 4000,
                        "minimum": 5,
                        "description": "Height in pixels."
                    }
                }
            },
            "CreateRole": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Role name, needs to be unique"
                    },
                    "description": {
                        "type": "string",
                        "description": "Role description"
                    },
                    "assignedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selection of scopes to assign to role"
                    }
                }
            },
            "ListRolesResult": {
                "type": "object",
                "required": [
                    "links",
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        },
                        "description": "An array of roles."
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "Indicates the total number of matching documents. Will only be returned if the query parameter \"totalResults\" is true."
                    }
                }
            },
            "PatchRole": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "example": "replace"
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/description",
                            "/assignedScopes"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "PatchRoles": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchRole"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "Role1"
                    },
                    {
                        "op": "replace",
                        "path": "/assignedScopes",
                        "value": [
                            "knowledgebase"
                        ]
                    },
                    {
                        "op": "replace",
                        "path": "/description",
                        "value": "My custom role description"
                    }
                ],
                "description": "An array of JSON Patch documents"
            },
            "Role": {
                "type": "object",
                "required": [
                    "id",
                    "tenantId",
                    "name",
                    "type",
                    "description",
                    "createdAt",
                    "lastUpdatedAt",
                    "links"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "example": "507f191e810c19729de860ea",
                        "readOnly": true,
                        "description": "The unique identifier for the role.",
                        "x-qlik-filterable": true
                    },
                    "name": {
                        "type": "string",
                        "example": "Developer",
                        "description": "The name of the role.",
                        "x-qlik-filterable": true
                    },
                    "type": {
                        "enum": [
                            "default",
                            "custom"
                        ],
                        "type": "string",
                        "example": "default",
                        "description": "The type of role.",
                        "x-qlik-filterable": true
                    },
                    "level": {
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "type": "string",
                        "example": "admin",
                        "description": "The level of access associated to the role.",
                        "x-qlik-filterable": true
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.us.qlikcloud.com/api/v1/roles/507f191e810c19729de860ea",
                                        "description": "Link to the role."
                                    }
                                }
                            }
                        },
                        "description": "Contains links for the role."
                    },
                    "canEdit": {
                        "type": "boolean",
                        "default": false,
                        "readOnly": true,
                        "description": "Indicate if role can be edited by tenant (Shown as Profile in MC)"
                    },
                    "fullUser": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "DEPRECATED. Use userEntitlementType instead for impact of roles on user entitlements with a capacity-based subscription.",
                        "x-qlik-deprecated": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "q3VRZ4YMixRaLKEPhkZWM-XMIDN7cO8f",
                        "description": "The tenant unique identifier associated with the given Role.",
                        "x-qlik-filterable": true
                    },
                    "canDelete": {
                        "type": "boolean",
                        "default": false,
                        "readOnly": true,
                        "description": "Indicate if role can be deleted"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-03-21T17:32:28Z",
                        "description": "The timestamp for when the role was created.",
                        "x-qlik-filterable": true
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Id of user that created role"
                    },
                    "updatedBy": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Id of user that last updated this role"
                    },
                    "description": {
                        "type": "string",
                        "example": "Grants permission to generate API keys",
                        "description": "Descriptive text for the role.",
                        "x-qlik-filterable": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "edit_foo"
                        ],
                        "description": "An array of permissions associated with the role.",
                        "x-qlik-filterable": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-03-22T10:01:02Z",
                        "description": "The timestamp for when the role was last updated.",
                        "x-qlik-filterable": true
                    },
                    "assignedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selection of scopes added to this Role"
                    },
                    "userEntitlementType": {
                        "type": "string",
                        "example": "fullUser",
                        "readOnly": true,
                        "description": "Indicate whether this role will trigger promotion of a user from a basic to a full user on tenants with a capacity-based subscription. Does not apply to tenants with a user-based subscription. Returns fullUser if it will trigger promotion."
                    }
                }
            },
            "ChartTemplate": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "bdf2efee-815e-4eb7-9e1e-c42d516baf29",
                        "description": "ID of app"
                    },
                    "jsOpts": {
                        "type": "object",
                        "properties": {},
                        "description": "Visualization state from client as a string json value. Can include language, theme, viewState etc."
                    },
                    "outDpi": {
                        "type": "integer",
                        "example": 96,
                        "description": "outDpi of chart"
                    },
                    "outZoom": {
                        "type": "number",
                        "example": 1,
                        "description": "outZoom of chart"
                    },
                    "patches": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Soft property changes on chart"
                    },
                    "sheetId": {
                        "type": "string",
                        "example": "bdf2efee-815e-4eb7-9e1e-asdfasdfasdf",
                        "description": "sheetId of app"
                    },
                    "widthPx": {
                        "type": "integer",
                        "example": 1584,
                        "description": "widthPx of chart"
                    },
                    "heightPx": {
                        "type": "integer",
                        "example": 587,
                        "description": "heightPx of chart"
                    },
                    "objectId": {
                        "type": "string",
                        "example": "167f3e67-ff3b-4ead-a09e-e8cc81d8ad78",
                        "description": "ID of object"
                    },
                    "objectDef": {
                        "type": "object",
                        "properties": {},
                        "description": "Session chart object definition"
                    }
                },
                "description": "If the template type is not \"chart\", this can be null. Otherwise, the following properties are required: appId, sheetId, objectId, widthPx, heightPx, language. The following properties are optional: outZoom, outDpi"
            },
            "EmailAddressRecipientPersist": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "format": "email",
                        "example": "abc@xyz.com",
                        "description": "Email of recipient (external user)."
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts."
                    },
                    "taskRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskRecipientError"
                        }
                    }
                },
                "description": "recipient object model that is directly persisted in the DB"
            },
            "EmailComposition": {
                "type": "object",
                "properties": {
                    "body": {
                        "type": "string",
                        "example": "report body string"
                    },
                    "subject": {
                        "type": "string",
                        "example": "report subject"
                    }
                },
                "x-omitempty": false
            },
            "EncryptedProperty": {
                "type": "object",
                "properties": {
                    "value": {
                        "x-go-type": {
                            "type": "[]byte",
                            "hints": {
                                "kind": "primitive"
                            },
                            "embedded": true
                        }
                    },
                    "cipher": {
                        "type": "string"
                    }
                },
                "description": "Encrypted property in DB"
            },
            "GroupIDRecipientPersist": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "example": "group1",
                        "description": "Group ID of recipient."
                    },
                    "enabledByUser": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts, set by api calls."
                    },
                    "enabledBySystem": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts, set by external settings."
                    },
                    "taskGroupRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskGroupRecipientError"
                        }
                    },
                    "alertingTaskGroupRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskGroupRecipientError"
                        }
                    }
                },
                "description": "recipient object model that is directly persisted in the DB"
            },
            "InsightURL": {
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "successful",
                            "failed"
                        ],
                        "type": "string",
                        "description": "the status of the creation for this insight URL"
                    },
                    "directURL": {
                        "type": "string"
                    },
                    "insightID": {
                        "type": "string"
                    },
                    "resourceID": {
                        "type": "string",
                        "description": "an identifier for the object within the template that this insight link points to"
                    },
                    "templateID": {
                        "type": "string",
                        "description": "an identifier for the template that this insight link points to",
                        "x-qlik-deprecated": true
                    },
                    "fallbackURL": {
                        "type": "string"
                    }
                },
                "description": "In case of multiple insight urls for multi-sheet sharing (or subsequent multi types) this defines those URLs and a mapping to the correct object."
            },
            "MultiSheetTemplate": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "bdf2efee-815e-4eb7-9e1e-c42d516baf29",
                        "description": "ID of app"
                    },
                    "jsOpts": {
                        "type": "object",
                        "properties": {},
                        "description": "Sheet state from client as a string json value. Can include language, theme, viewState etc."
                    },
                    "sheetId": {
                        "type": "string",
                        "example": "39a671a-5f58-468c-bb49-dff933294774",
                        "description": "ID of sheet"
                    },
                    "widthPx": {
                        "type": "integer",
                        "example": 1584,
                        "description": "widthPx of chart, must be 0 or omitted for autofit."
                    },
                    "heightPx": {
                        "type": "integer",
                        "example": 587,
                        "description": "heightPx of chart, must be 0 or omitted for autofit."
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "example": false,
                        "description": "optional value to indicate that this sheet is private",
                        "x-omitempty": true
                    },
                    "sheetName": {
                        "type": "string",
                        "example": "My new sheet",
                        "description": "an optional name for the sheet",
                        "x-omitempty": true
                    },
                    "jsOptsById": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {},
                            "description": "Visualizations state from client as a string json value. Can include language, theme, viewState etc."
                        }
                    },
                    "resizeType": {
                        "enum": [
                            "none",
                            "fit",
                            "autofit"
                        ],
                        "type": "string",
                        "description": "Currently only autofit is supported.\nIf omitted, autofit is the default.\nThe type of resize to be performed:\n  - none is used to export a visualization, sheet as is (e.g. normal size), regardless its size. This may result in cropping.\n  - autofit automatically fits the visualization, sheet into the output size (i.e. A4, A3 etc.). Any provided resizeData parameter will be ignored for this configuration.\n  - fit fits the visualization, sheet into the area specified in resizeData. The content will be rescaled to fit in that area.\n"
                    },
                    "patchesById": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            },
                            "description": "Soft property changes on charts"
                        }
                    }
                }
            },
            "RecipientsPersist": {
                "type": "object",
                "properties": {
                    "DLUsers": {
                        "type": "array"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserIDRecipientPersist"
                        }
                    },
                    "DLGroups": {
                        "type": "array"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupIDRecipientPersist"
                        }
                    },
                    "emailAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddressRecipientPersist"
                        }
                    }
                },
                "description": "List of persisted recipients."
            },
            "RetentionPolicy": {
                "type": "object",
                "properties": {
                    "historySize": {
                        "type": "integer",
                        "example": 10,
                        "description": "Number indicating the size of the window which stores the history. For Chart monitoring, the size should be 10."
                    },
                    "overrideInterval": {
                        "type": "string",
                        "default": "FREQ=DAILY;INTERVAL=1",
                        "example": "FREQ=DAILY;INTERVAL=1",
                        "description": "Using RFC-5545 provide the time interval in which the previous generated can be overridden with the newly generated report. For Chart monitoring, interval should be FREQ=DAILY;INTERVAL=1"
                    }
                }
            },
            "Selection": {
                "type": "object",
                "required": [
                    "isNumeric",
                    "name",
                    "stateName",
                    "values"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isNumeric": {
                        "type": "boolean"
                    },
                    "stateName": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "displayValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SharingActionsTriggerCreateRequest": {
                "type": "object",
                "required": [
                    "sharingTaskID"
                ],
                "properties": {
                    "sharingTaskID": {
                        "type": "string",
                        "example": "a1b2c3d4f5"
                    }
                }
            },
            "SharingSettings": {
                "type": "object",
                "required": [
                    "enable-report-subscription",
                    "enable-reporting-template-subscription",
                    "enable-sharing"
                ],
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "example": "cgdsAumGmQ6l0Bi7CUKt9V8P_Y9GL0sC",
                        "readOnly": true,
                        "description": "These persisted sharing settings are only available for this tenant. Extracted from request JWT."
                    },
                    "maxRecipients": {
                        "type": "number",
                        "example": 200,
                        "readOnly": true,
                        "description": "Maximum number of recipients when creating a sharing task"
                    },
                    "enable-sharing": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether API endpoints for sharing are enabled"
                    },
                    "reportSubscriptionStatus": {
                        "enum": [
                            "none",
                            "enabling",
                            "disabling"
                        ],
                        "type": "string",
                        "example": "disabling",
                        "readOnly": true,
                        "description": "This indicates that there is an ongoing operation to either disable or enable the report subscription feature. none means that no such operation is ongoing. enabling/disabling means that system is currently enabling/disabling the feature"
                    },
                    "maxSubscriptionRecipients": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Max Recipients accepted when creating a new subscription (excluding the owner)",
                        "x-omitempty": true
                    },
                    "enable-report-subscription": {
                        "type": "boolean",
                        "example": true,
                        "description": "true if report-subscription feature is enabled for this tenant"
                    },
                    "reporting-service-license-status": {
                        "enum": [
                            "enabled",
                            "disabled"
                        ],
                        "type": "string",
                        "description": "Whether the license for the tenant has the reportingService feature enabled.",
                        "x-omitempty": true
                    },
                    "reportSubscriptionStatusChangeTime": {
                        "type": "string",
                        "example": "2020-09-02T13:44:33Z",
                        "readOnly": true,
                        "description": "UTC timestamp of the most recent change of reportSubscriptionStatus. If there has not been any such change, this is the timestamp of the initial creation of the record."
                    },
                    "reportingTemplateSubscriptionStatus": {
                        "enum": [
                            "none",
                            "enabling",
                            "disabling"
                        ],
                        "type": "string",
                        "example": "disabling",
                        "readOnly": true,
                        "description": "This indicates that there is an ongoing operation to either disable or enable the reporting template subscription feature. none means that no such operation is ongoing. enabling/disabling means that system is currently enabling/disabling the feature"
                    },
                    "enable-reporting-template-subscription": {
                        "type": "boolean",
                        "example": true,
                        "description": "true if reporting-template-subscription feature is enabled for this tenant"
                    },
                    "reportingTemplateSubscriptionStatusChangeTime": {
                        "type": "string",
                        "example": "2020-09-02T13:44:33Z",
                        "readOnly": true,
                        "description": "UTC timestamp of the most recent change of reportSubscriptionStatus. If there has not been any such change, this is the timestamp of the initial creation of the record."
                    }
                }
            },
            "SharingSettingsPatchCompliant": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/enable-sharing",
                            "/enable-report-subscription",
                            "/enable-reporting-template-subscription"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to be used for this operation."
                    }
                }
            },
            "SharingSettingsPatchCompliantList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/SharingSettingsPatchCompliant"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/enable-sharing",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/enable-sharing",
                        "value": false
                    },
                    {
                        "op": "replace",
                        "path": "/enable-report-subscription",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/enable-report-subscription",
                        "value": false
                    },
                    {
                        "op": "replace",
                        "path": "/enable-reporting-template-subscription",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/enable-reporting-template-subscription",
                        "value": false
                    }
                ],
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
            },
            "SharingTaskPatchRequestCompliantList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/SharingTaskRecurringPatchRequestCompliant"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "new name"
                    },
                    {
                        "op": "replace",
                        "path": "/tags",
                        "value": [
                            "tag1",
                            "tag2"
                        ]
                    },
                    {
                        "op": "replace",
                        "path": "/tags",
                        "value": "new-tag"
                    },
                    {
                        "op": "replace",
                        "path": "/tags",
                        "value": "deleted-tag"
                    },
                    {
                        "op": "replace",
                        "path": "/ownerId",
                        "value": "new-owner"
                    },
                    {
                        "op": "replace",
                        "path": "/enabled",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/description",
                        "value": "new-description"
                    }
                ]
            },
            "SharingTaskRecurringCreateRequest": {
                "type": "object",
                "required": [
                    "name",
                    "state",
                    "templates",
                    "type"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Example Sharing Task",
                        "minLength": 1,
                        "description": "Name of this sharing task"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "used to assign sharing task to a collection bucket (tags)"
                    },
                    "type": {
                        "enum": [
                            "chart-monitoring",
                            "chart-sharing",
                            "sheet-sharing",
                            "template-sharing"
                        ],
                        "type": "string",
                        "description": "the sharing task resource type."
                    },
                    "state": {
                        "$ref": "#/components/schemas/State"
                    },
                    "appName": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the app associated (through the templates) with this sharing task",
                        "x-qlik-deprecated": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Toggle for enabling sharing task."
                    },
                    "message": {
                        "type": "string",
                        "example": "Look at the presentation.",
                        "maxLength": 280,
                        "description": "Message along with sharing task"
                    },
                    "spaceId": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Space ID of the sharing task"
                    },
                    "subType": {
                        "enum": [
                            "pdf",
                            "pptx",
                            "xlsx"
                        ],
                        "type": "string",
                        "description": "the sharing task resource mashup sub type."
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/Trigger"
                    },
                    "startTime": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Time to start capturing the history"
                    },
                    "templates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TemplateResult"
                        }
                    },
                    "expiration": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the termination of the task"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/SharingTaskRecurringRecipients"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Description of the sharing task"
                    },
                    "emailContent": {
                        "$ref": "#/components/schemas/EmailComposition"
                    },
                    "retentionPolicy": {
                        "$ref": "#/components/schemas/RetentionPolicy"
                    },
                    "scheduleOptions": {
                        "$ref": "#/components/schemas/ScheduleOptions"
                    },
                    "dataConnectionID": {
                        "type": "string",
                        "description": "the id of the data connection"
                    },
                    "sharePointFolder": {
                        "type": "string",
                        "description": "the SharePoint folder to upload the report to"
                    },
                    "executeOnCreation": {
                        "type": "boolean",
                        "default": true,
                        "description": "making this true will execute the sharing task upon creation regardless of next trigger"
                    },
                    "transportChannels": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "email",
                                "sharepoint"
                            ],
                            "type": "string"
                        },
                        "description": "the transport type for the report"
                    },
                    "distributionListId": {
                        "type": "string",
                        "example": "mpoXaH22_vLR1pStfI7oUdGya1nKK24",
                        "description": "the id of the distribution list associated to the app"
                    }
                }
            },
            "SharingTaskRecurringListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/StandardListResponseProps"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/ListLinks"
                            },
                            "recipients": {
                                "$ref": "#/components/schemas/SharingTaskRecurringRecipients"
                            },
                            "sharingTasks": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharingTaskRecurringResponse"
                                },
                                "description": "Gets a list of recurring sharing tasks."
                            }
                        }
                    }
                ]
            },
            "SharingTaskRecurringPatchRequestCompliant": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed"
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/tags",
                            "/ownerId",
                            "/enabled",
                            "/description",
                            "/scheduleOptions",
                            "/templates",
                            "/recipients",
                            "/recipient",
                            "/sharePointFolder",
                            "/dataConnectionID",
                            "/transportChannels"
                        ],
                        "type": "string",
                        "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902"
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to be used for this operation."
                    }
                }
            },
            "SharingTaskRecurringPersist": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gets the sharing task resource identifier.",
                        "x-go-custom-tag": "bson:\"_id\""
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of this sharing task"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "enum": [
                            "chart-monitoring",
                            "chart-sharing",
                            "sheet-sharing",
                            "template-sharing"
                        ],
                        "type": "string",
                        "description": "The sharing task resource type"
                    },
                    "appId": {
                        "type": "string",
                        "description": "ID of the app associated (through the templates) with this sharing task"
                    },
                    "owner": {
                        "type": "string",
                        "example": "pXVNKqotgEMwbKwhz2agPE4yFelnPcWO",
                        "description": "User id of owner of the sharing task"
                    },
                    "state": {
                        "$ref": "#/components/schemas/State"
                    },
                    "tenant": {
                        "type": "string",
                        "example": "_mpoXaH22_vLR1pStfI7oUdGya1nKK24",
                        "description": "Tenant of the sharing task"
                    },
                    "appName": {
                        "type": "string",
                        "description": "Name of the app associated (through the templates) with this sharing task"
                    },
                    "lastRun": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "The last execution start date time timestamp of the task"
                    },
                    "message": {
                        "type": "string",
                        "example": "Look at the presentation.",
                        "maxLength": 280,
                        "description": "Message along with sharing task"
                    },
                    "spaceId": {
                        "type": "string",
                        "description": "spaceId of the app associated to this task definition"
                    },
                    "subType": {
                        "enum": [
                            "pdf",
                            "pptx",
                            "xlsx"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "Mashup subType of sharing task"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/Trigger"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "ID of creator",
                        "x-omitempty": false
                    },
                    "insightID": {
                        "type": "string",
                        "description": "The identifier for the insight URLs in this sharing task. Needed to remove the permanent insight upon task deletion. (currently not used in multi-sheet scenarios)"
                    },
                    "ownerName": {
                        "type": "string",
                        "example": "Harley Kiffe",
                        "description": "User name of owner of the sharing task"
                    },
                    "startTime": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Time to start capturing the history"
                    },
                    "templates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TemplateResult"
                        }
                    },
                    "thumbnail": {
                        "type": "string"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "ID of a user that updated this task last",
                        "x-omitempty": false
                    },
                    "expiration": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Time for the termination of the task"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/RecipientsPersist"
                    },
                    "statusCode": {
                        "enum": [
                            "CHART_NOT_FOUND",
                            "APP_NOT_FOUND",
                            "STORY_NOT_FOUND",
                            "SHEET_NOT_FOUND",
                            "ENGINE_POD_NOT_AVAILABLE",
                            "APP_FORBIDDEN",
                            "CHART_TYPE_NOT_ALLOWED",
                            "FAILED",
                            "DELETING",
                            "IN_PROGRESS",
                            "VALID",
                            "MAX_FAILURES_REACHED",
                            "BOOKMARK_NOT_FOUND",
                            "CANCELLING",
                            "CANCELLED",
                            "REPORTING_CONSUMPTION_EXCEEDED",
                            "REPORTING_CAPABILITY_NOT_FOUND"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "the status of this recurring sharing task"
                    },
                    "taskErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskError"
                        }
                    },
                    "templateId": {
                        "type": "string",
                        "example": "da5825325dc9a0dd0260af9",
                        "readOnly": true,
                        "description": "ID of unique template"
                    },
                    "dateCreated": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the task"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this sharing task"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp of the most recent update."
                    },
                    "statusLabel": {
                        "type": "string",
                        "readOnly": true,
                        "description": "error message indicating the underlying failure"
                    },
                    "emailContent": {
                        "$ref": "#/components/schemas/EmailComposition"
                    },
                    "enabledByUser": {
                        "type": "boolean",
                        "example": true,
                        "description": "Toggle for enabling sharing task (user level). Example: user chooses to enable/ disable task."
                    },
                    "encryptedState": {
                        "$ref": "#/components/schemas/EncryptedProperty"
                    },
                    "byokMigrationId": {
                        "type": "string",
                        "description": "internal identifier used when migrating keys"
                    },
                    "enabledBySystem": {
                        "type": "boolean",
                        "example": true,
                        "description": "Toggle for enabling sharing task (system level). Example: when task owner gets enabled/ disabled."
                    },
                    "retentionPolicy": {
                        "$ref": "#/components/schemas/RetentionPolicy"
                    },
                    "scheduleOptions": {
                        "$ref": "#/components/schemas/ScheduleOptions"
                    },
                    "selectionErrors": {
                        "type": "object",
                        "properties": {},
                        "description": "reporting service returns rendering errors for missing selections"
                    },
                    "dataConnectionID": {
                        "type": "string",
                        "description": "the id of the data connection"
                    },
                    "hasSectionAccess": {
                        "type": "boolean",
                        "description": "true if the associated app has section access enabled"
                    },
                    "insightDirectURL": {
                        "type": "string",
                        "description": "The direct insights URL for the first template of this sharing task. (currently not used in multi-sheet scenarios)"
                    },
                    "multiInsightURLs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InsightURL"
                        },
                        "description": "Contains one or more insight links. Currently only used in multi sheet scenarios. Sharing will ensure that the persisted sort order is aligned to the order of sheets provided."
                    },
                    "nextScheduledRun": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Time for the next scheduled run"
                    },
                    "reportProperties": {
                        "type": "object",
                        "properties": {}
                    },
                    "sharePointFolder": {
                        "type": "string",
                        "description": "the SharePoint folder to upload the report to"
                    },
                    "executeOnCreation": {
                        "type": "boolean",
                        "description": "making this true will execute the sharing task upon creation regardless of next trigger"
                    },
                    "lastExecutionDate": {
                        "type": "string",
                        "example": "2019-10-15T16:09:01.492Z",
                        "readOnly": true,
                        "description": "The last execution end date time timestamp of the task"
                    },
                    "transportChannels": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "email",
                                "sharepoint"
                            ],
                            "type": "string"
                        },
                        "description": "the transport type for the report"
                    },
                    "distributionListId": {
                        "type": "string",
                        "example": "vXVNKqotgEMwbKwhz2agPE4yFelnPcWX",
                        "description": "the id of the distribution list associated to the app"
                    },
                    "encryptedTemplates": {
                        "$ref": "#/components/schemas/EncryptedProperty"
                    },
                    "insightFallbackURL": {
                        "type": "string",
                        "description": "The insights fallback URL for the first template of this sharing task. (currently not used in multi-sheet scenarios)"
                    },
                    "encryptedEmailContent": {
                        "$ref": "#/components/schemas/SharingTaskRecurringPersist_encryptedEmailContent"
                    },
                    "failedExecutionsCount": {
                        "type": "integer",
                        "description": "the number of consecutive failed executions for all recipeints. This is reset on a successful execution for at least one recipient"
                    },
                    "failedVerificationsCount": {
                        "type": "integer",
                        "description": "the number of failed verifications. This is reset on a successful verification"
                    },
                    "isCandidateForVerification": {
                        "type": "boolean",
                        "description": "true if the sharing task is a candidate for verification"
                    },
                    "persistentBookmarkIncludeVariables": {
                        "type": "boolean",
                        "description": "flag sent by UI to configure the persistent bookmark to use variables"
                    }
                },
                "description": "Type of object stored in the database. Required fields mean that property cannot be null"
            },
            "SharingTaskRecurringPersist_encryptedEmailContent": {
                "type": "object",
                "properties": {
                    "body": {
                        "$ref": "#/components/schemas/EncryptedProperty"
                    },
                    "subject": {
                        "$ref": "#/components/schemas/EncryptedProperty"
                    }
                },
                "description": "the subject and body content for the email to send on report subscriptions"
            },
            "SharingTaskRecurringRecipients": {
                "type": "object",
                "properties": {
                    "DLUsers": {
                        "type": "array"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserIDRecipient"
                        }
                    },
                    "DLGroups": {
                        "type": "array"
                    },
                    "emailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email",
                            "example": "abc@xyz.com",
                            "description": "Email of recipient (external user)."
                        }
                    }
                },
                "description": "List of recipients. An internal recipient is represented by their user id."
            },
            "SharingTaskRecurringResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SharingTaskRecurringPersist"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "links": {
                                "$ref": "#/components/schemas/Links"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "true if the sharing task is enabled"
                            },
                            "latestExecutionURL": {
                                "type": "string",
                                "description": "URL to querying the latest execution tied to this sharing task"
                            },
                            "latestExecutionFilesURL": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "URL to querying the files of the latest execution tied to this sharing task"
                            }
                        }
                    }
                ],
                "description": "Whatever is persisted in the db + links"
            },
            "SheetTemplate": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "bdf2efee-815e-4eb7-9e1e-c42d516baf29",
                        "description": "ID of app"
                    },
                    "jsOpts": {
                        "type": "object",
                        "properties": {},
                        "description": "Sheet state from client as a string json value. Can include language, theme, viewState etc."
                    },
                    "sheetId": {
                        "type": "string",
                        "example": "39a671a-5f58-468c-bb49-dff933294774",
                        "description": "ID of sheet"
                    },
                    "widthPx": {
                        "type": "integer",
                        "example": 1584,
                        "description": "widthPx of chart"
                    },
                    "heightPx": {
                        "type": "integer",
                        "example": 587,
                        "description": "heightPx of chart"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "example": false,
                        "description": "optional value to indicate that this sheet is private (used in multi-sheet sharing)",
                        "x-omitempty": true,
                        "x-qlik-deprecated": true
                    },
                    "sheetName": {
                        "type": "string",
                        "example": "My new sheet",
                        "description": "an optional name for the sheet (used in multi-sheet sharing)",
                        "x-omitempty": true,
                        "x-qlik-deprecated": true
                    },
                    "jsOptsById": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {},
                            "description": "Visualizations state from client as a string json value. Can include language, theme, viewState etc."
                        }
                    },
                    "patchesById": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            },
                            "description": "Soft property changes on charts"
                        }
                    }
                },
                "x-qlik-deprecated": true
            },
            "State": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Selected fields that led to discovery of monitored Insight Advisor chart"
                    },
                    "queryItems": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Query that led to discovery of monitored Insight Advisor chart"
                    },
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Selection"
                        }
                    }
                },
                "description": "State of the selections and jsOpts"
            },
            "StoryTemplate": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "example": "bdf2efee-815e-4eb7-9e1e-c42d516baf29",
                        "description": "ID of app"
                    },
                    "storyId": {
                        "type": "string",
                        "example": "39a671a-5f58-468c-bb49-dff933294774",
                        "description": "ID of story"
                    }
                }
            },
            "TaskError": {
                "type": "object",
                "properties": {
                    "value": {
                        "enum": [
                            "OWNER_DISABLED",
                            "OWNER_ACCESS",
                            "OWNER_LICENSE",
                            "APP_DELETED",
                            "NO_RECIPIENTS",
                            "PARTIAL_ACCESS",
                            "ORPHAN",
                            "PARTIAL_SENT",
                            "FATAL_SENT_ERROR",
                            "SECTION_ACCESS_MODIFIED",
                            "INVALID_DISTRIBUTION_LIST",
                            "MAX_DL_RECIPIENTS_LIMIT_REACHED",
                            "TEMPLATE_NOT_FOUND",
                            "REPORTING_BOOKMARK_NOT_FOUND",
                            "DATA_CONNECTION_NOT_FOUND",
                            "INVALID_SHAREPOINT_DIRECTORY",
                            "GENERIC_FILE_UPLOAD_ERROR",
                            "DISABLED_DUE_TO_OWNERSHIP_CHANGE",
                            "REPORTING_CONSUMPTION_EXCEEDED",
                            "REPORTING_CAPABILITY_NOT_FOUND",
                            "EXECUTION_TIME_OUT",
                            "OWNER_INSUFFICIENT_PERMISSIONS",
                            "MAX_UNIQUE_REPORTS_LIMIT_REACHED",
                            "MISSING_DISTRIBUTION_LIST",
                            "SECTION_ACCESS_NOT_SUPPORTED"
                        ],
                        "type": "string",
                        "description": "Identifier for type of error occurring on sharing task"
                    },
                    "timestamp": {
                        "type": "string",
                        "example": "2019-10-15T16:07:01.492Z",
                        "description": "Timestamp for the creation of the error"
                    }
                }
            },
            "TemplatePersist": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "enum": [
                            "file",
                            "chart",
                            "story",
                            "sheet",
                            "multi-sheet",
                            "excel",
                            "pixel-perfect"
                        ],
                        "type": "string",
                        "example": "file"
                    },
                    "subType": {
                        "enum": [
                            "image",
                            "snapshot",
                            "pdf",
                            "pptx",
                            "xlsx",
                            "qpxp"
                        ],
                        "type": "string",
                        "default": "image"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "fileName to be used when generating the report"
                    },
                    "chartData": {
                        "$ref": "#/components/schemas/ChartTemplate"
                    },
                    "fileAlias": {
                        "type": "string",
                        "description": "fileAlias provide an opaqueId for the client which can be used to filter and select the report generated"
                    },
                    "sheetData": {
                        "$ref": "#/components/schemas/SheetTemplate"
                    },
                    "storyData": {
                        "$ref": "#/components/schemas/StoryTemplate"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "da5825325dc9a0dd0260af9",
                        "readOnly": true,
                        "description": "ID of unique template",
                        "x-qlik-deprecated": true
                    },
                    "fileTimeStamp": {
                        "enum": [
                            "yyyy-MM-dd",
                            "yyyy-MM-dd_HH-mm",
                            "yyyyMMdd",
                            "yyyyMMdd_HH-mm"
                        ],
                        "type": "string",
                        "description": "file name timestamp to be used when generating the report"
                    },
                    "multiSheetData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MultiSheetTemplate"
                        },
                        "description": "array of sheet data for multi-sheet type template"
                    }
                },
                "description": "Depending on the value of type, sharing service will internally validate a specific property regarding its data. Type \"file\" validates property \"fileData\", type \"chart\" validates property \"chartData\", type \"story\" validates property \"storyData\". Check description of each of the models for their required properties."
            },
            "TemplateResult": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TemplatePersist"
                    },
                    {}
                ]
            },
            "Trigger": {
                "type": "object",
                "required": [
                    "recurrence"
                ],
                "properties": {
                    "recurrence": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "description": "List of RRULE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND, UNTIL lines are not allowed in this field; event start and end times are specified in the start and end fields. RDATE and EXDATE lines are not currently supported. EXRULE is not supported since it is deprecated by RFC5545. This field is omitted for single events."
                    },
                    "chronosJobID": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The chronosJobId which triggers the sharing task",
                        "x-omitempty": false
                    },
                    "executeOnAppReload": {
                        "type": "boolean",
                        "default": true,
                        "description": "Toggle for executing sharing task on app reload."
                    },
                    "executionHistoryInterval": {
                        "enum": [
                            "minutely",
                            "hourly",
                            "daily",
                            "weekly",
                            "monthly",
                            "quarterly",
                            "yearly"
                        ],
                        "type": "string",
                        "description": "To prevent overflow in the history, setting this to daily store the chart of a previous day in the history and maintain the live version with the tag latest."
                    }
                }
            },
            "UserIDRecipientPersist": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "example": "1b263bs8m0mm_s21s3f",
                        "description": "User ID of recipient (internal user)."
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "addedIndividually",
                            "group1",
                            "group2"
                        ],
                        "description": "A list of associated groups. If a user is added individually the \"addedIndividually\" pseudo group is included"
                    },
                    "subscribed": {
                        "type": "boolean",
                        "description": "Whether this user is subscribed to alerts in this task"
                    },
                    "enabledByUser": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts, set by api calls."
                    },
                    "enabledBySystem": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this recipient can receive alerts, set by external settings."
                    },
                    "taskRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskRecipientError"
                        }
                    },
                    "alertingTaskRecipientErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AlertingTaskRecipientError"
                        }
                    }
                },
                "description": "recipient object model that is directly persisted in the DB"
            },
            "ActionName": {
                "enum": [
                    "change_owner",
                    "create",
                    "read",
                    "update",
                    "delete",
                    "publish"
                ],
                "type": "string",
                "description": "The supported actions for user-created spaces."
            },
            "Assignment": {
                "required": [
                    "id",
                    "type",
                    "assigneeId",
                    "roles",
                    "spaceId",
                    "tenantId",
                    "links"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/AssignmentType"
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "space": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleType"
                        },
                        "description": "The roles assigned to a user or group. Must not be empty."
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique identifier for the space."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique identifier for the tenant."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time when the space was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The ID of the user who created the assignment."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time when the space was updated."
                    },
                    "updatedBy": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The ID of the user who updated the assignment."
                    },
                    "assigneeId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The userId or groupId based on the type."
                    }
                }
            },
            "AssignmentCreate": {
                "required": [
                    "type",
                    "assigneeId",
                    "roles"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/AssignmentType"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleType"
                        },
                        "description": "The roles assigned to the assigneeId. For the full list of roles assignable in this space type, call `GET /spaces/{spaceId}` and inspect the `meta.assignableRoles` object."
                    },
                    "assigneeId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The userId or groupId based on the type."
                    }
                }
            },
            "Assignments": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Assignment"
                        }
                    },
                    "meta": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "count"
                        ],
                        "properties": {
                            "count": {
                                "type": "integer",
                                "description": "The total number of assignments matching the current filter."
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                }
            },
            "AssignmentType": {
                "enum": [
                    "user",
                    "group"
                ],
                "type": "string",
                "description": "The type of assignment such as user or group"
            },
            "AssignmentUpdate": {
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleType"
                        },
                        "description": "The roles assigned to the assigneeId. For the full list of roles assignable in this space type, call `GET /spaces/{spaceId}` and inspect the `meta.assignableRoles` object."
                    }
                }
            },
            "RoleType": {
                "enum": [
                    "consumer",
                    "contributor",
                    "dataconsumer",
                    "datapreview",
                    "facilitator",
                    "operator",
                    "producer",
                    "publisher",
                    "basicconsumer",
                    "codeveloper"
                ],
                "type": "string",
                "description": "Supported roles by space type:\n- Shared: codeveloper, consumer, dataconsumer, facilitator, producer\n- Managed: consumer, contributor, dataconsumer, facilitator, publisher, basicconsumer\n- Data: consumer, dataconsumer, datapreview, facilitator, operator, producer, publisher\n"
            },
            "SharedSpaceRoleType": {
                "enum": [
                    "facilitator",
                    "consumer",
                    "producer",
                    "dataconsumer",
                    "codeveloper"
                ],
                "type": "string",
                "description": "The supported roles for Shared spaces."
            },
            "Space": {
                "required": [
                    "id",
                    "name",
                    "tenantId",
                    "links"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "A unique identifier for the space, for example, 62716f4b39b865ece543cd45."
                    },
                    "meta": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "actions",
                            "roles",
                            "assignableRoles"
                        ],
                        "properties": {
                            "roles": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RoleType"
                                },
                                "description": "The list of roles assigned to the current user in this space."
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ActionName"
                                },
                                "description": "The list of actions allowed by the current user in this space."
                            },
                            "assignableRoles": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RoleType"
                                },
                                "example": {
                                    "$ref": "#/components/schemas/SharedSpaceRoleType"
                                },
                                "description": "The list of roles that could be assigned in this space."
                            }
                        },
                        "description": "Information about the space settings."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the space. Personal spaces do not have a name."
                    },
                    "type": {
                        "enum": [
                            "shared",
                            "managed",
                            "data"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of space such as shared, managed, and so on."
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self",
                            "assignments"
                        ],
                        "properties": {
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "assignments": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The ID for the space owner."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The ID for the tenant, for example, xqGQ0k66vSR8f9G7J-vYtHZQkiYrCpct."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time when the space was created."
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The ID of the user who created the space."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time when the space was updated."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the space. Personal spaces do not have a description."
                    }
                },
                "description": "A space is a security context simplifying the management of access control by allowing users to control it on the containers instead of on the resources themselves."
            },
            "SpaceCreate": {
                "required": [
                    "name",
                    "type"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Finance (dev)",
                        "pattern": "^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$",
                        "maxLength": 256,
                        "description": "The name of the space. Personal spaces do not have a name."
                    },
                    "type": {
                        "enum": [
                            "shared",
                            "managed",
                            "data"
                        ],
                        "type": "string",
                        "example": "shared",
                        "description": "The type of space such as shared, managed, and so on."
                    },
                    "description": {
                        "type": "string",
                        "example": "Development space for users building apps for the Finance team.",
                        "description": "The description of the space. Personal spaces do not have a description."
                    }
                }
            },
            "SpacePatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "The operation to be performed."
                        },
                        "path": {
                            "enum": [
                                "/name",
                                "/ownerId",
                                "/description"
                            ],
                            "type": "string",
                            "description": "Field of space to be patched (updated)."
                        },
                        "value": {
                            "type": "string",
                            "description": "The value to be used within the operations.\n- name: The name (string) of space of maxLength 256 of pattern: ^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$\n- description: The description (string) of the space. Personal spaces do not have a description.\n- ownerId: The user ID in uid format (string) of the space owner.\n"
                        }
                    },
                    "description": "A JSONPatch document as defined by RFC 6902."
                }
            },
            "Spaces": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Space"
                        }
                    },
                    "meta": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "count"
                        ],
                        "properties": {
                            "count": {
                                "type": "integer",
                                "description": "The total number of spaces matching the current filter."
                            },
                            "personalSpace": {
                                "type": "object",
                                "readOnly": true,
                                "required": [
                                    "resourceType",
                                    "actions"
                                ],
                                "properties": {
                                    "actions": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ActionName"
                                        },
                                        "description": "The list of actions allowed by the current user in this space."
                                    },
                                    "resourceType": {
                                        "type": "string",
                                        "description": "resource type"
                                    }
                                },
                                "description": "The meta related to personal space when applicable."
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                }
            },
            "SpaceType": {
                "enum": [
                    "shared",
                    "managed",
                    "data"
                ],
                "type": "string",
                "readOnly": true,
                "description": "The name of the type."
            },
            "SpaceTypes": {
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SpaceType"
                        },
                        "example": [
                            "data",
                            "shared",
                            "managed"
                        ],
                        "readOnly": true
                    }
                },
                "description": "The distinct types of spaces (shared, managed, and so on)."
            },
            "SpaceUpdate": {
                "properties": {
                    "name": {
                        "type": "string",
                        "pattern": "^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$",
                        "maxLength": 256,
                        "description": "The name of the space."
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The user ID of the space owner."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the space. Personal spaces do not have a description."
                    }
                }
            },
            "detailResponse": {
                "type": "object",
                "properties": {
                    "ID": {
                        "type": "string",
                        "description": "Identifier"
                    },
                    "Name": {
                        "type": "string",
                        "description": "File name of the file uploaded by the user."
                    },
                    "Size": {
                        "type": "string",
                        "description": "Size of resource (in bytes)."
                    },
                    "Expires": {
                        "type": "string",
                        "description": "Datetime-stamp when the resource expired (in UTC)."
                    },
                    "CreatedAt": {
                        "type": "string",
                        "description": "Datetime-stamp when the resource was created (in UTC)."
                    },
                    "CreatorID": {
                        "type": "string",
                        "description": "Identifier for the subject / resource creator."
                    },
                    "UpdatedAt": {
                        "type": "string",
                        "description": "Datetime-stamp when the resource was updated (in UTC)."
                    },
                    "TTLSeconds": {
                        "type": "integer",
                        "description": "Time-to-live in seconds."
                    }
                }
            },
            "Tenant": {
                "type": "object",
                "required": [
                    "name",
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                        "readOnly": true,
                        "description": "The unique tenant identifier.",
                        "x-qlik-visibility": "public"
                    },
                    "name": {
                        "type": "string",
                        "example": "QlikTenant",
                        "description": "The display name of the tenant."
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "example": "http://foo.example/api/v1/tenants/TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                                        "description": "URL that defines the resource."
                                    }
                                },
                                "description": "A link to this tenant."
                            }
                        }
                    },
                    "status": {
                        "enum": [
                            "active",
                            "disabled",
                            "deleted"
                        ],
                        "type": "string",
                        "description": "The status of the tenant."
                    },
                    "created": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true,
                        "description": "The timestamp for when the tenant record was created (1970-01-01T00:00:00.001Z for static tenants)."
                    },
                    "hostnames": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "foo.example"
                        },
                        "description": "List of case insensitive hostnames that are mapped to the tenant. The first record maps to the display name and the subsequent entries are aliases."
                    },
                    "datacenter": {
                        "type": "string",
                        "example": "us-east-1",
                        "description": "The datacenter where the tenant is located."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true,
                        "description": "The timestamp for when the tenant record was last updated (1970-01-01T00:00:00.001Z for static tenants)."
                    },
                    "createdByUser": {
                        "type": "string",
                        "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy7A",
                        "description": "The user ID who created the tenant."
                    },
                    "enableAnalyticCreation": {
                        "type": "boolean",
                        "default": false
                    },
                    "autoAssignCreateSharedSpacesRoleToProfessionals": {
                        "type": "boolean",
                        "default": true
                    },
                    "autoAssignDataServicesContributorRoleToProfessionals": {
                        "type": "boolean",
                        "default": true
                    },
                    "autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals": {
                        "type": "boolean",
                        "default": true
                    }
                }
            },
            "TenantCreationRequest": {
                "type": "object",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "example": "us-east-1",
                        "description": "The datacenter where the tenant is located.\n\nSupported locations for commercial licenses:\n- `ap-northeast-1`: Japan (jp)\n- `ap-southeast-1`: Australia (ap)\n- `ap-southeast-2`: Singapore (sg)\n- `eu-central-1`: Germany (de)\n- `eu-west-1`: Ireland (eu)\n- `eu-west-2`: United Kingdom (uk)\n- `us-east-1`: United States of America (us)\n"
                    },
                    "licenseKey": {
                        "type": "string",
                        "example": 1234567890,
                        "description": "The signed license key of the license that will be associated with the created tenant."
                    }
                }
            },
            "TenantDeactivateRequest": {
                "type": "object",
                "properties": {
                    "purgeAfterDays": {
                        "type": "integer",
                        "default": 30,
                        "maximum": 90,
                        "minimum": 10,
                        "description": "Sets the number of days to purge the tenant after deactivation. Only available to OEMs."
                    }
                },
                "description": "A request to deactivate a tenant."
            },
            "TenantDeactivateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                        "readOnly": true,
                        "description": "The unique tenant identifier."
                    },
                    "status": {
                        "enum": [
                            "disabled"
                        ],
                        "type": "string",
                        "description": "The status of the tenant."
                    },
                    "estimatedPurgeDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-08-18T00:00:00.000Z",
                        "description": "The estimated date time of when tenant will be purged."
                    }
                },
                "description": "The result of tenant deactivation."
            },
            "TenantPatchErrors": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "code",
                                "title"
                            ],
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "example": "TENANTS-10",
                                    "description": "The error code."
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "type": "string",
                                            "example": "TENANTS-11",
                                            "description": "The error code."
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "The specified hostname is unavailable for use",
                                            "description": "Summary of the problem."
                                        }
                                    },
                                    "description": "Additional properties relating to the error."
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Invalid PATCH request",
                                    "description": "Summary of the problem."
                                },
                                "source": {
                                    "type": "object",
                                    "properties": {
                                        "pointer": {
                                            "type": "string",
                                            "example": "/hostnames/1",
                                            "description": "A JSON Pointer to the property that caused the error."
                                        },
                                        "parameter": {
                                            "type": "string",
                                            "description": "The URI query parameter that caused the error."
                                        }
                                    },
                                    "description": "References to the source of the error."
                                }
                            },
                            "description": "An error object."
                        }
                    }
                }
            },
            "TenantPatchSchema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "op",
                        "path",
                        "value"
                    ],
                    "properties": {
                        "op": {
                            "enum": [
                                "replace"
                            ],
                            "type": "string",
                            "description": "The operation to be performed."
                        },
                        "path": {
                            "enum": [
                                "/name",
                                "/hostnames/1",
                                "/autoAssignCreateSharedSpacesRoleToProfessionals",
                                "/autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals",
                                "/autoAssignDataServicesContributorRoleToProfessionals",
                                "/enableAnalyticCreation"
                            ],
                            "type": "string",
                            "description": "A JSON Pointer value that references a location within the target document where the operation is performed."
                        },
                        "value": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "boolean"
                                }
                            ],
                            "description": "The value to be used for this operation."
                        }
                    },
                    "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "Corp"
                    },
                    {
                        "op": "replace",
                        "path": "/hostnames/1",
                        "value": "example-tenant.us.qlikcloud.com"
                    },
                    {
                        "op": "replace",
                        "path": "/autoAssignCreateSharedSpacesRoleToProfessionals",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals",
                        "value": false
                    },
                    {
                        "op": "replace",
                        "path": "/autoAssignDataServicesContributorRoleToProfessionals",
                        "value": true
                    },
                    {
                        "op": "replace",
                        "path": "/enableAnalyticCreation",
                        "value": false
                    }
                ]
            },
            "theme": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "file": {
                        "type": "object",
                        "description": "The file that was uploaded with the theme."
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon to show in the client."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of this theme."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this theme (visualization, etc.)."
                    },
                    "author": {
                        "type": "string",
                        "description": "Author of the theme."
                    },
                    "userId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "license": {
                        "type": "string",
                        "description": "Under which license this theme is published."
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the theme."
                    },
                    "homepage": {
                        "type": "string",
                        "description": "Home page of the theme."
                    },
                    "keywords": {
                        "type": "string",
                        "description": "Keywords for the theme."
                    },
                    "supplier": {
                        "type": "string",
                        "description": "Supplier of the theme."
                    },
                    "tenantId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "updateAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Link to the theme source code."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the theme."
                    },
                    "qextVersion": {
                        "type": "string",
                        "description": "The version from the qext file that was uploaded with this extension."
                    },
                    "dependencies": {
                        "type": "object",
                        "description": "Map of dependencies describing version of the component it requires."
                    },
                    "qextFilename": {
                        "type": "string",
                        "description": "The name of the qext file that was uploaded with this theme."
                    }
                },
                "description": "The theme model."
            },
            "themes": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/theme"
                        }
                    }
                }
            },
            "AssignedGroups": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "id",
                        "name"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860eb",
                            "description": "The unique group identitier"
                        },
                        "name": {
                            "type": "string",
                            "example": "Finance",
                            "readOnly": true,
                            "description": "The group name"
                        },
                        "providerType": {
                            "enum": [
                                "idp",
                                "custom"
                            ],
                            "type": "string",
                            "example": "idp",
                            "description": "The provider type of the group"
                        },
                        "assignedRoles": {
                            "$ref": "#/components/schemas/AssignedRoles"
                        }
                    },
                    "description": "represents a group entity stored in the database"
                },
                "description": "An array of group references."
            },
            "AssignedGroupsRefNames": {
                "type": "array",
                "items": {
                    "required": [
                        "name",
                        "providerType"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "Developers",
                            "description": "The name of the group"
                        },
                        "providerType": {
                            "enum": [
                                "idp",
                                "custom"
                            ],
                            "type": "string",
                            "example": "idp",
                            "description": "The type of provider for the group."
                        }
                    }
                },
                "example": [
                    {
                        "name": "Developers",
                        "providerType": "custom"
                    }
                ],
                "description": "An array of group reference names and provider type."
            },
            "AssignedScopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "readOnly": true,
                "description": "An array of scopes assigned to a user"
            },
            "ErrorItem": {
                "type": "object",
                "required": [
                    "code",
                    "title"
                ],
                "properties": {
                    "code": {
                        "type": "integer",
                        "description": "Error code"
                    },
                    "title": {
                        "type": "string",
                        "description": "Summary of the problem"
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem (if applicable)"
                    }
                },
                "description": "Error object."
            },
            "ErrorsResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorItem"
                        }
                    }
                }
            },
            "InviteDataResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ResultItem"
                                },
                                {
                                    "$ref": "#/components/schemas/InviteErrorItem"
                                }
                            ]
                        }
                    }
                },
                "description": "Data list - ResultItem or ErrorItem for each InviteeItem."
            },
            "InviteErrorItem": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ErrorItem"
                    },
                    {
                        "type": "object",
                        "required": [
                            "status",
                            "email"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Error code - | HTTP Status code | 1001 - Active User | 1002 - Disabled User | 1003 - Default External Dependency Error |"
                            },
                            "email": {
                                "type": "string",
                                "description": "Invitee email"
                            },
                            "status": {
                                "enum": [
                                    "error"
                                ],
                                "type": "string",
                                "description": "Result status = \"error\""
                            }
                        }
                    }
                ],
                "description": "Error object."
            },
            "InviteItem": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Optional display name for this invitee. Example - \"Elvis Presley\"."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for this invitee. Example - \"foo@qlik.com\"."
                    },
                    "resend": {
                        "type": "boolean",
                        "description": "Flag - when true invite message is sent to inactive or invited users. Typically used to force email resend to users who are not yet active."
                    },
                    "language": {
                        "type": "string",
                        "description": "Optional ISO 639-1 2 letter code for invite language. Defaults to 'en' when missing or not found."
                    }
                }
            },
            "InviteRequest": {
                "type": "object",
                "properties": {
                    "invitees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InviteItem"
                        },
                        "required": [
                            "items"
                        ],
                        "description": "List of invitees who should receive an invite email."
                    }
                }
            },
            "RefIDs": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "id"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uid",
                            "example": "507f191e810c19729de860ea",
                            "description": "The unique identitier"
                        }
                    },
                    "description": "represents an entity stored in the database"
                },
                "example": [
                    {
                        "id": "507f191e810c19729de860ea"
                    }
                ],
                "description": "An array of entity reference identifiers (e.g. roles, groups)."
            },
            "RefNames": {
                "type": "array",
                "items": {
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "TenantAdmin",
                            "description": "The name of the entity"
                        }
                    }
                },
                "example": [
                    {
                        "name": "TenantAdmin"
                    }
                ],
                "description": "An array of reference names (e.g. roles)."
            },
            "ResultItem": {
                "type": "object",
                "required": [
                    "status",
                    "email",
                    "subject",
                    "userId"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email specified for this invitee"
                    },
                    "status": {
                        "enum": [
                            "ok",
                            "exists"
                        ],
                        "type": "string",
                        "description": "Result status = {\"ok\" (new user; email sent) | \"exists\" (existing user; no email sent)}"
                    },
                    "userId": {
                        "type": "string",
                        "format": "uid",
                        "description": "UserId for this invitee"
                    },
                    "subject": {
                        "type": "string",
                        "format": "uuid",
                        "description": "IdP generated UUID for this invitee"
                    }
                },
                "description": "Invitee result item"
            },
            "User": {
                "type": "object",
                "required": [
                    "id",
                    "subject",
                    "name",
                    "tenantId"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique user identifier.",
                        "x-qlik-filterable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.",
                        "x-qlik-filterable": true
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address for the user.",
                        "x-qlik-filterable": true
                    },
                    "links": {
                        "type": "object",
                        "readOnly": true,
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "http://mytenant.elastic.example/api/v1/users/DKNmFJCNo8SGURUdh2ll--------USER",
                                        "description": "URL that defines the resource."
                                    }
                                },
                                "description": "A link to this user."
                            }
                        },
                        "description": "Pagination links to the user."
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "TenantAdmin",
                                "Developer",
                                "AnalyticsAdmin",
                                "DataAdmin",
                                "DataSpaceCreator",
                                "ManagedSpaceCreator",
                                "SharedSpaceCreator"
                            ],
                            "type": "string"
                        },
                        "description": "List of system roles to which the user has been assigned. Only returned when permitted by access control. Deprecated. Use `assignedRoles` instead.",
                        "x-qlik-deprecated": true
                    },
                    "locale": {
                        "type": "string",
                        "description": "Represents the end-user's language tag."
                    },
                    "status": {
                        "enum": [
                            "active",
                            "invited",
                            "disabled",
                            "deleted",
                            "provisioned"
                        ],
                        "type": "string",
                        "description": "The status of the user within the tenant.",
                        "x-qlik-filterable": true
                    },
                    "created": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true,
                        "description": "Deprecated. Use `createdAt` instead.",
                        "x-qlik-deprecated": true
                    },
                    "picture": {
                        "type": "string",
                        "format": "url",
                        "description": "A static url linking to the avatar of the user."
                    },
                    "subject": {
                        "type": "string",
                        "description": "The unique user identitier from an identity provider.",
                        "x-qlik-filterable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The tenant that the user belongs too."
                    },
                    "zoneinfo": {
                        "type": "string",
                        "description": "Represents the end-user's time zone."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The timestamp for when the user record was created."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true,
                        "description": "Deprecated. Use `lastUpdatedAt` instead.",
                        "x-qlik-deprecated": true
                    },
                    "inviteExpiry": {
                        "type": "number",
                        "readOnly": true,
                        "description": "The Unix timestamp indicating when the invite will expire."
                    },
                    "assignedRoles": {
                        "$ref": "#/components/schemas/AssignedRoles"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The timestamp for when the user record was last updated."
                    },
                    "assignedGroups": {
                        "$ref": "#/components/schemas/AssignedGroups"
                    },
                    "assignedScopes": {
                        "$ref": "#/components/schemas/AssignedScopes"
                    },
                    "preferredLocale": {
                        "type": "string",
                        "description": "Represents the end-user's preferred language tag."
                    },
                    "preferredZoneinfo": {
                        "type": "string",
                        "description": "Represents the end-user's preferred time zone."
                    }
                },
                "description": "A user object."
            },
            "UserCount": {
                "type": "object",
                "required": [
                    "total"
                ],
                "properties": {
                    "total": {
                        "type": "number",
                        "description": "The total number of users in the tenant."
                    }
                },
                "description": "The result object for the user count."
            },
            "UserPostSchema": {
                "type": "object",
                "example": {
                    "name": "John Smith",
                    "email": "john.smith@corp.example",
                    "status": "invited",
                    "picture": "https://corp.example/docs/jsmith.png",
                    "subject": "1234asdasa6789",
                    "tenantId": "q3VRZ4YMixRaLKEPhkZWM-XMIDN7cO8f",
                    "assignedRoles": [
                        {
                            "name": "Developer"
                        }
                    ]
                },
                "required": [
                    "subject"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address for the user. This is a required field when inviting a user."
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "TenantAdmin",
                                "Developer",
                                "AnalyticsAdmin",
                                "DataAdmin",
                                "DataSpaceCreator",
                                "ManagedSpaceCreator",
                                "SharedSpaceCreator"
                            ],
                            "type": "string"
                        },
                        "description": "List of system roles to which the user has been assigned. Only returned when permitted by access control.",
                        "x-qlik-deprecated": true
                    },
                    "status": {
                        "enum": [
                            "invited"
                        ],
                        "type": "string",
                        "example": "invited",
                        "description": "The status of the created user within the tenant."
                    },
                    "picture": {
                        "type": "string",
                        "format": "url",
                        "description": "A static url linking to the avatar of the user."
                    },
                    "subject": {
                        "type": "string",
                        "example": "foo\\12345",
                        "description": "The unique user identitier from an identity provider."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "example": "DKNmFJCNo8SGURUdh2ll------TENANT",
                        "description": "The tenant that the user will belong too."
                    },
                    "assignedRoles": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RefIDs"
                            },
                            {
                                "$ref": "#/components/schemas/RefNames"
                            }
                        ],
                        "description": "The roles to assign to the user."
                    }
                }
            },
            "Users": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "List of users."
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the next page of records"
                                    }
                                },
                                "description": "Link information for next page"
                            },
                            "prev": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the previous page of records"
                                    }
                                },
                                "description": "Link information for previous page"
                            },
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the current page of records"
                                    }
                                },
                                "description": "Link information for current page"
                            }
                        },
                        "description": "Pagination links"
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "Indicates the total number of matching documents. Will only be returned if the query parameter \"totalResults\" is true."
                    }
                }
            },
            "WebIntegration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique web integration identifier."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the web integration."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time the web integration was created."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The tenant that the web integration belongs to."
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The user that created the web integration."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time the web integration was last updated."
                    },
                    "validOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "The origins that are allowed to make requests to the tenant."
                    }
                },
                "description": "A web integration object."
            },
            "WebIntegrationPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/validOrigins"
                        ],
                        "type": "string",
                        "description": "A JSON Pointer."
                    },
                    "value": {
                        "type": "string",
                        "description": "New value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "WebIntegrationPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/WebIntegrationPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/name",
                        "value": "New name"
                    }
                ]
            },
            "WebIntegrationPost": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The unique web integration identifier."
                    },
                    "name": {
                        "type": "string",
                        "example": "My Web Integration",
                        "description": "The name of the newly created web integration."
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "example": "http://mytenant.region.domain/api/v1/web-integrations/id",
                                        "description": "URL to the current page of records."
                                    }
                                },
                                "description": "Link information for current page."
                            }
                        },
                        "description": "Pagination links"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time the web integration was created."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "description": "The tenant that the web integration belongs to."
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true,
                        "description": "The user that created the web integration."
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time the web integration was last updated."
                    },
                    "validOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "example": [
                            "https://thirdPartyApp.com"
                        ],
                        "description": "The origins that are allowed to make requests to the tenant."
                    }
                },
                "description": "The creation of a web integration response."
            },
            "WebIntegrationPostSchema": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "My Web Integration",
                        "description": "The name of the web integration to create."
                    },
                    "validOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "example": [
                            "https://thirdPartyApp.com"
                        ],
                        "description": "The origins that are allowed to make requests to the tenant."
                    }
                }
            },
            "WebIntegrations": {
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebIntegration"
                        },
                        "description": "Properties of web integrations in a given tenant."
                    },
                    "links": {
                        "type": "object",
                        "required": [
                            "self"
                        ],
                        "properties": {
                            "next": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the next page of records."
                                    }
                                },
                                "description": "Link information for next page."
                            },
                            "prev": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the previous page of records."
                                    }
                                },
                                "description": "Link information for previous page."
                            },
                            "self": {
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "type": "string",
                                        "description": "URL to the current page of records."
                                    }
                                },
                                "description": "Link information for current page."
                            }
                        },
                        "description": "Pagination links"
                    }
                },
                "description": "An array of web integration objects."
            },
            "Notification": {
                "type": "object",
                "required": [
                    "id",
                    "userId",
                    "read",
                    "title",
                    "body",
                    "createdAt",
                    "updatedAt",
                    "meta"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true
                    },
                    "body": {
                        "type": "string",
                        "readOnly": true
                    },
                    "meta": {
                        "type": "object"
                    },
                    "read": {
                        "type": "boolean"
                    },
                    "action": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true
                    },
                    "userId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true
                    },
                    "spaceId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uid",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "spaceType": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true
                    },
                    "resourceId": {
                        "type": "string",
                        "format": "string",
                        "readOnly": true
                    },
                    "resourceType": {
                        "type": "string",
                        "format": "string"
                    },
                    "subResourceType": {
                        "type": "string",
                        "format": "string"
                    }
                }
            },
            "NotificationPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/read"
                        ],
                        "type": "string",
                        "description": "The path for the given resource field to patch."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "NotificationPatchSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/NotificationPatch"
                },
                "example": [
                    {
                        "op": "replace",
                        "path": "/read",
                        "value": true
                    }
                ],
                "description": "An array of JSON Patch documents"
            },
            "Notifications": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                }
            },
            "Delivery": {
                "type": "object",
                "readOnly": true,
                "required": [
                    "id",
                    "webhookId",
                    "triggeredAt",
                    "status",
                    "eventType"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The delivery's unique identifier"
                    },
                    "status": {
                        "enum": [
                            "success",
                            "fail"
                        ],
                        "type": "string",
                        "description": "The status of delivery"
                    },
                    "request": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL used for this delivery"
                            },
                            "body": {
                                "type": "object",
                                "description": "The sent body/payload of the delivery"
                            },
                            "headers": {
                                "type": "object",
                                "example": {
                                    "headerName": "headerValue"
                                },
                                "description": "Headers sent for this delivery",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    },
                    "response": {
                        "type": "object",
                        "properties": {
                            "body": {
                                "type": "string",
                                "description": "The received body of the delivery"
                            },
                            "headers": {
                                "type": "object",
                                "example": {
                                    "headerName": "headerValue"
                                },
                                "description": "Headers received for this delivery",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "statusCode": {
                                "type": "number",
                                "description": "The HTTP status code of the response"
                            }
                        },
                        "description": ""
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The name of the triggering event-type"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "The unique webhook identifier that the delivery is for"
                    },
                    "triggeredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The UTC timestamp when the delivery was triggered"
                    },
                    "statusMessage": {
                        "type": "string",
                        "description": "The status message of the delivery"
                    }
                }
            },
            "DeliveryList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Delivery"
                        }
                    },
                    "links": {
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                }
            },
            "EventType": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the event type"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the event type"
                    },
                    "levels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which levels that are supported for this event type"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the event type"
                    }
                }
            },
            "EventTypes": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventType"
                        }
                    }
                }
            },
            "WebhookBase": {
                "type": "object",
                "required": [
                    "name",
                    "url"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The webhook's unique identifier"
                    },
                    "url": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "Target URL for webhook HTTPS requests"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 512,
                        "description": "The name for the webhook"
                    },
                    "level": {
                        "enum": [
                            "tenant",
                            "user"
                        ],
                        "type": "string",
                        "default": "tenant",
                        "description": "Defines at what level the webhook should operate: for all resources belonging to a tenant or restricted to only those accessible by the webhook-creator."
                    },
                    "filter": {
                        "type": "string",
                        "example": "id eq \"id123\" or spaceId eq \"spaceId123\" or spaceId eq \"spaceId456\" or topLevelResourceId eq \"id789\"",
                        "description": "Filter that should match for a webhook to be triggered.\nSupported common attribute names are 'id', 'spaceId' and 'topLevelResourceId', beside the common attributes the \"com.qlik.v1.app.reload.finished\" event also supports \"data.status\" that could be either \"ok\" or \"error\" but can't be used together with other event types.\nSupported attribute operators are 'eq' and 'ne'.\nSupported logical operators are 'and' and 'or'.\nNote that attribute values must be valid JSON strings, hence they're enclosed with double quotes\nFor more detailed information regarding the SCIM filter syntax (RFC7644) used please follow the link to external documentation.",
                        "externalDocs": {
                            "url": "https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.2",
                            "description": "More information about the SCIM filter syntax (RFC7644)"
                        }
                    },
                    "secret": {
                        "type": "string",
                        "maxLength": 64,
                        "minLength": 32,
                        "description": "String used as secret for calculating HMAC hash sent as header"
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the webhook is active and sending requests"
                    },
                    "headers": {
                        "type": "object",
                        "example": {
                            "headerName": "headerValue"
                        },
                        "description": "Additional headers in the post request",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The id of the user that owns the webhook, only applicable for user level webhooks"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the webhook was created"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The UTC timestamp when the webhook was last updated"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of events for which the webhook should trigger. Retrieve available types from `/v1/webhooks/event-types`."
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 1024,
                        "description": "The reason for creating the webhook"
                    },
                    "disabledReason": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reason for the webhook to be disabled"
                    },
                    "createdByUserId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the user that created the webhook"
                    },
                    "updatedByUserId": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the user that last updated the webhook"
                    },
                    "disabledReasonCode": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique code for the reason"
                    },
                    "checkCertificateRevocation": {
                        "type": "boolean",
                        "default": false,
                        "description": "If enabled the certificate chain of the configured URL will be checked for revocation before sending the webhook."
                    }
                }
            },
            "WebhookList": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebhookResponse"
                        }
                    },
                    "links": {
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "prev": {
                                "$ref": "#/components/schemas/Link"
                            },
                            "self": {
                                "$ref": "#/components/schemas/Link"
                            }
                        }
                    }
                }
            },
            "WebhookPatch": {
                "type": "object",
                "required": [
                    "op",
                    "path"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed"
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/description",
                            "/url",
                            "/eventTypes",
                            "/headers",
                            "/enabled",
                            "/secret"
                        ],
                        "type": "string",
                        "example": "/description",
                        "description": "The path for the given resource field to patch"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902"
            },
            "WebhookPost": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "enum": [
                                    "api",
                                    "automations",
                                    "management-console"
                                ],
                                "type": "string",
                                "default": "api",
                                "description": "Indicates from where the webhook was created and its purpose"
                            }
                        }
                    }
                ]
            },
            "WebhookResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "enum": [
                                    "api",
                                    "automations",
                                    "management-console"
                                ],
                                "type": "string",
                                "default": "api",
                                "readOnly": true,
                                "description": "Indicates from where the webhook was created and its purpose"
                            }
                        }
                    }
                ]
            }
        },
        "responses": {
            "BadRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Bad Request"
            },
            "Forbidden": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Forbidden"
            },
            "InternalServerError": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Internal Server Error"
            },
            "NotFound": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Not found"
            },
            "ServiceUnavailable": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Service Unavailable"
            },
            "Unauthorized": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "Unauthorized"
            },
            "204NoContent": {
                "description": "`No Content`"
            },
            "400BadRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Bad Request`"
            },
            "401Unauthorized": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Unauthorized`"
            },
            "403Forbidden": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Forbidden`"
            },
            "404NotFound": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Not Found`"
            },
            "405MethodNotAllowed": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Method Not Allowed`"
            },
            "409Conflict": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Conflict`"
            },
            "500InternalError": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Internal Error`"
            },
            "502BadGateway": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Bad Gateway`"
            },
            "503ServiceUnavailable": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Service Unavailable`"
            },
            "FailureDefault": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Failure"
                        }
                    }
                },
                "description": "`Unexpected Error`"
            },
            "ClientSecretCreateExceedLimit": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                },
                "description": "The max number of client secrets is 5"
            }
        },
        "parameters": {
            "predictionId": {
                "in": "path",
                "name": "predictionId",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                },
                "required": true,
                "description": "The ID of the prediction configuration object that provides parameters to be applied when the prediction is produced."
            },
            "refId": {
                "in": "query",
                "name": "refId",
                "schema": {
                    "type": "string"
                },
                "description": ""
            },
            "deploymentId": {
                "in": "path",
                "name": "deploymentId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "ID of the deployment"
            },
            "brand-file-id": {
                "in": "path",
                "name": "brand-file-id",
                "schema": {
                    "enum": [
                        "logo",
                        "favIcon",
                        "styles"
                    ],
                    "type": "string"
                },
                "required": true,
                "description": "The unique identifier of a file within a brand."
            },
            "brand-id": {
                "in": "path",
                "name": "brand-id",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "The brand's unique identifier."
            },
            "noActionParam": {
                "in": "query",
                "name": "noActions",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "required": false,
                "description": "If set to true, the user's available actions for each item will not be evaluated meaning the actions-array will be omitted from the response (reduces response time).\n"
            },
            "bycredentialname": {
                "in": "query",
                "name": "byCredentialName",
                "schema": {
                    "type": "boolean"
                },
                "example": false,
                "required": false,
                "description": "If set to true, credentialId in the query will be interpreted as credential's name"
            },
            "caseinsensitive": {
                "in": "query",
                "name": "caseinsensitive",
                "schema": {
                    "type": "boolean",
                    "example": false
                },
                "example": true,
                "required": false,
                "description": "Sort results will be returned in case insensitive order if set to true (Only used along with sort query)"
            },
            "credentialID": {
                "in": "query",
                "name": "credentialId",
                "schema": {
                    "type": "string"
                },
                "example": "22379dc5-076e-4fec-ae20-5529a8a57dc2",
                "required": false,
                "description": "Credential ID"
            },
            "dataName": {
                "in": "query",
                "name": "dataName",
                "schema": {
                    "type": "string"
                },
                "example": "data",
                "required": false,
                "description": "Provides an alternate name to be used for data[] element in GET response."
            },
            "extended": {
                "in": "query",
                "name": "extended",
                "schema": {
                    "type": "boolean"
                },
                "example": false,
                "required": false,
                "description": "Returns extended list of properties (e.g. encrypted credential string) when set to true."
            },
            "filter": {
                "in": "query",
                "name": "filter",
                "schema": {
                    "type": "string",
                    "example": "qName co \"abc\" or qName sw \"dd\" and qType eq \"rest\" and created gt \"2000-01-10T15:04:05Z\""
                },
                "required": false,
                "description": "Filtering resources by properties (filterable properties only) using SCIM filter string. Note the filter string only applies to connections managed by data-connections service, i.e. filtering doesn't apply to DataFile connections. When filtering on datetime property (e.g. created, updated), datetime should be in RFC3339 format."
            },
            "includeQris": {
                "in": "query",
                "name": "includeQris",
                "schema": {
                    "type": "boolean"
                },
                "example": true,
                "required": false,
                "description": "Base Qri (encrypted) will be returned when the query is set to true, default is false"
            },
            "limit": {
                "in": "query",
                "name": "limit",
                "schema": {
                    "type": "integer",
                    "default": 32,
                    "maximum": 100
                },
                "example": 10,
                "required": false,
                "description": "Number of results per page. Default is 32."
            },
            "locale": {
                "in": "query",
                "name": "locale",
                "schema": {
                    "type": "string"
                },
                "example": "en",
                "required": false,
                "description": "ICU locale ID, used only when caseinsensitive is set to true, default to 'en' if undefined"
            },
            "nocache": {
                "in": "query",
                "name": "noCache",
                "schema": {
                    "type": "boolean"
                },
                "example": false,
                "required": false,
                "description": "datafiles connections will be returned from cache by default (if data-connections is configured to use cache), this query parameter is used disable this default behavior, e.g. return an update-to-date datafiles connection if the query is set to true"
            },
            "nodatafiles": {
                "in": "query",
                "name": "noDatafiles",
                "schema": {
                    "type": "boolean"
                },
                "example": true,
                "required": false,
                "description": "Datafiles connections will not be returned if set to true"
            },
            "ownedbyme": {
                "in": "query",
                "name": "ownedByMe",
                "schema": {
                    "type": "boolean"
                },
                "example": true,
                "required": false,
                "description": "Filtering on connections, return connections owned by the caller if set to true (doesn't apply to datafiles connections)"
            },
            "owner": {
                "in": "query",
                "name": "owner",
                "schema": {
                    "type": "string"
                },
                "example": "928e2a66-01ba-4678-aa32-e74c213896fa",
                "required": false,
                "description": "Filtering on datafile connections by owner (i.e. app) ID."
            },
            "page": {
                "in": "query",
                "name": "page",
                "schema": {
                    "type": "string"
                },
                "example": "page=JwAAAAljcmVhdGVkAPfQ-sx0AQAAB19pZABfb93nZcM4SN1M0e8A",
                "required": false,
                "description": "Pagination cursor string, which is generated automatically in previous pagination query."
            },
            "parseConnection": {
                "in": "query",
                "name": "parseConnection",
                "schema": {
                    "type": "boolean",
                    "example": true
                },
                "example": true,
                "required": false,
                "description": "List of connection properties shall be returned when the query is set to true, default is false"
            },
            "personal": {
                "in": "query",
                "name": "personal",
                "schema": {
                    "type": "boolean"
                },
                "example": false,
                "required": false,
                "description": "Filtering on personal connections, ignored if spaceId is defined in same request"
            },
            "qConnID": {
                "in": "path",
                "name": "qID",
                "schema": {
                    "type": "string"
                },
                "example": "82ee7b44-0c4d-491b-bd38-82640c0430a5",
                "required": true,
                "description": "Connection ID"
            },
            "sort": {
                "in": "query",
                "name": "sort",
                "schema": {
                    "type": "string"
                },
                "example": "+qName",
                "required": false,
                "description": "Name of field sort on for pagination, with prefix with + or - indicating ascending or descending order. When used for data-connections, sort field only applies to non-datafiles connections. Whatever sorting order is, datafiles connections will be returned after all regular connections being returned."
            },
            "spaceID": {
                "in": "query",
                "name": "spaceId",
                "schema": {
                    "type": "string"
                },
                "example": "611bcebaeec1203d88211ac4",
                "required": false,
                "description": "Filtering on connections by space ID"
            },
            "type": {
                "in": "query",
                "name": "type",
                "schema": {
                    "enum": [
                        "connectionname",
                        "credentialname"
                    ],
                    "type": "string"
                },
                "example": "connectionname",
                "required": false,
                "description": "Connection / credential ID defined in path become connection / credential name when this query parameter is set"
            },
            "userId": {
                "in": "query",
                "name": "userId",
                "schema": {
                    "type": "string"
                },
                "example": "6K9xjsItDexffolu5vg1oWYkY8x7f-0G",
                "required": false,
                "description": "Filtering on userId. Requires admin role if specified userId doesn't match that is defined in JWT."
            },
            "qCredID": {
                "in": "path",
                "name": "qID",
                "schema": {
                    "type": "string"
                },
                "example": "027d2703-e745-43ec-8876-a2e6ac341700",
                "required": true,
                "description": "Credential ID"
            },
            "qlikIdpPoptsMatch": {
                "in": "header",
                "name": "QLIK-IDP-POPTS-MATCH",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": "A unique string representing a hash that should map to an IdP's hash representation of the current configuration being tested."
            },
            "batchPredictionId": {
                "in": "path",
                "name": "batchPredictionId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "ID of the batch prediction"
            },
            "batchPredictionsFilter": {
                "in": "query",
                "name": "filter",
                "style": "deepObject",
                "schema": {
                    "type": "string"
                },
                "example": "`filter=modelId eq \"UUID\"`",
                "required": false,
                "description": "Batch prediction fields by which you can filter responses.<br><br>\n- `modelId` UUID string - By model ID\n"
            },
            "batchPredictionsSort": {
                "in": "query",
                "name": "sort",
                "style": "form",
                "schema": {
                    "$ref": "#/components/schemas/EnumSortBatchPredictions"
                },
                "example": "sort=field1,+field2,-field3,...",
                "required": false,
                "description": "Field(s) by which to sort response\n"
            },
            "corrId": {
                "in": "path",
                "name": "corrId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "The ID of a correlated resource of corrType"
            },
            "corrType": {
                "in": "path",
                "name": "corrType",
                "schema": {
                    "$ref": "#/components/schemas/CorrType"
                },
                "required": true,
                "description": "The type of a resource paired with a corrId"
            },
            "dataSetId": {
                "in": "path",
                "name": "dataSetId",
                "schema": {
                    "$ref": "#/components/schemas/DataSetId"
                },
                "required": true,
                "description": "The Qlik catalog dataset ID"
            },
            "deploymentsFilter": {
                "in": "query",
                "name": "filter",
                "style": "deepObject",
                "schema": {
                    "type": "string"
                },
                "example": "`filter=spaceId eq \"UUID\" and modelState eq \"enabled\"`",
                "required": false,
                "description": "Deployment fields by which you can filter responses.<br><br>\n- `spaceId` ID string (or empty string for personal space) - ID of space in which deployment(s) exist\n- `modelId` UUID string - By model ID\n- `createdBy` ID string\n- `ownerId` ID string\n- `approverId` ID string - ID of user that approved a model in the deployment\n- `experimentId` UUID string - ID of experiment in which model(s) exist\n- `experimentVersionId` UUID string - ID of experiment version in which model(s) exist\n- `predictionEnabled` boolean - Are predictions enabled\n- `exactName` string - Deployments with exact name. Names may not be unique.\n- `nameContains` string - Deployments where name includes this. Names may not be unique\n- `modelName` string - Partial or exact, case-insensitive name of model in the deployment\n- `modelState` enum string - State by which to find models<br><br>\n  - Valid states: `pending, enabled, disabled, inactive`\n"
            },
            "deploymentsSort": {
                "in": "query",
                "name": "sort",
                "style": "form",
                "schema": {
                    "$ref": "#/components/schemas/EnumSortDeployments"
                },
                "example": "sort=field1,+field2,-field3,...",
                "required": false,
                "description": "Field(s) by which to sort response\n"
            },
            "experimentId": {
                "in": "path",
                "name": "experimentId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "ID of the experiment"
            },
            "experimentsFilter": {
                "in": "query",
                "name": "filter",
                "style": "deepObject",
                "schema": {
                    "type": "string"
                },
                "example": "`filter=ownerId eq UUID and experimentVersionId eq UUID`",
                "required": false,
                "description": "Experiment fields by which you can filter responses within this tenant\n- `ownerId` ID string - ID of the owner/user that created the experiment\n- `spaceId` ID string (or empty string for personal space) - ID of the space where the experiment is saved.\n- `experimentVersionId` UUID string - ID of an experiment version in the experiment\n- `modelId` UUID string - ID of a model associated with the experiment\n- `deploymentId` UUID string - ID of a deployment of a model associated with the experiment\n"
            },
            "experimentsSort": {
                "in": "query",
                "name": "sort",
                "style": "form",
                "schema": {
                    "$ref": "#/components/schemas/EnumSortExperiments"
                },
                "example": "sort=field1,+field2,-field3,...",
                "required": false,
                "description": "Field(s) by which to sort response\n"
            },
            "experimentVersionId": {
                "in": "path",
                "name": "experimentVersionId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "ID of the experiment version"
            },
            "experimentVersionsFilter": {
                "in": "query",
                "name": "filter",
                "style": "deepObject",
                "schema": {
                    "type": "string"
                },
                "example": "`filter=isRunning eq false and status eq \"finished\"`",
                "required": false,
                "description": "Experiment version filter options\n- `isRunning` boolean - Is the experiment version running (training models)?\n- `isSettled` boolean - Is the experiment version settled?\n- `status` enum string - Status to filter by. Omit to get models of any status.\n  - Valid statuses: pending, ready, error, cancelled\n- `modelId` UUID string - ID of a model associated with the experiment\n"
            },
            "experimentVersionsSort": {
                "in": "query",
                "name": "sort",
                "style": "form",
                "schema": {
                    "$ref": "#/components/schemas/EnumSortExperimentVersions"
                },
                "example": "sort=field1,+field2,-field3,...",
                "required": false,
                "description": "Field(s) by which to sort response\n"
            },
            "modelId": {
                "in": "path",
                "name": "modelId",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "ID of the model"
            },
            "modelsFilter": {
                "in": "query",
                "name": "filter",
                "style": "deepObject",
                "schema": {
                    "type": "string"
                },
                "example": "`filter=\"id eq \"UUID1\" and experimentId eq \"UUID\" and hasDeployment eq true`",
                "required": false,
                "description": "Model fields you can filter by:<br><br>\n\n- `experimentVersionId` UUID string - Find by experiment version ID\n- `batchNum` UUID string - Search by batch number\n- `isHpo` boolean - Is hyperparameter optimization used?\n- `isMetrics` boolean - Are metrics for regression, binary, or multiclass are used?\n- `id` UUID string - Find by model ID\n- `algorithm` enum string - Find by algorithm<br><br>\n\n  - Valid algorithms: catboost_classifier, catboost_regression,\n    elasticnet_regression, gaussian_nb, kneighbors_classifier,\n    lasso_regression, lasso, lgbm_classifier, lgbm_regression,\n    linear_regression, logistic_regression, random_forest_classifier,\n    random_forest_regression, sgd_regression, xgb_classifier,\n    xgb_regression<br><br>\n\n- `status` enum string - find by status<br><br>\n  - Valid statuses: pending, training_requested, training_done, ready, error<br><br>\n- `hasDeployment` boolean - Models that are part of a deployment\n- `nameContains` string - Models with name includes this case-insensitive string\n- `exactName` string - Models with exact name. Model names may not be unique\n- `samplingRatio` number - Find models by sampling ratio\n- `modelState` enum string - State by which to find models<br><br>\n  - Valid states: `pending, enabled, disabled, inactive`\n"
            },
            "modelsSort": {
                "in": "query",
                "name": "sort",
                "style": "form",
                "schema": {
                    "$ref": "#/components/schemas/EnumSortModels"
                },
                "example": "sort=field1,+field2,-field3,...",
                "required": false,
                "description": "Field(s) by which to sort response\n"
            },
            "offset": {
                "in": "query",
                "name": "offset",
                "schema": {
                    "type": "integer"
                },
                "example": 32,
                "required": false,
                "description": "Number of rows to skip before getting page[size]"
            }
        },
        "headers": {
            "X-B3-Traceid": {
                "schema": {
                    "type": "string"
                },
                "description": "The TraceId for the trace associated with the call stack. Every span in a trace shares this ID."
            },
            "qlikIdpPopts": {
                "schema": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": "A unique string representing a hash of the current configuration being tested."
            },
            "AcceptRanges": {
                "schema": {
                    "type": "string"
                },
                "description": "Standard HTTP `Accept-Ranges` header."
            },
            "ContentDisposition": {
                "schema": {
                    "type": "string"
                },
                "description": "Standard HTTP `Content-Disposition` header."
            },
            "ContentLength": {
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                },
                "description": "Standard HTTP `Content-Length` header."
            },
            "ContentRange": {
                "schema": {
                    "type": "string"
                },
                "description": "Standard HTTP `Content-Range` header."
            },
            "Location": {
                "schema": {
                    "type": "string"
                },
                "description": "Standard HTTP `Location` header.\nWhen used with tus POST (`creation`) requests, the server uses this to indicate location at which you can\ndo HEAD and PATCH requests.\n"
            },
            "TusResumable": {
                "schema": {
                    "type": "string"
                },
                "description": "The version of the tus protocol used."
            },
            "TusVersion": {
                "schema": {
                    "type": "string"
                },
                "description": "A comma-separated list of tus protocol versions supported by the server."
            }
        },
        "examples": {
            "PostTenant201Response": {
                "value": {
                    "id": "kg1knZuzosd7LR-CfvV7ZZnyEI--XYZZ",
                    "name": "bk1672h181jm1b1",
                    "links": {
                        "self": {
                            "href": "https://bk1672h181jm1b1.us.qlikcloud.com/api/v1/tenants/kg1knZuzosd7LR-CfvV7ZZnyEI--XYZZ"
                        }
                    },
                    "status": "active",
                    "created": "2022-06-24T18:28:31.301Z",
                    "hostnames": [
                        "bk1672h181jm1b1.us.qlikcloud.com"
                    ],
                    "datacenter": "us-east-1",
                    "lastUpdated": "2022-06-24T18:28:31.301Z",
                    "createdByUser": "dyk0nG9WvXZmupfFtULqgVAp1l3kbmTY",
                    "enableAnalyticCreation": true,
                    "autoAssignCreateSharedSpacesRoleToProfessionals": false,
                    "autoAssignDataServicesContributorRoleToProfessionals": false,
                    "autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals": false
                }
            },
            "PostUser201Response": {
                "value": {
                    "id": "62b6024fcdf339bb986fae75",
                    "name": "John Smith",
                    "email": "john.smith@corp.example",
                    "roles": [
                        "Developer"
                    ],
                    "status": "invited",
                    "created": "2022-06-24T18:28:31.301Z",
                    "picture": "https://corp.example/docs/jsmith.png",
                    "subject": "1234asdasa6789",
                    "tenantId": "q3VRZ4YMixRaLKEPhkZWM-XMIDN7cO8f",
                    "createdAt": "2022-06-24T18:28:31.301Z",
                    "lastUpdated": "2022-06-24T18:28:31.301Z",
                    "inviteExpiry": 1656700111,
                    "assignedRoles": [
                        {
                            "id": "60804cf8a77b649c66733f65",
                            "name": "Developer",
                            "type": "default",
                            "level": "user"
                        }
                    ],
                    "lastUpdatedAt": "2022-06-24T18:28:31.301Z"
                }
            }
        }
    }
}