{
    "swagger": "2.0",
    "info": {
        "title": "Open API specification for Qlik SaaS REST API"
    },
    "paths": {
        "/.well-known/oauth-authorization-server": {
            "get": {
                "tags": [
                    "metadata"
                ],
                "summary": "Returns authorization server metadata.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-metadata"
                                }
                            }
                        },
                        "description": "Returns authorization server metadata."
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "869daac2-91b9-4f98-9297-d60af19a7228",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/api-keys": {
            "get": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Lists API keys for a given tenant ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api-key-page"
                                }
                            }
                        },
                        "description": "The API keys page result."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to list API keys."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "createdByUser",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "description": "The user ID that created the API key."
                    },
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string",
                            "format": "uid v4"
                        },
                        "required": false,
                        "description": "Get resources with IDs that are lower than the target resource ID. Cannot be used in conjunction with startingAfter."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Maximum number of API keys to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "createdByUser",
                                "+createdByUser",
                                "-createdByUser",
                                "sub",
                                "+sub",
                                "-sub",
                                "status",
                                "+status",
                                "-status",
                                "description",
                                "+description",
                                "-description",
                                "created",
                                "+created",
                                "-created"
                            ],
                            "type": "string",
                            "default": "-created"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string",
                            "format": "uid v4"
                        },
                        "required": false,
                        "description": "Get resources with IDs that are higher than the target resource ID. Cannot be used in conjunction with endingBefore."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "active",
                                "expired",
                                "revoked"
                            ],
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The status of the API key."
                    },
                    {
                        "in": "query",
                        "name": "sub",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The ID of the subject."
                    }
                ],
                "operationId": "getApiKeys",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "09531419-1656-428f-94ef-45f5139c05a4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Creates an API key resource.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyWithToken"
                                }
                            }
                        },
                        "description": "Created the API key successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to create an API key"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "createApiKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeyBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to set for the API key."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "03033dff-0d8a-4368-8f65-627c9ec5ef3f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/api-keys/{id}": {
            "get": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Gets the API key for a given ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKey"
                                }
                            }
                        },
                        "description": "Returns an API key resource."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to query this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the API key resource to be retrieved."
                    }
                ],
                "operationId": "getApiKeyById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "df896c2a-6311-4ffe-9a85-a5bf67ac97a3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Updates an API key for a given ID.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "API key updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to update this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "JWT ID (jti)"
                        },
                        "required": true,
                        "description": "The ID of the API key resource to be updated."
                    }
                ],
                "operationId": "updateApiKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeysPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to update for the API key."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "bcba9ad3-a0ce-4a0d-a578-2b49de472c42",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "api-keys"
                ],
                "summary": "Deletes or revokes an API key.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Deleted or revoked an API key resource."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to delete or revoke this API key."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "API key was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the API key resource to be retrieved."
                    }
                ],
                "description": "When the owner of the API key sends the request, the key will be removed. When a TenantAdmin sends the request, the key will be revoked.",
                "operationId": "deleteApiKeyById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "5557dd4d-c9e6-42e8-b5fd-ce87c5dbf82e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/api-keys/configs/{tenantId}": {
            "get": {
                "tags": [
                    "api-keys configurations"
                ],
                "summary": "Gets the API keys configuration for a given tenant ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeysConfig"
                                }
                            }
                        },
                        "description": "API keys configuration."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The tenant ID of the API keys configuration to be retrieved."
                    }
                ],
                "operationId": "getApiKeysConfiguration",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "c8ab3252-359c-4027-825b-02c62b3d922e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "api-keys configurations"
                ],
                "summary": "Updates the API keys configuration for a given tenant ID.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "API keys configuration updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Requestor not allowed to update the API keys configuration."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Failed to update the API keys configuration."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The tenant ID of the API keys configuration to be retrieved."
                    }
                ],
                "operationId": "updateApiKeyConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiKeysConfigPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Configurations that the user wants to update for API keys."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "525d5882-c3e4-43e8-846b-2168caebe818",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/login": {
            "get": {
                "tags": [
                    "login"
                ],
                "summary": "Login using interactive identity provider associated with the tenant.",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Redirect to the identity provider."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid login."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "returnto",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Relative or full URL to redirect to after successful login."
                    },
                    {
                        "in": "header",
                        "name": "Qlik-Web-Integration-ID",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Web Integration ID associated with origin whitelist used to validate returnto value."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "82a46587-fbfe-4d2a-9614-2cebf5c39ff6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/login/jwt-session": {
            "post": {
                "tags": [
                    "tokens"
                ],
                "summary": "Exchanges a token in the form of a user JWT for a session cookie.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "eas.sid=spn3PWVdGDmSs2NH6kEgpIwZft2utI2m;eas.sid.sig=s43MYzD54Z7NsayOdPD0pXm24fc;_csrfToken=jQrrL9KC-OomYaTw2vY8B2sR1uddfwH2q_js;_csrfToken.sig=GRB6I20vR-tlgmFceq8a9mSGyCE"
                                },
                                "description": "session cookie and CSRF token along with their signatures"
                            }
                        },
                        "description": "Successfully exchanged JWT for session."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized."
                    }
                },
                "description": "The JWT should be securely signed with an algorithm other than HS,\nand it should contain the following claims:\n1. iss: identifies the principal that issued the JWT; it must match the issuer in the IDP definition.\n2. aud: identifies the recipients of the JWT, which in this case is \"qlik.api/login/jwt-session\".\n3. sub: identifies the subject of the JWT.\n4. subType: the type of identifier the sub represents, which in this case is \"user\".\n5. name: the name of the user.\n6. email: the email address of the user.\n7. email_verified: a claim indicating to Qlik that the JWT source has verified that the email address belongs to the subject.\n9. jti: JWT ID; it should be unique for each consumed JWT token.\n10. iat: identifies the time at which the JWT was issued.\n11. nbf: identifies the starting time on which the JWT is accepted. The current unix time must be passed this value.\n12. exp: identifies the expiration time after which the JWT is not accepted.\n13. keyid: identifies the KeyID used to sign the JWT; it must match the KeyID in the IDP definition.\n\nAnd the time window between exp and nbf should not exceed 1 hour.\n",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "7259e025-2e84-496f-913c-9aa232217f33",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/oauth/authorize": {
            "get": {
                "tags": [
                    "oauth"
                ],
                "summary": "Allows a client application to use an OAuth flow to request user authorization.",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Redirect to the identity provider or back to the redirect_uri if an error occurs. On error the redirect will follow the OAuth2 RFC section 4.1.2.1 (https://tools.ietf.org/html/rfc6749#section-4.1.2.1) with an additional error_code parameter with the internal error code. When a detail is known for the error it will be included as error_detail."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid client_id or redirect_uri."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "client_id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The client identifier."
                    },
                    {
                        "in": "query",
                        "name": "code_challenge_method",
                        "schema": {
                            "enum": [
                                "S256"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The algorithm that client used for generating code_challenge, only S256 is supported for now."
                    },
                    {
                        "in": "query",
                        "name": "redirect_uri",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Relative or full URL to redirect to after successful login."
                    },
                    {
                        "in": "query",
                        "name": "response_type",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Describes the grant flow to use."
                    },
                    {
                        "in": "query",
                        "name": "scope",
                        "style": "spaceDelimited",
                        "schema": {
                            "enum": [
                                "user_default",
                                "offline_access"
                            ],
                            "type": "array"
                        },
                        "explode": false,
                        "required": true,
                        "description": "The scope of access that is being requested."
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "State parameter to roundtrip to client in final redirect."
                    },
                    {
                        "in": "query",
                        "name": "code_challenge",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The code challenge created by the client."
                    },
                    {
                        "in": "query",
                        "name": "max_age",
                        "schema": {
                            "type": "number"
                        },
                        "required": false,
                        "description": "Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OpenID Provider."
                    },
                    {
                        "in": "query",
                        "name": "prompt",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies whether the Authorization Server prompts the End-User for re-authentication and consent."
                    }
                ],
                "x-qlik-dependencies": [
                    "GET:/v1/oauth-clients/{clientId}"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "8c21d539-fddf-406e-9a92-9299ee844380",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/oauth/revoke": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Allows a client to revoke their token",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Token was revoked."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/oauth-revoke-request"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/oauth-revoke-request"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties of the token that the client wants to revoke."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "1e63db13-5522-431d-8c45-fff469affbb2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/oauth/token": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Allows a client to perform an OAuth flow to obtain a token set.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-token-response"
                                }
                            }
                        },
                        "description": "Token set created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid login or tokens, indicates that code or token used can be deleted by the client. Also could be invalid client credentials provided in Authorization header."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden because user is disabled or has reached the maximum number of tokens."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/oauth-client-credentials-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-refresh-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-authorization-code-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-token-exchange"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/oauth-client-credentials-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-refresh-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-authorization-code-request"
                                    },
                                    {
                                        "$ref": "#/components/schemas/oauth-token-exchange"
                                    }
                                ]
                            }
                        }
                    }
                },
                "x-qlik-dependencies": [
                    "GET:/v1/licenses/assignments"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "ba45edf8-1aa1-4a13-aece-3699544200e0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/oauth-tokens": {
            "get": {
                "tags": [
                    "oauth-tokens"
                ],
                "summary": "List OAuth tokens",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/oauth-token-page"
                                }
                            }
                        },
                        "description": "The page result."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameter for querying tokens."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Authentication failed."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of tokens to return."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "userId"
                            ],
                            "type": "string",
                            "default": "userId"
                        },
                        "required": false,
                        "description": "The field to sort by."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The ID of the user to limit results to."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "f71e9a6b-3667-4e10-a78e-6667d5e4eccf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/oauth-tokens/{tokenId}": {
            "delete": {
                "tags": [
                    "oauth-tokens"
                ],
                "summary": "Revoke an OAuth token by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Token deleted successfully."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Authentication failed."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tokenId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the token to revoke."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "39e149c0-a407-42b8-ae9e-751c4fe44e79",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-integrations": {
            "get": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "List web integrations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegrations"
                                }
                            }
                        },
                        "description": "An array of web integration objects."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "The number of web integration entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by. Prefix with +/- to indicate ascending/descending order."
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore."
                    },
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by."
                    }
                ],
                "description": "Retrieves web integrations matching the query.",
                "operationId": "getWebIntegrations",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-guidelines-ignore": [
                    "must-always-return-json-objects-as-top-level-data-structures"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "e1221c4f-aa85-4a48-8590-05a132880ddf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Create web integration",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegrationPost"
                                }
                            }
                        },
                        "description": "Web integration created successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "BAD_REQUEST",
                                                    "title": "Bad Request",
                                                    "detail": "Error parsing request body",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-6",
                                                    "title": "Invalid property value",
                                                    "source": {
                                                        "pointer": "/path"
                                                    },
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "MissingRequiredFields": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-5",
                                                    "meta": {
                                                        "requiredFields": [
                                                            "tenantId",
                                                            "name",
                                                            "createdBy"
                                                        ]
                                                    },
                                                    "title": "Missing required fields",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_FORBIDDEN",
                                            "title": "Forbidden",
                                            "status": "403"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Requestor not allowed to create a web integration."
                    }
                },
                "description": "Creates a web integration.",
                "operationId": "createWebIntegration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebIntegrationPostSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to set for the web integration."
                },
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "caa96517-2789-4785-b96f-35a665e56ae3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-integrations/{id}": {
            "get": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Get web integration by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebIntegration"
                                }
                            }
                        },
                        "description": "Web integration found."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to retrieve."
                    }
                ],
                "description": "Retrieves a single web integration by ID.",
                "operationId": "getWebIntegrationById",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "00658353-c434-4998-95f8-f60fd156f6fd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Update web integration by ID",
                "responses": {
                    "204": {
                        "description": "Web integration updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "BAD_REQUEST",
                                                    "title": "Bad Request",
                                                    "detail": "Error parsing request body",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-6",
                                                    "title": "Invalid property value",
                                                    "source": {
                                                        "pointer": "/path"
                                                    },
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    },
                                    "InvalidPatchRequest": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "WEBINTEGRATIONS-4",
                                                    "title": "Invalid PATCH request",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to update."
                    }
                ],
                "description": "Updates a single web integration by ID.",
                "operationId": "updateWebIntegrationById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebIntegrationPatchSchema"
                            }
                        }
                    },
                    "required": true,
                    "description": "Properties that the user wants to update for the web integration."
                },
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "a8e30cab-13d3-459c-924d-bbfccbcdbcfe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-integrations"
                ],
                "summary": "Delete web integration by ID",
                "responses": {
                    "204": {
                        "description": "Web integration deleted successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "WEBINTEGRATIONS_NOT_FOUND",
                                            "title": "Not found",
                                            "status": "404"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Web integration not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the web integration to delete."
                    }
                ],
                "description": "Deletes a single web integration by ID.",
                "operationId": "deleteWebIntegrationById",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/authenticate"
                ],
                "x-qlik-entity-revision": "748ecc14-52da-4e45-96b9-efee7b695d45",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps": {
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApp"
                            }
                        }
                    },
                    "description": "Attributes that the user wants to set in new app.",
                    "required": true
                },
                "description": "Creates a new app.",
                "x-qlik-access-control": [
                    "create"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c1724460-df3b-48a2-9a8f-9eb1068ca9f7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves information for a specific app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "1aa6d01c-a0bb-4bce-a04a-e6096aac9d2b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateApp"
                            }
                        }
                    },
                    "description": "Attributes that user wants to set.",
                    "required": true
                },
                "description": "Updates the information for a specific app.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "753e4940-1c46-415b-8bd5-b945c31b7d2b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Deletes a specific app.",
                "x-qlik-access-control": [
                    "delete"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "7d83c741-c220-46d9-971c-341fbde93d10",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/copy": {
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApp"
                            }
                        }
                    },
                    "description": "Attributes that should be set in the copy.",
                    "required": true
                },
                "description": "Copies a specific app.",
                "x-qlik-access-control": [
                    "duplicate"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a0b99b4d-e2c3-4e3c-b69f-d1835f78ed06",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/data/lineage": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LineageInfoRest"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves the lineage for an app.\nReturns a JSON-formatted array of strings describing the lineage of the app.",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "edd2e95f-4af5-443d-897f-80e10218ee88",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/data/metadata": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataModelMetadata"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves the data model and reload statistics metadata of an app.\nAn empty metadata structure is returned if the metadata is not available in the app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "4d720d89-a46b-411a-8f6b-af527ba5e4b1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/export": {
            "post": {
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "description": "The URL of the exported app on Temporary content service.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "headers": {},
                        "description": "Bad request"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "NoData",
                        "description": "The flag indicating if only object contents should be exported.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "description": "Exports a specific app.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a36e020a-8138-4b53-ac48-513021afef38",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/insight-analyses": {
            "get": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns information about supported analyses for the app's data model. Lists available analysis types, along with minimum and maximum number of dimensions, measures, and fields.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisDescriptorResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and information about supported analyses is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "header",
                        "name": "accept-language",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
                    }
                ],
                "operationId": "getAnalyses",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "14cdd0da-6840-47d1-bf6a-36cc8670dc94",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/insight-analyses/actions/recommend": {
            "post": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns analysis recommendations in response to a natural language question, a set of fields and master items, or a set of fields and master items with an optional target analysis.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisRecommendationResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and recommendations are returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid Business Logic"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    },
                    {
                        "in": "header",
                        "name": "accept-language",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
                    }
                ],
                "operationId": "getRecommendations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalysisRecommendRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8784b1ff-5bad-4392-b794-7bd32ae7524f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/insight-analyses/model": {
            "get": {
                "tags": [
                    "insight-analyses"
                ],
                "summary": "Returns information about model used to make analysis recommendations. Lists all fields and master items in the logical model, along with an indication of the validity of the logical model if the default is not used.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisModelResponse"
                                }
                            }
                        },
                        "description": "The request is successfully processed and information about model is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid Business Logic"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "Qlik Sense app identifier"
                    }
                ],
                "operationId": "getBusinessModel",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "8b9d4fb5-cf29-4baa-9bcc-d4b99a81c07e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/media/files/{path}": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Unique application identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "required": true,
                        "description": "Path to file content.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Gets media content from file.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b3093593-f533-4017-9497-c6d72dd0b89a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Unique application identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "required": true,
                        "description": "Path to file content.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/FileData"
                            }
                        }
                    },
                    "required": true
                },
                "description": "Stores the media content file.\nReturns OK if the bytes containing the media file content were successfully stored, or error in case of failure, lack of permission or file already exists on the supplied path.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "10a79b9f-6d73-402b-88a0-32c24a0f8c02",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Unique application identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "required": true,
                        "description": "Path to file content.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Deletes a media content file or complete directory.\nReturns OK if the bytes containing the media file (or the complete content of a directory) were successfully deleted, or error in case of failure or lack of permission.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dce966aa-a6db-4530-b411-6809446ac5e6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/media/list/{path}": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppContentList"
                                }
                            }
                        }
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Unique application identifier.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "path",
                        "required": true,
                        "description": "The path to sub folder with static content relative to the root folder. Use empty path to access the root folder.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "show",
                        "description": "Optional. List output can include files and folders in different ways:\n* Not recursive, default if show option is not supplied or incorrectly specified, results in output with files and empty directories for the path specified only.\n* Recursive(r), use ?show=r or ?show=recursive, results in a recursive output with files, all empty folders are excluded.\n* All(a), use ?show=a or ?show=all, results in a recursive output with files and empty directories.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Lists media content.\nReturns a JSON formatted array of strings describing the available media content or error if the optional path supplied is not found.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b9a2f75b-f334-4896-9888-78ac54b325b4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/media/thumbnail": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Unique application identifier.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Gets media content from file currently used as application thumbnail.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.\nThe image selected as thumbnail is only updated when application is saved.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "52ebf390-e250-41d5-a5a7-4bbe88d4ce55",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/objects/{objectId}/actions/change-owner": {
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxAppObject"
                                }
                            }
                        }
                    },
                    "400": {
                        "headers": {},
                        "description": "Bad request"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "description": "Identifier of the object.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/UpdateOwner"
                },
                "description": "Sets owner on an app object.\nThe user must be the owner of the object.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c4c3e149-e06e-4384-ba1d-67ad5ce90f33",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/owner": {
            "put": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    },
                    "403": {
                        "headers": {},
                        "description": "Forbidden"
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/UpdateOwner"
                },
                "description": "Changes owner of the app.",
                "x-qlik-access-control": [
                    "change_owner"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "f6434d09-1d2e-4524-b646-925f97b185f1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/publish": {
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublishApp"
                            }
                        }
                    },
                    "description": "Publish information for the app.",
                    "required": true
                },
                "description": "Publishes a specific app to a managed space.",
                "x-qlik-access-control": [
                    "publish"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "abe3e764-155e-49f3-b852-53a143a29592",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RepublishApp"
                            }
                        }
                    },
                    "description": "Republish information for the app.",
                    "required": true
                },
                "description": "Republishes a published app to a managed space.",
                "x-qlik-access-control": [
                    "publish"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "92843805-1074-4e29-af72-20f934c59cbf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/reloads/logs": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptLogList"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves the metadata about all script logs stored for an app.\nReturns an array of ScriptLogMeta objects.",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "edcb9779-a5ee-47b2-a68a-e7897b934073",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/reloads/logs/{reloadId}": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "reloadId",
                        "required": true,
                        "description": "Identifier of the reload.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves the log of a specific reload.\nReturns the log as \"text/plain; charset=UTF-8\".",
                "x-qlik-access-control": [
                    "reload"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "9332edc6-55e1-4488-adae-7588e473af61",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/{appId}/scripts": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptMetaList"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "A scim filter expression defining which script versions should be retrieved. Filterable fields are:\n* ScriptId\n* ModifiedTime\n* ModifierId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Maximum number of records to return from this request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "Opaque definition of which page of the result set to return. Returned from a previous call using the same filter. Not yet supported.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves the script history for an app.\nReturns information about the saved versions of the script.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "f9c28699-b05a-4444-8718-7c49a2a98345",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScriptVersion"
                            }
                        }
                    },
                    "description": "The script to set.",
                    "required": true
                },
                "description": "Sets script for an app.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "dd265b61-237d-4402-8d83-3a35e95efed4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/scripts/{version}": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptVersion"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "description": "Identifier of the script version, or 'current' for retrieving the current version.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Retrieves a version of the script for an app.\nReturns the script text.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "93472b12-fbd4-46f9-b51a-0ff8dd3dc7a2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "description": "Identifier of the script version.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NxPatch"
                            }
                        }
                    },
                    "description": "Array of patches for the object ScriptVersion.\n<div class=note>Only /versionMessage can be modified using operations add, remove and replace.</div>",
                    "required": true
                },
                "description": "Updates a specific version of the script for an app.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "206bf4c7-9ee4-440b-bd91-5034ed8c7321",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "description": "Identifier of the script version",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Deletes a specific version of the script for an app.\nFails if the version to delete is the current version.",
                "x-qlik-access-control": [
                    "update"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "950430ed-10a0-449a-bb6f-a9b6aec15659",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{appId}/space": {
            "put": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSpace"
                            }
                        }
                    },
                    "description": "New space.",
                    "required": true
                },
                "description": "Sets space on a specific app.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "30d2ff2f-9259-4308-bf69-d6f0c3470ba5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "description": "Identifier of the app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "description": "Removes space from a specific app.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "6e386124-932f-4ca0-af6a-03fe6cbe91a8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/{guid}/evaluations": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a list of all historic evaluations for an app GUID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluations"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "guid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "The app guid."
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "fileMode",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Add file transfer headers to response"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Number of results to return per page."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get next page from"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get previous page from"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Property to sort list on"
                    }
                ],
                "description": "Find all evaluations for an app GUID.\nSupports paging via next, prev which are sent in the response body\n",
                "operationId": "evaluation#getEvaluations",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c4148842-2067-4014-96d6-afc1e1d57c20",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Queue an app evaluation",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "App evaluation queued."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Bad request, incorrect body."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "User lacks permissions to evaluate app."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "App does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "guid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Guid of the app."
                    }
                ],
                "description": "Queue an app evaluation by its app guid.\n",
                "operationId": "evaluation#queueEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ac7b1587-10d9-475b-9bae-25b99d0d3148",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Compare two evaluations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comparison"
                                }
                            }
                        },
                        "description": "Comparison executed successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "baseid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the baseline evaluation"
                    },
                    {
                        "in": "path",
                        "name": "comparisonid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the comparison evaluation"
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full list of comparisons including non-significant diffs"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    }
                ],
                "description": "Accepts two evaluation ids and returns a comparison denoting the differences between the two.\n",
                "operationId": "evaluation#compareTwo",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "696b1e4c-8f3f-4dd2-888d-254615542cca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}/actions/download": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Download a comparison log of two evaluations",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {},
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comparison"
                                }
                            }
                        },
                        "description": "Comparison executed successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "baseid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the baseline evaluation"
                    },
                    {
                        "in": "path",
                        "name": "comparisonid",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the comparison evaluation"
                    }
                ],
                "description": "Accepts two evaluation ids and downloads a log, in XML format, denoting the differences between the two.\n",
                "operationId": "evaluation#downloadCompareTwo",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "f5c0aac6-0606-4075-b911-bc11c314c55f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{id}": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    }
                ],
                "description": "Find an evaluation by a specific id.\n",
                "operationId": "evaluation#getOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "2029a33c-e4e9-4476-9208-cedc2a92d479",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/evaluations/{id}/actions/download": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Download a detailed XML log of a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {},
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorError"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    }
                ],
                "description": "Find and download an evaluation log by a specific evaluation id.\n",
                "operationId": "evaluation#downloadOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "79d22b52-0b7d-4a99-9d21-f2501ded86f9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/apps/import": {
            "post": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NxApp"
                                }
                            }
                        }
                    },
                    "404": {
                        "headers": {},
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "description": "The app ID of the target app when source is qvw file.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fallbackName",
                        "description": "The name of the target app when source does not have a specified name, applicable if source is qvw file.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "description": "The file ID to be downloaded from Temporary Content Service (TCS) and used during import.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "The import mode. In `new` mode (default), the source app will be imported as a new app.<div class=note>The `autoreplace` mode is an internal mode only and is not permitted for external use.</div>\n\nOne of:\n* NEW\n* AUTOREPLACE",
                        "schema": {
                            "type": "string",
                            "items": {
                                "enum": [
                                    "NEW",
                                    "AUTOREPLACE"
                                ]
                            }
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the target app.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "NoData",
                        "description": "If NoData is true, the data of the existing app will be kept as is, otherwise it will be replaced by the new incoming data.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "description": "The space ID of the target app.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/FileData"
                            }
                        }
                    },
                    "description": "Path of the source app."
                },
                "description": "Imports an app into the system.",
                "x-qlik-access-control": [
                    "import"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "75292956-ac03-40ac-9d3c-d642a3fe4bf5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/apps/privileges": {
            "get": {
                "responses": {
                    "200": {
                        "headers": {},
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Gets the app privileges for the current user, such as create app and import app. Empty means that the current user has no app privileges.",
                "x-qlik-access-control": [
                    "read"
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "locked",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "9ce7a8e3-d041-4362-8971-e34c6965f58f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/coordinate-shap": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing the shapley values in coordinate form that are associated with a predictionId.",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Stream of coordinate shap values returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getCoordinateShapForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/jobs": {
            "post": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Retrieve jobs that are associated with a prediction. Job with correlation type \"prediction\"",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/automl-job"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getPredictionJobs",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/not-predicted-reasons": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing any rows in a prediction operation where a prediction was unable to be produced.",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Stream of not predicted reasons returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getErrorsForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/predictions": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing the predicted values that are associated with a predictionId.",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Prediction stream returned succesfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getConfigurationsForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/shap": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing the shapley values that are associated with a predictionId.",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Stream of shap values returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getShapForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-predictions/{predictionId}/source": {
            "get": {
                "tags": [
                    "automl-predictions"
                ],
                "summary": "Return a file containing the source values and an index field that are associated with a predictionId .",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {}
                        },
                        "description": "Stream of source values and index field returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/refId"
                    },
                    {
                        "$ref": "#/components/parameters/predictionId"
                    }
                ],
                "operationId": "getSourceForPrediction",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automl-deployments/{deploymentId}/realtime-predictions": {
            "post": {
                "tags": [
                    "automl-deployments"
                ],
                "summary": "Generate predictions in a synchronous request and response.",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {},
                            "text/json": {},
                            "application/parquet": {}
                        },
                        "description": "Stream of combined prediction output returned successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Received a bad argument"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Access forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource conflict"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/appErrorResponse"
                                }
                            }
                        },
                        "description": "Resource unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "includeNotPredictedReason",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, will include a column with the reason why a prediction was not produced."
                    },
                    {
                        "in": "query",
                        "name": "includeShap",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, the shapley values will be included in the response."
                    },
                    {
                        "in": "query",
                        "name": "includeSource",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If true, the source data will be included in the response"
                    },
                    {
                        "in": "query",
                        "name": "index",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The name of the feature in the source data to use as an index in the response data. The column will be included with its original name and values. This is intended to allow the caller to join results with source data."
                    },
                    {
                        "$ref": "#/components/parameters/deploymentId"
                    }
                ],
                "operationId": "postRealtimePredictions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/realtimePredictionInput"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a list of automations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "name eq \"My Automation\" and runMode eq \"scheduled\" and ownerId eq \"sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy\""
                        },
                        "required": false,
                        "description": "Allowed filters: name, runMode, lastRunStatus, ownerId"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "example": 50,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of automations to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "name",
                                "runMode",
                                "state",
                                "createdAt",
                                "updatedAt",
                                "lastRunAt",
                                "lastRunStatus",
                                "+id",
                                "+name",
                                "+runMode",
                                "+state",
                                "+createdAt",
                                "+updatedAt",
                                "+lastRunAt",
                                "+lastRunStatus",
                                "-id",
                                "-name",
                                "-runMode",
                                "-state",
                                "-createdAt",
                                "-updatedAt",
                                "-lastRunAt",
                                "-lastRunStatus"
                            ],
                            "type": "string",
                            "default": "id",
                            "example": "-name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +- prefix indicating sort order. (?query=-name => sort on the name field using descending order)"
                    }
                ],
                "operationId": "getAutomations",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "aaeae2c9-92d8-4aa6-abf8-eb8992d7aeeb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Create an automation",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "createAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Automation object to create"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "db7ecc38-68e6-4f5a-beff-715d93c21cd5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves an automation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "getAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "d563be4d-5a4e-4da4-9371-5e6cabc4bdf9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "automations"
                ],
                "summary": "Update an automation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomationDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "updateAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AutomationDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Automation object to update"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "86079f05-0330-4dc0-9ea2-10e0ad20b158",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "automations"
                ],
                "summary": "Delete an automation",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "deleteAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ff4a29b4-395a-4fd5-a378-16976adc4922",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/copy": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Copy an automation.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "description": "The unique identifier for the automation."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "copyAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the new automation."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a9ecd82b-f8e8-49c9-9bfc-8faba2373bbd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/disable": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Disables an automation.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "disableAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "25b92eb7-5b3f-49ed-ad04-79d6022555c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/enable": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Enable an automation.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "enableAutomation",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "339bab02-36a8-4be1-955b-60117b7f7d41",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/actions/move": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Move an automation to a different user.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "description": "This step will remove the history and change logs of this automation. All linked connections used inside an automation will be detached.",
                "operationId": "moveAutomation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "userId"
                                ],
                                "properties": {
                                    "userId": {
                                        "type": "string",
                                        "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ce7119a0-b6b6-4255-ac5c-e7b114c8be1d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a list of runs for a specific automation.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "status eq \"finished\""
                        },
                        "required": false,
                        "description": "Allowed filters: status, context, startTime and title"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "example": 10,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of runs to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "status",
                                "startTime",
                                "-id",
                                "-status",
                                "-startTime",
                                "+id",
                                "+status",
                                "+startTime"
                            ],
                            "type": "string",
                            "default": "id",
                            "example": "-id"
                        },
                        "required": false,
                        "description": "The field to sort by, with +- prefix indicating sort order. (?query=-startTime => sort on the startTime field using descending order)"
                    }
                ],
                "operationId": "getRuns",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "759f4903-820c-4304-8473-e6526c0b81ee",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Create a run",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunDetailResponseObject"
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    }
                ],
                "operationId": "createRun",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RunDetailRequestObject"
                            }
                        }
                    },
                    "required": true,
                    "description": "Run object to create"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b9d57958-8b69-4f6a-918a-5236189f3aed",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves a run",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunDetailResponseObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "operationId": "getRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "aa7b08a4-54d5-407c-b0bf-455c39c16fbe",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/export": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Export a run.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "url": {
                                            "type": "string",
                                            "example": "https://<bucket>.s3.<region>.amazonaws.com/<run>.json"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "Creates a temporary pre-signed AWS S3 URL to download the raw logs of a completed run. This URL is valid for 5 minutes.",
                "operationId": "exportRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "a3d66394-003f-49b1-914f-58c8aecea1ad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/retry": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Retry a run.",
                "responses": {
                    "204": {
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "This action allows you to retry a specific run by creating a new run using the same inputs.",
                "operationId": "retryRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "25ea7858-99b3-4c18-aa0b-607e5871c0ab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/{id}/runs/{runId}/actions/stop": {
            "post": {
                "tags": [
                    "automations"
                ],
                "summary": "Stop a running automation.",
                "responses": {
                    "204": {
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the automation."
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "schema": {
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "required": true,
                        "description": "The unique identifier for the run."
                    }
                ],
                "description": "Force a run to be stopped immediately.",
                "operationId": "stopRun",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "c91dc93e-7493-4ccf-b6d4-5ce8e786e237",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/settings": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves the automation settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "getSettings",
                "x-qlik-deprecated": true,
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "06327531-c034-4dbf-bdd7-5e97ef17f0a7",
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "automations"
                ],
                "summary": "Update the automation settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsObject"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "putSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsObject"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-deprecated": true,
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "bc159094-53c9-4a29-9e1a-5b429b6c65c2",
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/automations/usage": {
            "get": {
                "tags": [
                    "automations"
                ],
                "summary": "Retrieves all automation usage for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "example": "name eq \"duration\" and date eq \"2021-12-15\""
                        },
                        "required": true,
                        "description": "Indicates how the metrics should be filtered"
                    },
                    {
                        "in": "query",
                        "name": "breakdownBy",
                        "schema": {
                            "type": "string",
                            "example": "automation"
                        },
                        "required": false,
                        "description": "If specified, result will be broken apart for each automation"
                    }
                ],
                "description": "**Limitations:** \n * **Maximum 1000 metrics per API call**",
                "operationId": "getUsageMetrics",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "d95f20bf-19cb-47dd-8ad3-e67f2bd34981",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/conditions": {
            "post": {
                "tags": [
                    "conditions"
                ],
                "summary": "Creates a new condition.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConditionResponse"
                                }
                            }
                        },
                        "description": "Condition created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "createCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionCreateRequest"
                            }
                        }
                    },
                    "description": "The condition create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "49a24014-98bc-4197-8fda-bb12f13d99b1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}": {
            "get": {
                "tags": [
                    "conditions"
                ],
                "summary": "Retrieve a specific condition by id.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Condition"
                                }
                            }
                        },
                        "description": "The condition"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "getCondition",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "c0a02e92-bc39-4ee1-8234-faf19e7cc132",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "conditions"
                ],
                "summary": "Patch values in the condition",
                "responses": {
                    "204": {
                        "description": "The condition was updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A path or value was invalid"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "updateCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionPatch"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "eb1b7e8a-f448-47f3-83bb-1d015030b74d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "conditions"
                ],
                "summary": "Delete the condition",
                "responses": {
                    "204": {
                        "description": "The record was deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "deleteCondition",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "dc4699b8-eaf7-4d2f-b915-ac6b3650d65a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}/evaluations": {
            "post": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Executes the condition",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateEvaluationResponse"
                                }
                            }
                        },
                        "description": "Condition evaluation created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "operationId": "executeCondition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateEvaluationRequest"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "2348206d-e97f-45af-9229-cad187eaddef",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/{id}/evaluations/{evaluationId}": {
            "get": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Get an Evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEvaluationResponse"
                                }
                            }
                        },
                        "description": "The evaluation"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "evaluationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the evaluation"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "6c6cd94b-423b-4de2-8d71-d3dafea625a1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "evaluations"
                ],
                "summary": "Delete an Evaluation",
                "responses": {
                    "204": {
                        "description": "The evaluation was deleted"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "evaluationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the evaluation"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "fa7c69ac-04fe-4f7c-80c8-3da785595a55",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/previews": {
            "post": {
                "tags": [
                    "condition preview"
                ],
                "summary": "Create condition preview request\\",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreviewResponse"
                                }
                            }
                        },
                        "description": "Condition preview request created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "description": "Create condition preview request.",
                "operationId": "conditionsPreview",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionCreateRequest"
                            }
                        }
                    },
                    "description": "Create condition preview request"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e535e4d1-a004-4581-9eab-940c835228ed",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/conditions/previews/{id}": {
            "get": {
                "tags": [
                    "condition preview"
                ],
                "summary": "Get condition preview response",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreviewStatusResponse"
                                }
                            }
                        },
                        "description": "The evaluation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the condition"
                    }
                ],
                "description": "Get condition preview response.",
                "operationId": "conditionsPreviewGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e8df93d1-3ad4-47bc-b402-b195a59ca7bb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/conditions/settings": {
            "get": {
                "tags": [
                    "api settings"
                ],
                "summary": "Retrieves condition manager settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISettings"
                                }
                            }
                        },
                        "description": "The api settings have been successfully returned"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "description": "Lists api settings.",
                "operationId": "ConditionManagerAPISettingsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "910f85df-fc9b-4601-ad6a-36d7ff13e40d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "api settings"
                ],
                "summary": "Updates condition manager settings",
                "responses": {
                    "204": {
                        "description": "api settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Updates API configuration. Accessible only by tenant admins.",
                "operationId": "conditionManagerAPISettingsUpload",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APISettingsUpload"
                            }
                        }
                    },
                    "description": "Request for updating the api settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "aef58d45-55bb-4a60-93d0-4c001e26da1d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-assets": {
            "post": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Save new data asset.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Created new data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataAsset"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "65095de7-c9e6-4d3d-aad1-1e0226d1872c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Batch delete data assets by IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data asset with all child objects."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataAssets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "04fc490c-a7ee-46c6-82a8-ee3ae2de406b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-assets/{data-asset-id}": {
            "get": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Get data asset by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataAsset",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "8a1a5b53-861c-4dd6-ad24-5b575af206ca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Patch data asset.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Patched data asset successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Patched data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "be2de806-4f48-4729-9d6b-2978c2332b52",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-asset"
                ],
                "summary": "Update data asset.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAsset"
                                }
                            }
                        },
                        "description": "Updated data asset successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataAsset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataAsset"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "91505984-1967-4e75-a826-6140267f03e6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get descriptive info for the specified data files.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDataFileInfosResponse"
                                }
                            }
                        },
                        "description": "The file list was retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "allowInternalFiles",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": false
                        },
                        "example": false,
                        "description": "If set to false, do not return data files with internal extensions else return all the data files."
                    },
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                            "nullable": true
                        },
                        "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                        "description": "Only return files scoped to the specified app.  If this parameter is not specified, only files that are not\r\nscoped to any app are returned.  \"*\" implies all app-scoped files are returned."
                    },
                    {
                        "in": "query",
                        "name": "connectionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                            "nullable": true
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "description": "Return files that reside in the space referenced by the specified DataFiles connection.  If this parameter\r\nis not specified, the user's personal space is implied."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "example": 5,
                            "maximum": 1000,
                            "minimum": 1
                        },
                        "example": 5,
                        "description": "If present, the maximum number of data files to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "example": "MyFile.csv",
                            "nullable": true
                        },
                        "example": "MyFile.csv",
                        "description": "Filter the list of files returned to the given file name."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string",
                            "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                            "nullable": true
                        },
                        "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                        "description": "If present, fetch the data files for the specified owner.  If a connectionId is specified in this case, the\r\nreturned list is constrained to the specified space.  If connectionId is not specified, then all files owned\r\nby the specified user are returned regardless of the personal space that a given file resides in."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string",
                            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                            "nullable": true
                        },
                        "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                        "description": "If present, the cursor that starts the page of data that is returned."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "$ref": "#/components/schemas/GetDataFileInfosSortField"
                        },
                        "description": "The name of the field used to sort the result.  By default, the sort order is ascending.  Putting a '+' prefix on\r\nthe sort field name explicitly indicates ascending sort order.  A '-' prefix indicates a descending sort order."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "4faf5d6c-7113-41be-b947-d8b8c36f4ea0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Upload a new data file.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "New file was uploaded and created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A file with the same name already exists in the specified user or app scope."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file exceeds the user's quota for maximum file size to upload."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client."
                    }
                },
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "Json.Name"
                                ],
                                "properties": {
                                    "File": {
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true,
                                        "description": "IFormFile form multipart/form-data"
                                    },
                                    "Json": {
                                        "type": "object",
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "MyFile.csv",
                                                "pattern": "^[^<>\":\\u0000|?*]+$",
                                                "description": "Name that will be given to the uploaded file.  It should be noted that the '/' character\r\nin a data file name indicates a 'path' separator in a logical folder hierarchy for the name.  Names that\r\ncontain '/'s should be used with the assumption that a logical 'folder hierarchy' is being defined for the\r\nfull pathname of that file.  '/' is a significant character in the data file name, and may impact the\r\nbehavior of future APIs which take this folder hierarchy into account."
                                            },
                                            "appId": {
                                                "type": "string",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If this file should be bound to the lifecycle of a specific app, this is the ID of this app."
                                            },
                                            "sourceId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If a SourceId is specified, this is the ID of the existing data file whose content should be copied into\r\nthe specified data file.  That is, instead of the file content being specified in the Data element,\r\nit is effectively copied from an existing, previously uploaded file."
                                            },
                                            "connectionId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                                                "nullable": true,
                                                "description": "If present, this is the DataFiles connection that the upload should occur in the context of.  If absent,\r\nthe default is that the upload will occur in the context of the MyDataFiles connection.  If the DataFiles\r\nconnection is different from the one specified when the file was last POSTed or PUT, this will result in\r\na logical move of this file into the new space."
                                            },
                                            "tempContentFileId": {
                                                "type": "string",
                                                "example": "624b0f54459f1c00018dade4",
                                                "nullable": true,
                                                "description": "If a TempContentFileId is specified, this is the ID of a previously uploaded temporary content file whose\r\ncontent should be copied into the specified data file.  That is, instead of the file content being specified\r\nin the Data element, it is effectively copied from an existing, previously uploaded file.  The expectation\r\nis that this file was previously uploaded to the temporary content service, and the ID specified here is\r\nthe one returned from the temp content upload request."
                                            }
                                        },
                                        "description": "See PostDataFileRequest schema which defines request structure.\n See  model.",
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "encoding": {
                                "File": {
                                    "style": "form"
                                },
                                "Json": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "de6ce592-09d5-4293-aba0-aeccedca5bdd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/{id}": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get descriptive info for the specified data file.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "The file was located."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "7f5b7aac-ca10-497d-82ef-1d22bec54a75",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Re-upload an existing data file.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataFileUploadResponse"
                                }
                            }
                        },
                        "description": "The fie was updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "If the file was renamed during the update, a file with the new name already exists in\r\n            the specified user or app scope.  Also, if the space that the file resides in was changed as part of the update,\r\n            a file with the same name already resides in the new space."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file exceeds the user's quota for maximum file size to upload."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file to update."
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "File": {
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true,
                                        "description": "IFormFile form multipart/form-data"
                                    },
                                    "Json": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "MyFile.csv",
                                                "pattern": "^[^<>\":\\u0000|?*]+$",
                                                "nullable": true,
                                                "description": "Name that will be given to the uploaded file.  If this name is different than the name used when the file\r\nwas last POSTed or PUT, this will result in a rename of the file.  It should be noted that the '/' character\r\nin a data file name indicates a 'path' separator in a logical folder hierarchy for the name.  Names that\r\ncontain '/'s should be used with the assumption that a logical 'folder hierarchy' is being defined for the\r\nfull pathname of that file.  '/' is a significant character in the data file name, and may impact the\r\nbehavior of future APIs that take this folder hierarchy into account."
                                            },
                                            "appId": {
                                                "type": "string",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If this file should be bound to the lifecycle of a specific app, this is the ID of this app."
                                            },
                                            "sourceId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                                                "nullable": true,
                                                "description": "If a SourceId is specified, this is the ID of the existing data file whose content should be copied into\r\nthe specified data file.  That is, instead of the file content being specified in the Data element,\r\nit is effectively copied from an existing, previously uploaded file."
                                            },
                                            "connectionId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                                                "nullable": true,
                                                "description": "If present, this is the DataFiles connection that the upload should occur in the context of.  If absent,\r\nthe default is that the upload will occur in the context of the MyDataFiles connection.  If the DataFiles\r\nconnection is different from the one specified when the file was last POSTed or PUT, this will result in\r\na logical move of this file into the new space."
                                            },
                                            "tempContentFileId": {
                                                "type": "string",
                                                "example": "624b0f54459f1c00018dade4",
                                                "nullable": true,
                                                "description": "If a TempContentFileId is specified, this is the ID of a previously uploaded temporary content file whose\r\ncontent should be copied into the specified data file.  That is, instead of the file content being specified\r\nin the Data element, it is effectively copied from an existing, previously uploaded file.  The expectation\r\nis that this file was previously uploaded to the temporary content service, and the ID specified here is\r\nthe one returned from the temp content upload request."
                                            }
                                        },
                                        "description": "See PutDataFileRequest schema which defines request structure.\n See  model.",
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "encoding": {
                                "File": {
                                    "style": "form"
                                },
                                "Json": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "44c71b45-34d6-4d86-9af9-596986791518",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            },
            "delete": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Delete the specified data file.",
                "responses": {
                    "204": {
                        "description": "The fie was deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file to delete."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "bf34ee27-7917-4521-b827-771cf479706c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/{id}/actions/change-owner": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the owner of an existing data file.",
                "responses": {
                    "204": {
                        "description": "The file's owner was changed."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "An owner with the specified ID does not exist."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The user does not have permission to modify the specified data file."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file whose owner will be updated."
                    }
                ],
                "description": "This is primarily an admin type of operation.  In general, the owner of a data file is implicitly set as\r\npart of a data file upload.  For data files that reside in a personal space, changing the owner has the\r\neffect of moving the data file to the new owner's personal space.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeDataFileOwnerRequest"
                            }
                        }
                    },
                    "description": "The request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "0a3dc1b1-e93d-4d41-9e72-136f35293f8b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/{id}/actions/change-space": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the space that an existing data file resides in.",
                "responses": {
                    "204": {
                        "description": "The file's space was changed."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A space with the specified ID does not exist."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The user does not have permission to modify the specified data file."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A data file with the specified ID was not found."
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The file is already locked for read or write by another client."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the data file whose space will be updated."
                    }
                ],
                "description": "This is to allow for a separate admin type of operation that is more global in terms of access in cases\r\nwhere admin users may not explicitly have been granted full access to a given space within the declared\r\nspace-level permissions.  If the space ID is set to null, then the datafile will end up residing in the\r\npersonal space of the user who is the owner of the file.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeDataFileSpaceRequest"
                            }
                        }
                    },
                    "description": "The request."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "b2ca5883-a4ce-432f-8e46-b0583f8ba002",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/actions/change-space": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Change the spaces that a set of existing data files reside in a a single batch.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiStatusResponse"
                                }
                            }
                        },
                        "description": "The result status of the change space operations on each specified data file."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "description": "This is to allow for a separate admin type of operation that is more global in terms of access in cases\r\nwhere admin users may not explicitly have been granted full access to a given space within the declared\r\nspace-level permissions.  If the space ID is set to null, then the data file will end up residing in the\r\npersonal space of the user who is the owner of the file.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataFileBatchChangeSpaceRequest"
                            }
                        }
                    },
                    "description": "The batch of IDs for each data file in the batch whose space will be changed along with\r\n            the space IDs for each change."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "555ac342-7865-4bb4-b515-650459872b9f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/actions/delete": {
            "post": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Delete the specified set of data files as a single batch.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiStatusResponse"
                                }
                            }
                        },
                        "description": "The result status of the delete operations on each specified data file."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataFileBatchDeleteRequest"
                            }
                        }
                    },
                    "description": "The IDs for the batch of data files to delete."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "95f77ae6-29c0-4fd8-8f96-27b448aa9fa4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-files/connections": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get the list of built-in connections used by the engine to load/write data files.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConnectionsResponse"
                                }
                            }
                        },
                        "description": "Connection list was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string",
                            "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                            "nullable": true
                        },
                        "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                        "description": "If present, get connections with connection strings that are scoped to the given app ID."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "example": 5,
                            "maximum": 1000,
                            "minimum": 1
                        },
                        "example": 5,
                        "description": "If present, the maximum number of data file connection records to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "example": "MySenseApp",
                            "nullable": true
                        },
                        "example": "MySenseApp",
                        "description": "If present, only return connections with the given name."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string",
                            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                            "nullable": true
                        },
                        "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
                        "description": "If present, the cursor that starts the page of data that is returned."
                    },
                    {
                        "in": "query",
                        "name": "personal",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "example": true
                        },
                        "example": true,
                        "description": "If true, only return the connections that access data in a personal space.  Default is false."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "$ref": "#/components/schemas/GetConnectionsSortField"
                        },
                        "description": "The name of the field used to sort the result.  By default, the sort is ascending.  Putting a '+' prefix on\r\nthe sort field name explicitly indicates ascending sort order.  A '-' prefix indicates a descending sort order."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "example": "617979737a9f56e49dea2e6e",
                            "nullable": true
                        },
                        "example": "617979737a9f56e49dea2e6e",
                        "description": "If present, only return the connection that accesses data files in the specified space."
                    }
                ],
                "description": "The non-filtered list contains a set of hardcoded connections, along with one connection per team space that\r\nthe given user has access to.",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "ffbb68b7-deba-4ca7-9d26-3895bddd92fb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-files/connections/{id}": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get the built-in connection used by the engine to load/write data files given a connection ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionsResponse"
                                }
                            }
                        },
                        "description": "The connection was returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The space referenced by the specified connection was not found, or is not accessible to the current user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "A connection with the specified ID was not found."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                        "required": true,
                        "description": "The ID of the connection."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "e7364aa5-18a7-48a5-ba3c-47bc6dc42225",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-files/quotas": {
            "get": {
                "tags": [
                    "datafiles"
                ],
                "summary": "Get quota information for the calling user.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuotaResponse"
                                }
                            }
                        },
                        "description": "The quota information was retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage",
                    "external/build"
                ],
                "x-qlik-entity-revision": "4923b91b-fc3d-4f07-abf1-685baf2e1f34",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-sets": {
            "post": {
                "tags": [
                    "data-set"
                ],
                "summary": "Save new data set",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Created new data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataSet"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "abc73221-4edd-4a16-ae9e-79b0160f2b31",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-set"
                ],
                "summary": "Batch delete data sets.",
                "responses": {
                    "204": {
                        "description": "Deleted data sets."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataSets",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "5abb6b66-d51a-416e-8cbc-60d53eb992d5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-sets/{data-set-id}": {
            "get": {
                "tags": [
                    "data-set"
                ],
                "summary": "Get data set by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataSet",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "0a4b22b1-6a50-4c12-aee5-7adbd5de1dc1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-set"
                ],
                "summary": "Patch data set.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Patched data set successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Patched data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "888a1116-54c9-4cf9-acef-0b48c6c10072",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-set"
                ],
                "summary": "Update data set.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSet"
                                }
                            }
                        },
                        "description": "Updated data set successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataSet"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "a76ef655-aaa5-4fbb-bcb3-0c52975b4ef2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-sets/{data-set-id}/profiles": {
            "get": {
                "tags": [
                    "profile"
                ],
                "summary": "Get profile for the given dataset and connection Id pair, if the profile already exists in the system. Profile returned can be either latest or Stale one based on when it was computed.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSetProfile"
                                }
                            }
                        },
                        "description": "Return profiles of data set."
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSetProfile"
                                }
                            }
                        },
                        "description": "The profile is currently running."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-set-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "dataConnectionIds",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated data connection IDs."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false
                    }
                ],
                "operationId": "getDataSetProfiles",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e7bacc8b-82e8-4232-a886-ed3dc1d8596d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-stores": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data stores.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataStore"
                                }
                            }
                        },
                        "description": "Successful Operation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataStores",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "255d7b66-cb3a-472a-9058-cb72bd750733",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "data-store"
                ],
                "summary": "Save new data store.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Created new data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "saveDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataStore"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "16294615-4623-475e-abce-0be5773180f3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data stores if it does not contain any data-assets.",
                "responses": {
                    "204": {
                        "description": "Deleted empty data stores."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "operationId": "batchDeleteDataStores",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchIdDto"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "48aeee15-cc96-4fb9-8ecb-1fcf07fbc5c0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-id}": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get data store by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    }
                ],
                "operationId": "getDataStore",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "f4a5b6df-5fce-42f1-915a-7a8d7d6b6e89",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-store"
                ],
                "summary": "Patch data store.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Patched data store successfully."
                    },
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Patched data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "patchDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/JsonPatch"
                                },
                                "description": "Array of JSON patch documents as defined by RFC 6902."
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "9cb18ee4-3201-4c5b-976b-fbb506adb1cc",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-store"
                ],
                "summary": "Update data store.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataStore"
                                }
                            }
                        },
                        "description": "Updated data store successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "operationId": "updateDataStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataStore"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "b85c1aa0-0d27-470b-b001-908d104ced17",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-ids}/data-assets": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data assets belonging to the data store(s).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataAsset"
                                }
                            }
                        },
                        "description": "Successful Operation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataAssets",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "09c1f258-b650-46a3-94ef-8a067895a832",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data assets and child data-sets by data-store IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data assets successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    }
                ],
                "operationId": "deleteDataAssetByDataStoreId",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "a7b2591c-012d-4b6b-82db-95b32ff5eb3e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-stores/{data-store-ids}/data-assets/{data-asset-ids}/data-sets": {
            "get": {
                "tags": [
                    "data-store"
                ],
                "summary": "Get all data sets belonging to the data store(s) and data asset(s).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDataSet"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data asset IDs or * to include all data assets."
                    },
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100
                        },
                        "required": false,
                        "description": "Page size limit."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "projections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        },
                        "required": false,
                        "description": "Comma-separated fields to return in the response."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Comma-separated fields and field start with '-' character sorts the result set in descending order."
                    }
                ],
                "operationId": "getDataSets",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "0f1baa36-aedc-4d80-96c8-2711e6211a7a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "data-store"
                ],
                "summary": "Delete data sets by data-store IDs and data-asset IDs.",
                "responses": {
                    "204": {
                        "description": "Deleted data sets."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have valid authentication credentials."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "User does not have access to the resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "The input request conflicts with the current state of the resource."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Requested service is not available."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "data-asset-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data asset IDs or * to include all data assets."
                    },
                    {
                        "in": "path",
                        "name": "data-store-ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": true,
                        "description": "Comma-separated data store IDs or * to include all data stores."
                    }
                ],
                "operationId": "deleteDataSetsByDataStoreIdsAndDataAssetIds",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "160bcc32-904f-467f-acfb-d53ae7747ee3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/evaluations": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a list of all historic evaluations for app item id or an app GUID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluations"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app guid."
                    },
                    {
                        "in": "query",
                        "name": "fileMode",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Add file transfer headers to response"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    },
                    {
                        "in": "query",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app item id."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Number of results to return per page."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get next page from"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app evaluation id to get previous page from"
                    }
                ],
                "description": "Find all evaluations for an app item id or GUID. appId or itemId has to be set in a query parameter.\nNOTE: It is preferred to use the app item id as this lookup is more performant.\nSupports paging via next, prev which are sent in the response body\n",
                "operationId": "evaluation#getEvaluations",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": true,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Queue an app evaluation",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "App evaluation queued."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad request, incorrect body."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User lacks permissions to evaluate app."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Queue an app evaluation by its item id or app guid.\nNOTE: It is preferred to use the app item id as this lookup is more performant.\n",
                "operationId": "evaluation#queueEvaluation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "The parameters of the evaluation"
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": true,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/evaluations/{id}": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Retrieve a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    },
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Get the full data of the evaluation"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specify output format, currently supported are 'json' and 'xml'"
                    }
                ],
                "description": "Find an evaluation by a specific id.\n",
                "operationId": "evaluation#getOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": true,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/evaluations/{id}/download": {
            "get": {
                "tags": [
                    "evaluation"
                ],
                "summary": "Download a detailed XML log of a specific evaluation",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/evaluation"
                                }
                            }
                        },
                        "description": "Evaluation(s) retrieved successfully."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "abcdefghijklmnopq",
                        "required": true,
                        "description": "Id of the desired evaluation."
                    }
                ],
                "description": "Find and download an evaluation log by a specific evaluation id.\n",
                "operationId": "evaluation#downloadOneEvaluation",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-deprecated": true,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/reports": {
            "post": {
                "tags": [
                    "reports"
                ],
                "summary": "Queue a new report request generation.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {}
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "https://qlikcloud.com:443/api/v1/reports/0c5c08d3-c211-415a-8f47-1f3e2d2c4476/status"
                                },
                                "description": "The uri to get the processing status of the requested report."
                            }
                        },
                        "description": "Report request accepted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-400000",
                                            "title": "bad or malformed http request",
                                            "detail": "invalid outputType"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax, errors in params or the report request is not valid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-401000",
                                            "title": "forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-403000",
                                            "title": "forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Forbidden, the user does not have access rights."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-404000",
                                            "title": "Not found",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "HTTP-429",
                                            "title": "Too Many Requests",
                                            "detail": "The user has sent too frequent requests which resulted in an undesired response code (\"error rate limiting\")"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-500000",
                                            "title": "Internal server error",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "operationId": "postReports",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "Definition of the report request.\nPlease note that sense-story-x.0, sense-excel-template-1.0, sense-data-x.0 and qv-data-x.0 types are only for internal use.\n\nEach report request type requires a specific template to be provided:\n - composition-1.0 requires compositionTemplates to be set\n - sense-image-1.0 requires senseImageTemplate to be set\n - sense-sheet-1.0 requires senseSheetTemplate to be set\n\nEach template type supports specific output types:\n - composition-1.0 supports only pdfcomposition and pptxcomposition output types\n - sense-image-1.0 supports pdf and image output types\n - sense-sheet-1.0 supports only pdf output type\n\nEach output type requires a specific output to be provided:\n - pdfcomposition requires pdfCompositionOutput to be set\n - pptxcomposition requires pptxCompositionOutput to be set\n - pdf requires pdfOuput to be set\n - image requires imageOutput to be set\n"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "e8ed80be-7b42-47cf-a92c-b2ee9aa50802",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 10
                }
            }
        },
        "/v1/reports/{id}/status": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Get report request processing status.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportStatus"
                                }
                            }
                        },
                        "description": "Returns the request processing status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-400000",
                                            "title": "Bad or malformed request",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Bad request. Malformed syntax, errors in params."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-401000",
                                            "title": "Forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-403000",
                                            "title": "Forbidden",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Forbidden, user did not authenticate."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-404000",
                                            "title": "url path not found",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "HTTP-429",
                                            "title": "Too Many Requests",
                                            "detail": "The user has sent too frequent requests which resulted in an undesired response code (\"error rate limiting\")"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "REP-500000",
                                            "title": "Internal server error",
                                            "detail": ""
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "example": "01562a37-23e3-4b43-865d-84c26122276c"
                        },
                        "required": true,
                        "description": "Identifier of the request."
                    }
                ],
                "operationId": "getStatus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/build"
                ],
                "x-qlik-entity-revision": "b8767dc4-5707-4158-9f46-449b39fbd434",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/csp-origins": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Retrieves all CSP entries for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntryList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "childSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'childSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "connectSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'connectSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "connectSrcWSS",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'connectSrcWSS', true/false."
                    },
                    {
                        "in": "query",
                        "name": "fontSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'fontSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "formAction",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'formAction', true/false."
                    },
                    {
                        "in": "query",
                        "name": "frameAncestors",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'frameAncestors', true/false."
                    },
                    {
                        "in": "query",
                        "name": "frameSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'frameSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "imgSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'imgSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of CSP-Origins to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "mediaSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'mediaSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by name (wildcard and case insensitive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page."
                    },
                    {
                        "in": "query",
                        "name": "objectSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'objectSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "origin",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by origin (wildcard and case insensitive)."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page."
                    },
                    {
                        "in": "query",
                        "name": "scriptSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'scriptSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "-name",
                                "origin",
                                "-origin",
                                "createdDate",
                                "-createdDate",
                                "modifiedDate",
                                "-modifiedDate"
                            ],
                            "type": "string"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order."
                    },
                    {
                        "in": "query",
                        "name": "styleSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'styleSrc', true/false."
                    },
                    {
                        "in": "query",
                        "name": "workerSrc",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by directive 'workerSrc', true/false."
                    }
                ],
                "operationId": "listCSPEntries",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "c365d74d-06a4-4be0-9eaf-601314f092ff",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Creates a new CSP entry",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "operationId": "createCSPEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CSPEntryContent"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "28edf14c-b77e-4e0f-9302-6f30c77d6ee8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/csp-origins/{id}": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Returns details for a specific CSP entry",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "operationId": "getCSPEntry",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "9924cfed-e33b-4d19-afcb-fc7d5400084b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Updates a CSP entry",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPEntry"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "operationId": "updateCSPEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CSPEntryContent"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "feb0ab51-015b-43be-b094-60b1c56fa317",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Deletes a specific CSP entry",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The CSP entry's unique identifier."
                    }
                ],
                "operationId": "deleteCSPEntry",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "8becfa7a-38b4-4513-9ac0-43b9acdd27ae",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/csp-origins/actions/generate-header": {
            "get": {
                "tags": [
                    "csp-origins"
                ],
                "summary": "Retrieves the CSP header for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CSPHeader"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Acceptable"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Service Unavailable"
                    }
                },
                "operationId": "getCSPHeader",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "dd17316a-fa25-4070-bfa1-b102c8bbbd23",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/csrf-token": {
            "get": {
                "tags": [
                    "csrf"
                ],
                "summary": "Returns CSRF token via the qlik-csrf-token header.",
                "responses": {
                    "204": {
                        "headers": {
                            "qlik-csrf-token": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "CSRF token."
                            }
                        },
                        "description": "Successfully returned token in qlik-csrf-token header"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Errors"
                                        },
                                        {
                                            "example": {
                                                "code": "CSRF-TOKEN-4",
                                                "title": "CSRF token not supported for given authentication type"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Token is not supported for the auth mechanism being used."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Errors"
                                        },
                                        {
                                            "example": {
                                                "code": "CSRF-TOKEN-3",
                                                "title": "No token found"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Token not found"
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "0b526ee8-7bc8-440b-a593-3855c911217e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/questions/actions/ask": {
            "post": {
                "tags": [
                    "questions"
                ],
                "summary": "Returns the generated response for parsed chat queries, if no app was specified nor present in conversation context, suggests matching apps.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryNotCreated"
                                }
                            }
                        },
                        "description": "The sentence is not created as an app was not specified, but matching apps are suggested"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryCreated"
                                }
                            }
                        },
                        "description": "The sentence created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "qlik-web-integration-id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "This header is only required for external clients or mashups for QCS, this value of this property should be the id of the web integration set up for the external client/mashup"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "7944dbd8-e376-4340-b1f5-7b20326957db",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/questions/actions/filter": {
            "post": {
                "tags": [
                    "questions"
                ],
                "summary": "Returns NL metrics based on provided app IDs the user has access to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NLMetricsResponse"
                                }
                            }
                        },
                        "description": "If the user has access to any of the provided app id"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The payload is not formed correctly."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User is not authorized"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 100,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries returned"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A cursor pointing to the page of data to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "createdAt",
                                "updatedAt",
                                "+createdAt",
                                "+updatedAt",
                                "-createdAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "+createdAt"
                        },
                        "required": false,
                        "description": "A single field from the data model on which to sort the response. The '+' or '-' operator may be used to specify ascending or desending order.\n"
                    }
                ],
                "operationId": "filterMetrics",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NLMetricsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/embed"
                ],
                "x-qlik-entity-revision": "04e44004-cc4b-436c-9ac9-329f2c115731",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Lists all extensions.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extensions"
                                }
                            }
                        },
                        "description": "OK. Lists all extensions."
                    }
                },
                "operationId": "getExtensions",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "3f466ec5-f7df-4ee0-b742-219c560960b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "extensions"
                ],
                "summary": "Creates a new extension. If a file is provided, the data field is not required.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "Created. Creates a new extension and returns it."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "createExtension",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/extension"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Extension archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "06d5b162-4362-4dd0-afe3-c07a2a8c1601",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions/{id}": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Returns a specific extension.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "OK. Returns extension with {id}."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "operationId": "getExtensionById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "7abe39d4-38e4-484d-8ca0-63eb73e25d5e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "extensions"
                ],
                "summary": "Updates a specific extension with provided data. If a file is provided, the data field is not required.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extension"
                                }
                            }
                        },
                        "description": "OK. Extension has been updated."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to update extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "operationId": "updateExtensionById",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/extension"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Extension archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "93253f95-12a2-4e97-a316-ed0affa2c746",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "extensions"
                ],
                "summary": "Deletes a specific extension.",
                "responses": {
                    "204": {
                        "description": "No content. Soft deletes the extension."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to delete extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "operationId": "deleteExtensionById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "016f1d31-bb42-48c5-949e-3e7045cb3a18",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/extensions/{id}/file": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Downloads the extension as an archive.",
                "responses": {
                    "200": {
                        "description": "OK. Extension exists. Returns the extension archive."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "operationId": "getExtensionArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "b6cc71b6-f41e-4239-90fc-d12d52804acb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/extensions/{id}/file/{filepath}": {
            "get": {
                "tags": [
                    "extensions"
                ],
                "summary": "Downloads a file from the extension archive.",
                "responses": {
                    "200": {
                        "description": "OK. Extension exists and the file specified exists. Returns the specific file."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read extension with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the extension with {id} or the file does not exist in the archive."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Extension with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "filepath",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Path to the file archive for the specified extension archive. Folders separated with forward slashes."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Extension identifier or its qextFilename."
                    }
                ],
                "operationId": "getFileFromExtensionArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "32bd4d13-07a4-4d33-9634-634d4a3f5885",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/themes": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Lists all themes.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/themes"
                                }
                            }
                        },
                        "description": "OK. Lists all themes."
                    }
                },
                "operationId": "getThemes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "2b3bdc92-b85f-4c9f-a499-9f8f59537d70",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "themes"
                ],
                "summary": "Creates a new theme. If a file is provided, the data field is not required.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/theme"
                                }
                            }
                        },
                        "description": "Created. Creates a new theme and returns it."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "createTheme",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/theme"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Theme archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "21f474a4-3373-4ce6-a33a-2c5e15cfa2c2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/themes/{id}": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Returns a specific theme.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/theme"
                                }
                            }
                        },
                        "description": "OK. Returns theme with {id}."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename"
                    }
                ],
                "operationId": "getThemeById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "b24aa736-1bdd-4bea-8d55-1ff521f68be3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "themes"
                ],
                "summary": "Updates a specific theme with provided data. If a file is provided, the data field is not required.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/themes"
                                }
                            }
                        },
                        "description": "OK. Theme has been updated."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to update theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Conflict. Resource with same unique identity already exists."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unsupported media type. Body of the payload is not a valid JSON object."
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unprocessable entity. Validation error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "operationId": "updateThemeById",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/theme"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Theme archive."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "fa928850-6565-40fc-8cf9-dae1373d2bf1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "themes"
                ],
                "summary": "Deletes a specific theme.",
                "responses": {
                    "204": {
                        "description": "No content. Soft deletes the theme."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to delete themes with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "operationId": "deleteThemeById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "383bdbc1-5f5f-469a-9109-d72b84d821c7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/themes/{id}/file": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Downloads the theme as an archive.",
                "responses": {
                    "200": {
                        "description": "OK. Theme exists. Returns the theme archive."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find the theme with {id}."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename"
                    }
                ],
                "operationId": "getThemeArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "89b4c8ac-b7f6-4952-bf3c-5ad87a3c30a1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/themes/{id}/file/{filepath}": {
            "get": {
                "tags": [
                    "themes"
                ],
                "summary": "Downloads a file from the theme archive.",
                "responses": {
                    "200": {
                        "description": "OK. Theme exists and the file specified exists. Returns the specific file."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Forbidden. User is not authorized to read theme with {id}."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Not found. Could not find a theme with {id} or the file does not exist in the archive."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Gone. Theme with {id} has been deleted."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "filepath",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Path to the file archive for the specified theme archive. Folders separated with forward slashes."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Theme identifier or its qextFilename."
                    }
                ],
                "operationId": "getFileFromThemeArchive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/extend"
                ],
                "x-qlik-entity-revision": "227c9975-134f-47df-b564-ef2b0ddcc386",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Finds and returns the persisted audit events for the given tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "eventTime",
                        "schema": {
                            "type": "string",
                            "example": "2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z",
                            "pattern": "YYYY-MM-DDThh:mm:ss.sssZ/YYYY-MM-DDThh:mm:ss.sssZ"
                        },
                        "description": "The start/end time interval formatted in ISO 8601 to search by eventTime. For example, \"?eventTime=2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z\"."
                    },
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The case-sensitive string used to search by eventType."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The comma separated list of audit unique identifiers."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The maximum number of resources to return for a request."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "default": "-eventTime"
                        },
                        "description": "The property of a resource to sort on (default sort is -eventTime). The supported properties are source, eventType, and eventTime. A property must be prefixed by + or - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "source",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The case-sensitive string used to search by source."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The case-sensitive string used to search by userId."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "operationId": "audits",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6f0fca17-58a1-4fc8-bff2-73a2be88007c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/{id}": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Finds and returns the persisted audit events for the given tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetByIDResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The audit item's unique identifier."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "operationId": "audit",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9dc10f4a-3660-429b-b5ee-7df6e0328800",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/archive": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Retrieves audit events from long term storage.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetArchiveResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "date",
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2020-02-20",
                            "pattern": "YYYY-MM-DD"
                        },
                        "required": true,
                        "description": "Date to be used as filter and criteria during extraction.",
                        "allowEmptyValue": false
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "Finds and returns audit events from the archive, formatted as a JSON array, for the given date and tenant (in JWT).",
                "operationId": "archive",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "44c7308c-5e85-4793-b91b-089606b55783",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/settings": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Returns the server configuration options.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSettingsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "description": "It includes options that represent the server configuration state and parameters that were used to run the server with certain functionality.",
                "operationId": "getSettings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6ba2ec5c-af68-468c-9748-23de69ed8844",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/sources": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Finds and returns the distinct list of unique event sources.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetObjectsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "operationId": "sources",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d46fd130-b625-40c0-a50f-6f43536a904e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/audits/types": {
            "get": {
                "tags": [
                    "audits"
                ],
                "summary": "Finds and returns the distinct list of unique event types.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetObjectsResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "operationId": "eventTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ff6dfc83-47f4-4a52-9ac2-10d12908c79e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/brands": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Lists all brand entries for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandsList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Cursor to previous."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Maximum number of brands to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "id",
                                "+id",
                                "-id",
                                "createdAt",
                                "+createdAt",
                                "-createdAt",
                                "updatedAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-id"
                        },
                        "required": false,
                        "description": "Field to sort by, prefixed with -/+ to indicate the order."
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Cursor to the next page."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9fe2106a-d27d-408d-b80b-c639fd0a4188",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Creates a new brand",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Created Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "logo": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a JPG or PNG file that will be adjusted to fit in a 'box' measuring 109px in width and 62 px in height while maintaining aspect ratio. Maximum size of 300 KB, but smaller is recommended."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the brand."
                                    },
                                    "styles": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a JSON file to define brand style settings. Maximum size is 100 KB. This property is not currently operational."
                                    },
                                    "favIcon": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a properly formatted ICO file. Maximum size is 100 KB."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of the brand."
                                    }
                                }
                            },
                            "example": {
                                "logo": "image-file-content",
                                "name": "My brand",
                                "styles": "json-file-content",
                                "favIcon": "image-file-content",
                                "description": "Some brand description"
                            },
                            "encoding": {
                                "logo": {
                                    "contentType": "image/png, image/jpeg"
                                },
                                "styles": {
                                    "contentType": "application/json"
                                },
                                "favIcon": {
                                    "contentType": "image/x-icon, image/vnd.microsoft.icon"
                                }
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "65554325-08ae-4cba-8e54-acef24a65916",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Retrieves a specific brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7530f44c-2eac-4a6e-a4b1-36b33bc4dd95",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "brands"
                ],
                "summary": "Patches a brand",
                "responses": {
                    "204": {
                        "description": "No Content Response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BrandPatch"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "347ecfd0-f5bc-48db-a780-b901b19ccedf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "brands"
                ],
                "summary": "Deletes a specific brand",
                "responses": {
                    "204": {
                        "description": "No Content Response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ffa4ae4b-6b60-4bae-af7c-d16d429c943d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/actions/activate": {
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Activates a brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Responds with the brand that was activated."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Sets the brand active and de-activates any other active brand. If the brand is already active, no action is taken.",
                "requestBody": {
                    "content": {
                        "application/json": {}
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "099b1351-5462-41a7-b066-1d5832b7ac14",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/actions/deactivate": {
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Deactivates a brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        },
                        "description": "Responds with the brand that was deactivated."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    }
                ],
                "description": "Sets the brand so it is no longer active. If the brand is already inactive, no action is taken.",
                "requestBody": {
                    "content": {
                        "application/json": {}
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "39d2ba1d-228b-4238-ac4d-fb13e6f234f0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/{brand-id}/files/{brand-file-id}": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Downloads the brand file",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "79018466-6967-45d2-b069-325fd2813424",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "brands"
                ],
                "summary": "Creates a brand file",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandFile"
                                }
                            }
                        },
                        "description": "Created Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path and name of a file to upload."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/png, image/jpeg, image/x-icon, image/vnd.microsoft.icon, application/json"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d76f3a41-ad89-4472-90e7-2914dfd977ee",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "brands"
                ],
                "summary": "Updates existing file",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandFile"
                                }
                            }
                        },
                        "description": "OK Response - file updated"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "A file to upload."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/png, image/jpeg, image/x-icon, image/vnd.microsoft.icon, application/json"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "879b2912-19f3-4038-a4f1-b9af1491f6e9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "brands"
                ],
                "summary": "Deletes a specific brand file",
                "responses": {
                    "204": {
                        "description": "No content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/brand-id"
                    },
                    {
                        "$ref": "#/components/parameters/brand-file-id"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e6b6da11-9e4c-44a6-ac19-acc476547940",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/brands/active": {
            "get": {
                "tags": [
                    "brands"
                ],
                "summary": "Retrieves the current active brand",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoActiveBrand"
                                }
                            }
                        },
                        "description": "No active brand, returns an empty response."
                    },
                    "301": {
                        "description": "Successful redirect."
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "44094d35-db51-4a5b-a5c0-efeb11bf9a1e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/collections": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieves collections that the user has access to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsListCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "creatorId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a resource by creatorId."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "includeItems",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "json": {
                                "value": {
                                    "sort": "-createdAt",
                                    "limit": 10,
                                    "resourceType": "app"
                                }
                            },
                            "deep object": {
                                "value": "includeItems[limit]=10&includeItems[sort]=-createdAt&IncludeItems[resourceType]=app"
                            }
                        },
                        "required": false,
                        "description": "Includes the list of items belonging to the collections. Supported parameters are 'limit', 'sort' and 'resourceType'. Supported formats are json formatted string or deep object style using square brackets."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the\nnext or prev cursor, but not both.\n"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt).\nThe supported properties are createdAt, updatedAt, and name. A property\nmust be prefixed by + or - to indicate ascending or descending sort order\nrespectively.\n"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionTypes"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to filter for a collection by type."
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/CollectionTypes"
                            }
                        },
                        "required": false,
                        "description": "A commaseparated case-sensitive string used to filter by multiple types."
                    }
                ],
                "description": "Finds and returns the collections that the user can access. This endpoint does not return the user's favorites collection.\n",
                "operationId": "collections#listCollections",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "03b88109-c3c5-4b08-bd4e-a91687ec2ecb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Creates a new collection.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Created response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Creates and returns a new collection. Collections can have the same name.\n",
                "operationId": "collections#createCollection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsCreateCollectionRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1d86ca3c-b504-4d93-8118-fef4a65cb1bd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/{collectionId}": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Returns a collection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Finds and returns a collection.\n",
                "operationId": "collections#getCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b86bcbf9-45d2-41be-9821-8d3c92c99f1b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "collections"
                ],
                "summary": "Updates a collection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/collectionResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Updates a collection and returns the new collection. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.\n",
                "operationId": "collections#updateCollection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsUpdateCollectionRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "78880c36-fb6c-49de-b080-b71ead088621",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Deletes a collection.",
                "responses": {
                    "204": {
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "No Content response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Deletes a collection and removes all items from the collection.\n",
                "operationId": "collections#deleteCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f863bbb8-334c-470d-b220-04d08769efb9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/{collectionId}/items": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieves items in a collection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CollectionsListCollectionItemsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier. (This query also supports 'favorites' as the collectionID).\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "resourceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceLink",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceType."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The space's unique identifier (supports \\'personal\\' as spaceId)."
                    },
                    {
                        "in": "query",
                        "name": "shared",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether or not to return items in a shared space.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "$ref": "#/components/parameters/noActionParam"
                    }
                ],
                "description": "Finds and returns items from a collection that the user has access to.\n",
                "operationId": "collections#listCollectionItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7c9e093c-f8f2-4cc0-84cb-7e2fc2529ac5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "collections"
                ],
                "summary": "Adds an item to a collection.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Created response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    }
                ],
                "description": "Adds an item to a collection and returns the item.\n",
                "operationId": "collections#addCollectionItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionsAddCollectionItemRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "afba1be2-352c-40ec-875c-ab9217446de4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/{collectionId}/items/{itemId}": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Returns an item in a specific collection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Finds and returns an item. See GET /items/{id}\n",
                "operationId": "collections#getCollectionItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2c7a4279-60cf-4325-8fce-b347b596b7e1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "collections"
                ],
                "summary": "Removes an item from a collection.",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Removes an item from a collection.\n",
                "operationId": "collections#deleteCollectionItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "67498ef6-f727-4875-88cc-3e5adbd1d115",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/collections/favorites": {
            "get": {
                "tags": [
                    "collections"
                ],
                "summary": "Retrieves the user's favorites collection.",
                "responses": {
                    "302": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Found response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Finds and returns the user's favorites collection.\n",
                "operationId": "collections#getFavoritesCollection",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cb318380-58a6-4748-84a4-fa850ba8d43a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/consumption/executions": {
            "get": {
                "tags": [
                    "Consumption"
                ],
                "summary": "Retrieves the list of executions on an specific tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExecutionsByTenantList"
                                }
                            }
                        },
                        "description": "The executions list has been successfully returned"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Resource does not exist."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "actionToBlock",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "customerFacing",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The filter for finding entries."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for pagination - how many elements to skip"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the page of data."
                    },
                    {
                        "in": "query",
                        "name": "periodsToInclude",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "current",
                                    "previous"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies which periods to include regardless of the period type, start and end specified"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "periodstart",
                                    "-periodstart",
                                    "+periodstart",
                                    "periodend",
                                    "-periodend",
                                    "+periodend"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    }
                ],
                "description": "Lists of execution records by tenant.",
                "operationId": "GetExecutionsByTenantId",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e6a9e07e-1156-4710-94da-1dfb9cda3561",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get a list of alerting tasks.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskListResponse"
                                }
                            }
                        },
                        "description": "The alerting tasks list has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appID",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The app ID you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "conditionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The conditionId you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for finding a list of entities - used for pagination"
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The id of the owner you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "ownerName",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The name of the owner you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "owner",
                                    "recipient",
                                    "notowner"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "-datecreated",
                                    "datecreated",
                                    "+datecreated",
                                    "-ownername",
                                    "ownername",
                                    "+ownername",
                                    "lasttrigger",
                                    "-lasttrigger",
                                    "+lasttrigger",
                                    "lastscan",
                                    "-lastscan",
                                    "+lastscan",
                                    "name",
                                    "-name",
                                    "+name",
                                    "enabled",
                                    "-enabled",
                                    "+enabled",
                                    "status",
                                    "-status",
                                    "+status",
                                    "nextexecutiontime",
                                    "-nextexecutiontime",
                                    "+nextexecutiontime"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "INVALID_RECIPIENT",
                                    "INVALID_OWNER",
                                    "DISABLED",
                                    "VALID"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    }
                ],
                "operationId": "alertingTasksList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Creates a new alerting task.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskResponse"
                                }
                            }
                        },
                        "description": "Alert creation has been accepted. The alerting task will have status creating, until status is set to either valid or invalid."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingTasksCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting task create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get an alerting task by its id",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskResponse"
                                }
                            }
                        },
                        "description": "Alert has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksIDGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Updates an existing alerting task",
                "responses": {
                    "204": {
                        "description": "The alerting task has been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified alerting task ID or body is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "An alerting task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskPatchRequestCompliantList"
                            }
                        }
                    },
                    "required": true,
                    "description": "Patch request definition for an alerting task."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Deletes an alerting task.",
                "responses": {
                    "204": {
                        "description": "The alerting task has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified alerting task ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "An alerting task with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingTasksDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}/condition": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get the condition associated with an alerting task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingConditionResponse"
                                }
                            }
                        },
                        "description": "Condition associated with the alerting task has been successfully returned. See ConditionResponse in condition-manager api docs"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or condition not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingConditionGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{alertId}/executions/{executionId}": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets a specified alerting execution.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingExecutionResponse"
                                }
                            }
                        },
                        "description": "The execution has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task or execution ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier. If value is \"latest\", the latest execution will be returned"
                    }
                ],
                "operationId": "alertingExecutionsIDGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "delete": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Deletes an execution.",
                "responses": {
                    "204": {
                        "description": "The execution has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified task or execution ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier."
                    }
                ],
                "operationId": "alertingExecutionsDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/{alertId}/recipient-stats": {
            "get": {
                "tags": [
                    "alerting tasks"
                ],
                "summary": "Get the recipient stats for an alerting task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingRecipientStatsResponse"
                                }
                            }
                        },
                        "description": "Alert recipient stats have been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "alertId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "groups",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "The name of the groups you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "+userID",
                                    "-userID",
                                    "subscribed",
                                    "+subscribed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "subscribed",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Subscribed property you would like to filter by"
                    },
                    {
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The recipients ID you would like to filter by"
                    }
                ],
                "operationId": "alertingRecipientStatsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Lists all alerting-executions linked to a user and a tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingExecutionListResponse"
                                }
                            }
                        },
                        "description": "The alerting-executions list has been successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Task or execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "conditionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filter by condition id related to the executions."
                    },
                    {
                        "in": "query",
                        "name": "conditionStatus",
                        "schema": {
                            "enum": [
                                "FINISHED",
                                "FAILED",
                                "ALL"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "Filter by whether the alerting task execution status is FINISHED or FAILED."
                    },
                    {
                        "in": "query",
                        "name": "daysOfMonth",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "maximum": 31,
                                "minimum": 1
                            }
                        },
                        "required": false,
                        "description": "Specifies required days of the month that the execution was created in"
                    },
                    {
                        "in": "query",
                        "name": "daysOfWeek",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "MONDAY",
                                    "TUESDAY",
                                    "WEDNESDAY",
                                    "THURSDAY",
                                    "FRIDAY",
                                    "SATURDAY",
                                    "SUNDAY"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies a filter for custom handled periods of time in which the executions were handled"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "evaluationId",
                                    "triggerTime",
                                    "conditionStatus",
                                    "executionEvaluationStatus",
                                    "evaluation",
                                    "evaluation.endTime",
                                    "evaluation.resultData",
                                    "evaluation.resultData.count",
                                    "evaluation.resultData.headers",
                                    "evaluation.resultData.positive",
                                    "evaluation.resultData.negative",
                                    "evaluation.resultData.dimensions",
                                    "evaluation.resultData.measures"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false,
                        "description": "Specifies specific properties to be populated"
                    },
                    {
                        "in": "query",
                        "name": "includeEvaluation",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Specifies whether to include evaluation details"
                    },
                    {
                        "in": "query",
                        "name": "lastEachDay",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Specifies whether to only show the last execution in each day"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "minimumGapDays",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false,
                        "description": "Specifies the number of days required between each entry. This should require a sort by triggertime"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for pagination - how many elements to skip"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of data. Only one of next or previous may be specified."
                    },
                    {
                        "in": "query",
                        "name": "searchResultsLimit",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false,
                        "description": "Specifies a limit number for the search query, affects total count and is not related to pagination"
                    },
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a date that executions should have been created after. Date in RFC3339Nano format, such as 2020-01-01T00:00:00.000Z"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "triggertime",
                                    "-triggertime",
                                    "+triggertime"
                                ],
                                "type": "string"
                            }
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "timezone",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a timezone the other time-based filters in this query should consider. Expecting a momentjs format, such as America/Los_Angeles"
                    },
                    {
                        "in": "query",
                        "name": "triggered",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Filter by whether the alerting task is triggered."
                    },
                    {
                        "in": "query",
                        "name": "until",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Specifies a date that executions should have been created before. Date in RFC3339Nano format, such as 2020-01-01T00:00:00.000Z"
                    }
                ],
                "operationId": "alertingExecutionsList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions/{executionId}/evaluations": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets the content of an evaluation from an execution",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluationGetResponse"
                                }
                            }
                        },
                        "description": "Evaluation successfully returned."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task or execution with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The execution identifier."
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    }
                ],
                "operationId": "alertingExecutionsEvaluationGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/{taskId}/executions/stats": {
            "get": {
                "tags": [
                    "alerting tasks executions"
                ],
                "summary": "Gets the stats for alerting task executions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskExecutionStats"
                                }
                            }
                        },
                        "description": "Evaluation successfully returned."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A task or execution with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The alerting task identifier."
                    },
                    {
                        "in": "query",
                        "name": "period",
                        "schema": {
                            "enum": [
                                "month"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The period by which the stats aggregation needs to be performed."
                    }
                ],
                "operationId": "alertingExecutionsEvaluationStats",
                "x-qlik-deprecated": true,
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/data-alerts/actions/trigger": {
            "post": {
                "tags": [
                    "alerting actions"
                ],
                "summary": "Creates a new alerting trigger action.",
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingActionsTriggerCreateResponse"
                                }
                            }
                        },
                        "description": "Action has been successfully done. Request to eventing was successfully triggered."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingActionsTriggerCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingActionsTriggerCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting trigger action create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/actions/validate": {
            "post": {
                "tags": [
                    "alerting actions"
                ],
                "summary": "Validates a new alerting task. Current support includes validation for recipients only.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingTaskValidationResponse"
                                }
                            }
                        },
                        "description": "Alerting task has been validated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingTaskActionsValidate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingTaskCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The alerting validate action validates a new alerting task."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-alerts/settings": {
            "get": {
                "tags": [
                    "alerting settings"
                ],
                "summary": "Lists alerting settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertingSettings"
                                }
                            }
                        },
                        "description": "The alerting settings have been successfully returned"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingSettingsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "alerting settings"
                ],
                "summary": "Updates Alerting configuration. Accessible only by tenant admins.",
                "responses": {
                    "204": {
                        "description": "Alerting settings have been successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request body"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request was denied at this time. This could happen when requesting to disable/enable the feature while there is an ongoing operation to enable/disable the feature"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "alertingSettingsUpload",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertingSettingsUpload"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request for updating the alerting settings"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Gets a list of connections",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connections"
                                }
                            }
                        },
                        "description": "List connections with optional filter queries. Connections will be filtered internally based on the space access rules applicable to the caller. When some of connections are not returned due to errors, errors array in the response will be set."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request, typically when dataName is empty"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal error, this happens when the service fails to make requests to dependency services"
                    },
                    "502": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad gateway, this happens when the requests to dependency services are timedout"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dataName"
                    },
                    {
                        "$ref": "#/components/parameters/extended"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    },
                    {
                        "$ref": "#/components/parameters/personal"
                    },
                    {
                        "$ref": "#/components/parameters/owner"
                    },
                    {
                        "$ref": "#/components/parameters/ownedbyme"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/nodatafiles"
                    },
                    {
                        "$ref": "#/components/parameters/userId"
                    },
                    {
                        "$ref": "#/components/parameters/caseinsensitive"
                    },
                    {
                        "$ref": "#/components/parameters/locale"
                    },
                    {
                        "$ref": "#/components/parameters/includeQris"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8670ddfc-208c-42f1-bf18-f271aa41e348",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Creates a connection. Depends on the fields defined in the request body, credentials embedded (or associated) in the connection can be updated or created.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionCreateResponse"
                                }
                            }
                        },
                        "description": "Data connection created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Invalid data connection specified"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credentials pointed by qCredentialsID in the request body doesn't exist"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectionCreate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e087ce62-7d1c-47ff-8eec-f3d87f0c14b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/{qID}": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Gets a connection by connection ID (or by name when type=connectionname is set in query)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                }
                            }
                        },
                        "description": "Data connection fetched"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "qID is an invalid UUID"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential decryption failed, which is most likely caused by invalid credentials"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/extended"
                    },
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/credentialID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    },
                    {
                        "$ref": "#/components/parameters/nocache"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0f57bee7-af6a-4b7f-b4f6-99be8aafa9c5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Patches a connection specified by connection ID (or by name when type=connectionname is set in query).",
                "responses": {
                    "204": {
                        "description": "Data connection updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request due to invalid data in body"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4b4b0cc8-5cb7-4677-a075-bc1bdcc21c60",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Updates a connection specified by connection ID (or by name when type=connectionname is set in query). Depends on the fields defined in the request body, credentials embedded (or associated) in the connection can be updated or created.",
                "responses": {
                    "204": {
                        "description": "Data connection updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request due to invalid data in body"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectionUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8cfa5a4a-f5f8-4b3b-91fd-e32b075149d0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Deletes the specified data connection by ID (or by name when type=connectionname is set in query)",
                "responses": {
                    "204": {
                        "description": "Data connection deleted successfully"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the connection or space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Data connection not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qConnID"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/spaceID"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d8ca2630-492b-4912-a992-0ba44ae2771c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/delete": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Delete multiple connections, only available to Admin",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkResponse"
                                }
                            }
                        },
                        "description": "Bulk delete completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the endpoint. The endpoint requires Admin role"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionDeleteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b82a4f46-99b8-4cb2-8d2c-11de307b595f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/duplicate": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Duplicate a connection",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConnectionCreateResponse"
                                }
                            }
                        },
                        "description": "Duplicate completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body, or duplicate from / to a reserved connection)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the source connection or no access to target space"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection defined by id not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Duplicated connection would result in a name conficts with the connections in the scope"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionDuplicateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "41c9862e-eea2-4175-8576-4a7317ecf49c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-connections/actions/update": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Update multiple connections, only available to Admin",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkResponse"
                                }
                            }
                        },
                        "description": "Bulk update completed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request (Missing required field in request body)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "User has no access to the endpoint. The endpoint requires Admin role"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a8f2c0de-3ed4-4995-89d0-54c5c1ad4ec0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/data-credentials/{qID}": {
            "get": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Gets a credential by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Credential"
                                }
                            }
                        },
                        "description": "Credential retrieved"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Empty value not permitted for dataName"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a2002b7b-9c3e-4382-98d4-fd36ff08108d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Patches a credential specified by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection ID changed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "671859db-cfa3-4b84-a131-3b09432ea3d1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Updates a credential specified by ID (or by name when bycredentialname=true is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Connection ID changed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential already exists (when updated name conflicts with existing record)"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialCreate"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "87c507aa-41cb-4df7-9386-36aa4389723e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "data-credentials"
                ],
                "summary": "Deletes the specified credential by ID (or by name when type=credentialname is set in query)",
                "responses": {
                    "204": {
                        "description": "Credential deleted successfully"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Credential not found"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/qCredID"
                    },
                    {
                        "$ref": "#/components/parameters/bycredentialname"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4139b41c-2586-4745-83a2-f28881a72896",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/dcaas/actions/data-connections": {
            "post": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Create a dataconnection against a datasource",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/CreateConnectionRes"
                                        },
                                        {
                                            "$ref": "#/components/schemas/AuthUrlResponse"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Data connection created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Access forbidden, happens when feature or datasource is not enabled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal errors"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Service unavailable, happens when request to connector or down stream services fails"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateConnectionReq"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "05e5e9c2-5d3b-4c97-b36f-fe47b60ea359",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/dcaas/actions/data-connections/{connectionId}": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Get data connection for a given ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConnectionResponse"
                                }
                            }
                        },
                        "description": "Connection returned"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Access forbidden, happens when feature or datasource is not enabled"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Access forbidden, happens when feature or datasource is not enabled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal errors"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Service unavailable, happens when request to connector or down stream services fails"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "connectionId",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true,
                        "description": "ID of the connection"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6b0c93a9-34b1-4aba-a7e7-bae4bd493046",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/dcaas/actions/data-connections/api-specs": {
            "get": {
                "tags": [
                    "data-connections"
                ],
                "summary": "Get 'connectionProperties' for a given datasource",
                "responses": {
                    "200": {
                        "content": {
                            "application/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpecResponse"
                                }
                            }
                        },
                        "description": "API spec returned"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Unauthorized request (Bad JWT token etc)"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Access forbidden, happens when feature or datasource is not enabled"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Internal errors"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrors"
                                }
                            }
                        },
                        "description": "Service unavailable, happens when request to connector or down stream services fails"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "dataSourceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Datasource ID"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "eb39bc1b-e49d-43fe-8595-a5ca33f2d326",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/encryption/keyproviders": {
            "get": {
                "tags": [
                    "tenant key providers management"
                ],
                "summary": "Lists keyproviders registered for the tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProviders"
                                }
                            }
                        },
                        "description": "Successfully retrieved list of key providers"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to load key providers from the registry"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b68a81fe-ddea-4279-9ecc-57fc44aacfb8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "tenant key providers management"
                ],
                "summary": "Registers an AWS-KMS key for the specific tenant",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully registered the AWS-KMS key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Provided AWS-KMS key access forbidden. Check if key policy allows access from Qlik Cloud."
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to register key"
                    },
                    "408": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to return a response within the timeout window. The key provider (QlikVault, AWS-KMS) might be unavailable."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "The specified key is already registered"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to validate AWS-KMS ARN structure"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyProvider"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9d013c74-246e-40ac-bdd2-a6055e7190fa",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}": {
            "get": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Retrieves key for a given fingerprint",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully fetched key provider information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "414": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Requested fingerprint length is too large"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of the requested provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c308085b-e7fe-4511-85d7-ff27f0c562f3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Patches Name & Description of keyprovider information",
                "responses": {
                    "204": {
                        "description": "Successfully patched key provider information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to decode key provider patch request payload"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to patch key provider information"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of an existing keyprovider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeyProviderPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2ca95b87-c19e-410c-809a-0dc008d56e26",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Deletes the key information",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvidersDeleteResponseBody"
                                }
                            }
                        },
                        "description": "Successfully deleted key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to delete keyprovider information"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "The requested key is being used and cannot be deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of the requested provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e2960433-aa42-4f28-9344-2eb12c84b6be",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}/actions/migrate": {
            "post": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Migrates existing cipherkeys from current key provider to requested key provider.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully initiated cipherkeys migration"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to initiate migration"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to prepare migration"
                    },
                    "428": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is already an ongoing migration for the tenant"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of an existing key provider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9c5d8965-675e-484b-92fb-05ab573ff1dd",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/{arnFingerPrint}/actions/test": {
            "post": {
                "tags": [
                    "tenant key provider operations"
                ],
                "summary": "Validates AWS-KMS key access and usage",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyProvider"
                                }
                            }
                        },
                        "description": "Successfully validated key"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "No entry match for the fingerprint was found"
                    },
                    "408": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to return a response within the timeout window. The key provider (QlikVault, AWS-KMS) might be unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "arnFingerPrint",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The fingerprint of an existing keyprovider key."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cf3c6f83-ab25-46ad-afec-d90e51defd3a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/actions/list": {
            "get": {
                "tags": [
                    "tenant key providers management"
                ],
                "summary": "Lists keyproviders registered for the tenant [Qlik, AWS-KMS]",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListKeyProviders"
                                }
                            }
                        },
                        "description": "Successfully retrieved list of key providers"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to load key providers from the registry"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd637754-873c-4713-8149-bbe50ac6a7a8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/encryption/keyproviders/actions/reset-to-default-provider": {
            "post": {
                "tags": [
                    "tenant key providers management"
                ],
                "summary": "Resets tenant key provider to Qlik managed provider",
                "responses": {
                    "205": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully initiated key migration to Qlik managed provider"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is already an ongoing migration in progress for the tenant"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to initiate migration to Qlik managed provider"
                    },
                    "424": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Tenant is already using Qlik Managed provider"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0c984a7e-16b3-4d5e-9d71-f5fad0e08a82",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/encryption/keyproviders/migration/actions/details": {
            "get": {
                "tags": [
                    "tenant key migration information"
                ],
                "summary": "Gets ongoing migration details",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationInformation"
                                }
                            }
                        },
                        "description": "Successfully fetched migration information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Unauthorized, Invalid JWT"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "There is no ongoing migration for this tenant"
                    },
                    "417": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandardError"
                                }
                            }
                        },
                        "description": "Failed to get ongoing migration information"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "example": [
                            {
                                "Authorization": "Bearer jwt-token"
                            }
                        ],
                        "required": true,
                        "description": "The JWT used for authentication. Send the JWT in the AuthRequest header using the Bearer schema."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4e9c0b90-cefd-4435-8cb6-73bf396f2a43",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/glossaries": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Returns all glossaries.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossariesResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of glossaries to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name",
                                "description",
                                "+description",
                                "-description"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ac9da5d9-0847-4127-a09a-ea1671b502f2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Creates a new glossary. Only a steward can create a glossary.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The user does not have privileges to perform the requested action."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c60bad89-a489-4519-943e-1f9cebe458a2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Retrieves a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The id of the glossary to retrieve."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9eb71e1c-cb76-4d5e-9398-4eda3034c62d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Updates glossary properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Glossary updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the glossary was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8c2d1e55-15b3-4bb2-885f-2ab5d2d772b4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Updates a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Glossary version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The id of the glossary to update."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the glossary was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "87d4b345-ec83-4e0c-89a0-8f52e290e803",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Deletes a glossary and all of its terms.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The id of the glossary to delete."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "31c7c2e7-92ff-424d-8c06-fb0d4e563755",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/actions/export": {
            "get": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Exports a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exportGlossary"
                                }
                            }
                        },
                        "description": "Successfully exported the glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The glossary is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4d02acf5-db8d-4313-9adf-e3ea020b8f96",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/glossaries/{id}/categories": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Returns a list of categories for a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/categoriesResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "description",
                                "+description",
                                "-description",
                                "name",
                                "+name",
                                "-name",
                                "update",
                                "+update",
                                "-update"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "899120c7-9ca9-4e0e-b0ae-d714c1860451",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "categories"
                ],
                "summary": "Creates a new category.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCategory"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "47fb75ca-6020-45db-bc09-6c84c7046e6b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/categories/{categoryId}": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Retrieves a category.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f6429e8d-f21d-4c64-9d58-4ec96c091169",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates category properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Category updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4cf7d795-908b-471c-b81a-2e12d5d52e36",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates a category.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/category"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Category version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the category."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The category id."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the category was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCategory"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0472e31b-5ecc-4efb-90dc-b8703e5d717a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "categories"
                ],
                "summary": "Deletes a category.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "categoryId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The id for the category to delete. All subcategories are also deleted"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The id of the glossary."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "aa8773fe-4887-4d3f-a75b-4191dd8decb8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Returns a list of terms for a glossary.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termsResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional SCIM filter to be used to filter terms\nUsable fields are\n\n- id\n- name\n- relatedInformation\n- description\n- abbreviation\n- tags\n- stewards\n- status\n- categories\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "abbreviation",
                                "+abbreviation",
                                "-abbreviation",
                                "description",
                                "+description",
                                "-description",
                                "name",
                                "+name",
                                "-name",
                                "status",
                                "+status",
                                "-status",
                                "updated",
                                "+updated",
                                "-updated"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6ba5fd2d-0cf8-4e6f-8db4-801cab836430",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "terms"
                ],
                "summary": "Creates a new term.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created a new term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createTerm"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e4555cc0-fd70-4af7-bbb5-bdc0d364cfeb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Retrieves a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully retrieved the term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "beebfef7-4d4f-43ae-a491-53f1395db57b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "terms"
                ],
                "summary": "Updates term properties with json-patch formated data",
                "responses": {
                    "204": {
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Term updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The term to patch was not found."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5d3e5427-cd27-4a75-8edf-39bea06ba05b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "terms"
                ],
                "summary": "Updates a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the term."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createTerm"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7588809c-c0ab-404f-b75e-deb03c91d17d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "terms"
                ],
                "summary": "Deletes a term.",
                "responses": {
                    "204": {
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c8a2bef3-cabe-460f-8fe0-67ba75d532b7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/actions/change-status": {
            "post": {
                "tags": [
                    "terms"
                ],
                "summary": "Changes the status of the term. Only a steward can verify a term. Once the term is verified only a steward can modify the term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/term"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully updated the term status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "draft",
                                "verified",
                                "deprecated"
                            ],
                            "type": "string"
                        },
                        "required": true,
                        "description": "The status to update to."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "92284aed-84c2-4c5b-ab68-9f0928a3b260",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/links": {
            "get": {
                "tags": [
                    "links"
                ],
                "summary": "Returns a list of links assigned to a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/linksResult"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional SCIM filter to be used to filter terms"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "type",
                                "+type",
                                "-type",
                                "subtype",
                                "+subtype",
                                "-subtype",
                                "created",
                                "+created",
                                "-created"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cd1b34af-918c-4ea4-b738-eec0f503122e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "links"
                ],
                "summary": "Creates a new link to a term.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termLinksTo"
                                }
                            }
                        },
                        "headers": {
                            "Etag": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Term version"
                            },
                            "Last-Modified": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Last modified date and time of the glossary"
                            }
                        },
                        "description": "Successfully created the link."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Conditional update failed. Trying to modify an old version."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "header",
                        "name": "if-match",
                        "schema": {
                            "type": "string",
                            "example": "if-match: B323333"
                        },
                        "description": "Optional header to do conditional updates. Using the Etag value that was returned the last time the term was fetched."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/termCreateLinksTo"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0337d681-9b93-4382-bec3-463137ea63b3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/glossaries/{id}/terms/{termId}/revisions": {
            "get": {
                "tags": [
                    "terms"
                ],
                "summary": "Retrieves previous revisions of a term.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/termsResult"
                                }
                            }
                        },
                        "description": "Successfully retrieved the revisions."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "The record is not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The glossary id."
                    },
                    {
                        "in": "path",
                        "name": "termId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "required": true,
                        "description": "The term id."
                    },
                    {
                        "in": "query",
                        "name": "countTotal",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Optional parameter to request total count for query"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of terms to get."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the next page."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional parameter to request the previous page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "update",
                                "+update",
                                "-update"
                            ],
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6c977001-9cd9-4e17-8a91-293157eca450",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/glossaries/actions/import": {
            "post": {
                "tags": [
                    "glossaries"
                ],
                "summary": "Creates a new glossary, including categories and terms, based on a glossary definition file.\nSupported formats are currently, qlik, atlan and atlas\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/glossary"
                                }
                            }
                        },
                        "description": "Successfully created a new glossary."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseBadRequest"
                                }
                            }
                        },
                        "description": "See custom codes"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseForbidden"
                                }
                            }
                        },
                        "description": "See custom codes"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponseNotFound"
                                }
                            }
                        },
                        "description": "See custom codes"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The spaceId (leave blank or omit for personal)"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/qlikGlossary"
                            }
                        },
                        "application/json+qlik": {
                            "schema": {
                                "$ref": "#/components/schemas/qlikGlossary"
                            }
                        },
                        "application/json+atlan": {
                            "schema": {
                                "$ref": "#/components/schemas/atlanGlossary"
                            }
                        },
                        "application/json+atlas": {
                            "schema": {
                                "$ref": "#/components/schemas/atlasGlossary"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "af1e3de1-6f79-4ba5-960e-c7306e85bdb9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/groups": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "List groups.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Groups"
                                }
                            }
                        },
                        "description": "An array of groups, and pagination links."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying groups."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT is invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "All operations failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of groups to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ga"
                        },
                        "description": "The previous page cursor."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    },
                    {
                        "in": "query",
                        "name": "systemGroups",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Return system groups (e.g. Everyone) instead of regular groups. Cannot be combined with any other query parameters."
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether to return a total match count in the result. Defaults to false."
                    }
                ],
                "description": "Returns a list of groups with cursor-based pagination.",
                "operationId": "getGroups",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3423a22f-6b5d-48de-921d-2fa42673d5d9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create group.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Group was successfully created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to create a group."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from creating a group."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Name conflict when attempting to create a new group."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Payload was too large."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates a group. The maximum number of groups a tenant can have is 10,000.",
                "operationId": "postGroups",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPostSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7d8a0830-71ed-4502-b991-aa5855a99f49",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/groups/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Get group by id",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Request successfully completed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The group's unique identifier"
                    }
                ],
                "description": "Returns the requested group.",
                "operationId": "getGroupById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0caa9d63-f35c-48fb-8cd8-ed6e36238563",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "groups"
                ],
                "summary": "Update group by id",
                "responses": {
                    "204": {
                        "description": "Group updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for patching a user."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to patch a group."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from patching a group."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the group to update."
                    }
                ],
                "operationId": "updateGroupById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4915cdb8-50ff-48a1-b6f2-ca60e40fd3e3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Delete group by id",
                "responses": {
                    "204": {
                        "description": "Group deleted successfully."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Group ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the group to delete."
                    }
                ],
                "operationId": "deleteGroupById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "945c735d-a468-44d8-ac8f-fe41b0dd318b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/groups/actions/filter": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Filter groups",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Groups"
                                }
                            }
                        },
                        "description": "Groups retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Advanced query filter syntax error or query params format error or filter too complex."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "description": "Retrieves a list of groups matching the filter using advanced query string.",
                "operationId": "groups_api_actions_filter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Filter"
                            }
                        }
                    },
                    "required": false,
                    "description": "Will contain the query filter to apply. It shall not contain more than 100 ids."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b1c84976-fe69-46c0-a8c5-8a36a8fc7190",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 200
                }
            }
        },
        "/v1/groups/settings": {
            "get": {
                "tags": [
                    "groups-settings"
                ],
                "summary": "Get group settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupSettings"
                                }
                            }
                        },
                        "description": "The requested tenant's group settings."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Returns the active tenant's group settings.",
                "operationId": "groups_api_get_settings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "66237eb8-ccd2-4ec7-9f17-cb22376a2a8a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "groups-settings"
                ],
                "summary": "Update group settings",
                "responses": {
                    "204": {
                        "description": "Config updated successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. Payload could not be parsed to a JSON Patch or Patch operations are invalid."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to insufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "operationId": "patchSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingsPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "58231ad2-f06d-4f7b-80e0-6fe20ff5f4cb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/identity-providers": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Retrieves one or more IdPs for a specified tenantId.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPArray"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "active",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "If provided, filters the results by the active field."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of IdP entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor."
                    }
                ],
                "description": "This endpoint retrieves one or more identity providers from the service. The tenantID in the JWT will be used to fetch the identity provider.",
                "operationId": "getIdps",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c9698944-09dc-4dd9-9d16-aa49f3ba222c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "idp"
                ],
                "summary": "Creates a new IdP",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDP"
                                }
                            }
                        },
                        "headers": {
                            "QLIK-IDP-POPTS": {
                                "$ref": "#/components/headers/qlikIdpPopts"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    }
                },
                "description": "This endpoint creates an identity provider resource. It returns a 201 Created when creation is successful with a header \"QLIK-IDP-POPTS\" (A unique string representing a hash of the current configuration being tested), returns a 403 Forbidden for a non TenantAdmin user JWT or if the tenantID in the JWT does not match with any of the tenantIDs in the payload. An IdP can be created with Pending Options or options depending whether the IdP is interactive or not.",
                "operationId": "createIdp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IDPPostSchema"
                            }
                        }
                    },
                    "description": "Attributes that the user wants to set for a new identity provider resource."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e13f7f42-b596-4411-8265-82bfccccda01",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/identity-providers/.well-known/metadata.json": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Returns identity providers' metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "description": "This endpoint retrieves identity providers' metadata.",
                "operationId": "getWellKnownMetaData",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a2a337b8-5649-45c2-a903-7b1e7d8f7dca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/identity-providers/{id}": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Returns the IdP with the specified ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDP"
                                }
                            }
                        },
                        "headers": {
                            "QLIK-IDP-POPTS": {
                                "$ref": "#/components/headers/qlikIdpPopts"
                            }
                        },
                        "description": "Success"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    }
                ],
                "description": "This endpoint is used to retrieve an identity provider from the service. It returns a valid 200 OK response when the IdP exists and the user (TenantAdmin) or service (edge-auth) is authorized to view the contents. Additionally, returns a header \"QLIK-IDP-POPTS\" (A unique string representing a hash of the current configuration being tested). It returns a 404 Not Found if the criteria is not met.",
                "operationId": "getIdp",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e68fc33b-a12d-4654-b82a-111e3ed9bf35",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "idp"
                ],
                "summary": "Updates the IdP with the specified ID",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. Invalid request body, URL, or state transition."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Access Denied. Only the edge-auth service or TenantAdmin user request can patch an IdP."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed. Missing QLIK-IDP-OPTS-MATCH header, or value doesn't match against IdP test configuration value."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error, the operation failed unexpectedly"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    },
                    {
                        "$ref": "#/components/parameters/qlikIdpPoptsMatch"
                    }
                ],
                "description": "This endpoint patches an identity provider from the service. It returns a valid 204 when the IdP is patched. Only an edge-auth service request or a user with the role of TenantAdmin can patch an associated IdP. Partial failure is treated as complete failure and returns an error.",
                "operationId": "updateIdp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IDPPatchSchema"
                            }
                        }
                    },
                    "description": "Attributes that the user wants to patially update for an identity provider resource."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3b55a309-51dd-4acd-84e3-35018a038046",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "idp"
                ],
                "summary": "Deletes the IdP with the specified ID",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request. The interactive IdP for the tenant can't be deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The identity provider ID."
                    }
                ],
                "description": "This endpoint deletes an identity provider from the service. It returns a valid 204 when the IdP is deleted. Only a user with the role of TenantAdmin and tenant access can delete an associated IdP. Edge-auth service can also delete.",
                "operationId": "deleteIdp",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c06f551d-9269-4bfd-9e0a-e095983b19bf",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/identity-providers/me/meta": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Returns the active interactive IdP metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPMeta"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "description": "This endpoint retrieves IdP metadata.",
                "operationId": "getMeMeta",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2f61689c-cea7-45df-b38f-414b90a2d339",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/identity-providers/status": {
            "get": {
                "tags": [
                    "idp"
                ],
                "summary": "Returns the current status of IdP configurations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDPsStatus"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "description": "This endpoint retrieves the status of IdP configurations. Requires TenantAdmin role.",
                "operationId": "getStatus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c11ae1f3-c79f-4e01-96bf-3163a96b4dc9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "Retrieves items that the user has access to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "collectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The collection's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "createdByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "User's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The item's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "notCreatedByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "User's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "notOwnerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Owner identifier."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Owner identifier."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "resourceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceIds",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive strings used to search for an item by resourceIds. The maximum number of resourceIds it supports is 100. If resourceIds is provided, then resourceType must be provided. For example '?resourceIds=appId1,appId2'"
                    },
                    {
                        "in": "query",
                        "name": "resourceLink",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceSubType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "the case-sensitive string used to filter items by resourceSubType(s). For example '?resourceSubType=chart-monitoring,qix-df,qvd'. Will return a 400 error if used in conjuction with the square bracket syntax for resourceSubType filtering in the 'resourceType' query parameter."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to filter items by resourceType(s). For example '?resourceType=app,qvapp'. Additionally, a optional resourceSubType filter can be added to each resourceType. For example '?resourceType=app[qvd,chart-monitoring],qvapp'. An trailing comma can be used to include the empty resourceSubType, e.g. '?resourceType=app[qvd,chart-monitoring,]', or, to include only empty resourceSubTypes, '?resourceType=app[]' This syntax replaces the 'resourceSubType' query param, and using both in the same query will result in a 400 error."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "spaceId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The space's unique identifier (supports \\'personal\\' as spaceId)."
                    },
                    {
                        "in": "query",
                        "name": "shared",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether or not to return items in a shared space.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "$ref": "#/components/parameters/noActionParam"
                    }
                ],
                "description": "Finds and returns items that the user has access to.\n",
                "operationId": "items#listItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1416fbe0-f8ee-48b8-8ddb-af826dcb4fb0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items/{itemId}": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "Returns an item.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier"
                    }
                ],
                "description": "Finds and returns an item.\n",
                "operationId": "items#getItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "4a57aa43-c591-494a-9854-8bb5c1eca46d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "items"
                ],
                "summary": "Updates an item.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/itemResultResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Conflict response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Updates an item. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.\n",
                "operationId": "items#updateItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemsUpdateItemRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "15cacd77-dd4c-497f-b3d4-af11045c934a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "items"
                ],
                "summary": "Deletes an item.",
                "responses": {
                    "204": {
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "No Content response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    }
                ],
                "description": "Deletes an item and removes the item from all collections.\n",
                "operationId": "items#deleteItem",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c29803bb-6c4c-4635-841b-2b13471e308b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/items/{itemId}/collections": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "Returns the collections of an item.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3 Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not found response"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by name."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case-insensitive string used to search for a resource by name or description."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionTypes"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for a collection by type."
                    }
                ],
                "description": "Finds and returns the collections of an item. This endpoint does not return the user's favorites collection.\n",
                "operationId": "items#listItemCollections",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "97391cb7-ba81-4d6c-b509-b48cd386b977",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items/{itemId}/publisheditems": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "Returns published items for a given item.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsListItemCollectionsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Not Found response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "itemId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The item's unique identifier"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "resourceType",
                        "schema": {
                            "$ref": "#/components/schemas/itemResourceTypeEnum"
                        },
                        "required": false,
                        "description": "The case-sensitive string used to search for an item by resourceType."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+name",
                                "-name",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string"
                        },
                        "required": false,
                        "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
                    }
                ],
                "description": "Finds and returns the published items for a given item. This endpoint is particularly useful for finding the published copies of an app or a qvapp when you want to replace the content of a published copy with new information from the source item.\n",
                "operationId": "items#listPublishedItems",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "fd11db86-21d6-4ecb-96f4-abf2ecfa75bb",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/items/settings": {
            "get": {
                "tags": [
                    "items-settings"
                ],
                "summary": "Returns tenant specific settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsSettingsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Finds and returns the settings for the current tenant.\n",
                "operationId": "items#GetSettings",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "a274aa68-0492-401b-86e8-3906a12965ae",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "items-settings"
                ],
                "summary": "Patches tenant specific settings.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemsSettingsResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "OK response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Bad Request response."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Unauthorized response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Forbidden response."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseBody"
                                }
                            }
                        },
                        "headers": {
                            "X-B3-Traceid": {
                                "$ref": "#/components/headers/X-B3-Traceid"
                            }
                        },
                        "description": "Internal Server Error response."
                    }
                },
                "description": "Updates the settings provided in the patch body.",
                "operationId": "items#PatchSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemsSettingsPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f9600f80-d96f-4ba0-9dfc-b5d8670cadd1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/assignments": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Retrieves assignments for the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsResponse"
                                }
                            }
                        },
                        "description": "List of assignments."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request, invalid query."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The filter for finding entries."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries to return."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The requested page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The field to sort on; can be prefixed with +/- for ascending/descending sort order."
                    },
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ac704ced-d842-4338-8048-71ee6012f059",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/assignments/actions/add": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Assigns license access to the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsAddResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsAddRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of subjects to allocate assignments for."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d32d3a14-61dd-48a5-86c6-dd5d56c0d2ce",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/assignments/actions/delete": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Removes license access for the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsDeleteResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsDeleteRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of assignments to delete."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8ea59307-f738-4233-863d-3c8db8c52972",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/assignments/actions/update": {
            "post": {
                "tags": [
                    "licenses"
                ],
                "summary": "Updates license access for the given users",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assignmentsActionsUpdateResponse"
                                }
                            }
                        },
                        "description": "Processed. (The status of the individual assignments is found in the response body)"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Body is invalid or missing."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/assignmentsActionsUpdateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "List of assignments to update."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "assignments",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "ef2c0f74-01d1-44b4-b514-c50a61c49142",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/consumption": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Retrieves license consumption for the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/consumptionEventsResponse"
                                }
                            }
                        },
                        "description": "Successful"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Bad request, malformed query."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The filter for finding entries."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 200,
                            "maximum": 200,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The preferred number of entries to return."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The requested page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The field to sort on; can be prefixed with +/- for ascending/descending sort order."
                    },
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "226c6366-c79d-4947-ba6d-64aab619e9f9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/overview": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Gets the general information of the license applied to the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseOverview"
                                }
                            }
                        },
                        "description": "Licenses overview info."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "invalid tenant"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "License not found."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "78b49c2f-8de3-4389-915e-54a39b5678b1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/licenses/settings": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Get auto assign settings for tenant.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/settingsBody"
                                }
                            }
                        },
                        "description": "Auto assign settings."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Missing or invalid tenant."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Not allowed"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3946b4b4-7a33-4520-9d02-b8cc2fafb8c5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "licenses"
                ],
                "summary": "Set auto assign settings for tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/settingsBody"
                                }
                            }
                        },
                        "description": "Auto assign settings."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Missing or invalid tenant."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Action not allowed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficient access"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/settingsBody"
                            }
                        }
                    },
                    "required": false,
                    "description": "Dynamic assignment settings for professional and analyzer users. If professional users and analyzer users are both set, professional users will be automatically assigned, if available. Otherwise, analyzer users will be assigned. If neither of those users are available, analyzer capacity will be assigned, if available."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-codegen-request-body-name": "auto assign settings",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9b3d3f52-e701-4af5-be48-b1a87b586057",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/licenses/status": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "summary": "Gets the license status information of the current tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/licenseStatus"
                                }
                            }
                        },
                        "description": "License status info."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "invalid tenant"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized (invalid token)."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "authorization",
                        "schema": {
                            "type": "string",
                            "format": "bearer"
                        },
                        "description": "Authentication token"
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "db4b03a0-14b2-4b15-836c-e6de480025b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/actions/expand": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns next-level nodes inside a specified node on an impact analysis graph retrieved using a base node. \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graph"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The QRI for base node."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table"
                            ],
                            "type": "string",
                            "default": "table"
                        },
                        "required": true,
                        "description": "The level to get the nodes on."
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The node in the downstream graph to get next-level nodes for. For instance, to get the TABLE level nodes inside a RESOURCE level node,\nuse the RESOURCE level QRI for the node. Similarly, use the TABLE level QRI to get the FIELD level nodes.\nIf a TABLE level QRI is used with `level` parameter being `TABLE`, only the RESOURCE level of the node will be\ntaken into consideration.\n"
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to retrieve. (5 if not provided, -1 means unlimited and 1 means direct lineage)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "85cffc16-9137-4e05-b279-a96adf4a8bae",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/actions/search": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Search all labels within a impact graph on all available levels. \nReturns result per level\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphs"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "label co \"label1\" or label co \"label2\"",
                        "required": true,
                        "description": "The expression that matches the SCIM filter format. The filter has to be encoded.\nThe currently supported attribute is \"label\", attribute operator \"co\" (contains), and grouping operator \"or\". Example: 'label co \"label1\" or label co \"label2\"'. The search queries are case insensetive.\n"
                    },
                    {
                        "in": "query",
                        "name": "terms",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Comma separated, case-insensitive list of search terms.",
                        "x-qlik-visibility": "private"
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to search. (5 if not provided, -1 means unlimited) and 1 means direct lineage."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "70c1002d-57b3-4870-87b8-22b3fe313726",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/overview": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns all RESOURCE level nodes that are impacted by a change in the source node. \nThe number of tables and fields that are impacted for each resource are included as metadata.\nThe id (QRI) can be on any level (FIELD, TABLE or RESOURCE) and the impact will be collected based on the starting QRI.   \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graph"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "down",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of downstream resource levels nodes to retrieve. (5 if not provided, -1 means unlimited and 1 means direct lineage)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c0b03324-ea41-4fde-9de5-bffb809db7a5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/impact/{id}/source": {
            "get": {
                "tags": [
                    "impact"
                ],
                "summary": "Returns all levels of the requested root node. Only node information will be returned.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphs"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for root node."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1b751509-27f9-409f-a01e-55e149a5f7f9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns a lineage graph of a source node. \nThe id (QRI) can point to an item on the field, table and resource level.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graph"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for the source node."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table",
                                "resource"
                            ],
                            "type": "string",
                            "default": "resource"
                        },
                        "required": false,
                        "description": "The graph level to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes to retrieve. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b5d7a1dc-7c10-4a8b-86fd-7adbd2499d9f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/actions/expand": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns the expanded node and its edges. \nUp and downstream nodes are not part of the response, edges are.\nThe id is the root node that lineage is requested for. The QRI of the node to expand is sent as the query parameter \"node\" for expansion.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graph"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The id (QRI) for the source node."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "enum": [
                                "field",
                                "table"
                            ],
                            "type": "string",
                            "default": "table"
                        },
                        "required": true,
                        "description": "The level to expand to."
                    },
                    {
                        "in": "query",
                        "name": "node",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The QRI of the node in the upstream graph for expansion."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to expand. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f20f9a2b-ca8d-4ab2-ad91-b87ceb7486c7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/actions/search": {
            "get": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Search all labels within a lineage graph on all available levels. \nReturns result per level.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/graphs"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "label co \"label1\" or label co \"label2\"",
                        "required": true,
                        "description": "The expression that matches the SCIM filter format. The filter has to be encoded.\nThe currently supported attribute is \"label\", attribute operator \"co\" (contains), and grouping operator \"or\". Example: 'label co \"label1\" or label co \"label2\"'. The search queries are case insensitive.\n"
                    },
                    {
                        "in": "query",
                        "name": "terms",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Comma separated, case-insensitive list of search terms.",
                        "x-qlik-visibility": "private"
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to search. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e3b234c6-b674-4db3-b86e-91effb6570a3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/lineage-graphs/nodes/{id}/overview": {
            "post": {
                "tags": [
                    "lineage-graphs"
                ],
                "summary": "Returns the first generation upstream direct lineage. \nFor each field QRI, will find any direct linege dataset or application.  \n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/overviewItems"
                                }
                            }
                        },
                        "description": "Successful Operation."
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/emptyReturn"
                                }
                            }
                        },
                        "description": "Successfully created new resource."
                    },
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/multiStatusResponse"
                                }
                            }
                        },
                        "description": "Request partially succeeded."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-400"
                                }
                            }
                        },
                        "description": "The request is in incorrect format."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-403"
                                }
                            }
                        },
                        "description": "User does not have access to the node."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-404"
                                }
                            }
                        },
                        "description": "The record is not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-500"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse-503"
                                }
                            }
                        },
                        "description": "Service unavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                        "required": true,
                        "description": "The qri for root node."
                    },
                    {
                        "in": "query",
                        "name": "collapse",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "To collapse internal nodes, set to true, false otherwise."
                    },
                    {
                        "in": "query",
                        "name": "up",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "required": false,
                        "description": "The number of upstream levels of nodes retrieved to get overview from. (5 if not provided, -1 means unlimited)"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/qris"
                            }
                        }
                    }
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "56058a5e-0c2c-4e32-8b78-33ed71a09c02",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/notes/settings": {
            "get": {
                "tags": [
                    "setting"
                ],
                "summary": "Get the enablement status of the notes feature set for this tenant and user.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotesUserSettings"
                                }
                            }
                        },
                        "description": "Notes enablement status."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "notesConfigGet",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bd8d4449-fcad-41dc-8d67-972aa777c702",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "setting"
                ],
                "summary": "update the settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteSettingsPutResponse"
                                }
                            }
                        },
                        "description": "The newly applied note settings for the tenant."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request content error."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized user."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "updateNoteSettingsConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoteSettingsPutPayload"
                            }
                        }
                    },
                    "required": true,
                    "description": "A JSON payload containing note settings to put."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b77dcc15-c396-428d-ba11-13b87a329392",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/notification-digests": {
            "get": {
                "tags": [
                    "notification digests"
                ],
                "summary": "gets a single notification digest.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDigest"
                                }
                            }
                        },
                        "description": "Notification digest was successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "digest not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "NotificationDigestGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "notification digests"
                ],
                "summary": "Creates a new notification digest.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDigest"
                                }
                            }
                        },
                        "description": "Notification digest was successfully created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "NotificationDigestCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationDigestCreateRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "The notification digest create request definition."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "patch": {
                "tags": [
                    "notification digests"
                ],
                "summary": "Update a notification digest.",
                "responses": {
                    "204": {
                        "description": "Notification digest was successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A notification digest with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "NotificationDigestPatch",
                "requestBody": {
                    "$ref": "#/components/requestBodies/JsonPatches"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "notification digests"
                ],
                "summary": "deletes a notification digest.",
                "responses": {
                    "204": {
                        "description": "The notification digest has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified digest ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A notification digest with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "operationId": "NotificationDigestDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/notification-digests/{digestId}": {
            "get": {
                "tags": [
                    "notification digests"
                ],
                "summary": "gets a single notification digest.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDigest"
                                }
                            }
                        },
                        "description": "Notification digest was successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "digest not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "digestId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    }
                ],
                "operationId": "NotificationDigestIdGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "notification digests"
                ],
                "summary": "Update a notification digest.",
                "responses": {
                    "204": {
                        "description": "Notification digest was successfully updated."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A notification digest with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "digestId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    }
                ],
                "operationId": "NotificationDigestIdPatch",
                "requestBody": {
                    "$ref": "#/components/requestBodies/JsonPatches"
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "notification digests"
                ],
                "summary": "deletes a notification digest.",
                "responses": {
                    "204": {
                        "description": "The notification digest has been successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified digest ID is invalid (e.g. not a number)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "A notification digest with the specified ID was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "digestId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    }
                ],
                "operationId": "NotificationDigestIdDelete",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/notification-digests/{digestId}/executions": {
            "get": {
                "tags": [
                    "notification digests executions"
                ],
                "summary": "List all notification digest executions based on filters.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDigestExecutions"
                                }
                            }
                        },
                        "description": "Notification digest executions were successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "digestId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "Limit the returned result set"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Offset for finding a list of entities - used for pagination"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the page of data."
                    },
                    {
                        "in": "query",
                        "name": "workflowId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The workflow Id for a specific digest"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of data. Only one of next or previous may be specified.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "x-qlik-deprecated": true
                    }
                ],
                "operationId": "NotificationDigestExecutionList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/notification-digests/{digestId}/executions/{executionId}": {
            "get": {
                "tags": [
                    "notification digests executions"
                ],
                "summary": "gets a single notification digest execution.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDigestExecution"
                                }
                            }
                        },
                        "description": "Notification digest executions were successfully returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request, malformed syntax or errors in parameters."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "execution not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Error response."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "digestId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    },
                    {
                        "in": "path",
                        "name": "executionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The notification digest task identifier."
                    }
                ],
                "operationId": "NotificationDigestExecutionIdGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/notifications": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "List all supported notifications",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsObject"
                                }
                            }
                        },
                        "description": "Request completed successfully. See Results for ResultDetail on each notification."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Request error. See Errors."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "locale",
                        "schema": {
                            "type": "string",
                            "default": "en"
                        },
                        "required": false,
                        "description": "If present, idenfies the language of the returned 'friendlyName' property."
                    },
                    {
                        "in": "query",
                        "name": "manageableInHub",
                        "schema": {
                            "enum": [
                                true,
                                false
                            ],
                            "type": "string",
                            "default": "if missing, no filtering is done"
                        },
                        "required": false,
                        "description": "If present, represents the 'manageableInHub' value to filter by."
                    },
                    {
                        "in": "query",
                        "name": "subscribable",
                        "schema": {
                            "enum": [
                                true,
                                false
                            ],
                            "type": "string",
                            "default": "if missing, no filtering is done"
                        },
                        "required": false,
                        "description": "If present, represents the 'subscribable' value to filter by."
                    }
                ],
                "operationId": "NotificationRequest",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "793d4e8d-ee0f-425b-9c80-7529d7395dab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/quotas": {
            "get": {
                "tags": [
                    "quotas"
                ],
                "summary": "Returns all quota items for the tenant (provided in JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetQuotasResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "reportUsage",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (only limits returned)."
                    }
                ],
                "operationId": "quotas",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "897bad70-3bf5-474b-b3a8-8abc5b1816e2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/quotas/{id}": {
            "get": {
                "tags": [
                    "quotas"
                ],
                "summary": "Returns a specific quota item for the tenant (provided in JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetQuotaByIdResult"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the quota item. For example, \"app_mem_size\", \"app_upload_disk_size\", or \"shared_spaces\"."
                    },
                    {
                        "in": "query",
                        "name": "reportUsage",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (usage not included)."
                    }
                ],
                "operationId": "quota",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "eaf0ae33-3d63-4d8e-9472-ac2bcc05d117",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/reload-tasks": {
            "get": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Find and return the tasks that the user can access.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tasks"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this task."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The case sensitive string used to search for a task by app ID."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "partial",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The boolean value used to search for a task is partial or not"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f4474a32-0422-4392-a1b5-2fb9ebd650af",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Create a task for a specified app.\n",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this task."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostTaskBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying the task parameters."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "96886ae1-5d6f-460a-b898-1fe4072c11e4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/reload-tasks/{taskId}": {
            "get": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Find and return a task.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3b8c2f8a-dc05-4ab9-8024-87164fc8d4e7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Update an existing task.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Service Unavailable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutTaskBody"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying the task parameters."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0e8de427-50f8-4775-81f7-d2cafdd15904",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "reload-tasks"
                ],
                "summary": "Delete a task.\n",
                "responses": {
                    "204": {
                        "description": "Task deleted successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for creation or retrieval of this engine session."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the task."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "034709b6-8e04-4986-923c-5f2843e5e92b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/reloads": {
            "get": {
                "tags": [
                    "reloads"
                ],
                "summary": "Finds and returns the reloads that the user has access to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reloads"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for retrieval of this reload(error code: RELOADS-003)."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "appId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The UUID formatted string used to search for an app's reload history entries. TenantAdmin users may omit this parameter to list all reload history in the tenant."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "example": "(status eq \"FAILED\" or status eq \"EXCEEDED_LIMIT\") and partial eq \"false\"\n",
                        "required": false,
                        "description": "SCIM filter expression used to search for reloads.\nThe filter syntax is defined in RFC 7644 section 3.4.2.2\n\nSupported attributes:\n- status: see #schemas/Status\n- partial: see #schemas/Partial\n\nSupported operators:\n- eq\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "log",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "required": false,
                        "description": "The boolean value used to include the log field or not, default is included, set log=false to exclude the log field."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "query",
                        "name": "partial",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "The boolean value used to search for a reload is partial or not."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f9055f43-32d4-4cb1-954b-473ef12345d2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "reloads"
                ],
                "summary": "Reloads an app specified by an app ID.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reload"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow for execution of this reload(error code: RELOADS-003) or the reload frequency quota has been met.(error code: RELOADS-013)."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too many requests, a pending reload request already exists for this app."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReloadRequest"
                            }
                        }
                    },
                    "required": true,
                    "description": "Request body specifying ID of app to be reloaded."
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6548fbe3-854c-4818-8a99-7c20b8dda005",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 10
                }
            }
        },
        "/v1/reloads/{reloadId}": {
            "get": {
                "tags": [
                    "reloads"
                ],
                "summary": "Get reload record",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reload"
                                }
                            }
                        },
                        "description": "Expected response to a valid request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow to find or get a reload(error code: RELOADS-003)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the reload."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Finds and returns a reload record",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "89a7df03-2caa-4521-a63f-4fcff27c68a9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/reloads/{reloadId}/actions/cancel": {
            "post": {
                "tags": [
                    "reloads"
                ],
                "summary": "Cancels a reload",
                "responses": {
                    "202": {
                        "description": "Reload is being cancelled."
                    },
                    "204": {
                        "description": "Reload has been cancelled."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden, the requesting JWT does not allow to cancel a reload(error code: RELOADS-003)."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The specified reload record could not be found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Reload is not in a cancellable state."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reloadId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The unique identifier of the reload."
                    },
                    {
                        "in": "header",
                        "name": "Authorization",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "JWT containing tenant credentials."
                    }
                ],
                "description": "Cancels a reload that is in progress or has been queued",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "113768ff-f0d1-4645-a8d1-fee3f3715e02",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 10
                }
            }
        },
        "/v1/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRolesResult"
                                }
                            }
                        },
                        "description": "An array of roles, and pagination links."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying roles."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT is invalid or not provided."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. All conditional statements within this query parameter are case insensitive."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "The number of roles to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de860ea"
                        },
                        "description": "The next page cursor."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "507f191e810c19729de86gea"
                        },
                        "description": "The previous page cursor."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending."
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Determines wether to return a count of the total records matched in the query. Defaults to false."
                    }
                ],
                "description": "Returns a list of roles using cursor-based pagination.",
                "operationId": "getRoles",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "25d5d99a-88d8-407d-828e-13c070eae515",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/roles/{id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get role by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Request successfully completed."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Role ID not found or Invalid format."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal Server Error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The role's unique identifier"
                    }
                ],
                "description": "Returns the requested role.",
                "operationId": "getRoleById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6ea2620b-4dcc-4ac7-b9a5-3291c5a4e8e5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/spaces": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Retrieves spaces that the current user has access to and match the query.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spaces"
                                }
                            }
                        },
                        "description": "Spaces retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "action",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Action on space. Supports only \"?action=publish\"."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Exact match filtering on space name using SCIM. Case insensitive on attribute name. For example ?filter=name eq \"MySpace\" and ?filter=NAME eq \"MySpace\" is both valid.",
                        "x-qlik-stability": "experimental"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        },
                        "required": false,
                        "description": "Maximum number of spaces to return."
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Space name to search and filter for. Case-insensitive open search with wildcards both as prefix and suffix. For example, \"?name=fin\" will get \"finance\", \"Final\" and \"Griffin\"."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor. Next links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Space ownerId to filter by. For example, \"?ownerId=123\"."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor. Previous links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Field to sort by. Prefix with +/- to indicate asc/desc. For example, \"?sort=+name\" to sort ascending on Name. Supported fields are \"type\", \"name\" and \"createdAt\"."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Type(s) of space to filter. For example, \"?type=managed,shared\"."
                    }
                ],
                "operationId": "getSpaces",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "21ce9ce0-0534-4f64-ab47-c4b2279d2f5c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "spaces"
                ],
                "summary": "Creates a space.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space created."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space create operation denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space already exists. `name` must be unique."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "operationId": "createSpace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpaceCreate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to set for a new space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f16f0f73-77b1-4291-8a75-8f2f8f638166",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/{spaceId}": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Retrieves a single space by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Too many repetetive requests."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to retrieve."
                    }
                ],
                "operationId": "getSpaceById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b686d1d1-c9e4-48ab-ae79-0ab1dd740c49",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "spaces"
                ],
                "summary": "Patches (updates) a space (partially).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space patched (updated)."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space patch (update) operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to update."
                    }
                ],
                "operationId": "patchSpaceById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpacePatch"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attribute that the user wants to patch (update) for the specified space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "f22daa5d-8ae1-43ce-995b-49fdd046a9d6",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "spaces"
                ],
                "summary": "Updates a space.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Space updated."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space update operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to update."
                    }
                ],
                "operationId": "updateSpaceById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpaceUpdate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to update for the specified space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0cac152b-9263-4b6f-bca3-bbe6c2358a4e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "spaces"
                ],
                "summary": "Deletes a space.",
                "responses": {
                    "204": {
                        "description": "Space deleted."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space delete operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space to delete."
                    }
                ],
                "operationId": "deleteSpaceById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "877d12d9-55ef-48e0-a29e-959e70475283",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/{spaceId}/assignments": {
            "get": {
                "tags": [
                    "assignments"
                ],
                "summary": "Retrieves the assignments of the space matching the query.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignments"
                                }
                            }
                        },
                        "description": "Assignments retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignments retrieve operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        },
                        "required": false,
                        "description": "Maximum number of assignments to return."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The next page cursor. Next links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The previous page cursor. Previous links make use of this."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "$ref": "#/components/schemas/AssignmentType"
                        },
                        "required": false,
                        "description": "The type of assignment."
                    }
                ],
                "operationId": "getSpaceAssignments",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9b242182-70bc-4da1-805f-2eb3100f758c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "assignments"
                ],
                "summary": "Creates an assignment.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment created."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment create operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Space"
                                }
                            }
                        },
                        "description": "Assignment already exists. `assigneeId` must be unique."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "operationId": "createSpaceAssignment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentCreate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to set for the assignment for the space."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1538a575-fce3-4c7d-a789-6e619baba2b8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/{spaceId}/assignments/{assignmentId}": {
            "get": {
                "tags": [
                    "assignments"
                ],
                "summary": "Retrieves a single assignment by ID.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment retrieve operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied or assignment not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to retrieve."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "operationId": "getSpaceAssignmentById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "516ca6a5-f0dd-4587-b005-be5e47cae907",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "put": {
                "tags": [
                    "assignments"
                ],
                "summary": "Updates a single assignment by ID. The complete list of roles must be provided.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "Assignment updated."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment update operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to update."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "operationId": "updateSpaceAssignmentById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentUpdate"
                            }
                        }
                    },
                    "required": true,
                    "description": "Attributes that the user wants to update for the specified assignment."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9813ba3d-ba95-4379-bbf5-70b6d123955d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "assignments"
                ],
                "summary": "Deletes an assignment.",
                "responses": {
                    "204": {
                        "description": "Assignment deleted."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Assignment delete operation denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Space not found or access denied or assignment not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the assignment to delete."
                    },
                    {
                        "in": "path",
                        "name": "spaceId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the space of the assignment."
                    }
                ],
                "operationId": "deleteSpaceAssignmentById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "769f4105-83eb-423c-ad34-8c727a9a659b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/spaces/types": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Gets a list of distinct space types.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpaceTypes"
                                }
                            }
                        },
                        "description": "Space types retrieved."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "operationId": "getTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "b0b5d220-7bc0-4eaa-80d6-371e099e07ad",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/temp-contents": {
            "post": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Uploads a temporary content file",
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "filename",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The name of the file to upload."
                    },
                    {
                        "in": "query",
                        "name": "ttl",
                        "schema": {
                            "type": "integer",
                            "maximum": 259200,
                            "minimum": 1
                        },
                        "description": "The TTL parameter is used to define the time-to-live for the content resource in seconds.\nIt defaults to one hour (3600) if no input is provided. Max TTL is 259200 (3 days).'\n"
                    }
                ],
                "description": "This endpoint is used to upload a file as a temporary content resource. It returns a `201 Created` with a location header that contains the location of the created resource. If filename or TTL is not properly set, a `400 Bad request` is returned. For internal issues, a `500 Internal Server Error` is returned.",
                "operationId": "TempContentsPost",
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    },
                    "required": true,
                    "description": "The file content (binary) to upload."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cd1c895b-2cc1-4c38-ba68-98bd6fe75f86",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/temp-contents/{id}": {
            "get": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Download a temporary content file",
                "responses": {
                    "200": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Content-Length": {
                                "$ref": "#/components/headers/ContentLength"
                            },
                            "Content-Disposition": {
                                "$ref": "#/components/headers/ContentDisposition"
                            }
                        },
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content, resource is incomplete."
                    },
                    "206": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "headers": {
                            "Accept-Ranges": {
                                "$ref": "#/components/headers/AcceptRanges"
                            },
                            "Content-Length": {
                                "$ref": "#/components/headers/ContentLength"
                            },
                            "Content-Ranges": {
                                "$ref": "#/components/headers/ContentRange"
                            },
                            "Content-Disposition": {
                                "$ref": "#/components/headers/ContentDisposition"
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone"
                    },
                    "416": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Range Not Satisfiable."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The temporary contents ID."
                    },
                    {
                        "in": "query",
                        "name": "inline",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Set to \"1\" to download the file in inline mode. Useful for displaying a preview of the file in a browser."
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Set to `unit=start-end` (for example, bytes=0-100) where unit = bytes (only supported unit), and start/end is a positive integer, where start <= end. Will also handle \"start-\" and \"-end as described in https://tools.ietf.org/html/rfc7233\"."
                    }
                ],
                "description": "This endpoint is used to retrieve a temporary content file. It returns a valid (`200 OK`) in case the file exists and the user is authorized to view the contents. It returns a `410 Gone` if the file has expired and `404 Not Found` if the criteria is not met.",
                "operationId": "TempContentsGet",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2be53923-7873-4466-a9cc-8189d8f080b0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/temp-contents/{id}/details": {
            "get": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Retrieve temporary content details",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/detailResponse"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content, resource is incomplete."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The temporary contents ID."
                    }
                ],
                "description": "This endpoint is used to retrieve a summary of the metadata associated with a temporary content resource. It returns a `200 OK` with a model if the temporary resource is valid. It returns a `410 Gone` if the file has expired and `404 Not Found` if the criteria is not met.",
                "operationId": "TempContentsDetails",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5fe5c4ca-75d9-4a33-879c-ae78b8214fe1",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/temp-contents/files": {
            "post": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Creates a new upload resource (tus protocol `creation` extension POST request)",
                "responses": {
                    "201": {
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            },
                            "Tus-Resumable": {
                                "$ref": "#/components/headers/TusResumable"
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "Tus-Version": {
                                "$ref": "#/components/headers/TusVersion"
                            }
                        },
                        "description": "Precondition Failed. tus protocol version not supported by the server."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request Entity Too Large"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Tus-Resumable",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The version of the tus protocol used."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Length",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": true,
                        "description": "The size of the entire upload in bytes."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Metadata",
                        "schema": {
                            "type": "string"
                        },
                        "description": "One or more comma-separated key-value pairs. The key and value must be separated by a space.\nThe key should be ASCII encoded, and the value must be Base64 encoded. All keys must be unique.\nSee [tus.io](http://tus.io) for details.\n\nThe following keys are used; any other keys are ignored.\n- `filename` - the name of the file.\n- `ttl` - the time-to-live for the uploaded file in seconds. Note that the time is counted from the _start_ of\n  the upload creation, not when the upload has finished. The server will keep the file available for access for\n  this period of time. The server may then delete it. The time defaults to one hour (3600) if not provided.\n  The maximum value is 259200 (3 days).'\n"
                    }
                ],
                "description": "Request used to create a new upload resource.\nSee [tus.io](http://tus.io) for details.\n",
                "operationId": "postTus",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "62464290-956f-4b64-8d63-bb895bd11fca",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            }
        },
        "/v1/temp-contents/files/{id}": {
            "patch": {
                "tags": [
                    "Temporary contents"
                ],
                "summary": "Apply bytes contained in the message at a given offset (tus protocol PATCH request)",
                "responses": {
                    "204": {
                        "description": "No Content. Patch successfully applied to upload."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found. Non-existent upload resource."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Conflict. Upload offsets do not match."
                    },
                    "410": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Gone. The upload resource no longer exists (could have expired)."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "Tus-Version": {
                                "$ref": "#/components/headers/TusVersion"
                            }
                        },
                        "description": "Precondition Failed. tus protocol version not supported by the server."
                    },
                    "415": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported Media Type"
                    },
                    "423": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Locked. Concurrent access is not allowed."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The ID used to uniquely identify the upload."
                    },
                    {
                        "in": "header",
                        "name": "Content-Type",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Standard HTTP `Content-Type` header."
                    },
                    {
                        "in": "header",
                        "name": "Tus-Resumable",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The version of the tus protocol used."
                    },
                    {
                        "in": "header",
                        "name": "Upload-Offset",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": true,
                        "description": "The byte offset within the upload."
                    },
                    {
                        "in": "header",
                        "name": "Content-Length",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 0
                        },
                        "required": false,
                        "description": "Standard HTTP `Content-Length` header."
                    }
                ],
                "description": "Request used to apply the bytes contained in the message at a given offset. Note that the tus server only\naccepts that the Content-Type response header is set to \"application/offset+octet-stream\".\nSee [tus.io](http://tus.io) for details.\n\nNote that the server may return `423 Locked` on this request. This happens if the client attempts to perform\nconcurrent access to the resource, for example, if attempting to do a `HEAD` request during an ongoing `PATCH` request.\nIt can also occur in situations where the connection is unexpectedly dropped between the client and the server\nand the client attempts to make a new request when the server is still busy processing the upload. When this\nhappens, the client shall, after some period of time, try to resume the upload again.\n",
                "operationId": "patchTus",
                "requestBody": {
                    "content": {
                        "application/offset+octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    },
                    "required": true,
                    "description": "The patch content (binary, either a complete or a partial file) to upload."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "68f1f676-e9ad-4bde-a48b-8a2ff44bd303",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 800
                }
            }
        },
        "/v1/tenants": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Creates a Tenant",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                },
                                "examples": {
                                    "Tenant": {
                                        "$ref": "#/components/examples/PostTenant201Response"
                                    }
                                }
                            }
                        },
                        "description": "Tenant created."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "MissingLicenseKeyProperty": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-21",
                                                    "title": "Missing licenseKey property",
                                                    "status": "400"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "InvalidLicense": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-23",
                                                    "title": "Invalid license error",
                                                    "status": "403"
                                                }
                                            ]
                                        }
                                    },
                                    "LicenseQuotaLimitReached": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-22",
                                                    "title": "License quota limit reached",
                                                    "status": "403"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "value": {
                                            "errors": [
                                                {
                                                    "code": "TENANTS-24",
                                                    "title": "Internal server error",
                                                    "status": "500"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Internal server error"
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "createTenant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantCreationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation",
                    "GET:/features",
                    "POST:/licenses/definition/action/validate",
                    "GET:/oauth-clients/{clientId}",
                    "POST:/licenses/definition/tenants",
                    "PUT:/licenses/definition"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "196decdb-8afa-4804-957b-0616573806c3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/{tenantId}": {
            "get": {
                "tags": [
                    "tenants"
                ],
                "summary": "Retrieve a single tenant by id.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                }
                            }
                        },
                        "description": "Tenant found."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant not found."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to retrieve"
                    }
                ],
                "operationId": "getTenantById",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "0617e7e7-992b-4d72-927e-2ce7c09020a0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "tenants"
                ],
                "summary": "Update a tenant by id.",
                "responses": {
                    "204": {
                        "description": "Tenant updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantPatchErrors"
                                }
                            }
                        },
                        "description": "Invalid PATCH request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to update"
                    }
                ],
                "operationId": "updateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9cdeda77-7391-4af2-b15b-0a06d60dde99",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/{tenantId}/actions/deactivate": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Deactivate a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantDeactivateResponse"
                                }
                            }
                        },
                        "description": "Tenant deactivated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Tenant Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed (invalid qlik-confirm-hostname value)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to deactivate"
                    },
                    {
                        "in": "header",
                        "name": "qlik-confirm-hostname",
                        "schema": {
                            "type": "string",
                            "format": "hostname",
                            "example": "unicorn.eu.qlikcloud.com"
                        },
                        "required": true,
                        "description": "A confirmation string that should match the hostname associated with the tenant resource to be deactivated. Example: unicorn.eu.qlikcloud.com"
                    }
                ],
                "description": "Deactivates a tenant.",
                "operationId": "deactivateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantDeactivateRequest"
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation",
                    "GET:/features",
                    "GET:/licenses/overview",
                    "GET:/oauth-clients/{clientId}",
                    "DELETE:/jobs/{id}",
                    "POST:/jobs"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7ea97baa-dafd-432a-94fb-30c008ce7f23",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/{tenantId}/actions/reactivate": {
            "post": {
                "tags": [
                    "tenants"
                ],
                "summary": "Reactivates a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Tenant reactivated successfully"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Precondition Failed (invalid qlik-confirm-hostname value)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unexpected error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid",
                            "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69"
                        },
                        "required": true,
                        "description": "The id of the tenant to reactivate"
                    },
                    {
                        "in": "header",
                        "name": "qlik-confirm-hostname",
                        "schema": {
                            "type": "string",
                            "example": "unicorn.us.qlikcloud.com"
                        },
                        "required": true,
                        "description": "A confirmation string that should match one of the hostnames of the tenant resource to be reactivated. Example: unicorn.eu.qlikcloud.com"
                    }
                ],
                "description": "Reactivates a disabled tenant.",
                "operationId": "reactivateTenantById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation",
                    "GET:/features",
                    "GET:/licenses/overview",
                    "GET:/oauth-clients/{clientId}",
                    "DELETE:/jobs/{id}"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1dd1e5d7-e78b-4cb5-87fb-7d1283187067",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/tenants/me": {
            "get": {
                "tags": [
                    "tenants"
                ],
                "summary": "Redirects to current tenant.",
                "responses": {
                    "302": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successful redirect."
                    }
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-dependencies": [
                    "POST:/accesscontrol/evaluation"
                ],
                "x-qlik-guidelines-ignore": [
                    "must-pluralize-resource-names"
                ],
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "53d956b7-aa77-440a-9397-3eab5c690ac8",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/transports/email-config": {
            "get": {
                "tags": [
                    "email-config"
                ],
                "summary": "Returns the email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/emailConfigGet"
                                }
                            }
                        },
                        "description": "Email configuration. If configuration does not exist in database then { isValid false, passwordExists false} is returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "getEmailConfig",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1ea86423-6e49-4e22-b6eb-f0ff6df8cc80",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "email-config"
                ],
                "summary": "Patch the email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchEmailConfigError"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "patchEmailConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/emailConfigPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "733cc6d6-d68a-4c72-b3fc-e6d63c66fea7",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "email-config"
                ],
                "summary": "Deletes email configuration for a given tenant id (retrieved from JWT).",
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteConfigNotFoundError"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "deleteEmailConfig",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "c661945a-bee7-49de-9ab1-c94695ce8d5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/send-test-email": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Send a test mail with the supplied email info (subject, body, recipient). Email config from database is used for the connection.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpResult"
                                }
                            }
                        },
                        "description": "Attempted send request. Response body indicates success/failure"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantAdminError"
                                }
                            }
                        },
                        "description": "Must be a tenant admin."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendTestMailConfigNotFoundError"
                                }
                            }
                        },
                        "description": "No email config exists for tenant."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "sendTestEmailAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/email"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1a86bdc9-0586-4e8c-8910-3dfb3eb7d352",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/validate": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Returns the isValid value for the email configuration for the tenant. Will return false if no email configuration exists.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpCheck"
                                }
                            }
                        },
                        "description": "Returns boolean isValid for the email config."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "validateAction",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "cffbbf07-b4b2-49b6-819e-464ef4c5c8c4",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/transports/email-config/actions/verify-connection": {
            "post": {
                "tags": [
                    "email-config-actions"
                ],
                "summary": "Verifies connection to email server for tenant provided via JWT",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/smtpResult"
                                }
                            }
                        },
                        "description": "Performed email connection. Response body indicates success/failure"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyConnectionConfigNotFoundError"
                                }
                            }
                        },
                        "description": "No email config exists for tenant."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsPublic"
                                }
                            }
                        },
                        "description": "Unexpected error."
                    }
                },
                "operationId": "verifyConnectionAction",
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "7cbfee05-3e68-4a03-8843-9bf95a768354",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        },
                        "description": "Successful query, returns an array of users"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying users."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not authorized."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.\n\nThe following fields support the `eq` operator: `id`, `subject`, `name`, `email`, `status`, `clientId`, `assignedRoles.id` `assignedRoles.name`, `assignedGroups.id`, `assignedGroupsAssignedRoles.name`\n\nAdditionally, the following fields support the `co` operator: `name`, `email`, `subject`\n\nQueries may be rate limited if they differ greatly from these examples:\n\n```\n(id eq \"62716ab404a7bd8626af9bd6\" or id eq \"62716ac4c7e500e13ff5fa22\") and (status eq \"active\" or status eq \"disabled\")\n```\n\n```\nname co \"query\" or email co \"query\" or subject co \"query\" or id eq \"query\" or assignedRoles.name eq \"query\"\n```\n\nAny filters for status must be grouped together and applied to the whole query.\n\nValid:\n\n```\n(name eq \"Bob\" or name eq \"Alice\") and (status eq \"active\" or status eq \"disabled\")\n```\n\nInvalid:\n\n```\nname eq \"Bob\" or name eq \"Alice\" and (status eq \"active\" or status eq \"disabled\")\n```\n"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users that come after this cursor value when sorted. Cannot be used in conjunction with `prev`."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users that come before this cursor value when sorted. Cannot be used in conjunction with `next`."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    },
                    {
                        "in": "query",
                        "name": "totalResults",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Whether to return a total match count in the result. Defaults to false. It will trigger an extra DB query to count, reducing the efficiency of the endpoint."
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string",
                            "format": "email"
                        },
                        "required": false,
                        "x-qlik-pii": true,
                        "description": "The email to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true,
                        "x-qlik-customer-data": true
                    },
                    {
                        "in": "query",
                        "name": "endingBefore",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with startingAfter. Deprecated. Use `prev` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "The role to filter by. Deprecated.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                            "enum": [
                                "name"
                            ],
                            "type": "string",
                            "default": "name"
                        },
                        "required": false,
                        "description": "The user parameter to sort by. Deprecated. Use `sort` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "sortOrder",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "asc"
                        },
                        "required": false,
                        "description": "The sort order, either ascending or descending. Deprecated. Use `sort` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "startingAfter",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with endingBefore. Deprecated. Use `next` instead.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "active",
                                "invited",
                                "disabled",
                                "deleted"
                            ],
                            "type": "string",
                            "default": "active"
                        },
                        "required": false,
                        "description": "The status to filter by. Supports multiple values delimited by commas. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "subject",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "x-qlik-pii": true,
                        "description": "The subject to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.",
                        "x-qlik-deprecated": true,
                        "x-qlik-customer-data": true
                    },
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by. Deprecated.",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Returns a list of users using cursor-based pagination.",
                "operationId": "getUsers",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "102913a6-6ad0-48e1-9986-9c668b96e209",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "User": {
                                        "$ref": "#/components/examples/PostUser201Response"
                                    }
                                }
                            }
                        },
                        "description": "User created successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request was made."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized to create a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from creating a user."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User conflict when attempting to create a new user."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Payload was too large (limit of 500kB)"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Creates an invited user.",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPostSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "957e6203-20d6-427c-809b-ab28b7628e80",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "User resource"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from getting a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The user's unique identifier"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    }
                ],
                "description": "Returns the requested user.",
                "operationId": "getUserById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bb9011d2-c54f-4b51-9cb9-0cd1fd327da5",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Update user by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "User updated successfully."
                    },
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User update was partially successful with non-critical failures."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for patching a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from patching a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the user to update."
                    }
                ],
                "description": "Updates fields for a user resource",
                "operationId": "updateUserById",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSONPatchArray"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5e440011-c938-41fd-a9ba-d01b4dccf254",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete user by ID",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "User deleted successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request for deleting a user."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from deleting a user."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "User was not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The ID of the user to delete."
                    }
                ],
                "description": "Deletes the requested user.",
                "operationId": "deleteUserById",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "3b00af35-5164-477e-83da-ce2dc63555ef",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users/actions/count": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Count users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCount"
                                }
                            }
                        },
                        "description": "The count of users."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Forbidden from reading the count."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "tenantId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": false,
                        "description": "The tenant ID to filter by.",
                        "x-qlik-deprecated": true
                    }
                ],
                "description": "Returns the number of users in a given tenant",
                "operationId": "countUsers",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "722c134b-2c4f-48b0-95d0-91c18e7b88b3",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/users/actions/filter": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Filter users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        },
                        "description": "Users retrieved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Advanced query filter syntax error or query params format error or filter too complex."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized, JWT invalid or not provided."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "The operation failed due to unsufficient permissions."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "required": false,
                        "description": "The number of user entries to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev."
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "description": "Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name"
                            ],
                            "type": "string",
                            "default": "+name"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "description": "Retrieves a list of users matching the filter using an advanced query string.",
                "operationId": "users_api_actions_filter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Filter"
                            }
                        }
                    },
                    "required": false,
                    "description": "Will contain the query filter to apply. It shall not contain more than 100 ids."
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "1ad976df-9fd9-46eb-ab6f-bb075365eeda",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "special",
                    "limit": 200
                }
            }
        },
        "/v1/users/actions/invite": {
            "post": {
                "tags": [
                    "invite"
                ],
                "summary": "Invite one or more users by email address.",
                "responses": {
                    "207": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InviteDataResponse"
                                }
                            }
                        },
                        "description": "Request completed successfully. See Results for ResultDetail on each invite."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsResponse"
                                }
                            }
                        },
                        "description": "Request denied."
                    },
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorsResponse"
                                }
                            }
                        },
                        "description": "Request error. See Errors."
                    }
                },
                "operationId": "inviteUsers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InviteRequest"
                            },
                            "example": {
                                "invitees": [
                                    {
                                        "name": "Elvis Presley",
                                        "email": "foo@qlik.com",
                                        "resend": true,
                                        "language": "en"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-stability": "stable",
                "x-qlik-visibility": "public",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "dd975765-308a-400b-9339-dbb7d0d3add0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get my user",
                "responses": {
                    "301": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string",
                                    "format": "url"
                                },
                                "description": "The URI to the user resource."
                            }
                        },
                        "description": "Successful redirect."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    }
                },
                "description": "Redirects to retrieve the user resource associated with the JWT claims.",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "2e6c32e0-8b9f-473b-88e5-d0c2cb2c129f",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/users/metadata": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get configuration metadata",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        },
                        "description": "User configuration"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "headers": {
                            "retry-after": {
                                "schema": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "description": "The amount of seconds to wait before retrying the request."
                            }
                        },
                        "description": "Request has been rate limited."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error."
                    }
                },
                "description": "Returns the metadata with regard to the user configuration. Deprecated, use GET /v1/roles instead.",
                "x-qlik-deprecated": true,
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "54c27104-3707-4067-9ac4-d620ca8b67b3",
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/web-notifications": {
            "get": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Retrieve notifications matching the query.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notifications"
                                }
                            }
                        },
                        "description": "An array of notification objects"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Invalid request parameters for querying users."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 0
                        },
                        "required": false,
                        "description": "The number of notification entries to retrieved."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "number",
                            "default": 1
                        },
                        "required": false,
                        "description": "Page number"
                    },
                    {
                        "in": "query",
                        "name": "read",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false,
                        "description": "Read status of the notification"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "+createdAt",
                                "-createdAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-createdAt"
                        },
                        "required": false,
                        "description": "The field to sort by, with +/- prefix indicating sort order"
                    }
                ],
                "operationId": "getNotifications",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "dc755317-d50f-4a08-8829-850e34e4d8f9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/web-notifications/{notificationId}": {
            "get": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Retrieve a single notification by Id.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": "Successfully got notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Not found when user tries to get notification they do not own."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to retrieve."
                    }
                ],
                "operationId": "getNotification",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bf7fc4ab-8058-44c0-94a3-b13e175d563e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Patch a notification.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully patched marked notification."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported patch request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Notification not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to update."
                    }
                ],
                "operationId": "updateNotification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9f646404-2319-41e6-9713-9d898911b41e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Delete a notification.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully deleted notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Notification not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "notificationId",
                        "schema": {
                            "type": "string",
                            "format": "uid"
                        },
                        "required": true,
                        "description": "The id of the notification to delete."
                    }
                ],
                "operationId": "deleteNotification",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "28ff9a99-0ac7-48e8-b582-fad9e1552462",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/web-notifications/all": {
            "patch": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Patch all notifications.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully marked all notification."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unsupported patch request."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "updateNotifications",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPatchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "8f6a93b7-6cfa-4d49-b355-f19817d7a9c9",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "web-notifications"
                ],
                "summary": "Delete all notifications.",
                "responses": {
                    "204": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meta"
                                }
                            }
                        },
                        "description": "Successfully deleted notification."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Unauthorized request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Errors"
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "deleteNotifications",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "97bbad8c-68e1-428f-8d13-558c06cf0c04",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Retrieves all webhooks entries for a tenant",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "createdByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that created it"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter resources by enabled true/false"
                    },
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by event-type"
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by level that user has access to (either user or level)"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of webhooks to retrieve"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by name (wildcard and case insensitive)"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page"
                    },
                    {
                        "in": "query",
                        "name": "ownerId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that owns it, only applicable for user level webhooks"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "+name",
                                "-name",
                                "url",
                                "+url",
                                "-url",
                                "createdAt",
                                "+createdAt",
                                "-createdAt",
                                "updatedAt",
                                "+updatedAt",
                                "-updatedAt"
                            ],
                            "type": "string",
                            "default": "-createdAt"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order"
                    },
                    {
                        "in": "query",
                        "name": "updatedByUserId",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by user that last updated the webhook"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by url (wildcard and case insensitive)"
                    }
                ],
                "operationId": "listWebhookEntries",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "62c38247-58f9-4523-9795-98770aac124b",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "post": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Creates a new webhook",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "createWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebhookPost"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "6a7b9f31-9b7d-4621-9eb5-4f520ae6d5e2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks/{id}": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Returns details for a specific webhook",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "getWebhook",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "bec30764-7c0e-4c99-a059-436322603d4e",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            },
            "patch": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Patches a webhook",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "patchWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebhookPatch"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "27564bc9-d606-4167-b152-70bfc3c0ede0",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "put": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Updates a webhook",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookResponse"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "updateWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebhookBase"
                            }
                        }
                    },
                    "required": true
                },
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "d9d39f9d-8c29-4ef3-afca-d18f7a64861c",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            },
            "delete": {
                "tags": [
                    "webhooks"
                ],
                "summary": "Deletes a specific webhook",
                "responses": {
                    "204": {
                        "description": "No Content response."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "deleteWebhook",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "084f7186-009b-4ce0-a705-b6e69fec5b8d",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks/{id}/deliveries": {
            "get": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Returns deliveries for a specific webhook",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryList"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    },
                    {
                        "in": "query",
                        "name": "eventType",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter resources by event-type"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        },
                        "description": "Maximum number of deliveries to retrieve"
                    },
                    {
                        "in": "query",
                        "name": "next",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to the next page"
                    },
                    {
                        "in": "query",
                        "name": "prev",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Cursor to previous next page"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "status",
                                "+status",
                                "-status",
                                "triggeredAt",
                                "+triggeredAt",
                                "-triggeredAt"
                            ],
                            "type": "string",
                            "default": "-triggeredAt"
                        },
                        "description": "Field to sort by, prefix with -/+ to indicate order"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "success",
                                "fail"
                            ],
                            "type": "string"
                        },
                        "description": "Filter resources by status (success or fail)"
                    }
                ],
                "operationId": "getWebhookDeliveryList",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "9585a125-0da9-4813-91bb-cb63a30cab74",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/webhooks/{id}/deliveries/{deliveryId}": {
            "get": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Returns details for a specific delivery",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delivery"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "deliveryId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The delivery's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "getWebhookDelivery",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "03335cff-2afd-412e-8b70-98b422e9de5a",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        },
        "/v1/webhooks/{id}/deliveries/{deliveryId}/actions/resend": {
            "post": {
                "tags": [
                    "deliveries"
                ],
                "summary": "Resend the delivery with the same payload",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Delivery"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "deliveryId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The delivery's unique identifier."
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "The webhook's unique identifier."
                    }
                ],
                "operationId": "resendDelivery",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "5ab43416-a1f0-4dd7-855e-de6dc15604ab",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "2",
                    "limit": 100
                }
            }
        },
        "/v1/webhooks/event-types": {
            "get": {
                "tags": [
                    "webhooks"
                ],
                "summary": "List of event-types that are possible to subscribe to.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypes"
                                }
                            }
                        },
                        "description": "OK Response"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "operationId": "listEventTypes",
                "x-qlik-visibility": "public",
                "x-qlik-stability": "stable",
                "x-qlik-categories": [
                    "external/manage"
                ],
                "x-qlik-entity-revision": "e678c77a-f345-4b78-a785-5cb62a4f70d2",
                "x-qlik-deprecated": false,
                "x-qlik-tier": {
                    "tier": "1",
                    "limit": 1000
                }
            }
        }
    },
    "definitions": {
        "oauth-metadata": {
            "type": "object",
            "properties": {
                "issuer": {
                    "type": "string",
                    "description": "The issuer of the tokens."
                },
                "jwks_uri": {
                    "type": "string",
                    "format": "uri",
                    "description": "The public keys endpoint."
                },
                "token_endpoint": {
                    "type": "string",
                    "format": "uri",
                    "description": "The token endpoint."
                },
                "revocation_endpoint": {
                    "type": "string",
                    "format": "uri",
                    "description": "The token endpoint."
                },
                "grant_types_supported": {
                    "type": "array",
                    "description": "List of supported grant types."
                },
                "authorization_endpoint": {
                    "type": "string",
                    "format": "uri",
                    "description": "The authorization endpoint."
                },
                "response_types_supported": {
                    "type": "array",
                    "description": "List of supported authorization code responses."
                }
            }
        },
        "api-key-page": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ApiKey"
                    },
                    "description": "Properties of API keys in a given tenant."
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "description": "Navigation links to page results."
                }
            }
        },
        "ApiKey": {
            "type": "object",
            "required": [
                "id",
                "tenantId",
                "description",
                "status",
                "sub",
                "subType",
                "expiry",
                "createdByUser"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "description": "The unique ID for the resource."
                },
                "sub": {
                    "type": "string",
                    "format": "uid",
                    "description": "The ID of the subject for the API key."
                },
                "expiry": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the API key will expire and no longer be a valid authentication token."
                },
                "status": {
                    "enum": [
                        "active",
                        "expired",
                        "revoked"
                    ],
                    "type": "string",
                    "description": "The status of the API key."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the API key was created."
                },
                "subType": {
                    "enum": [
                        "user"
                    ],
                    "type": "string",
                    "description": "Type of the subject."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The tenant ID."
                },
                "description": {
                    "type": "string",
                    "description": "A description for the API key.",
                    "x-qlik-customer-data": true
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the API key was last updated."
                },
                "createdByUser": {
                    "type": "string",
                    "format": "uid",
                    "description": "The ID of the user who created the key."
                }
            }
        },
        "ApiKeyBody": {
            "required": [
                "description"
            ],
            "properties": {
                "sub": {
                    "type": "string",
                    "description": "The ID of the subject for the API key."
                },
                "expiry": {
                    "type": "string",
                    "description": "The expiry of the API key, in ISO8601 duration format."
                },
                "subType": {
                    "type": "string",
                    "description": "Type of the subject."
                },
                "description": {
                    "type": "string",
                    "description": "Text that describes the API key."
                }
            }
        },
        "ApiKeyConfigPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/api_keys_enabled",
                        "/max_api_key_expiry",
                        "/max_keys_per_user"
                    ],
                    "type": "string",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "ApiKeyPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/description"
                    ],
                    "type": "string",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "string",
                    "description": "The value to be used for this operation.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "ApiKeysConfig": {
            "type": "object",
            "properties": {
                "api_keys_enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enables or disables API key functionality for the specified tenant."
                },
                "max_keys_per_user": {
                    "type": "number",
                    "default": 5,
                    "maximum": 1000,
                    "minimum": 0,
                    "description": "The maximum number of active API keys that any user can create for the specified tenant."
                },
                "max_api_key_expiry": {
                    "type": "string",
                    "default": "PT24H",
                    "description": "The maximum lifetime, in ISO8601 duration format, for which an API key can be issued for the specified tenant."
                },
                "scim_externalClient_expiry": {
                    "type": "string",
                    "default": "P365D",
                    "description": "The expiry of the scim externalClient token in ISO8601 duration format. Used during the creation of an externalClient API key.",
                    "x-qlik-visibility": "private"
                }
            }
        },
        "ApiKeysConfigPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ApiKeyConfigPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/api_keys_enabled",
                    "value": true
                }
            ]
        },
        "ApiKeysPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ApiKeyPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/description",
                    "value": "my new description"
                }
            ]
        },
        "ApiKeyWithToken": {
            "type": "object",
            "required": [
                "id",
                "tenantId",
                "description",
                "status",
                "token",
                "sub",
                "subType",
                "expiry",
                "createdByUser"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "description": "The unique ID for the resource."
                },
                "sub": {
                    "type": "string",
                    "format": "uid",
                    "description": "The ID of the subject for the API key."
                },
                "token": {
                    "type": "string",
                    "description": "The generated signed JWT."
                },
                "expiry": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the API key will expire and no longer be a valid authentication token."
                },
                "status": {
                    "enum": [
                        "active",
                        "expired",
                        "revoked"
                    ],
                    "type": "string",
                    "description": "The status of the API key."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the API key was created."
                },
                "subType": {
                    "enum": [
                        "user"
                    ],
                    "type": "string",
                    "description": "Type of the subject."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The tenant ID."
                },
                "description": {
                    "type": "string",
                    "description": "A description for the API key."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the API key was last updated."
                },
                "createdByUser": {
                    "type": "string",
                    "format": "uid",
                    "description": "The id of the user who created the key."
                }
            }
        },
        "Error": {
            "type": "object",
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The unique code for the error"
                },
                "title": {
                    "type": "string",
                    "description": "A summary of what went wrong"
                },
                "detail": {
                    "type": "string",
                    "description": "May be used to provide additional details"
                }
            }
        },
        "Errors": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Error"
                    }
                }
            },
            "description": "A representation of the errors encountered from the HTTP request."
        },
        "Link": {
            "required": [
                "href"
            ],
            "properties": {
                "href": {
                    "type": "string",
                    "description": "URL to a resource request"
                }
            }
        },
        "oauth-authorization-code-request": {
            "required": [
                "grant_type",
                "code",
                "code_verifier",
                "redirect_uri",
                "client_id"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The authorization code created by the server."
                },
                "client_id": {
                    "type": "string",
                    "description": "The client identifier."
                },
                "deviceType": {
                    "type": "string",
                    "description": "The type of the user device the authorization token is generated for (Tablet, Phone etc.)."
                },
                "grant_type": {
                    "enum": [
                        "authorization_code"
                    ],
                    "type": "string",
                    "description": "The grant type used to exchange an authorization code for an access token."
                },
                "description": {
                    "type": "string",
                    "description": "A user-friendly description to distinguish between multiple tokens."
                },
                "redirect_uri": {
                    "type": "string",
                    "description": "The original redirect URI provided during authorization. For verification purposes only."
                },
                "client_secret": {
                    "type": "string",
                    "description": "The client secret."
                },
                "code_verifier": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 43,
                    "description": "Required when grant_type is \"authorization_code\". The code verifier to verify original code challenge created by the client. It must be between 43 and 128 characters long and consists of [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\""
                }
            }
        },
        "oauth-client-credentials-request": {
            "required": [
                "grant_type"
            ],
            "properties": {
                "scope": {
                    "enum": [
                        "user_default"
                    ],
                    "type": "string",
                    "description": "The scope of access that is being requested."
                },
                "grant_type": {
                    "enum": [
                        "client_credentials"
                    ],
                    "type": "string",
                    "description": "The grant type used to obtain an access token outside of the context of a user."
                }
            }
        },
        "oauth-refresh-request": {
            "required": [
                "grant_type",
                "refresh_token"
            ],
            "properties": {
                "grant_type": {
                    "enum": [
                        "refresh_token"
                    ],
                    "type": "string",
                    "description": "The grant type used to exchange a refresh token for an access token."
                },
                "client_secret": {
                    "type": "string",
                    "description": "The client secret."
                },
                "refresh_token": {
                    "type": "string",
                    "description": "The refresh token to use."
                }
            }
        },
        "oauth-revoke-request": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "description": "The token to revoke."
                },
                "token_type_hint": {
                    "enum": [
                        "access_token",
                        "refresh_token"
                    ],
                    "type": "string",
                    "description": "Type of the provided token."
                }
            }
        },
        "oauth-token-exchange": {
            "required": [
                "grant_type",
                "client_id",
                "subject_token_type",
                "subject_token",
                "purpose"
            ],
            "properties": {
                "purpose": {
                    "enum": [
                        "websocket",
                        "webresource"
                    ],
                    "type": "string",
                    "description": "The intended use for the requested token."
                },
                "client_id": {
                    "type": "string",
                    "description": "The client identifier."
                },
                "grant_type": {
                    "enum": [
                        "urn:ietf:params:oauth:grant-type:token-exchange"
                    ],
                    "type": "string",
                    "description": "Specifies the method in which the token will be granted."
                },
                "subject_token": {
                    "type": "string",
                    "description": "The token that represents the identity of the party on behalf of whom the request is being made."
                },
                "subject_token_type": {
                    "enum": [
                        "urn:ietf:params:oauth:token-type:access_token"
                    ],
                    "type": "string",
                    "description": "The type of the subject token."
                }
            },
            "description": "Exchanges one token for another. Implementation is based on this spec: https://datatracker.ietf.org/doc/html/rfc8693."
        },
        "oauth-token-response": {
            "type": "object",
            "required": [
                "access_token",
                "token_type"
            ],
            "properties": {
                "scope": {
                    "type": "string",
                    "example": "offline_access user_default",
                    "description": "The scope of access that is being granted, delimited by space."
                },
                "auth_time": {
                    "type": "number",
                    "example": 1628524367,
                    "description": "Unix time of when the last authentication occurred."
                },
                "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "1970-01-18T13:17:10.931Z",
                    "description": "The date and time in ISO format for when the access token will expire."
                },
                "token_type": {
                    "enum": [
                        "bearer"
                    ],
                    "type": "string",
                    "description": "The type of the token issued."
                },
                "access_token": {
                    "type": "string",
                    "description": "The access token granted."
                },
                "refresh_token": {
                    "type": "string",
                    "description": "Refresh token to be used to obtain a new access token without user intervention."
                },
                "issued_token_type": {
                    "enum": [
                        "urn:ietf:params:oauth:token-type:access_token"
                    ],
                    "type": "string",
                    "description": "The type of the token issued for a token exchange. See https://datatracker.ietf.org/doc/html/rfc8693#section-2.2.1 for more details."
                }
            }
        },
        "link": {
            "required": [
                "href"
            ],
            "properties": {
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL for the link."
                }
            }
        },
        "oauth-token": {
            "required": [
                "tenantId",
                "userId",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The token ID."
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the owning user."
                },
                "lastUsed": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time the token was used."
                },
                "tenantId": {
                    "type": "string",
                    "description": "The ID of the owning tenant."
                },
                "deviceType": {
                    "type": "string",
                    "description": "The type of the user device the authorization token is generated for (Tablet, Phone etc.)."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token."
                }
            }
        },
        "oauth-token-page": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/oauth-token"
                    }
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                }
            }
        },
        "WebIntegration": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique web integration identifier."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the web integration."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The time the web integration was created."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The tenant that the web integration belongs to."
                },
                "createdBy": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The user that created the web integration."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The time the web integration was last updated."
                },
                "validOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    },
                    "description": "The origins that are allowed to make requests to the tenant.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A web integration object."
        },
        "WebIntegrationPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/name",
                        "/validOrigins"
                    ],
                    "type": "string",
                    "description": "A JSON Pointer."
                },
                "value": {
                    "type": "string",
                    "description": "New value to be used for this operation.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
        },
        "WebIntegrationPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/WebIntegrationPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/name",
                    "value": "New name"
                }
            ]
        },
        "WebIntegrationPost": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique web integration identifier."
                },
                "name": {
                    "type": "string",
                    "example": "My Web Integration",
                    "description": "The name of the newly created web integration.",
                    "x-qlik-customer-data": true
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "example": "http://mytenant.region.domain/api/v1/web-integrations/id",
                                    "description": "URL to the current page of records."
                                }
                            },
                            "description": "Link information for current page."
                        }
                    },
                    "description": "Pagination links"
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The time the web integration was created."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The tenant that the web integration belongs to."
                },
                "createdBy": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The user that created the web integration."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The time the web integration was last updated."
                },
                "validOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    },
                    "example": [
                        "https://thirdPartyApp.com"
                    ],
                    "description": "The origins that are allowed to make requests to the tenant.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "The creation of a web integration response."
        },
        "WebIntegrationPostSchema": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My Web Integration",
                    "description": "The name of the web integration to create.",
                    "x-qlik-customer-data": true
                },
                "validOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uri"
                    },
                    "example": [
                        "https://thirdPartyApp.com"
                    ],
                    "description": "The origins that are allowed to make requests to the tenant.",
                    "x-qlik-customer-data": true
                }
            }
        },
        "WebIntegrations": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/WebIntegration"
                    },
                    "description": "Properties of web integrations in a given tenant."
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the next page of records."
                                }
                            },
                            "description": "Link information for next page."
                        },
                        "prev": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the previous page of records."
                                }
                            },
                            "description": "Link information for previous page."
                        },
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the current page of records."
                                }
                            },
                            "description": "Link information for current page."
                        }
                    },
                    "description": "Pagination links"
                }
            },
            "description": "An array of web integration objects."
        },
        "Analysis": {
            "enum": [
                "breakdown",
                "changePoint",
                "comparison",
                "contribution",
                "correlation",
                "fact",
                "mutualInfo",
                "rank",
                "spike",
                "trend",
                "values"
            ],
            "type": "string"
        },
        "AnalysisComposition": {
            "type": "object",
            "properties": {
                "dims": {
                    "$ref": "#/components/schemas/CompositionMinMax"
                },
                "geos": {
                    "$ref": "#/components/schemas/CompositionMinMax"
                },
                "msrs": {
                    "$ref": "#/components/schemas/CompositionMinMax"
                },
                "items": {
                    "$ref": "#/components/schemas/CompositionMinMax"
                },
                "temporals": {
                    "$ref": "#/components/schemas/CompositionMinMax"
                },
                "description": {
                    "type": "object",
                    "properties": {
                        "long": {
                            "type": "string"
                        },
                        "short": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "AnalysisDescriptor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "compositions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisComposition"
                    }
                },
                "supportsMasterItems": {
                    "type": "boolean",
                    "description": "If analysis can work with master items (default is true)"
                },
                "requiresAutoCalendarPeriod": {
                    "type": "boolean",
                    "description": "Used for period-specific analyses to indicate the defined or available calendar period must be of type autoCalendar"
                },
                "requiresDefinedAnalysisPeriod": {
                    "type": "boolean",
                    "description": "Used for period-specific analyses to indicate the measure must be associated with one or more analysis periods"
                },
                "requiresAvailableAnalysisPeriod": {
                    "type": "boolean",
                    "description": "Used for period-specific analyses to indicate the temporal dimension must be associated with one or more analysis periods"
                }
            }
        },
        "AnalysisDescriptorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisDescriptor"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "AnalysisDetails": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "analysis": {
                    "$ref": "#/components/schemas/Analysis"
                },
                "analysisGroup": {
                    "$ref": "#/components/schemas/AnalysisGroup"
                }
            }
        },
        "AnalysisGroup": {
            "enum": [
                "anomaly",
                "brekadown",
                "comparison",
                "correl",
                "fact",
                "list",
                "mutualInfo",
                "rank"
            ],
            "type": "string"
        },
        "AnalysisModelItemField": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "populated only for fields"
                },
                "isHidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "whether the field is hidden in business logic"
                },
                "classifications": {
                    "$ref": "#/components/schemas/Classifications"
                },
                "simplifiedClassifications": {
                    "$ref": "#/components/schemas/SimplifiedClassifications"
                }
            }
        },
        "AnalysisModelItemMasterItem": {
            "type": "object",
            "properties": {
                "libId": {
                    "type": "string",
                    "description": "only available for master items"
                },
                "caption": {
                    "type": "string"
                },
                "isHidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "whether the master item is hidden in business logic"
                },
                "classifications": {
                    "$ref": "#/components/schemas/Classifications"
                },
                "simplifiedClassifications": {
                    "$ref": "#/components/schemas/SimplifiedClassifications"
                }
            }
        },
        "AnalysisModelResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisModelResponseDetail"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "AnalysisModelResponseDetail": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisModelItemField"
                    }
                },
                "masterItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisModelItemMasterItem"
                    }
                },
                "isLogicalModelEnabled": {
                    "type": "boolean",
                    "description": "if the analysis model is constructed based on a user-defined business-logic (as opposed to a default one)"
                },
                "isDefinedLogicalModelValid": {
                    "type": "boolean",
                    "description": "set only if previous property is true, to indicate if the business logic passes validation"
                }
            }
        },
        "AnalysisRecommendationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AnalysisRecommendationResponseDetail"
                    }
                }
            }
        },
        "AnalysisRecommendationResponseDetail": {
            "type": "object",
            "required": [
                "recAnalyses"
            ],
            "properties": {
                "nluInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PartialNluInfo"
                    }
                },
                "recAnalyses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RecommendedAnalysis"
                    }
                }
            }
        },
        "AnalysisRecommendRequest": {
            "type": "object",
            "oneOf": [
                {
                    "$ref": "#/components/schemas/RecommendNaturalLangQuery"
                },
                {
                    "$ref": "#/components/schemas/RecommendItems"
                }
            ],
            "description": "Request payload can be of two types, using natural language query or consist of fields or master items and optional target analysis.\nIn below examples, consider sales as a master item and product as field, so to get recommendations using sales and product,\nyou can utilize below three approaches, also you can set language parameter in headers as part of accept-language.\nExamples:\n```\n{\n  \"text\": \"show me sales by product\"\n}\n```\n```\n{\n  \"fields\": [\n    {\n      \"name\": \"product\"\n    }\n  ],\n  \"libItems\": [\n    {\n      libId: \"NwQfJ\"\n    }\n  ]\n}\n```\n```\n{\n  \"fields\": [\n    {\n      \"name\": \"product\"\n    }\n  ],\n  \"libItems\": [\n    {\n      \"libId\": \"NwQfJ\"\n    }\n  ],\n  \"targetAnalysis\": {\n    \"id\": \"rank-rank\"\n  }\n}\n```\n"
        },
        "AppAttributes": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name (title) of the application"
                },
                "usage": {
                    "enum": [
                        "ANALYTICS",
                        "DATA_PREPARATION"
                    ],
                    "type": "string",
                    "description": "Indicates whether the app is used for Analytics or DataPreparation\n\nOne of:\n* ANALYTICS\n* DATA_PREPARATION"
                },
                "locale": {
                    "type": "string",
                    "description": "Set custom locale instead of the system default"
                },
                "spaceId": {
                    "type": "string",
                    "description": "The space ID of the application"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the application"
                }
            }
        },
        "AppContentList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AppContentListItem"
                    },
                    "description": "Content list items."
                },
                "library": {
                    "type": "string",
                    "description": "Content library name."
                },
                "subpath": {
                    "type": "string",
                    "description": "Content library relative listing path. Empty in case of root listed or representing actual subpath listed."
                }
            }
        },
        "AppContentListItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique content identifier."
                },
                "link": {
                    "type": "string",
                    "description": "Unique content link."
                },
                "name": {
                    "type": "string",
                    "description": "Content name."
                },
                "type": {
                    "type": "string",
                    "description": "Content type."
                }
            }
        },
        "AppUpdateAttributes": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name (title) of the application."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the application."
                }
            }
        },
        "ChartType": {
            "enum": [
                "barchart",
                "combochart",
                "distributionplot",
                "kpi",
                "linechart",
                "map",
                "scatterplot",
                "table"
            ],
            "type": "string",
            "description": "Chart type given to current recommendation"
        },
        "classification": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "diff": {
                            "type": "number",
                            "example": 0.5
                        },
                        "trend": {
                            "type": "string",
                            "example": "up"
                        },
                        "absoluteDiff": {
                            "type": "number",
                            "example": 2.5
                        }
                    }
                }
            ]
        },
        "Classifications": {
            "type": "array",
            "items": {
                "enum": [
                    "dimension",
                    "measure",
                    "temporal",
                    "city",
                    "address",
                    "boolean",
                    "country",
                    "date",
                    "email",
                    "geographical",
                    "geoPoint",
                    "geoPolygon",
                    "hour",
                    "latitude",
                    "monetary",
                    "ordinal",
                    "percentage",
                    "postalCode",
                    "quarter",
                    "stateProvince",
                    "timestamp",
                    "week",
                    "weekDay",
                    "year",
                    "yearDay"
                ],
                "type": "string"
            },
            "description": "classification defines the default role that attribute can play in an analysis"
        },
        "cmpbool": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/classification"
                },
                {
                    "type": "object",
                    "properties": {
                        "baseline": {
                            "type": "boolean",
                            "example": false
                        },
                        "comparison": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                }
            ]
        },
        "cmpfloat": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/classification"
                },
                {
                    "type": "object",
                    "properties": {
                        "baseline": {
                            "type": "number",
                            "example": 1.1
                        },
                        "comparison": {
                            "type": "number",
                            "example": 2.2
                        }
                    }
                }
            ]
        },
        "cmpint": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/classification"
                },
                {
                    "type": "object",
                    "properties": {
                        "baseline": {
                            "type": "number",
                            "example": 1
                        },
                        "comparison": {
                            "type": "number",
                            "example": 2
                        }
                    }
                }
            ]
        },
        "comparison": {
            "type": "object",
            "properties": {
                "objHeavy": {
                    "$ref": "#/components/schemas/sortedcomparisonoobjheavy"
                },
                "rowCount": {
                    "$ref": "#/components/schemas/cmpint"
                },
                "objNoCache": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "sheetCount": {
                    "$ref": "#/components/schemas/cmpint"
                },
                "fileSizeMib": {
                    "$ref": "#/components/schemas/cmpfloat"
                },
                "objectCount": {
                    "$ref": "#/components/schemas/cmpint"
                },
                "maxMemoryMib": {
                    "$ref": "#/components/schemas/cmpfloat"
                },
                "sheetsCached": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "objSlowCached": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "sheetsUncached": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "documentSizeMib": {
                    "$ref": "#/components/schemas/cmpfloat"
                },
                "objSlowUncached": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "dataModelSizeMib": {
                    "$ref": "#/components/schemas/cmpfloat"
                },
                "hasSectionAccess": {
                    "$ref": "#/components/schemas/cmpbool"
                },
                "topFieldsByBytes": {
                    "$ref": "#/components/schemas/sortedcomparisonfields"
                },
                "topTablesByBytes": {
                    "$ref": "#/components/schemas/sortedcomparisontables"
                },
                "objSingleThreaded": {
                    "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
                },
                "appOpenTimeSeconds": {
                    "$ref": "#/components/schemas/cmpfloat"
                }
            }
        },
        "comparisonfields": {
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objecttopspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "a"
                            },
                            "cardinal": {
                                "$ref": "#/components/schemas/cmpint"
                            },
                            "byte_size": {
                                "$ref": "#/components/schemas/cmpint"
                            },
                            "is_system": {
                                "$ref": "#/components/schemas/cmpbool"
                            },
                            "total_count": {
                                "$ref": "#/components/schemas/cmpint"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            }
                        }
                    }
                ]
            }
        },
        "comparisonobjresponsetime": {
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            },
                            "responseTimeSeconds1": {
                                "$ref": "#/components/schemas/cmpfloat"
                            },
                            "responseTimeSeconds2": {
                                "$ref": "#/components/schemas/cmpfloat"
                            }
                        }
                    }
                ]
            }
        },
        "comparisonoobjheavy": {
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objectspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cpuSeconds1": {
                                "$ref": "#/components/schemas/cmpfloat"
                            },
                            "cpuSeconds2": {
                                "$ref": "#/components/schemas/cmpfloat"
                            },
                            "cpuQuotient1": {
                                "$ref": "#/components/schemas/cmpfloat"
                            },
                            "cpuQuotient2": {
                                "$ref": "#/components/schemas/cmpfloat"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            }
                        }
                    }
                ]
            }
        },
        "comparisontables": {
            "type": "array",
            "items": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/objecttopspec"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "a"
                            },
                            "byte_size": {
                                "$ref": "#/components/schemas/cmpint"
                            },
                            "is_system": {
                                "$ref": "#/components/schemas/cmpbool"
                            },
                            "no_of_rows": {
                                "$ref": "#/components/schemas/cmpint"
                            },
                            "dataSourceStatus": {
                                "enum": [
                                    "full",
                                    "none",
                                    "baselinemissing",
                                    "comparisonmissing"
                                ],
                                "type": "string",
                                "example": "full"
                            }
                        }
                    }
                ]
            }
        },
        "CompositionMinMax": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                }
            },
            "description": "Upper and lower bounds for items of specific classification types"
        },
        "CreateApp": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/components/schemas/AppAttributes"
                }
            }
        },
        "DataModelMetadata": {
            "type": "object",
            "properties": {
                "usage": {
                    "enum": [
                        "ANALYTICS",
                        "DATA_PREPARATION"
                    ],
                    "type": "string",
                    "description": "\nOne of:\n* ANALYTICS\n* DATA_PREPARATION"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/FieldMetadata"
                    },
                    "description": "List of field descriptions."
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TableMetadata"
                    },
                    "description": "List of table descriptions."
                },
                "reload_meta": {
                    "$ref": "#/components/schemas/LastReloadMetadata"
                },
                "static_byte_size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Static memory usage for the app."
                },
                "has_section_access": {
                    "type": "boolean",
                    "description": "If set to true, the app has section access configured."
                },
                "is_direct_query_mode": {
                    "type": "boolean"
                },
                "tables_profiling_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TableProfilingData"
                    },
                    "description": "Profiling data of the tables in the app."
                }
            }
        },
        "evaluation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "string",
                    "example": "5ecb5e65028d1f0001a98071"
                },
                "appId": {
                    "type": "string",
                    "format": "string",
                    "example": "7c2ce11d-4d10-4414-a9b0-620e57298038"
                },
                "ended": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-02-09T06:58:40.575Z"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/event"
                    }
                },
                "result": {
                    "$ref": "#/components/schemas/result"
                },
                "status": {
                    "type": "string",
                    "format": "string",
                    "example": "finished"
                },
                "appName": {
                    "type": "string",
                    "format": "string",
                    "example": "my app"
                },
                "details": {
                    "type": "object",
                    "properties": {
                        "errors": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "string",
                                "example": "this is an error"
                            }
                        },
                        "warnings": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "string",
                                "example": "this is a warning"
                            }
                        },
                        "dedicated": {
                            "type": "boolean",
                            "example": false,
                            "deprecated": true
                        },
                        "objectMetrics": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/resultentry"
                            }
                        },
                        "engineHasCache": {
                            "type": "boolean",
                            "example": false
                        },
                        "concurrentReload": {
                            "type": "boolean",
                            "example": false
                        }
                    }
                },
                "sheetId": {
                    "type": "string",
                    "format": "string",
                    "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                },
                "started": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-02-09T06:58:40.575Z"
                },
                "version": {
                    "type": "number",
                    "example": 1
                },
                "metadata": {
                    "$ref": "#/components/schemas/metadata"
                },
                "tenantId": {
                    "type": "string",
                    "format": "string",
                    "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                },
                "appItemId": {
                    "type": "string",
                    "format": "string",
                    "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-02-09T06:58:40.575Z"
                },
                "sheetTitle": {
                    "type": "string",
                    "format": "string",
                    "example": "my sheet"
                }
            }
        },
        "evaluations": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/evaluation"
                    }
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "next": {
                            "type": "object",
                            "properties": {
                                "href": {
                                    "$ref": "#/components/schemas/href"
                                }
                            }
                        },
                        "prev": {
                            "type": "object",
                            "properties": {
                                "href": {
                                    "$ref": "#/components/schemas/href"
                                }
                            }
                        }
                    }
                }
            }
        },
        "EvaluatorError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "ERR-INVALID-AUTH"
                            },
                            "title": {
                                "type": "string",
                                "example": "An error occured"
                            },
                            "status": {
                                "type": "integer",
                                "format": "int32",
                                "example": 427
                            }
                        }
                    }
                }
            }
        },
        "event": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string",
                    "example": "An object failed"
                },
                "sheetId": {
                    "type": "string",
                    "example": "gregFG"
                },
                "objectId": {
                    "type": "string",
                    "example": "adfRFr"
                },
                "severity": {
                    "type": "string",
                    "example": "warning"
                },
                "errorCode": {
                    "type": "string",
                    "example": "ERR-GOPHERCISER"
                },
                "objectType": {
                    "type": "string",
                    "example": "linechart"
                },
                "sheetTitle": {
                    "type": "string",
                    "example": "mysheet"
                },
                "objectTitle": {
                    "type": "string",
                    "example": "profit"
                },
                "objectVisualization": {
                    "type": "string",
                    "example": "linechart"
                }
            }
        },
        "FieldAttributes": {
            "type": "object",
            "properties": {
                "Dec": {
                    "type": "string",
                    "description": "Defines the decimal separator.\nExample: **.**"
                },
                "Fmt": {
                    "type": "string",
                    "description": "Defines the format pattern that applies to _qText_ .\nIs used in connection to the type of the field (parameter **qType** ).\nFor more information, see _Formatting mechanism_.\nExample: _YYYY-MM-DD_ for a date."
                },
                "Thou": {
                    "type": "string",
                    "description": "Defines the thousand separator (if any).\nIs used if **qUseThou** is set to 1.\nExample: **,**"
                },
                "Type": {
                    "enum": [
                        "UNKNOWN",
                        "ASCII",
                        "INTEGER",
                        "REAL",
                        "FIX",
                        "MONEY",
                        "DATE",
                        "TIME",
                        "TIMESTAMP",
                        "INTERVAL"
                    ],
                    "type": "string",
                    "default": "UNKNOWN",
                    "description": "Type of the field.\nDefault is U.\n\nOne of:\n* U or UNKNOWN\n* A or ASCII\n* I or INTEGER\n* R or REAL\n* F or FIX\n* M or MONEY\n* D or DATE\n* T or TIME\n* TS or TIMESTAMP\n* IV or INTERVAL"
                },
                "nDec": {
                    "type": "integer",
                    "format": "int32",
                    "default": 10,
                    "description": "Number of decimals.\nDefault is 10."
                },
                "UseThou": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Defines whether or not a thousands separator must be used.\nDefault is 0."
                }
            },
            "description": "Sets the formatting of a field.\nThe properties of _qFieldAttributes_ and the formatting mechanism are described below.\n\n### Formatting mechanism\nThe formatting mechanism depends on the type set in _qType,_ as shown below:\n<div class=note>In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.</div>\n\n### Type is DATE, TIME, TIMESTAMP or INTERVAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .\n* If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).\n* The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n\n### Type is INTEGER\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .\n\n### Type is REAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is FIX\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is MONEY\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n\n### Type is ASCII\nNo formatting, _qFmt_ is ignored."
        },
        "FieldInTableProfilingData": {
            "type": "object",
            "properties": {
                "Max": {
                    "type": "number",
                    "format": "double",
                    "description": "Maximum value of numerical values. NaN otherwise."
                },
                "Min": {
                    "type": "number",
                    "format": "double",
                    "description": "Minimum value of numerical values. NaN otherwise."
                },
                "Std": {
                    "type": "number",
                    "format": "double",
                    "description": "Standard deviation of numerical values. NaN otherwise."
                },
                "Sum": {
                    "type": "number",
                    "format": "double",
                    "description": "Sum of all numerical values. NaN otherwise."
                },
                "Name": {
                    "type": "string",
                    "description": "Name of the field."
                },
                "Sum2": {
                    "type": "number",
                    "format": "double",
                    "description": "Squared sum of all numerical values. NaN otherwise."
                },
                "Median": {
                    "type": "number",
                    "format": "double",
                    "description": "Median of all numerical values. NaN otherwise."
                },
                "Average": {
                    "type": "number",
                    "format": "double",
                    "description": "Average of all numerical values. NaN otherwise."
                },
                "Kurtosis": {
                    "type": "number",
                    "format": "double",
                    "description": "Kurtosis of the numerical values. NaN otherwise."
                },
                "Skewness": {
                    "type": "number",
                    "format": "double",
                    "description": "Skewness of the numerical values. NaN otherwise."
                },
                "FieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags related to the field."
                },
                "Fractiles": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": "The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise."
                },
                "NegValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of negative values"
                },
                "PosValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of positive values"
                },
                "LastSorted": {
                    "type": "string",
                    "description": "For textual values the last sorted string."
                },
                "NullValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of null values"
                },
                "TextValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of textual values"
                },
                "ZeroValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of zero values for numerical values"
                },
                "FirstSorted": {
                    "type": "string",
                    "description": "For textual values the first sorted string."
                },
                "AvgStringLen": {
                    "type": "number",
                    "format": "double",
                    "description": "Average string length of textual values. 0 otherwise."
                },
                "EmptyStrings": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of empty strings"
                },
                "MaxStringLen": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum string length of textual values. 0 otherwise."
                },
                "MinStringLen": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Minimum string length of textual values. 0 otherwise."
                },
                "MostFrequent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/SymbolFrequency"
                    },
                    "description": "Three most frequent values and their frequencies"
                },
                "NumberFormat": {
                    "$ref": "#/components/schemas/FieldAttributes"
                },
                "SumStringLen": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Sum of all characters in strings in the field"
                },
                "NumericValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of numeric values"
                },
                "DistinctValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of distinct values"
                },
                "DistinctTextValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of distinct text values"
                },
                "DistinctNumericValues": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of distinct numeric values"
                },
                "FrequencyDistribution": {
                    "$ref": "#/components/schemas/FrequencyDistributionData"
                }
            }
        },
        "FieldMetadata": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string",
                    "description": "Hash of the data in the field. If the data in a reload is the same, the hash will be consistent."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII."
                },
                "comment": {
                    "type": "string",
                    "description": "Field comment."
                },
                "cardinal": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of distinct field values."
                },
                "byte_size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Static RAM memory used in bytes."
                },
                "is_hidden": {
                    "type": "boolean",
                    "description": "If set to true, the field is hidden.\nThe default value is false."
                },
                "is_locked": {
                    "type": "boolean",
                    "description": "If set to true, the field is locked.\nThe default value is false."
                },
                "is_system": {
                    "type": "boolean",
                    "description": "If set to true, the field is a system field.\nThe default value is false."
                },
                "is_numeric": {
                    "type": "boolean",
                    "description": "Is set to true if the value is a numeric.\nThe default value is false."
                },
                "src_tables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of table names."
                },
                "is_semantic": {
                    "type": "boolean",
                    "description": "If set to true, the field is semantic.\nThe default value is false."
                },
                "total_count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Total number of field values."
                },
                "distinct_only": {
                    "type": "boolean",
                    "description": "If set to true, only distinct field values are shown.\nThe default value is false."
                },
                "always_one_selected": {
                    "type": "boolean",
                    "description": "If set to true, the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false."
                }
            }
        },
        "FieldOverride": {
            "type": "object",
            "properties": {
                "classifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultAggregation": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "FileData": {
            "type": "string",
            "format": "binary"
        },
        "FrequencyDistributionData": {
            "type": "object",
            "properties": {
                "BinsEdges": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": "Bins edges."
                },
                "Frequencies": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": "Bins frequencies."
                },
                "NumberOfBins": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of bins."
                }
            }
        },
        "HardwareMeta": {
            "type": "object",
            "properties": {
                "total_memory": {
                    "type": "integer",
                    "format": "int64",
                    "description": "RAM available."
                },
                "logical_cores": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of logical cores available."
                }
            }
        },
        "href": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string",
                    "description": "link"
                }
            }
        },
        "Href": {
            "type": "object",
            "example": {
                "href": "http://example.com"
            },
            "properties": {
                "href": {
                    "type": "string",
                    "format": "uri",
                    "example": "http://example.com"
                }
            }
        },
        "JsonObject": {
            "type": "object",
            "description": "Contains dynamic JSON data specified by the client."
        },
        "LastReloadMetadata": {
            "type": "object",
            "properties": {
                "hardware": {
                    "$ref": "#/components/schemas/HardwareMeta"
                },
                "cpu_time_spent_ms": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of CPU milliseconds it took to reload the app."
                },
                "peak_memory_bytes": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum number of bytes used during reload of the app."
                }
            }
        },
        "LineageInfoRest": {
            "type": "object",
            "properties": {
                "statement": {
                    "type": "string",
                    "description": "The LOAD and SELECT script statements from the data load script."
                },
                "discriminator": {
                    "type": "string",
                    "description": "A string indicating the origin of the data:\n* [filename]: the data comes from a local file.\n* INLINE: the data is entered inline in the load script.\n* RESIDENT: the data comes from a resident table. The table name is listed.\n* AUTOGENERATE: the data is generated from the load script (no external table of data source).\n* Provider: the data comes from a data connection. The connector source name is listed.\n* [webfile]: the data comes from a web-based file.\n* STORE: path to QVD or TXT file where data is stored.\n* EXTENSION: the data comes from a Server Side Extension (SSE)."
                }
            }
        },
        "Links": {
            "properties": {
                "next": {
                    "type": "object",
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    }
                },
                "prev": {
                    "type": "object",
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    }
                },
                "self": {
                    "type": "object",
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "Notifications links"
        },
        "Log": {
            "type": "object",
            "properties": {
                "log": {
                    "type": "string",
                    "description": "Provides a link to download the log file."
                }
            }
        },
        "metadata": {
            "type": "object",
            "properties": {
                "reloadmeta": {
                    "type": "object",
                    "properties": {
                        "cpuspent": {
                            "type": "number",
                            "example": "123983"
                        },
                        "peakmemorybytes": {
                            "type": "number",
                            "example": 112
                        }
                    }
                },
                "amountofrows": {
                    "type": "number",
                    "example": 1423423234
                },
                "amountoffields": {
                    "type": "number",
                    "example": 12
                },
                "amountoftables": {
                    "type": "number",
                    "example": 7
                },
                "staticbytesize": {
                    "type": "number",
                    "example": 1444234
                },
                "hassectionaccess": {
                    "type": "boolean",
                    "example": false
                },
                "amountoffieldvalues": {
                    "type": "number",
                    "example": 144423433
                },
                "amountofcardinalfieldvalues": {
                    "type": "number",
                    "example": 14442
                }
            }
        },
        "NavigationLink": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                }
            }
        },
        "NavigationLinks": {
            "type": "object",
            "properties": {
                "next": {
                    "$ref": "#/components/schemas/NavigationLink"
                },
                "prev": {
                    "$ref": "#/components/schemas/NavigationLink"
                }
            }
        },
        "numberFormat": {
            "type": "object",
            "properties": {
                "qDec": {
                    "type": "string"
                },
                "qFmt": {
                    "type": "string"
                },
                "qThou": {
                    "type": "string"
                },
                "qType": {
                    "type": "string"
                },
                "qnDec": {
                    "type": "number"
                },
                "qUseThou": {
                    "type": "number"
                }
            }
        },
        "NxApp": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NxAppCreatePrivileges"
                    },
                    "description": "Object create privileges. Hints to the client what type of objects the user is allowed to create."
                },
                "attributes": {
                    "$ref": "#/components/schemas/NxAttributes"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* reload\n* import\n* publish\n* duplicate\n* export\n* exportdata\n* change_owner\n* change_space"
                }
            },
            "description": "Application attributes and user privileges."
        },
        "NxAppCreatePrivileges": {
            "type": "object",
            "properties": {
                "resource": {
                    "type": "string",
                    "description": "Type of resource. For example, sheet, story, bookmark, etc."
                },
                "canCreate": {
                    "type": "boolean",
                    "description": "Is set to true if the user has privileges to create the resource."
                }
            }
        },
        "NxAppObject": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/components/schemas/NxObjectAttributes"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Application object privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* publish\n* exportdata\n* change_owner"
                }
            },
            "description": "Application object attributes and user privileges."
        },
        "NxAttributes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The App ID."
                },
                "name": {
                    "type": "string",
                    "description": "App name."
                },
                "owner": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Deprecated. Use user api to fetch user metadata.",
                    "x-qlik-deprecated": true
                },
                "usage": {
                    "enum": [
                        "ANALYTICS",
                        "DATA_PREPARATION"
                    ],
                    "type": "string",
                    "description": "\nOne of:\n* ANALYTICS\n* DATA_PREPARATION"
                },
                "custom": {
                    "$ref": "#/components/schemas/JsonObject"
                },
                "ownerId": {
                    "type": "string",
                    "description": "Identifier of the app owner."
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "If set to true, the app is encrypted."
                },
                "published": {
                    "type": "boolean",
                    "description": "True if the app is published on-prem, distributed in QCS, false if not."
                },
                "thumbnail": {
                    "type": "string",
                    "description": "App thumbnail."
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the app was created."
                },
                "description": {
                    "type": "string",
                    "description": "App description."
                },
                "originAppId": {
                    "type": "string",
                    "description": "The Origin App ID for published apps."
                },
                "publishTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the app was published, empty if unpublished."
                },
                "dynamicColor": {
                    "type": "string",
                    "description": "The dynamic color of the app."
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the app was modified."
                },
                "lastReloadTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last reload of the app."
                },
                "hasSectionAccess": {
                    "type": "boolean",
                    "description": "If set to true, the app has section access configured,"
                },
                "isDirectQueryMode": {
                    "type": "boolean",
                    "description": "True if the app is a Direct Query app, false if not"
                }
            },
            "description": "App attributes. This structure can also contain extra user-defined attributes."
        },
        "NxObjectAttributes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The object Id."
                },
                "name": {
                    "type": "string",
                    "description": "Object name."
                },
                "ownerId": {
                    "type": "string",
                    "description": "The object owner's Id."
                },
                "approved": {
                    "type": "boolean",
                    "description": "True if the object is approved."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the object was created."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the object was modified."
                },
                "objectType": {
                    "type": "string",
                    "description": "The type of the object."
                },
                "description": {
                    "type": "string",
                    "description": "Object description."
                },
                "genericType": {
                    "enum": [
                        "genericObject",
                        "genericBookmark",
                        "genericMeasure",
                        "genericDimension",
                        "genericVariable"
                    ],
                    "type": "string",
                    "description": "The generic type of the object.\n\nOne of:\n* genericObject\n* genericBookmark\n* genericMeasure\n* genericDimension\n* genericVariable"
                },
                "publishedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the object was published, empty if unpublished."
                }
            },
            "description": "App object attributes. This structure can also contain extra user-defined attributes."
        },
        "NxPatch": {
            "type": "object",
            "properties": {
                "Op": {
                    "enum": [
                        "Add",
                        "Remove",
                        "Replace"
                    ],
                    "type": "string",
                    "description": "Operation to perform.\n\nOne of:\n* add or Add\n* remove or Remove\n* replace or Replace"
                },
                "Path": {
                    "type": "string",
                    "description": "Path to the property to add, remove or replace."
                },
                "Value": {
                    "type": "string",
                    "description": "This parameter is not used in a remove operation.\nCorresponds to the value of the property to add or to the new value of the property to update.\nExamples:\n\"false\", \"2\", \"\\\"New title\\\"\""
                }
            }
        },
        "objectmetrics": {
            "type": "object",
            "properties": {
                "cpuSeconds": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "example": 12.3
                    }
                },
                "cpuQuotients": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "example": 12.3
                    }
                },
                "responseTimeSeconds": {
                    "type": "number",
                    "example": 234.3
                }
            }
        },
        "objectspec": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "string",
                    "example": "fjETFn"
                },
                "title": {
                    "type": "string",
                    "format": "string",
                    "example": "my chart"
                },
                "sheetId": {
                    "type": "string",
                    "format": "string",
                    "example": "41dbb01c-d1bd-4528-be05-910ee565988b"
                },
                "objectType": {
                    "type": "number",
                    "example": 1
                }
            }
        },
        "objecttopspec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "some field/table"
                },
                "byte_size": {
                    "type": "number",
                    "example": 12873
                },
                "is_system": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PartialNluInfo": {
            "properties": {
                "role": {
                    "enum": [
                        "dimension",
                        "measure",
                        "date"
                    ],
                    "type": "string",
                    "description": "Role of the token or phrase from query"
                },
                "text": {
                    "type": "string",
                    "description": "Matching token or phrase from query"
                },
                "type": {
                    "enum": [
                        "field",
                        "filter",
                        "master_dimension",
                        "master_measure",
                        "custom_analysis"
                    ],
                    "type": "string",
                    "description": "Type of token from query"
                },
                "fieldName": {
                    "type": "string",
                    "description": "Qlik sense application field selected for given token or phrase"
                },
                "fieldValue": {
                    "type": "string",
                    "description": "Filter value found from query"
                }
            },
            "description": "Contains break down of the asked question in the form of tokens with their classification."
        },
        "PublishApp": {
            "type": "object",
            "properties": {
                "data": {
                    "enum": [
                        "source",
                        "target"
                    ],
                    "type": "string",
                    "description": "The published app will have data from source or target app.\nThe default is source.\n\n* source: Publish with source data\n* target: Publish with target data"
                },
                "moveApp": {
                    "type": "boolean",
                    "default": false,
                    "description": "The original is moved instead of copied. The current published state of all objects is kept."
                },
                "spaceId": {
                    "type": "string",
                    "description": "The managed space ID where the app will be published."
                },
                "attributes": {
                    "$ref": "#/components/schemas/AppUpdateAttributes"
                },
                "originAppId": {
                    "type": "string",
                    "description": "If app is moved, originAppId needs to be provided."
                }
            }
        },
        "RecommendedAnalysis": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/components/schemas/RecommendedAnalysisCore"
                },
                {
                    "type": "object",
                    "properties": {
                        "parts": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RecommendedAnalysisCore"
                            },
                            "description": "part analyses (only for macro analyses)"
                        }
                    }
                }
            ]
        },
        "RecommendedAnalysisCore": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "object",
                    "description": "(chart options + hypercube definition)"
                },
                "analysis": {
                    "$ref": "#/components/schemas/AnalysisDetails"
                },
                "chartType": {
                    "$ref": "#/components/schemas/ChartType"
                },
                "relevance": {
                    "type": "number",
                    "description": "percentage of selected items in the analysis to the overall items passed to the endpoint"
                }
            }
        },
        "RecommendFieldItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "overrides": {
                    "$ref": "#/components/schemas/FieldOverride"
                }
            },
            "description": "structure for providing fields in recommendation request, user can retrieve the fields using insight-analyses/model endpoint\n"
        },
        "RecommendItems": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RecommendFieldItem"
                    }
                },
                "libItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RecommendMasterItem"
                    }
                },
                "targetAnalysis": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "id of the target analysis, returned by the GET insight-analyses endpoint"
                        }
                    }
                }
            }
        },
        "RecommendMasterItem": {
            "type": "object",
            "properties": {
                "libId": {
                    "type": "string"
                },
                "overrides": {
                    "type": "object",
                    "properties": {
                        "format": {
                            "$ref": "#/components/schemas/numberFormat"
                        }
                    }
                }
            },
            "description": "structure for providing master items in recommendation request, user can retrieve the libId of master item using insight-analyses/model endpoint\n"
        },
        "RecommendNaturalLangQuery": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "type": "string",
                    "description": "The NL query."
                }
            }
        },
        "RepublishApp": {
            "type": "object",
            "properties": {
                "data": {
                    "enum": [
                        "source",
                        "target"
                    ],
                    "type": "string",
                    "description": "The republished app will have data from source or target app.\nThe default is source.\n\n* source: Publish with source data\n* target: Publish with target data"
                },
                "targetId": {
                    "type": "string",
                    "description": "The target ID to be republished."
                },
                "attributes": {
                    "$ref": "#/components/schemas/AppUpdateAttributes"
                },
                "checkOriginAppId": {
                    "type": "boolean",
                    "default": true,
                    "description": "Validate that source app is same as originally published."
                }
            }
        },
        "result": {
            "type": "object",
            "properties": {
                "sheets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultobjsheet"
                    }
                },
                "rowCount": {
                    "type": "number",
                    "example": 20000
                },
                "objNoCache": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultobjresponsetime"
                    }
                },
                "sheetCount": {
                    "type": "number",
                    "example": 5
                },
                "objectCount": {
                    "type": "number",
                    "example": 33
                },
                "objSlowCached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultobjsinglethreaded"
                    }
                },
                "documentSizeMiB": {
                    "type": "number",
                    "example": 12.3
                },
                "objSlowUncached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultobjresponsetime"
                    }
                },
                "hasSectionAccess": {
                    "type": "boolean",
                    "example": false
                },
                "topFieldsByBytes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultmetadatatopfields"
                    }
                },
                "topTablesByBytes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultmetadatatoptables"
                    }
                },
                "objSingleThreaded": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultsingle"
                    }
                }
            }
        },
        "resultentry": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objectspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "passes": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/objectmetrics"
                            }
                        }
                    }
                }
            ]
        },
        "resultmetadatatopfields": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objecttopspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "a"
                        },
                        "byte_size": {
                            "type": "number",
                            "example": 1234
                        }
                    }
                }
            ]
        },
        "resultmetadatatoptables": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objecttopspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "a"
                        },
                        "byte_size": {
                            "type": "number",
                            "example": 1234
                        }
                    }
                }
            ]
        },
        "resultobjresponsetime": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objectspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "responseTimeSeconds": {
                            "type": "number",
                            "example": 12.3
                        }
                    }
                }
            ]
        },
        "resultobjsheet": {
            "type": "object",
            "properties": {
                "sheet": {
                    "$ref": "#/components/schemas/resultobjresponsetime"
                },
                "objectCount": {
                    "type": "number",
                    "example": 1
                },
                "sheetObjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/resultobjresponsetime"
                    }
                }
            }
        },
        "resultobjsinglethreaded": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objectspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "schema": {
                            "$ref": "#/components/schemas/objectspec"
                        },
                        "cpuQuotients": {
                            "type": "array",
                            "items": {
                                "type": "number",
                                "example": 12.3
                            }
                        },
                        "responseTimeSeconds": {
                            "type": "number",
                            "example": 12.3
                        }
                    }
                }
            ]
        },
        "resultsingle": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objectspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "cpuQuotient1": {
                            "type": "number",
                            "example": 12.3
                        }
                    }
                }
            ]
        },
        "ScriptLogList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ScriptLogMeta"
                    },
                    "description": "Array of scriptLogMeta."
                }
            }
        },
        "ScriptLogMeta": {
            "type": "object",
            "properties": {
                "links": {
                    "$ref": "#/components/schemas/Log"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time when reload ended."
                },
                "success": {
                    "type": "boolean",
                    "description": "True if the reload was successful."
                },
                "duration": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Duration of reload (ms)."
                },
                "reloadId": {
                    "type": "string",
                    "description": "Reload identifier."
                }
            }
        },
        "ScriptMeta": {
            "type": "object",
            "properties": {
                "size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Script size."
                },
                "scriptId": {
                    "type": "string",
                    "description": "Script id."
                },
                "modifierId": {
                    "type": "string",
                    "description": "User last modifying script version."
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "Script version last modification time."
                },
                "versionMessage": {
                    "type": "string",
                    "description": "Description of this script version"
                }
            }
        },
        "ScriptMetaList": {
            "type": "object",
            "properties": {
                "links": {
                    "$ref": "#/components/schemas/NavigationLinks"
                },
                "scripts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ScriptMeta"
                    },
                    "description": "Script versions metadata."
                }
            }
        },
        "ScriptVersion": {
            "type": "object",
            "properties": {
                "script": {
                    "type": "string",
                    "description": "Script text."
                },
                "versionMessage": {
                    "type": "string",
                    "description": "Description of this script version"
                }
            }
        },
        "SimplifiedClassifications": {
            "type": "array",
            "items": {
                "enum": [
                    "dimension",
                    "measure",
                    "temporal",
                    "geographical"
                ],
                "type": "string"
            }
        },
        "sortedcomparisonfields": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "list": {
                            "$ref": "#/components/schemas/comparisonfields"
                        },
                        "absoluteDiffAsc": {
                            "$ref": "#/components/schemas/comparisonfields"
                        },
                        "relativeDiffAsc": {
                            "$ref": "#/components/schemas/comparisonfields"
                        },
                        "absoluteDiffDesc": {
                            "$ref": "#/components/schemas/comparisonfields"
                        },
                        "dataSourceStatus": {
                            "enum": [
                                "full",
                                "none",
                                "baselinemissing",
                                "comparisonmissing"
                            ],
                            "type": "string",
                            "example": "full"
                        },
                        "relativeDiffDesc": {
                            "$ref": "#/components/schemas/comparisonfields"
                        }
                    }
                }
            ]
        },
        "sortedcomparisonobjresponsetime": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "list": {
                            "$ref": "#/components/schemas/comparisonobjresponsetime"
                        },
                        "absoluteDiffAsc": {
                            "$ref": "#/components/schemas/comparisonobjresponsetime"
                        },
                        "relativeDiffAsc": {
                            "$ref": "#/components/schemas/comparisonobjresponsetime"
                        },
                        "absoluteDiffDesc": {
                            "$ref": "#/components/schemas/comparisonobjresponsetime"
                        },
                        "dataSourceStatus": {
                            "enum": [
                                "full",
                                "none",
                                "baselinemissing",
                                "comparisonmissing"
                            ],
                            "type": "string",
                            "example": "full"
                        },
                        "relativeDiffDesc": {
                            "$ref": "#/components/schemas/comparisonobjresponsetime"
                        }
                    }
                }
            ]
        },
        "sortedcomparisonoobjheavy": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "list": {
                            "$ref": "#/components/schemas/comparisonoobjheavy"
                        },
                        "absoluteDiffAsc": {
                            "$ref": "#/components/schemas/comparisonoobjheavy"
                        },
                        "relativeDiffAsc": {
                            "$ref": "#/components/schemas/comparisonoobjheavy"
                        },
                        "absoluteDiffDesc": {
                            "$ref": "#/components/schemas/comparisonoobjheavy"
                        },
                        "dataSourceStatus": {
                            "enum": [
                                "full",
                                "none",
                                "baselinemissing",
                                "comparisonmissing"
                            ],
                            "type": "string",
                            "example": "full"
                        },
                        "relativeDiffDesc": {
                            "$ref": "#/components/schemas/comparisonoobjheavy"
                        }
                    }
                }
            ]
        },
        "sortedcomparisontables": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "list": {
                            "$ref": "#/components/schemas/comparisontables"
                        },
                        "absoluteDiffAsc": {
                            "$ref": "#/components/schemas/comparisontables"
                        },
                        "relativeDiffAsc": {
                            "$ref": "#/components/schemas/comparisontables"
                        },
                        "absoluteDiffDesc": {
                            "$ref": "#/components/schemas/comparisontables"
                        },
                        "dataSourceStatus": {
                            "enum": [
                                "full",
                                "none",
                                "baselinemissing",
                                "comparisonmissing"
                            ],
                            "type": "string",
                            "example": "full"
                        },
                        "relativeDiffDesc": {
                            "$ref": "#/components/schemas/comparisontables"
                        }
                    }
                }
            ]
        },
        "SymbolFrequency": {
            "type": "object",
            "properties": {
                "Symbol": {
                    "$ref": "#/components/schemas/SymbolValue"
                },
                "Frequency": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Frequency of the above symbol in the field"
                }
            }
        },
        "SymbolValue": {
            "type": "object",
            "properties": {
                "Text": {
                    "type": "string",
                    "description": "String value of the symbol. This parameter is optional and present only if Symbol is a string."
                },
                "Number": {
                    "type": "number",
                    "format": "double",
                    "description": "Numeric value of the symbol. NaN otherwise."
                }
            }
        },
        "TableMetadata": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the table."
                },
                "comment": {
                    "type": "string",
                    "description": "Table comment."
                },
                "is_loose": {
                    "type": "boolean",
                    "description": "If set to true, the table is loose due to circular connection.\nThe default value is false."
                },
                "byte_size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Static RAM memory used in bytes."
                },
                "is_system": {
                    "type": "boolean",
                    "description": "If set to true, the table is a system table.\nThe default value is false."
                },
                "no_of_rows": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of rows."
                },
                "is_semantic": {
                    "type": "boolean",
                    "description": "If set to true, the table is semantic.\nThe default value is false."
                },
                "no_of_fields": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of fields."
                },
                "no_of_key_fields": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of key fields."
                }
            }
        },
        "TableProfilingData": {
            "type": "object",
            "properties": {
                "NoOfRows": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of rows in the table."
                },
                "FieldProfiling": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/FieldInTableProfilingData"
                    },
                    "description": "Field values profiling info"
                }
            }
        },
        "UpdateApp": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/components/schemas/AppUpdateAttributes"
                }
            }
        },
        "UpdateOwner": {
            "type": "object",
            "properties": {
                "ownerId": {
                    "type": "string"
                }
            }
        },
        "UpdateSpace": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "type": "string"
                }
            }
        },
        "appErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/error"
                    }
                }
            }
        },
        "automl-job": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the job."
                },
                "corrId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the correlation."
                },
                "status": {
                    "enum": [
                        "pending",
                        "completed",
                        "cancelled"
                    ],
                    "type": "string",
                    "description": "The status of the job."
                },
                "jobType": {
                    "enum": [
                        "preprocess_dataset",
                        "dataset_conversion",
                        "train_model",
                        "predict_dataset",
                        "prediction",
                        "data_sync"
                    ],
                    "type": "string",
                    "description": "The job type."
                },
                "corrType": {
                    "enum": [
                        "experiment_version",
                        "model",
                        "prediction",
                        "deployment",
                        "realtime_prediction"
                    ],
                    "type": "string",
                    "description": "The type of the correlation."
                },
                "tenantId": {
                    "type": "string",
                    "description": "The ID of the tenant that owns the job."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC timestamp when the job was created."
                },
                "createdBy": {
                    "type": "string",
                    "description": "The user that created the job"
                },
                "deletedAt": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "The UTC timestamp when the job was deleted."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC timestamp when the job was updated."
                },
                "parentJobId": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID of the parent job."
                }
            },
            "x-qlik-visibility": "private"
        },
        "error": {
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/components/schemas/meta"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the HTTP status code."
                },
                "source": {
                    "type": "object",
                    "description": "Optional JSON patch object pointing to an invalid property."
                },
                "status": {
                    "type": "number",
                    "description": "The HTTP status code."
                }
            },
            "description": "An error object."
        },
        "realtimePredictionInput": {
            "type": "object",
            "properties": {
                "rows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The rows of the dataset to produce predictions from."
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/realTimePredictionInputSchema"
                    },
                    "description": "The schema of the input dataset."
                }
            }
        },
        "realTimePredictionInputSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of a feature in the dataset."
                }
            }
        },
        "AutomationDetailRequestObject": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "available",
                        "unavailable",
                        "disabled"
                    ],
                    "type": "string",
                    "default": "available",
                    "example": "available"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ScheduleRequestObject"
                    }
                },
                "workspace": {
                    "type": "object",
                    "description": "The workspace generated by the Qlik Application Automations editor.",
                    "x-qlik-customer-data": true
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "AutomationDetailResponseObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                    "readOnly": true
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "available",
                        "unavailable",
                        "disabled"
                    ],
                    "type": "string",
                    "default": "available",
                    "example": "available"
                },
                "lastRun": {
                    "$ref": "#/components/schemas/RunDetailResponseObject"
                },
                "ownerId": {
                    "type": "string",
                    "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                    "readOnly": true
                },
                "runMode": {
                    "enum": [
                        "manual",
                        "scheduled",
                        "triggered",
                        "webhook"
                    ],
                    "type": "string",
                    "example": "triggered",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "lastRunAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ScheduleResponseObject"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "workspace": {
                    "type": "object",
                    "description": "The workspace generated by the Qlik Application Automations editor.",
                    "x-qlik-customer-data": true
                },
                "snippetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "e0e720d0-4947-11ec-a1d2-9559fa35801d"
                    ],
                    "readOnly": true,
                    "description": "A list of snippets used inside the workspace.",
                    "x-qlik-customer-data": true
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "endpointIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "9d94bef0-b28c-11eb-8dba-01593c457362",
                        "53a6fb70-b28f-11eb-b601-b545a40867e0"
                    ],
                    "readOnly": true,
                    "description": "A list of endpoints used inside the workspace.",
                    "x-qlik-customer-data": true
                },
                "connectorIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "0d87808f-27c0-11ea-921c-022e6b5ea1e2",
                        "0d86ee8a-27c0-11ea-921c-022e6b5ea1e2"
                    ],
                    "readOnly": true,
                    "description": "A list of connectors used inside the workspace.",
                    "x-qlik-customer-data": true
                },
                "lastRunStatus": {
                    "enum": [
                        "failed",
                        "finished",
                        "finished with warnings",
                        "must stop",
                        "not started",
                        "paused",
                        "running",
                        "starting",
                        "stopped"
                    ],
                    "type": "string",
                    "example": "finished",
                    "readOnly": true
                },
                "executionToken": {
                    "type": "string",
                    "example": "aZXuEogT9X3le0k0WXMBnzuYKq4xRlkDnurjs8NVhEAAW1BYx8C1PpIl3ielgRb1",
                    "readOnly": true,
                    "x-qlik-customer-data": true
                }
            }
        },
        "AutomationList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AutomationListObject"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "AutomationListObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "e0e720d0-4947-11ec-a1d2-9559fa35801d",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "x-qlik-filterable": true
                },
                "state": {
                    "enum": [
                        "available",
                        "unavailable",
                        "disabled"
                    ],
                    "type": "string",
                    "default": "available",
                    "example": "available"
                },
                "ownerId": {
                    "type": "string",
                    "example": "sWYAHxZxhtcmBT7Ptc5xJ5I6N7HxwnEy",
                    "readOnly": true,
                    "x-qlik-filterable": true
                },
                "runMode": {
                    "enum": [
                        "manual",
                        "scheduled",
                        "triggered",
                        "webhook"
                    ],
                    "type": "string",
                    "example": "triggered",
                    "readOnly": true,
                    "x-qlik-filterable": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "lastRunAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "lastRunStatus": {
                    "enum": [
                        "failed",
                        "finished",
                        "finished with warnings",
                        "must stop",
                        "not started",
                        "paused",
                        "running",
                        "starting",
                        "stopped"
                    ],
                    "type": "string",
                    "example": "finished",
                    "readOnly": true,
                    "x-qlik-filterable": true
                }
            }
        },
        "AutomationUsageObject": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "description": "The unique identifier for the automation."
                },
                "name": {
                    "type": "string",
                    "example": "My Automation.",
                    "maxLength": 50,
                    "description": "The name for the automation."
                },
                "ownerId": {
                    "type": "string",
                    "example": "KP1zJiPDn0gsla236GmETadFcxBW-J8F",
                    "description": "The unique identifier for the user who owns the automation"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "traceId": {
                    "type": "string",
                    "description": "A way to trace the source of the error."
                }
            }
        },
        "PaginationLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "The URL to a resource request"
                }
            }
        },
        "RunDetailRequestObject": {
            "type": "object",
            "required": [
                "context"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                    "readOnly": true
                },
                "inputs": {
                    "type": "object",
                    "x-qlik-stability": "private",
                    "x-qlik-customer-data": true
                },
                "context": {
                    "enum": [
                        "api"
                    ],
                    "type": "string",
                    "example": "api",
                    "description": "The source that triggers the automation will set the context."
                }
            }
        },
        "RunDetailResponseObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                    "readOnly": true
                },
                "error": {
                    "type": "object"
                },
                "title": {
                    "type": "string"
                },
                "inputs": {
                    "type": "object",
                    "x-qlik-stability": "private",
                    "x-qlik-customer-data": true
                },
                "status": {
                    "enum": [
                        "failed",
                        "finished",
                        "finished with warnings",
                        "must stop",
                        "not started",
                        "running",
                        "starting",
                        "stopped"
                    ],
                    "type": "string"
                },
                "context": {
                    "enum": [
                        "test_run",
                        "editor",
                        "detail",
                        "api_sync",
                        "api_async",
                        "webhook",
                        "lookup"
                    ],
                    "type": "string",
                    "description": "The source that triggers the automation will set the context. Certain contexts impact the execution of an automation (for example, The \"test_run\" context will not process all results when listing items)."
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "blocks": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": [
                                    "type",
                                    "connectorGuid",
                                    "rxBytes",
                                    "txBytes"
                                ],
                                "properties": {
                                    "type": {
                                        "enum": [
                                            "snippetBlock",
                                            "endpointBlock"
                                        ],
                                        "type": "string",
                                        "example": "endpointBlock",
                                        "description": "Type of the block."
                                    },
                                    "rxBytes": {
                                        "type": "integer",
                                        "example": 18329921,
                                        "description": "Total amount of received bytes sent by the current block."
                                    },
                                    "txBytes": {
                                        "type": "integer",
                                        "example": 18329921,
                                        "description": "Total amount of sent bytes sent by the current block."
                                    },
                                    "apiCalls": {
                                        "type": "integer",
                                        "example": 40,
                                        "description": "API calls to external resources made by the current block."
                                    },
                                    "snippetId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Unique identifier for the snippet block used within the execution."
                                    },
                                    "endpointId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Unique identifier for the snippet block used within the execution."
                                    },
                                    "connectorId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Unique identifier for the connector used within the block of the execution."
                                    }
                                },
                                "description": "Information of the ended execution per block."
                            },
                            "description": "List of blocks used during execution. Note: this list currently only contains endpointBlocks and snippetBlocks"
                        },
                        "network": {
                            "type": "object",
                            "properties": {
                                "rxBytes": {
                                    "type": "integer",
                                    "default": 0,
                                    "description": "The number of received bytes."
                                },
                                "txBytes": {
                                    "type": "integer",
                                    "default": 0,
                                    "description": "The number of received bytes."
                                }
                            }
                        },
                        "totalApiCalls": {
                            "type": "integer",
                            "default": 0,
                            "description": "The number of API calls made."
                        }
                    }
                },
                "stopTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "isTestRun": {
                    "type": "boolean",
                    "readOnly": true
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "isArchived": {
                    "type": "boolean",
                    "readOnly": true
                },
                "expectedInputs": {
                    "type": "object",
                    "x-qlik-stability": "private",
                    "x-qlik-customer-data": true
                },
                "scheduledStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                }
            }
        },
        "RunList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RunListObject"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "RunListObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                    "readOnly": true
                },
                "error": {
                    "type": "object"
                },
                "title": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "failed",
                        "finished",
                        "finished with warnings",
                        "must stop",
                        "not started",
                        "running",
                        "starting",
                        "stopped"
                    ],
                    "type": "string",
                    "x-qlik-filterable": true
                },
                "context": {
                    "enum": [
                        "test_run",
                        "editor",
                        "detail",
                        "api_sync",
                        "api_async",
                        "webhook",
                        "lookup"
                    ],
                    "type": "string"
                },
                "stopTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "isTestRun": {
                    "type": "boolean",
                    "readOnly": true
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                },
                "isArchived": {
                    "type": "boolean",
                    "readOnly": true
                },
                "scheduledStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-12-23T12:28:21.000000Z",
                    "readOnly": true
                }
            }
        },
        "ScheduleRequestObject": {
            "type": "object",
            "properties": {
                "stopAt": {
                    "type": "string",
                    "example": "2022-12-01 00:00:00"
                },
                "startAt": {
                    "type": "string",
                    "example": "2022-01-01 00:00:00"
                },
                "interval": {
                    "type": "integer",
                    "example": 30,
                    "description": "time in seconds."
                },
                "timezone": {
                    "type": "string",
                    "example": "Europe/Stockholm"
                }
            }
        },
        "ScheduleResponseObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d452d100-9b0b-11ec-b199-8323e1031c3e",
                    "readOnly": true
                },
                "stopAt": {
                    "type": "string",
                    "example": "2022-12-01 00:00:00"
                },
                "startAt": {
                    "type": "string",
                    "example": "2021-12-01 00:00:00"
                },
                "interval": {
                    "type": "integer",
                    "example": 30,
                    "description": "time in seconds."
                },
                "timezone": {
                    "type": "string",
                    "example": "Europe/Stockholm"
                },
                "lastStartedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-01-01T12:28:21.000000Z"
                }
            }
        },
        "SettingsObject": {
            "type": "object",
            "properties": {
                "automationsEnabled": {
                    "type": "boolean"
                }
            }
        },
        "UsageList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UsageObject"
                    }
                }
            }
        },
        "UsageObject": {
            "type": "object",
            "required": [
                "name",
                "date",
                "value"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2021-12-15",
                    "description": "The date for the metric"
                },
                "name": {
                    "enum": [
                        "runs",
                        "scheduledRun",
                        "triggeredRun",
                        "webhookRuns",
                        "duration",
                        "bandwidthIn",
                        "bandwidthOut"
                    ],
                    "type": "string",
                    "example": "bandwidthIn",
                    "maxLength": 50,
                    "description": "The name for the metric"
                },
                "value": {
                    "type": "integer",
                    "example": 310179713,
                    "description": "The value count of the metric"
                },
                "automation": {
                    "$ref": "#/components/schemas/AutomationUsageObject"
                }
            }
        },
        "APISettings": {
            "type": "object",
            "required": [
                "enable-conditions"
            ],
            "properties": {
                "tenantId": {
                    "type": "string",
                    "example": "cgdsAumGmQ6l0Bi7CUKt9V8P_Y9GL0sC",
                    "readOnly": true,
                    "description": "These persisted api settings are only available for this tenant. Extracted from request JWT."
                },
                "enable-conditions": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether API endpoints for condition manager are enabled"
                }
            }
        },
        "APISettingsUpload": {
            "type": "object",
            "required": [
                "enable-conditions"
            ],
            "properties": {
                "enable-conditions": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether API endpoints for condition manager are enabled"
                }
            }
        },
        "CausalEvent": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/components/schemas/CausalEventData"
                },
                "eventID": {
                    "type": "string",
                    "description": "the event id from eventing"
                },
                "extensions": {
                    "$ref": "#/components/schemas/CausalEventExtensions"
                },
                "manualTrigger": {
                    "type": "boolean"
                },
                "manualTriggerID": {
                    "type": "string",
                    "description": "the manual trigger id from eventing if present"
                }
            }
        },
        "CausalEventData": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "string",
                    "description": "the event id from eventing service."
                },
                "lastReloadTime": {
                    "type": "string",
                    "format": "RFC3339",
                    "example": "2006-01-02T15:04:05Z07:00",
                    "description": "The time of the last reload"
                }
            }
        },
        "CausalEventExtensions": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "string"
                },
                "tenantID": {
                    "type": "string"
                },
                "sessionID": {
                    "type": "string"
                }
            }
        },
        "CompoundCondition": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/components/schemas/CompoundCondition_data"
                },
                "conditionBase": {
                    "$ref": "#/components/schemas/ConditionBase"
                }
            },
            "description": "A condition made up of other conditions",
            "x-discriminator-value": "compound",
            "x-ms-discriminator-value": "compound"
        },
        "CompoundCondition_data": {
            "type": "object",
            "properties": {
                "history": {
                    "$ref": "#/components/schemas/HistoryProperties"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "rDDAcMEI1V0qzauEWepEVY8oSLJ9fvA2",
                        "qFPF1dAtPK4vfPTmKyyuKaqA6iERCwLi",
                        "4gnz8E6ZruG0lkSKwkau66P24CtORyLr",
                        "ATs--Z0b_NGyuHajcbQkxu7RrajgPaEQ"
                    ],
                    "description": "Array of condition ids"
                },
                "expression": {
                    "type": "string",
                    "example": "($0 OR $1) AND ($2 OR $3)",
                    "description": "Boolean expression made up of variable names defined from the conditions section"
                }
            },
            "description": "Condition data"
        },
        "Condition": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "compound",
                        "data"
                    ],
                    "type": "string",
                    "example": "compound",
                    "description": "Indicates the condition type"
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                    "description": "UserID of the condition owner"
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "example": "5GI7yWoJk9lvNtuEc66SXCypXVfhbVeH",
                    "description": "The tenant id"
                },
                "dataCondition": {
                    "$ref": "#/components/schemas/DataCondition"
                },
                "compoundCondition": {
                    "$ref": "#/components/schemas/CompoundCondition"
                }
            },
            "description": "only one of compoundCondition or dataCondition should be set"
        },
        "ConditionBase": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "example": "5f31c6e8476ae50001030fb6",
                    "readOnly": true,
                    "description": "The unique id for the resource"
                },
                "type": {
                    "enum": [
                        "compound",
                        "data"
                    ],
                    "type": "string",
                    "example": "compound",
                    "description": "Indicates the condition type"
                },
                "appId": {
                    "type": "string",
                    "example": "4xQ1chLoHkOikyzUGcHJquteNrAfketW",
                    "description": "The id of the app the condition is evaluated against"
                },
                "created": {
                    "type": "string",
                    "format": "string",
                    "example": "2006-01-02T15:04:05Z07:00",
                    "readOnly": true,
                    "description": "When the resource was created"
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                    "readOnly": true,
                    "description": "The id of the user the user which owns the condition"
                },
                "updated": {
                    "type": "string",
                    "format": "string",
                    "example": "2006-01-02T14:04:05Z07:00",
                    "readOnly": true,
                    "description": "When the resource was last updated"
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "example": "5GI7yWoJk9lvNtuEc66SXCypXVfhbVeH",
                    "readOnly": true,
                    "description": "The tenant id"
                },
                "bookmarkId": {
                    "type": "string",
                    "example": "anTjnOABmxlCirVx8IRfhWhLd9IZjENl",
                    "description": "The bookmark corresponding to the selection state to apply to the app at evaluation time"
                },
                "createdById": {
                    "type": "string",
                    "format": "uid",
                    "example": "EIwSIgqjmbHGwQJI0ShQoS3ORdz5nCpA",
                    "readOnly": true,
                    "description": "The id of the user which created the condition"
                },
                "description": {
                    "type": "string",
                    "example": "My condition",
                    "description": "Description of the condition"
                },
                "lastReloadTime": {
                    "type": "string",
                    "format": "RFC3339",
                    "example": "2006-01-02T15:04:05Z07:00",
                    "readOnly": true,
                    "description": "The time of the last reload, if the scan is triggered by a reload. If exists and value does not match app's last reload time, the evaluation will fail."
                }
            },
            "description": "A base condition"
        },
        "ConditionCreateRequest": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "compound",
                        "data"
                    ],
                    "type": "string",
                    "example": "compound",
                    "description": "Indicates the condition type"
                },
                "dataCondition": {
                    "$ref": "#/components/schemas/DataConditionCreateRequest"
                },
                "compoundCondition": {
                    "$ref": "#/components/schemas/CompoundCondition"
                }
            },
            "description": "only one of compoundCondition or dataCondition should be set"
        },
        "ConditionDimensions": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ConditionDimensions_inner"
            },
            "description": "List of returned dimensions"
        },
        "ConditionDimensions_inner": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "example": "Neighborhood",
                    "description": "Field referred to the dimension where the selection is made. This may be used to generate deep links."
                },
                "title": {
                    "type": "string",
                    "example": "Neighborhood",
                    "description": "Dimension title"
                },
                "qLibraryId": {
                    "type": "string",
                    "example": "PgQKNQ",
                    "description": "Refers to a dimension stored in the library"
                }
            }
        },
        "ConditionHeaders": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "example": [
                "sumnum"
            ],
            "description": "List of header labels"
        },
        "ConditionMeasures": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ConditionMeasures_inner"
            },
            "description": "List of returned measures"
        },
        "ConditionMeasures_inner": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "example": "sumnum",
                    "description": "Measure title"
                },
                "qLibraryId": {
                    "type": "string",
                    "example": "PgQKNQ",
                    "description": "Refers to a measure stored in the library"
                },
                "qNumFormat": {
                    "type": "object",
                    "example": {
                        "qDec": ".",
                        "qFmt": "###0",
                        "qType": "I",
                        "qnDec": 0,
                        "qUseThou": 1
                    },
                    "properties": {},
                    "description": "Format of the field"
                }
            }
        },
        "ConditionPatch": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ConditionPatch_inner"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/compoundCondition/conditionBase/ownerId",
                    "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitbX"
                },
                {
                    "op": "replace",
                    "path": "/dataCondition/conditionBase/description",
                    "value": "My description"
                },
                {
                    "op": "remove",
                    "path": "/compoundCondition/data/conditions/0"
                },
                {
                    "op": "replace",
                    "path": "/compoundCondition//data/expression",
                    "value": "$0 AND $1"
                },
                {
                    "op": "replace",
                    "path": "/dataCondition/conditionData/measure",
                    "value": "revenue"
                }
            ],
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "ConditionPatch_inner": {
            "type": "object",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace",
                        "remove",
                        "add"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "type": "string",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "object",
                    "properties": {},
                    "description": "The value to be used for this operation."
                }
            }
        },
        "ConditionResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "$ref": "#/components/schemas/Errors"
                },
                "condition": {
                    "$ref": "#/components/schemas/Condition"
                }
            }
        },
        "CreateEvaluationRequest": {
            "type": "object",
            "required": [
                "causalEvent",
                "contextId"
            ],
            "properties": {
                "alertId": {
                    "type": "string",
                    "example": "5f64885b2e11d23982c09e03",
                    "description": "The id of the alerting task the condition and evaluation is part of"
                },
                "contextId": {
                    "type": "string",
                    "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                    "description": "Extra context information to carry through to the result if any"
                },
                "causalEvent": {
                    "$ref": "#/components/schemas/CausalEvent"
                }
            }
        },
        "CreateEvaluationResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "$ref": "#/components/schemas/Errors"
                },
                "contextId": {
                    "type": "string",
                    "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                    "description": "Extra context information to carry through to the result if any"
                },
                "evaluationId": {
                    "type": "string",
                    "example": "795c75ba-7812-4c8f-9ced-551b6b006183",
                    "description": "Extra context information to carry through to the result if any"
                }
            }
        },
        "DataCondition": {
            "type": "object",
            "properties": {
                "headers": {
                    "$ref": "#/components/schemas/ConditionHeaders"
                },
                "history": {
                    "$ref": "#/components/schemas/HistoryProperties"
                },
                "measures": {
                    "$ref": "#/components/schemas/ConditionMeasures"
                },
                "dimensions": {
                    "$ref": "#/components/schemas/ConditionDimensions"
                },
                "selections": {
                    "$ref": "#/components/schemas/Selections"
                },
                "conditionBase": {
                    "$ref": "#/components/schemas/ConditionBase"
                },
                "conditionData": {
                    "type": "object",
                    "example": {},
                    "properties": {},
                    "description": "List of parameters specific to data condition are available in DCE and will be passed as is to DCE as per https://github.com/qlik-trial/data-condition-evaluator/blob/master/api-docs.yml"
                }
            },
            "description": "A condition based on data within an app",
            "x-discriminator-value": "data",
            "x-ms-discriminator-value": "data"
        },
        "DataConditionCreateRequest": {
            "type": "object",
            "properties": {
                "headers": {
                    "$ref": "#/components/schemas/ConditionHeaders"
                },
                "history": {
                    "$ref": "#/components/schemas/HistoryProperties"
                },
                "measures": {
                    "$ref": "#/components/schemas/ConditionMeasures"
                },
                "dimensions": {
                    "$ref": "#/components/schemas/ConditionDimensions"
                },
                "selections": {
                    "$ref": "#/components/schemas/Selections"
                },
                "conditionBase": {
                    "$ref": "#/components/schemas/ConditionBase"
                },
                "conditionData": {
                    "type": "object",
                    "example": {},
                    "properties": {},
                    "description": "List of parameters specific to data condition are available in DCE and will be passed as is to DCE as per https://github.com/qlik-trial/data-condition-evaluator/blob/master/api-docs.yml"
                }
            },
            "description": "A condition based on data within an app",
            "x-discriminator-value": "data",
            "x-ms-discriminator-value": "data"
        },
        "Evaluation": {
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique id for the resource"
                },
                "result": {
                    "enum": [
                        "success",
                        "failure",
                        "error"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "The final result of the evalution"
                },
                "status": {
                    "enum": [
                        "RUNNING",
                        "FAILED",
                        "FINISHED"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "The status of the evaluation execution"
                },
                "endTime": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true,
                    "description": "The time the evaluation ended"
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "userId of user being impersonated to evaluate the condition"
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The tenant id"
                },
                "contextId": {
                    "type": "string",
                    "description": "Extra context information to carry through to the result if one was included on when the evaluation was triggered"
                },
                "startTime": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true,
                    "description": "The time the evaluation started"
                },
                "resultData": {
                    "type": "object",
                    "properties": {},
                    "description": "Condition type specific result, one of dataResult or compoundResult"
                },
                "causalEvent": {
                    "type": "object",
                    "properties": {},
                    "description": "Representation of the event that caused the condition to be evaluated if one was included on when the evaluation was triggered"
                },
                "conditionId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique id of the associated condition"
                },
                "dataConditionEvaluatorId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique id for the resource given from Data Condition Evaluator"
                }
            }
        },
        "EvaluationError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error code specific to condition smanager."
                },
                "meta": {
                    "$ref": "#/components/schemas/EvaluationError_meta"
                },
                "title": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error title."
                },
                "status": {
                    "readOnly": true,
                    "description": "Error status."
                }
            }
        },
        "EvaluationError_meta": {
            "type": "object",
            "properties": {
                "fatal": {
                    "type": "boolean",
                    "description": "defines whether an error is recoverable or not"
                }
            }
        },
        "EvaluationErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/EvaluationError"
            }
        },
        "GetEvaluationResponse": {
            "type": "object",
            "properties": {
                "condition": {
                    "$ref": "#/components/schemas/Condition"
                },
                "evaluation": {
                    "$ref": "#/components/schemas/Evaluation"
                }
            },
            "description": "Get response returns the evaluation and condition associated"
        },
        "HistoryProperties": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Is history enabled"
                }
            },
            "description": "History properties"
        },
        "PreviewEvaluation": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true,
                    "description": "The time the evaluation ended"
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "userId of user being impersonated to evaluate the condition"
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The tenant id"
                },
                "resultUrl": {
                    "type": "string",
                    "description": "URL to download the condition results"
                },
                "startTime": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true,
                    "description": "The time the evaluation started"
                }
            }
        },
        "PreviewResponse": {
            "type": "object",
            "properties": {
                "previewId": {
                    "type": "string",
                    "format": "uid",
                    "example": "467ea9bc-bbd7-11ea-b3de-0242ac130004",
                    "readOnly": true,
                    "description": "When the resource was created"
                }
            }
        },
        "PreviewStatusResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "$ref": "#/components/schemas/Errors"
                },
                "status": {
                    "enum": [
                        "ACCEPTED",
                        "FAILED",
                        "RUNNING",
                        "SUCCESSFUL"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "condition": {
                    "$ref": "#/components/schemas/Condition"
                },
                "previewId": {
                    "type": "string",
                    "format": "uid",
                    "example": "467ea9bc-bbd7-11ea-b3de-0242ac130004",
                    "readOnly": true,
                    "description": "When the resource was created"
                },
                "evaluation": {
                    "$ref": "#/components/schemas/PreviewEvaluation"
                }
            }
        },
        "Selections": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/Selections_inner"
            },
            "description": "List of fields according to the bookmark definition"
        },
        "Selections_inner": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "number",
                    "example": 2,
                    "description": "The count"
                },
                "field": {
                    "type": "string",
                    "example": "SalesTerritoryCountry",
                    "description": "Field name"
                },
                "selectedSummary": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "[ Germany, Australia ]",
                    "description": "Array of selected"
                }
            }
        },
        "SingleErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error code specific to usage-tracker."
                },
                "meta": {
                    "type": "object",
                    "properties": {},
                    "description": "meta properties for an error."
                },
                "title": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error title."
                },
                "detail": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error cause."
                }
            }
        },
        "BatchIdDto": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                }
            }
        },
        "DataAsset": {
            "type": "object",
            "title": "Data Asset",
            "required": [
                "appId",
                "appType",
                "technicalName"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "x-qlik-customer-data": true
                    },
                    "uniqueItems": true
                },
                "appId": {
                    "type": "string"
                },
                "appType": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The value is automatically set by the application."
                },
                "spaceId": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "createdBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "properties": {
                    "type": "object",
                    "description": "A Map of name-value pairs.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A Map of name-value pairs."
                    }
                },
                "createdTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "dataStoreInfo": {
                    "$ref": "#/components/schemas/DataStoreInfo"
                },
                "technicalName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "lastModifiedBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "technicalDescription": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                }
            }
        },
        "DataStoreInfo": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "JsonPatch": {
            "type": "object",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace",
                        "remove",
                        "add"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "type": "string",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "object",
                    "properties": {},
                    "description": "The value to be used for this operation."
                }
            }
        },
        "BatchChangeSpaceItem": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                    "description": "The ID of the data file whose space will be changed."
                },
                "spaceId": {
                    "type": "string",
                    "example": "617979737a9f56e49dea2e6e",
                    "nullable": true,
                    "description": "The ID of the new space.  Passing in a null will result in the data file being moved to the user's\r\npersonal space."
                }
            },
            "additionalProperties": false
        },
        "BatchDeleteItem": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                    "description": "The ID of the data file to delete."
                }
            },
            "additionalProperties": false
        },
        "ChangeDataFileOwnerRequest": {
            "type": "object",
            "required": [
                "ownerId"
            ],
            "properties": {
                "ownerId": {
                    "type": "string",
                    "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                    "description": "The ID of the new owner."
                }
            },
            "additionalProperties": false
        },
        "ChangeDataFileSpaceRequest": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "type": "string",
                    "example": "617979737a9f56e49dea2e6e",
                    "nullable": true,
                    "description": "The ID of the space.  If null, this data file will be moved to the user's personal space."
                }
            },
            "additionalProperties": false
        },
        "ConnectionsResponse": {
            "type": "object",
            "required": [
                "connectStatement",
                "id",
                "name",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                    "description": "The unique identifier of the connection."
                },
                "name": {
                    "type": "string",
                    "example": "DataFiles",
                    "description": "The name of the connection."
                },
                "type": {
                    "type": "string",
                    "example": "qix-datafiles.exe",
                    "description": "The type of the connection."
                },
                "spaceId": {
                    "type": "string",
                    "example": "617979737a9f56e49dea2e6e",
                    "nullable": true,
                    "description": "The team space that the given connection is associated with.  If null, the connection is not associated\r\nwith any specific team space."
                },
                "connectStatement": {
                    "type": "string",
                    "example": "CUSTOM CONNECT TO \"provider=qix-datafiles.exe;path=mydatafiles;\"",
                    "description": "The connect statement that will be passed to the connector when invoked."
                }
            },
            "additionalProperties": false
        },
        "DataFileBatchChangeSpaceRequest": {
            "type": "object",
            "required": [
                "change-space"
            ],
            "properties": {
                "change-space": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/BatchChangeSpaceItem"
                    },
                    "description": "The list of data files to delete."
                }
            },
            "description": "Specifies the list of data file change space operations in a single batch.",
            "additionalProperties": false
        },
        "DataFileBatchDeleteRequest": {
            "type": "object",
            "required": [
                "delete"
            ],
            "properties": {
                "delete": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/BatchDeleteItem"
                    },
                    "description": "The list of data files to delete."
                }
            },
            "description": "Specifies the list of data files to be deleted in a single batch.",
            "additionalProperties": false
        },
        "DataFileUploadResponse": {
            "type": "object",
            "required": [
                "createdDate",
                "id",
                "name",
                "ownerId",
                "size"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                    "description": "The ID for the uploaded file."
                },
                "name": {
                    "type": "string",
                    "example": "MyFile.csv",
                    "description": "The name of the uploaded file."
                },
                "size": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1024,
                    "description": "The size of the uploaded file, in bytes."
                },
                "appId": {
                    "type": "string",
                    "example": "f34b91a1-0dc3-44ac-a847-51cb84122c84",
                    "nullable": true,
                    "description": "If this file is bound to the lifecycle of a specific app, this is the ID of this app."
                },
                "ownerId": {
                    "type": "string",
                    "example": "lDL4DIINndhL_iJkcbqWyJenuwizP-2D",
                    "description": "The 'owner' of a file is the user who last uploaded the file's content."
                },
                "spaceId": {
                    "type": "string",
                    "example": "617979737a9f56e49dea2e6e",
                    "nullable": true,
                    "description": "If the file was uploaded to a team space, this is the ID of that space."
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-07-07T20:52:40.8534780Z",
                    "description": "The date that the uploaded file was created."
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-07-07T20:52:40.8534780Z",
                    "nullable": true,
                    "description": "The date that the updated file was last modified."
                }
            },
            "additionalProperties": false
        },
        "ErrorResponseItem": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "HTTP-400",
                    "description": "The error code."
                },
                "title": {
                    "type": "string",
                    "example": "Cursor not formatted correctly.",
                    "nullable": true,
                    "description": "Summary of the problem."
                },
                "detail": {
                    "type": "string",
                    "example": "Invalid encoding of cursor.",
                    "nullable": true,
                    "description": "A human-readable explanation specific to this occurrence of the problem."
                }
            },
            "additionalProperties": false
        },
        "GetConnectionsResponse": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ConnectionsResponse"
                    },
                    "description": "Properties of the connections to the tenant spaces."
                },
                "links": {
                    "$ref": "#/components/schemas/LinksResponse"
                }
            },
            "additionalProperties": false
        },
        "GetConnectionsSortField": {
            "enum": [
                "spaceId",
                "+spaceId",
                "-spaceId"
            ],
            "type": "string"
        },
        "GetDataFileInfosResponse": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataFileUploadResponse"
                    },
                    "description": "Properties of the uploaded data files."
                },
                "links": {
                    "$ref": "#/components/schemas/LinksResponse"
                }
            },
            "additionalProperties": false
        },
        "GetDataFileInfosSortField": {
            "enum": [
                "name",
                "+name",
                "-name",
                "size",
                "+size",
                "-size",
                "modifiedDate",
                "+modifiedDate",
                "-modifiedDate"
            ],
            "type": "string"
        },
        "LinkResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true,
                    "description": "The URL for the link."
                }
            },
            "additionalProperties": false
        },
        "LinksResponse": {
            "type": "object",
            "required": [
                "next",
                "prev",
                "self"
            ],
            "properties": {
                "next": {
                    "$ref": "#/components/schemas/LinkResponse"
                },
                "prev": {
                    "$ref": "#/components/schemas/LinkResponse"
                },
                "self": {
                    "$ref": "#/components/schemas/LinkResponse"
                }
            },
            "additionalProperties": false
        },
        "MultiStatusResponse": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/MultiStatusResponseItem"
                    },
                    "description": "List of individual results for the items in the specified batch."
                }
            },
            "additionalProperties": false
        },
        "MultiStatusResponseItem": {
            "type": "object",
            "required": [
                "code",
                "id",
                "status"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "ee6a390c-5d33-11e8-9c2d-fa7ae01bbebc",
                    "description": "The unique identifier of the file."
                },
                "code": {
                    "type": "string",
                    "example": "HTTP-400",
                    "description": "The error code."
                },
                "title": {
                    "type": "string",
                    "example": "Cursor not formatted correctly.",
                    "nullable": true,
                    "description": "Summary of the problem."
                },
                "detail": {
                    "type": "string",
                    "example": "Invalid encoding of cursor.",
                    "nullable": true,
                    "description": "A human-readable explanation specific to this occurrence of the problem."
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "example": 400,
                    "description": "The HTTP status code."
                }
            },
            "additionalProperties": false
        },
        "QuotaResponse": {
            "type": "object",
            "required": [
                "allowedExtensions",
                "allowedInternalExtensions",
                "maxFileSize",
                "maxLargeFileSize",
                "maxSize",
                "size"
            ],
            "properties": {
                "size": {
                    "type": "integer",
                    "format": "int64",
                    "example": 5000,
                    "description": "The current aggregate size of all files uploaded by a given user.  If the current aggregate size is greater\r\nthan the maximum aggregate size, this is a quota violation."
                },
                "maxSize": {
                    "type": "integer",
                    "format": "int64",
                    "example": 9223372036854776000,
                    "description": "The maximum aggregate size of all files uploaded by a given user."
                },
                "maxFileSize": {
                    "type": "integer",
                    "format": "int64",
                    "example": 524288000,
                    "description": "Maximum allowable size of an uploaded file."
                },
                "maxLargeFileSize": {
                    "type": "integer",
                    "format": "int64",
                    "example": 6442450944,
                    "description": "Maximum allowable size for a single uploaded large data file (in bytes).  This is a file that was indirectly\r\nuploaded using the temp content service chunked upload capability."
                },
                "allowedExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The allowed file extensions on files that are uploaded."
                },
                "allowedInternalExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The allowed file extensions for files that are only used internally by the system (and thus not typically\r\nshown to end users)."
                }
            },
            "additionalProperties": false
        },
        "AggregateClassificationFieldInfo": {
            "type": "object",
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "fieldAlias": {
                    "type": "string"
                }
            }
        },
        "BinnedFrequency": {
            "type": "object",
            "properties": {
                "binEdge": {
                    "type": "number",
                    "format": "double"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Classification": {
            "type": "object",
            "properties": {
                "pii": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Tag"
                    }
                },
                "sensitive": {
                    "type": "boolean"
                },
                "obfuscation": {
                    "type": "string"
                }
            }
        },
        "DataAssetInfo": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "dataStoreInfo": {
                    "$ref": "#/components/schemas/DataStoreInfo"
                }
            }
        },
        "DataField": {
            "type": "object",
            "required": [
                "dataType",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "An array of system tags",
                        "x-qlik-customer-data": true
                    },
                    "description": "An array of system tags",
                    "uniqueItems": true
                },
                "alias": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "index": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "orphan": {
                    "type": "boolean"
                },
                "dataType": {
                    "$ref": "#/components/schemas/FieldDataType"
                },
                "nullable": {
                    "type": "boolean"
                },
                "userTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTag"
                    },
                    "description": "An array of user-supplied tags",
                    "uniqueItems": true
                },
                "encrypted": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "primaryKey": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "ordinalPositionInKey": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DataSet": {
            "type": "object",
            "title": "Data Set",
            "required": [
                "dataAssetInfo",
                "qri",
                "secureQri",
                "technicalName"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "qri": {
                    "type": "string",
                    "format": "qdf:<store-type>:<tenant-guid>:<<uid@/sid@>user/space guid>:<path-to-file>",
                    "maxLength": 1024,
                    "minLength": 8,
                    "description": "NOTE: this will be deprecated after migration to secureQri. Required user defined field. All the parts in the format must be separated by ':'. The first part denotes the resourceType, followed by dataStoreType and tenant guid. The spaceGuid or userGuid is to be populated based on if the dataset is in shared or private space and finally the full file name. This field is auto populated for the dataSet generated for qix-datafiles."
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "x-qlik-customer-data": true
                    },
                    "uniqueItems": true
                },
                "type": {
                    "type": "string"
                },
                "schema": {
                    "$ref": "#/components/schemas/Schema"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The value is automatically set by the application."
                },
                "spaceId": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "createdBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "secureQri": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "description": "A Map of name-value pairs.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A Map of name-value pairs."
                    }
                },
                "createdTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "operational": {
                    "$ref": "#/components/schemas/Operational"
                },
                "dataAssetInfo": {
                    "$ref": "#/components/schemas/DataAssetInfo"
                },
                "technicalName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "lastModifiedBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "classifications": {
                    "$ref": "#/components/schemas/Classifications"
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "additionalSchemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Schema"
                    },
                    "description": "Optional field to specify additional schemas for files where multiple tables or sheets are available. User must define primary schema in 'schema' attribute and rest of the sheets/ tables can be defined using this field. This field is not populated for the dataSets with single schema"
                },
                "technicalDescription": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                }
            }
        },
        "DataSetProfile": {
            "type": "object",
            "title": "Data Set Profile",
            "properties": {
                "meta": {
                    "$ref": "#/components/schemas/ProfileMetadata"
                },
                "samples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TableSample"
                    },
                    "readOnly": true
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TableProfile"
                    },
                    "readOnly": true
                }
            }
        },
        "FieldDataType": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "DATE",
                        "TIME",
                        "DATETIME",
                        "TIMESTAMP",
                        "STRING",
                        "DOUBLE",
                        "DECIMAL",
                        "INTEGER",
                        "BOOLEAN",
                        "BINARY",
                        "CUSTOM"
                    ],
                    "type": "string",
                    "description": "Each datatype may vary in terms of required properties. Example: Datatype DECIMAL requires two mandatory properties to be defined - precision and scale, each one accepts integer value. All other datatypes does not have any required properties."
                },
                "properties": {
                    "type": "object",
                    "description": "The properties map key is string and the value is of type object. Please note, Datatype DECIMAL requires two mandatory properties to be defined; these properties must be named: precision and scale, each of these property accepts integer value.  All other datatypes does not require any manadatory properties to be defined.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "The properties map key is string and the value is of type object. Please note, Datatype DECIMAL requires two mandatory properties to be defined; these properties must be named: precision and scale, each of these property accepts integer value.  All other datatypes does not require any manadatory properties to be defined."
                    }
                },
                "originalType": {
                    "type": "string"
                }
            }
        },
        "FieldProfile": {
            "type": "object",
            "title": "Field Profile",
            "properties": {
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "x-qlik-customer-data": true
                    }
                },
                "index": {
                    "type": "integer",
                    "format": "int32"
                },
                "median": {
                    "type": "number",
                    "format": "double"
                },
                "average": {
                    "type": "number",
                    "format": "double"
                },
                "dataType": {
                    "enum": [
                        "DATE",
                        "TIME",
                        "DATETIME",
                        "TIMESTAMP",
                        "STRING",
                        "DOUBLE",
                        "DECIMAL",
                        "INTEGER",
                        "BOOLEAN",
                        "BINARY",
                        "CUSTOM"
                    ],
                    "type": "string"
                },
                "kurtosis": {
                    "type": "number",
                    "format": "double"
                },
                "skewness": {
                    "type": "number",
                    "format": "double"
                },
                "fractiles": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "sampleValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "technicalName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "classification": {
                    "$ref": "#/components/schemas/Classification"
                },
                "nullValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "textValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "zeroValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "maxNumericValue": {
                    "type": "number",
                    "format": "double"
                },
                "maxStringLength": {
                    "type": "integer",
                    "format": "int64"
                },
                "minNumericValue": {
                    "type": "number",
                    "format": "double"
                },
                "minStringLength": {
                    "type": "integer",
                    "format": "int64"
                },
                "sumStringLength": {
                    "type": "integer",
                    "format": "int64"
                },
                "emptyStringCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "sumNumericValues": {
                    "type": "number",
                    "format": "double"
                },
                "numericValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "standardDeviation": {
                    "type": "number",
                    "format": "double"
                },
                "distinctValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "mostFrequentValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Frequency"
                    }
                },
                "negativeValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "positiveValueCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "averageStringLength": {
                    "type": "number",
                    "format": "double"
                },
                "frequencyDistribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/BinnedFrequency"
                    }
                },
                "lastSortedStringValue": {
                    "type": "string"
                },
                "firstSortedStringValue": {
                    "type": "string"
                },
                "sumSquaredNumericValues": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "Frequency": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Operational": {
            "type": "object",
            "title": "Operational",
            "properties": {
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "location": {
                    "type": "string"
                },
                "rowCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "logMessage": {
                    "type": "string"
                },
                "tableOwner": {
                    "type": "string"
                },
                "lastLoadTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "contentUpdated": {
                    "type": "boolean"
                },
                "lastUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "tableConnectionInfo": {
                    "$ref": "#/components/schemas/TableConnectionInfo"
                }
            }
        },
        "PageDataSetProfile": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataSetProfile"
                    }
                },
                "page": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "pages": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ProfileMetadata": {
            "type": "object",
            "title": "Profile Metadata",
            "properties": {
                "status": {
                    "enum": [
                        "QUEUED",
                        "RUNNING",
                        "FINISHED",
                        "FAILED",
                        "INCOMPLETE",
                        "CANCELLED",
                        "STALE",
                        "PARTIAL",
                        "DEFERRED"
                    ],
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataSetId": {
                    "type": "string"
                },
                "connectionId": {
                    "type": "string"
                },
                "lastLoadTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "computationEndTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "computationStartTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Schema": {
            "type": "object",
            "title": "Schema",
            "required": [
                "dataFields"
            ],
            "properties": {
                "anomalies": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "Anomalies associated with this schema. Example: $warning-unknown-headers"
                    },
                    "description": "Anomalies associated with this schema. Example: $warning-unknown-headers",
                    "uniqueItems": true
                },
                "dataFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataField"
                    }
                },
                "schemaName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "loadOptions": {
                    "type": "object",
                    "description": "Options for loading files. Example: \"qLabel\": \"embedded labels\"",
                    "additionalProperties": {
                        "type": "object",
                        "description": "Options for loading files. Example: \"qLabel\": \"embedded labels\""
                    }
                },
                "effectiveDate": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                },
                "overrideSchemaAnomalies": {
                    "type": "boolean"
                }
            },
            "description": "Optional field to specify additional schemas for files where multiple tables or sheets are available. User must define primary schema in 'schema' attribute and rest of the sheets/ tables can be defined using this field. This field is not populated for the dataSets with single schema"
        },
        "TableConnectionInfo": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "selectionScript": {
                    "type": "string"
                },
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "TableProfile": {
            "type": "object",
            "title": "Table Profile",
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true,
                    "x-qlik-customer-data": true
                },
                "sizeInBytes": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "numberOfRows": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "fieldProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/FieldProfile"
                    },
                    "readOnly": true
                }
            }
        },
        "TableRecord": {
            "type": "object",
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "TableSample": {
            "type": "object",
            "title": "Table Sample",
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true,
                    "x-qlik-customer-data": true
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TableRecord"
                    },
                    "readOnly": true
                },
                "fieldNames": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "x-qlik-customer-data": true
                    },
                    "readOnly": true
                }
            }
        },
        "Tag": {
            "type": "string",
            "maxLength": 40,
            "description": "The tag passed by the requesting client. For more information please look at the document docs/meta-tags.md in the reporting-service repository"
        },
        "UserTag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the tag in Collections"
                },
                "name": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 1,
                    "x-qlik-customer-data": true
                }
            },
            "description": "An array of user-supplied tags"
        },
        "DataStore": {
            "type": "object",
            "title": "Data Store",
            "required": [
                "technicalName",
                "type",
                "uri"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "uri": {
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "x-qlik-customer-data": true
                    },
                    "uniqueItems": true
                },
                "type": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1
                },
                "ownerId": {
                    "type": "string",
                    "description": "The value is automatically set by the application."
                },
                "spaceId": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Only required when updating the resource. Must be null for new resources."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "createdBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "properties": {
                    "type": "object",
                    "description": "A Map of name-value pairs.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A Map of name-value pairs."
                    }
                },
                "createdTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                },
                "technicalName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "lastModifiedBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The value is automatically set by the application. User defined value is ignored."
                },
                "technicalDescription": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 0,
                    "x-qlik-customer-data": true
                }
            }
        },
        "PageDataAsset": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataAsset"
                    }
                },
                "page": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "pages": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PageDataSet": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataSet"
                    }
                },
                "page": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "pages": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PageDataStore": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/DataStore"
                    }
                },
                "page": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "pages": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PostBody": {
            "type": "object",
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "7c2ce11d-4d10-4414-a9b0-620e57298038",
                    "description": "The app guid of the app"
                },
                "itemId": {
                    "type": "string",
                    "example": "5e6f8cc63d33cc00018db30b",
                    "description": "The item id of the app in collection service"
                }
            }
        },
        "resultobjheavy": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/objectspec"
                },
                {
                    "type": "object",
                    "properties": {
                        "cpuSeconds1": {
                            "type": "number",
                            "example": 12.3
                        },
                        "cpuSeconds2": {
                            "type": "number",
                            "example": 12.3
                        },
                        "cpuQuotient1": {
                            "type": "number",
                            "example": 12.3
                        },
                        "cpuQuotient2": {
                            "type": "number",
                            "example": 12.3
                        }
                    }
                }
            ]
        },
        "AppError": {
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "11ecf638-0be4-4b94-a9e6-91218f34e175",
                    "description": "app id"
                },
                "method": {
                    "type": "string",
                    "example": "GetObject",
                    "description": "The method that is failing."
                },
                "parameters": {
                    "type": "object",
                    "description": "Parameters of method that fails.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "description": "Error in resource handling"
        },
        "AppErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/AppError"
            },
            "description": "Errors occurring when dealing with the app."
        },
        "Blob": {
            "type": "array",
            "items": {
                "type": "integer",
                "format": "int8"
            },
            "x-go-type": {
                "type": "Blob",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "CallBackAction": {
            "properties": {
                "httpRequest": {
                    "$ref": "#/components/schemas/HttpRequest"
                },
                "stanMessage": {
                    "$ref": "#/components/schemas/StanMessage"
                }
            },
            "description": "The callback to be performed once the report is done."
        },
        "ChainableSelection": {
            "required": [
                "selectionType"
            ],
            "properties": {
                "selectionType": {
                    "$ref": "#/components/schemas/ChainableSelectionType"
                },
                "selectionFilter": {
                    "$ref": "#/components/schemas/SelectionFilter"
                },
                "persistentBookmark": {
                    "$ref": "#/components/schemas/SensePersistentBookmark"
                },
                "temporaryBookmarkV2": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "ChainableSelectionType": {
            "enum": [
                "selectionFilter",
                "persistentBookmark",
                "temporaryBookmarkV2"
            ],
            "type": "string",
            "default": "selectionFilter",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "ComposableTemplate": {
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "sense-image-1.0",
                        "sense-sheet-1.0"
                    ],
                    "type": "string",
                    "description": "Template type and version using semantic versioning. It must have the following name convention, dashed-separated-template-name-MAJOR.MINOR"
                },
                "senseImageTemplate": {
                    "$ref": "#/components/schemas/SenseImageTemplate"
                },
                "senseSheetTemplate": {
                    "$ref": "#/components/schemas/SenseSheetTemplate"
                }
            }
        },
        "Definitions": {
            "properties": {
                "selectionsByState": {
                    "type": "object",
                    "description": "It maps an ID to a selectionsByState object.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A selectionsByState definition that can be shared between templates in a composition.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/QSelection"
                            }
                        }
                    }
                }
            },
            "description": "Definitions of common properties that are shared between templates, e.g. selectionsByState can be the same for all templates within a composition of templates."
        },
        "DocProperties": {
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 10000
                },
                "author": {
                    "type": "string",
                    "maxLength": 10000
                },
                "subject": {
                    "type": "string",
                    "maxLength": 10000
                }
            },
            "description": "Properties of the document. In case of multiple composition, only properties specified in the composition output are taken and the ones specified in each output item are ignored."
        },
        "ExcelOutput": {
            "properties": {
                "outFormat": {
                    "enum": [
                        "xlsx"
                    ],
                    "type": "string",
                    "default": "xlsx",
                    "description": "The image format of the report to be produced."
                }
            },
            "description": "Output to be used to export a excel template."
        },
        "ExpansionData": {
            "type": "object",
            "x-go-type": {
                "type": "ExpansionData",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qPos": {
                    "$ref": "#/components/schemas/PositionMark"
                },
                "qExcludeList": {
                    "type": "boolean"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "ExportError": {
            "type": "object",
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The unique code for the error\n\n- \"REP-400000\" Bad request. The server could not understand the request due to invalid syntax.\n- \"REP-400008\" Selections error.\n- \"REP-400009\" Maximum 16384 columns limit exceeded. Download data in a visualization can't generate an .xlsx file due to limitations to the number of columns you can download.\n- \"REP-400010\" Maximum 1048566 rows limit exceeded. Download data in a visualization can't generate an .xlsx file due to limitations to the number of rows you can download.\n- \"REP-400011\" The size of the downloaded Excel file exceed 100 MB limit. Download data in a visualization can't generate an .xlsx file due to limitations to the amount of data you can download.\n- \"REP-400015\" Bad request in enigma request. The patch value has invalid JSON format.\n- \"REP-401000\" Unauthorized. The client must authenticate itself to get the requested response.\n- \"REP-401001\" Unauthorized, bad JWT.\n- \"REP-403000\" Forbidden. The client does not have access rights to the content.\n- \"REP-403001\" App forbidden, the user does not have read permission on the app.\n- \"REP-403002\" Chart type not supported.\n- \"REP-404000\" Not found. The server can not find the requested resource.\n- \"REP-404001\" App not found, the app does not exist or it has been deleted.\n- \"REP-404002\" Chart not found, the chart does not exist or it has been deleted.\n- \"REP-404003\" Sheet not found, the sheet does not exist or it has been deleted or it is unavailable.\n- \"REP-404004\" Story not found, the story does not exist or it has been deleted or it is unavailable.\n- \"REP-429000\" Too many request. The user has sent too many requests in a given amount of time (\"rate limiting\").\n- \"REP-429012\" Exceeded max session tenant quota. A tenant has opened too many different sessions at the same time.\n- \"REP-429014\" Reporting service was not able to return inside of request export deadline. Too many request at the same time for the same tenant.\n- \"REP-429016\" Exceeded max session tenant quota per day.\n- \"REP-500000\" Fail to resolve resource.\n- \"REP-500006\" Fail to get report session parameters.\n- \"REP-503005\" Engine unavailable, qix-sessions error no engines available.\n- \"REP-503013\" Session unavailable. The engine session used to create the report is unavailable.\n- \"REP-500100\" Image rendering generic error on Sense client.\n- \"REP-500101\" Image rendering could not set cookies error on Sense client.\n- \"REP-400102\" Image rendering invalid strategy error on Sense client.\n- \"REP-500103\" Image rendering JS timeout error on Sense client.\n- \"REP-500104\" Image rendering load URL timeout error on Sense client.\n- \"REP-500105\" Image rendering max paint attempts exceeded error on Sense client.\n- \"REP-500106\" Image rendering max JS attempts exceeded error on Sense client.\n- \"REP-500107\" Image rendering render timeout error on Sense client.\n- \"REP-500108\" Image rendering JS failure due to timeout error on Sense client.\n- \"REP-500109\" Image rendering generic JS failure error on Sense client.\n- \"REP-400029\" Reload Entitlement Limit Reached.\n"
                },
                "meta": {
                    "$ref": "#/components/schemas/MetaExportError"
                },
                "title": {
                    "type": "string",
                    "description": "A summary in english explaining what went wrong."
                },
                "detail": {
                    "type": "string",
                    "description": "Optional. MAY be used to provide more concrete details."
                }
            },
            "description": "Error occured during report generation."
        },
        "ExportErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ExportError"
            },
            "description": "Errors occured during report generation."
        },
        "ExtendedLayoutBookmarkData": {
            "type": "object",
            "x-go-type": {
                "type": "ExtendedLayoutBookmarkData",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qId": {
                    "type": "string"
                },
                "qActive": {
                    "type": "boolean"
                },
                "qShowMode": {
                    "type": "integer",
                    "format": "int32"
                },
                "qSortData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/InterFieldSortData"
                    }
                },
                "qGraphMode": {
                    "enum": [
                        "GRAPH_MODE_BAR",
                        "GRAPH_MODE_PIE",
                        "GRAPH_MODE_PIVOTTABLE",
                        "GRAPH_MODE_SCATTER",
                        "GRAPH_MODE_LINE",
                        "GRAPH_MODE_STRAIGHTTABLE",
                        "GRAPH_MODE_COMBO",
                        "GRAPH_MODE_RADAR",
                        "GRAPH_MODE_GAUGE",
                        "GRAPH_MODE_GRID",
                        "GRAPH_MODE_BLOCK",
                        "GRAPH_MODE_FUNNEL",
                        "GRAPH_MODE_MEKKO",
                        "GRAPH_MODE_LAST"
                    ],
                    "type": "string"
                },
                "qScrollPos": {
                    "$ref": "#/components/schemas/ScrollPosition"
                },
                "qTopCollapsed": {
                    "type": "boolean"
                },
                "qUseGraphMode": {
                    "type": "boolean"
                },
                "qExpansionInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ExpansionData"
                    }
                },
                "qLeftCollapsed": {
                    "type": "boolean"
                },
                "qDimensionGroupPos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/GroupStateInfo"
                    }
                },
                "qExpressionGroupPos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/GroupStateInfo"
                    }
                },
                "qExtendedPivotState": {
                    "$ref": "#/components/schemas/ExtendedPivotStateData"
                },
                "qActiveContainerChildObjectId": {
                    "type": "string"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "ExtendedPivotStateData": {
            "type": "object",
            "x-go-type": {
                "type": "ExtendedPivotStateData",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qDimensionNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qEnableConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qExpressionPosition": {
                    "type": "integer",
                    "format": "int32"
                },
                "qNumberOfLeftDimensions": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Float64": {
            "type": "number",
            "format": "float64",
            "x-go-type": {
                "type": "Float64",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            }
        },
        "GroupStateInfo": {
            "type": "object",
            "x-go-type": {
                "type": "GroupStateInfo",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qGroupName": {
                    "type": "string"
                },
                "qCurrentItemName": {
                    "type": "string"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "HttpRequest": {
            "properties": {
                "uri": {
                    "type": "string",
                    "description": "URI of the request."
                }
            },
            "description": "Http callback. The provided uri will be called once the report is done."
        },
        "ImageOutput": {
            "properties": {
                "outDpi": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 1000,
                    "description": "Image resolution in DPI (default 96 DPI)."
                },
                "outZoom": {
                    "type": "number",
                    "format": "float",
                    "description": "The scale factor to be applied in image scaling. A zoom greater than 5 will not be applied to the device pixel ratio which will remain fixed at 5."
                },
                "outFormat": {
                    "enum": [
                        "png",
                        "jsondata"
                    ],
                    "type": "string",
                    "default": "png",
                    "description": "The image format of the report to be produced."
                }
            },
            "description": "Output to be used to export a single visualization as image."
        },
        "InterFieldSortData": {
            "type": "object",
            "x-go-type": {
                "type": "InterFieldSortData",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qName": {
                    "type": "string"
                },
                "qReversed": {
                    "type": "boolean"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Meta": {
            "type": "object",
            "properties": {
                "unreadCount": {
                    "type": "number",
                    "maximum": 500,
                    "minimum": 0,
                    "description": "The total number of unread notification."
                }
            },
            "description": "Notifications meta data"
        },
        "MetaExportError": {
            "properties": {
                "appErrors": {
                    "$ref": "#/components/schemas/AppErrors"
                },
                "selectionErrors": {
                    "$ref": "#/components/schemas/SelectionErrors"
                }
            },
            "description": "Define the export error metadata. Each property is filled if it is related to the export error type."
        },
        "OutputItem": {
            "example": {
                "type": "pdf",
                "outputId": "output1",
                "pdfOutput": {
                    "size": "A4",
                    "align": {
                        "vertical": "middle",
                        "horizontal": "center"
                    },
                    "resizeData": {
                        "fit": "210mmx287mm"
                    },
                    "resizeType": "fit",
                    "orientation": "P",
                    "imageRenderingDpi": 300
                }
            },
            "required": [
                "outputId",
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "image",
                        "pdf",
                        "xlsx",
                        "jsondata",
                        "pdfcomposition",
                        "excel",
                        "pptx",
                        "pptxcomposition",
                        "csv"
                    ],
                    "type": "string",
                    "description": "The generated report type.\n\nEach template type supports specific output types:\n   - composition-1.0 supports only pdfcomposition and pptxcomposition output types\n   - excel-1.0 supports only excel output type\n   - sense-image-1.0 supports pdf and image output types\n   - sense-sheet-1.0 supports only pdf output type\n\nEach output type requires a specific output to be provided:\n   - excel requires excelOutput to be set\n   - pdfcomposition requires pdfCompositionOutput to be set\n   - pptxcomposition requires pptxCompositionOutput to be set\n   - pdf requires pdfOuput to be set\n   - image requires imageOutput to be set\n   - csv doesn't have csv output.\n"
                },
                "callback": {
                    "type": "string",
                    "description": "Callback for report requests. Deprecated in favor of callBackAction.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-deprecated": true,
                    "x-qlik-visibility": "private"
                },
                "outputId": {
                    "type": "string",
                    "example": "output1",
                    "maxLength": 1000,
                    "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request. It does not need to be a GUID. No spaces and colons are allowed in the outputId string."
                },
                "pdfOutput": {
                    "$ref": "#/components/schemas/PdfOutput"
                },
                "pptxOutput": {
                    "$ref": "#/components/schemas/PptxOutput"
                },
                "xlsxOutput": {
                    "type": "object",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "excelOutput": {
                    "$ref": "#/components/schemas/ExcelOutput"
                },
                "imageOutput": {
                    "$ref": "#/components/schemas/ImageOutput"
                },
                "callBackAction": {
                    "$ref": "#/components/schemas/CallBackAction"
                },
                "pdfCompositionOutput": {
                    "$ref": "#/components/schemas/PdfCompositionOutput"
                },
                "pptxCompositionOutput": {
                    "$ref": "#/components/schemas/PptxCompositionOutput"
                }
            }
        },
        "PdfCompositionOutput": {
            "properties": {
                "pdfOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PdfOutput"
                    },
                    "description": "The ordered list of PDF outputs, the number must match the composable templates."
                },
                "properties": {
                    "$ref": "#/components/schemas/DocProperties"
                }
            },
            "description": "Output to be used to export a composition of templates as pdf."
        },
        "PdfOutput": {
            "properties": {
                "size": {
                    "enum": [
                        "A1",
                        "A2",
                        "A3",
                        "A4",
                        "A5",
                        "A6",
                        "Letter",
                        "Legal",
                        "Tabloid"
                    ],
                    "type": "string",
                    "default": "A4",
                    "description": "Size of the pdf page."
                },
                "align": {
                    "type": "object",
                    "properties": {
                        "vertical": {
                            "enum": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "type": "string",
                            "default": "top"
                        },
                        "horizontal": {
                            "enum": [
                                "left",
                                "center",
                                "right"
                            ],
                            "type": "string",
                            "default": "left"
                        }
                    },
                    "description": "Content alignment."
                },
                "margins": {
                    "type": "string",
                    "example": "1cm",
                    "description": "The overall margin to be applied. It must be in the following format \"{value}{cm|mm}\" (e.g. \"1cm\" means that a margin of 1cm will be applied to all PDF edges). Note that the minimum printable area, including margins, is 1.5cmx1.5cm (corresponding to 0.6x0.6 inches at 96 DPI). If the margins make the content size smaller than the minimum printable area, the content size is capped to the minimum printable area. Default values are: - \"1cm\" for autofit resizeType - \"0cm\" for fit resizeType - \"0cm\" for none resizeType",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "properties": {
                    "$ref": "#/components/schemas/DocProperties"
                },
                "resizeData": {
                    "type": "object",
                    "properties": {
                        "fit": {
                            "type": "string",
                            "example": "297mmx210mm",
                            "description": "The size of the area in the following format \"{width}{cm|mm}x{height}{cm|mm}\" (e.g. \"297mmx210mm\"). Please remember that PDF page orientation (landscape or portrait) should match the width and height set for this field (eg. A4 landscape is \"297mmx210mm\", A4 portrait is \"210mmx287mm\"). Note that the minimum printable area is 1.5cmx1.5cm (corresponding to 0.6x0.6 inches at 96 DPI)."
                        }
                    },
                    "description": "The area where the object (eg. sheet, chart) is printed. Required in case of \"fit\" resizeType."
                },
                "resizeType": {
                    "enum": [
                        "none",
                        "autofit",
                        "fit"
                    ],
                    "type": "string",
                    "default": "none",
                    "description": "The type of resize to be performed:\n  - none is used to export a visualization, sheet or story as is (e.g. normal size), regardless of its size. This may result in cropping.\n  - autofit automatically fits the visualization, sheet or story into the output size (i.e. A4, A3 etc.). Any provided resizeData parameter will be ignored for this configuration.\n  - fit fits the visualization, sheet or story into the area specified in resizeData. The content will be rescaled to fit in that area.\n"
                },
                "orientation": {
                    "enum": [
                        "P",
                        "L",
                        "A"
                    ],
                    "type": "string",
                    "default": "P",
                    "description": "P for portrait, L for landscape and A for auto-detect. Auto-detect sets the orientation depending on the content width and height proportions: if content width > height the orientation is automatically set to landscape, portrait otherwise."
                },
                "imageRenderingDpi": {
                    "type": "number",
                    "format": "int32",
                    "default": 300,
                    "maximum": 1000,
                    "x-nullable": true,
                    "description": "This value is used for rendered images only, set to a default of 300 dpi."
                }
            },
            "description": "Output to be used to export a single visualization or a sheet as pdf."
        },
        "Point": {
            "type": "object",
            "x-go-type": {
                "type": "Point",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qx": {
                    "type": "integer",
                    "format": "int32",
                    "description": "x-coordinate in pixels.\nThe origin is the top left of the screen."
                },
                "qy": {
                    "type": "integer",
                    "format": "int32",
                    "description": "y-coordinate in pixels.\nThe origin is the top left of the screen."
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "PositionMark": {
            "type": "object",
            "x-go-type": {
                "type": "PositionMark",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qElemNo": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "qDimName": {
                    "type": "string"
                },
                "qElemValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Blob"
                    }
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "PptxCompositionOutput": {
            "properties": {
                "pptxOutput": {
                    "$ref": "#/components/schemas/PptxOutput"
                }
            },
            "description": "Output to be used to export a composition of templates as pptx."
        },
        "PptxOutput": {
            "properties": {
                "size": {
                    "enum": [
                        "Widescreen",
                        "OnScreen",
                        "OnScreen16x9",
                        "OnScreen16x10"
                    ],
                    "type": "string",
                    "default": "Widescreen",
                    "description": "Size of the PowerPoint slide:\n  - Widescreen: 960x540\n  - OnScreen: 720x540\n  - OnScreen16x9: 720x405\n  - OnScreen16x10: 720x450\n"
                },
                "margins": {
                    "type": "string",
                    "example": "1cm",
                    "description": "The overall margin to be applied. It must be in the following format \"{value}{cm|mm}\" (e.g. \"1cm\" means that a margin of 1cm will be applied to all PowerPoint edges). Note that the minimum printable area, including margins, is 1.5cmx1.5cm (corresponding to 0.6x0.6 inches at 96 DPI). If the margins make the content size smaller than the minimum printable area, the content size is capped to the minimum printable area. Default is \"1cm\".",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "properties": {
                    "$ref": "#/components/schemas/DocProperties"
                },
                "resizeType": {
                    "enum": [
                        "autofit"
                    ],
                    "type": "string",
                    "default": "autofit",
                    "description": "The type of resize to be performed. Autofit automatically fits the visualization, sheet or story into the output size (i.e. Widescreen, OnScreen etc.).\n"
                },
                "orientation": {
                    "enum": [
                        "L",
                        "P",
                        "A"
                    ],
                    "type": "string",
                    "default": "L",
                    "description": "L for landscape, P for portrait and A for auto-detect. Auto-detect sets landscape, the default PowerPoint orientation."
                },
                "imageRenderingDpi": {
                    "type": "number",
                    "format": "int32",
                    "default": 200,
                    "maximum": 1000,
                    "x-nullable": true,
                    "description": "This value is used for rendered images only, set to a default of 200 dpi."
                }
            },
            "description": "Output to be used to export a single visualization or a sheet as PowerPoint presentation."
        },
        "QFieldValue": {
            "properties": {
                "text": {
                    "type": "string",
                    "example": "2021",
                    "description": "String value of the field value."
                },
                "number": {
                    "$ref": "#/components/schemas/Float64"
                },
                "isNumeric": {
                    "type": "boolean",
                    "example": true,
                    "x-nullable": true,
                    "description": "IsNumeric tells whether the field value is text or number. Default value is equal to defaultIsNumeric property in QSelection."
                }
            },
            "description": "In order to apply a selection just one of text/number needs to be set, this must be associated with the correct isNumeric bool. In some scenarios both text and number may be set."
        },
        "QSelection": {
            "required": [
                "fieldName",
                "values",
                "defaultIsNumeric"
            ],
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QFieldValue"
                    },
                    "maxItems": 150000,
                    "description": "The values of the field to be selected."
                },
                "fieldName": {
                    "type": "string",
                    "example": "Year",
                    "description": "The name of the field to be selected."
                },
                "defaultIsNumeric": {
                    "type": "boolean",
                    "example": true,
                    "description": "Default value that QFieldValue isNumeric property takes if missing."
                }
            }
        },
        "QvDataTemplate": {
            "required": [
                "appId",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "QbtwdFg",
                    "description": "QV visualization id."
                },
                "appId": {
                    "type": "string",
                    "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Variable"
                    },
                    "maxItems": 1100
                },
                "expansionInfo": {
                    "$ref": "#/components/schemas/ExtendedLayoutBookmarkData"
                },
                "selectionStrategy": {
                    "$ref": "#/components/schemas/SelectionStrategy"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "QvDataTemplate-2.0": {
            "required": [
                "appId",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "QbtwdFg",
                    "description": "QV visualization id."
                },
                "appId": {
                    "type": "string",
                    "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                },
                "bookmarkId": {
                    "type": "string",
                    "description": "A specific selection state Bookmark ID"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Reason": {
            "properties": {
                "error": {
                    "$ref": "#/components/schemas/ReasonError"
                },
                "traceId": {
                    "type": "string",
                    "example": "00000000000000000000000000000000"
                },
                "outputId": {
                    "type": "string",
                    "example": "output1",
                    "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request."
                },
                "exportErrors": {
                    "$ref": "#/components/schemas/ExportErrors"
                }
            }
        },
        "ReasonError": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            },
            "description": "Deprecated. Use exportErrors instead of error",
            "x-qlik-stability": "experimental",
            "x-qlik-deprecated": true,
            "x-qlik-visibility": "private"
        },
        "ReportRequest": {
            "example": {
                "type": "composition-1.0",
                "output": {
                    "type": "pdfcomposition",
                    "outputId": "composition1",
                    "pdfCompositionOutput": {
                        "pdfOutputs": [
                            {
                                "size": "A4",
                                "align": {
                                    "vertical": "middle",
                                    "horizontal": "center"
                                },
                                "resizeType": "autofit",
                                "orientation": "A"
                            },
                            {
                                "size": "A4",
                                "align": {
                                    "vertical": "middle",
                                    "horizontal": "center"
                                },
                                "resizeType": "autofit",
                                "orientation": "A"
                            }
                        ]
                    }
                },
                "definitions": {
                    "selectionsByState": {
                        "sel1": {
                            "$": [
                                {
                                    "values": [
                                        {
                                            "text": "Arizona",
                                            "isNumeric": false
                                        }
                                    ],
                                    "fieldName": "Region",
                                    "defaultIsNumeric": false
                                }
                            ]
                        }
                    }
                },
                "compositionTemplates": [
                    {
                        "type": "sense-sheet-1.0",
                        "senseSheetTemplate": {
                            "appId": "2451e58e-a1b9-4047-abf6-315e91d8a610",
                            "sheet": {
                                "id": "5ffe3801-1b6d-439d-a849-84d0748358f1"
                            },
                            "selectionsByStateDef": "sel1"
                        }
                    },
                    {
                        "type": "sense-sheet-1.0",
                        "senseSheetTemplate": {
                            "appId": "2451e58e-a1b9-4047-abf6-315e91d8a610",
                            "sheet": {
                                "id": "ffrxJyA"
                            },
                            "selectionsByStateDef": "sel1"
                        }
                    }
                ]
            },
            "required": [
                "type",
                "output"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/components/schemas/Meta"
                },
                "type": {
                    "enum": [
                        "composition-1.0",
                        "sense-image-1.0",
                        "sense-data-1.0",
                        "sense-sheet-1.0",
                        "sense-story-1.0",
                        "qv-data-1.0",
                        "qv-data-2.0",
                        "sense-excel-template-1.0"
                    ],
                    "type": "string",
                    "description": "Template type and version using semantic versioning. It must have the following name convention: dashed-separated-template-name-MAJOR.MINOR.\nPlease note that sense-story-x.0, sense-excel-template-1.0, sense-data-x.0 and qv-data-x.0 are only for internal use.\n\nEach type requires a specific template to be provided:\n  - composition-1.0 requires compositionTemplates to be set\n  - sense-excel-template-1.0 requires senseExcelTemplate to be set\n  - sense-image-1.0 requires senseImageTemplate to be set\n  - sense-sheet-1.0 requires senseSheetTemplate to be set\n\nEach template type supports specific output types:\n  - composition-1.0 supports only pdfcomposition output type\n  - sense-excel-template-1.0 supports only excel output type\n  - sense-image-1.0 supports pdf and png output types\n  - sense-sheet-1.0 supports only pdf output type\n"
                },
                "output": {
                    "$ref": "#/components/schemas/OutputItem"
                },
                "loadType": {
                    "enum": [
                        "interactive",
                        "batch"
                    ],
                    "type": "string",
                    "default": "batch",
                    "description": "Load type expressing the kind of request, eg. interactive for report requests from the Web UI, batch for scheduled report generation.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "definitions": {
                    "$ref": "#/components/schemas/Definitions"
                },
                "qvDataTemplate": {
                    "$ref": "#/components/schemas/QvDataTemplate"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Deprecated, use template reloadTimestamp. Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-deprecated": true,
                    "x-qlik-visibility": "private"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Deprecated. Use selectionsByState inside the template objects i.e. senseImageTemplate, senseDataTemplate, senseSheetTemplate, qvDataTemplate, qvDataTemplate-2.0, senseExcelTemplate",
                    "x-qlik-stability": "experimental",
                    "x-qlik-deprecated": true,
                    "x-qlik-visibility": "private",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Selection"
                        },
                        "maxItems": 125
                    }
                },
                "senseDataTemplate": {
                    "$ref": "#/components/schemas/SenseDataTemplate"
                },
                "qvDataTemplate-2.0": {
                    "$ref": "#/components/schemas/QvDataTemplate-2.0"
                },
                "senseExcelTemplate": {
                    "$ref": "#/components/schemas/SenseExcelTemplate"
                },
                "senseImageTemplate": {
                    "$ref": "#/components/schemas/SenseImageTemplate"
                },
                "senseSheetTemplate": {
                    "$ref": "#/components/schemas/SenseSheetTemplate"
                },
                "senseStoryTemplate": {
                    "$ref": "#/components/schemas/SenseStoryTemplate"
                },
                "compositionTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ComposableTemplate"
                    },
                    "minItems": 1,
                    "description": "Composition of senseSheetTemplate and/or senseImageTemplate templates."
                }
            }
        },
        "ReportStatus": {
            "type": "object",
            "example": {
                "status": "done",
                "results": [
                    {
                        "location": "https://qlikcloud.com:443/api/v1/temp-contents/619baab68023910001efcb86?inline=1",
                        "outputId": "output1"
                    }
                ],
                "statusLocation": "/reports/01562a37-23e3-4b43-865d-84c26122276c/status",
                "resolutionAttempts": 1
            },
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "enum": [
                        "queued",
                        "processing",
                        "done",
                        "failed",
                        "aborted",
                        "visiting",
                        "aborting"
                    ],
                    "type": "string",
                    "example": "processing",
                    "description": "Status of the requested report."
                },
                "reasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Reason"
                    },
                    "description": "Present when status is failed."
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Result"
                    },
                    "description": "Present when the status is \"done\"."
                },
                "statusLocation": {
                    "type": "string",
                    "format": "uri",
                    "example": "/reports/c86132d2-109e-47c5-bccc-83c5d3a40185/status",
                    "description": "Relative path to status location."
                },
                "resolutionAttempts": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "Count how many times the resolution of this report was attempted."
                }
            }
        },
        "Result": {
            "type": "object",
            "required": [
                "outputId",
                "location"
            ],
            "properties": {
                "location": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://t.eu.qlikcloud.com:443/api/v1/temp-contents/619b77be498fea00018de0e1?inline=1",
                    "description": "Location to download the generated report."
                },
                "outputId": {
                    "type": "string",
                    "example": "output1",
                    "description": "The output identifier which uniquely identifies an output (PDF, image etc.) within the same request."
                },
                "exportErrors": {
                    "$ref": "#/components/schemas/ExportErrors"
                }
            },
            "description": "Result and info about the generated report."
        },
        "ScrollPosition": {
            "type": "object",
            "x-go-type": {
                "type": "ScrollPosition",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qPos": {
                    "$ref": "#/components/schemas/Point"
                },
                "qUsePosition": {
                    "type": "boolean"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Selection": {
            "required": [
                "name",
                "values",
                "isNumeric"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 150000
                },
                "isNumeric": {
                    "type": "boolean"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SelectionChain": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/ChainableSelection"
            },
            "maxItems": 50,
            "minItems": 1,
            "description": "Array of ChainableSelection",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SelectionError": {
            "properties": {
                "detail": {
                    "type": "string",
                    "description": "Details about the field selection error."
                },
                "errorType": {
                    "enum": [
                        "fieldMissing",
                        "fieldValuesMissing",
                        "stateMissing"
                    ],
                    "type": "string"
                },
                "fieldName": {
                    "type": "string",
                    "example": "Year",
                    "description": "The field name that is missing."
                },
                "stateName": {
                    "type": "string",
                    "description": "The state name that is missing."
                },
                "missingValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QFieldValue"
                    }
                },
                "isFieldNameMissing": {
                    "type": "boolean",
                    "example": false,
                    "description": "Deprecated, use errorType instead. True if the fieldName is missing. The missingValues array is empty in this case",
                    "x-qlik-deprecated": true
                }
            },
            "description": "Selection error related to a fieldName. The field name is missing or some of his selection values are missing or a state is missing"
        },
        "SelectionErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/SelectionError"
            },
            "description": "Errors occurring in selections."
        },
        "SelectionFilter": {
            "properties": {
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Variable"
                    },
                    "maxItems": 1100
                },
                "patchesById": {
                    "type": "object",
                    "description": "A map for applying soft properties, aka patches, to specific visualization IDs within the sheet.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxPatch"
                        },
                        "maxItems": 100
                    }
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and Maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SelectionStrategy": {
            "enum": [
                "failOnErrors",
                "ignoreErrorsReturnDetails",
                "ignoreErrorsNoDetails"
            ],
            "type": "string",
            "default": "ignoreErrorsNoDetails"
        },
        "SenseDataTemplate": {
            "required": [
                "appId",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "QbtwdFg",
                    "description": "Sense visualization id. Visualizations created \"on the fly\" are not supported."
                },
                "appId": {
                    "type": "string"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NxPatch"
                    },
                    "maxItems": 100
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Variable"
                    },
                    "maxItems": 1100
                },
                "selectionType": {
                    "$ref": "#/components/schemas/SenseSelectionType"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "selectionStrategy": {
                    "$ref": "#/components/schemas/SelectionStrategy"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                },
                "temporaryBookmark": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmark"
                },
                "persistentBookmark": {
                    "$ref": "#/components/schemas/SensePersistentBookmark"
                },
                "temporaryBookmarkV2": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SenseExcelTemplate": {
            "required": [
                "templateLocation"
            ],
            "properties": {
                "jsOpts": {
                    "type": "object",
                    "description": "A JSON object that is passed as-is to the mashup page while rendering, this will be applied to all charts within the sheet. It includes properties of the whole sheet such as theme, gradient etc."
                },
                "jsOptsById": {
                    "type": "object",
                    "description": "A map for applying jsOpts to specific visualization IDs within the sheet.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A JSON object that is passed as-is to the mashup page while rendering."
                    }
                },
                "patchesById": {
                    "type": "object",
                    "description": "A map for applying soft properties, aka patches, to specific visualization IDs within the sheet.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxPatch"
                        },
                        "maxItems": 100
                    }
                },
                "selectionType": {
                    "$ref": "#/components/schemas/SenseSelectionType"
                },
                "selectionChain": {
                    "$ref": "#/components/schemas/SelectionChain"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "templateLocation": {
                    "$ref": "#/components/schemas/TemplateLocation"
                },
                "selectionStrategy": {
                    "$ref": "#/components/schemas/SelectionStrategy"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Deprecated. Use selectionChain. Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                },
                "temporaryBookmark": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmark"
                },
                "persistentBookmark": {
                    "$ref": "#/components/schemas/SensePersistentBookmark"
                },
                "temporaryBookmarkV2": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                },
                "selectionsByStateDef": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Deprecated. Use selectionChain. The definition ID referring to a selectionsByState definition declared in definitions."
                }
            },
            "description": "Used to export an excel template.",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SenseImageTemplate": {
            "required": [
                "appId",
                "visualization"
            ],
            "properties": {
                "appId": {
                    "type": "string"
                },
                "selectionType": {
                    "$ref": "#/components/schemas/SenseSelectionType"
                },
                "visualization": {
                    "$ref": "#/components/schemas/Visualization"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "selectionStrategy": {
                    "$ref": "#/components/schemas/SelectionStrategy"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                },
                "temporaryBookmark": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmark"
                },
                "persistentBookmark": {
                    "$ref": "#/components/schemas/SensePersistentBookmark"
                },
                "temporaryBookmarkV2": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                },
                "selectionsByStateDef": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The definition ID referring to a selectionsByState definition declared in definitions."
                }
            },
            "description": "Used to export a single visualization as pdf or png."
        },
        "SensePersistentBookmark": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "21edf789-0be4-4b94-a9e6-31456kl4e175",
                    "description": "Sense Persistence Bookmark id."
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SenseSelectionType": {
            "enum": [
                "selectionsByState",
                "temporaryBookmark",
                "persistentBookmark",
                "temporaryBookmarkV2"
            ],
            "type": "string",
            "default": "selectionsByState",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SenseSheetTemplate": {
            "required": [
                "appId",
                "sheet"
            ],
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                },
                "sheet": {
                    "$ref": "#/components/schemas/Sheet"
                },
                "selectionType": {
                    "$ref": "#/components/schemas/SenseSelectionType"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                },
                "selectionStrategy": {
                    "$ref": "#/components/schemas/SelectionStrategy"
                },
                "selectionsByState": {
                    "type": "object",
                    "description": "Map of selections to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QSelection"
                        },
                        "maxItems": 125
                    }
                },
                "temporaryBookmark": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmark"
                },
                "persistentBookmark": {
                    "$ref": "#/components/schemas/SensePersistentBookmark"
                },
                "temporaryBookmarkV2": {
                    "$ref": "#/components/schemas/SenseTemporaryBookmarkV2"
                },
                "selectionsByStateDef": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The definition ID referring to a selectionsByState definition declared in definitions."
                }
            },
            "description": "Used to export a sheet as pdf."
        },
        "SenseStoryTemplate": {
            "required": [
                "appId",
                "story"
            ],
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
                },
                "story": {
                    "$ref": "#/components/schemas/Story"
                },
                "reloadTimestamp": {
                    "type": "string",
                    "format": "RFC3339",
                    "description": "Reload time constraint. If reloadTimestamp is more recent than the one returned by Engine, the request will not go forward and an error is returned.",
                    "x-qlik-stability": "experimental",
                    "x-qlik-visibility": "private"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "SenseTemporaryBookmark": {
            "type": "object",
            "required": [
                "id"
            ],
            "deprecated": true,
            "properties": {
                "id": {
                    "type": "string",
                    "example": "21edf789-0be4-4b94-a9e6-31456kl4e175",
                    "description": "Sense Temporary Bookmark id."
                }
            },
            "description": "Deprecated. Use TemporaryBookmarkV2",
            "x-qlik-stability": "experimental",
            "x-qlik-deprecated": true,
            "x-qlik-visibility": "private"
        },
        "SenseTemporaryBookmarkV2": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "21edf789-0be4-4b94-a9e6-31456kl4e175",
                    "description": "Sense Temporary Bookmark id."
                }
            },
            "description": "The temporary bookmark to apply. Patches and Variables are ignored if passed to the API, because they already are applied in the backend.",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Sheet": {
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "75a5cf3c-18fb-405d-b03e-2d7912260872",
                    "description": "The id of the sheet."
                },
                "jsOpts": {
                    "type": "object",
                    "description": "A JSON object that is passed as-is to the mashup page while rendering, this will be applied to all charts within the sheet. It includes properties of the whole sheet such as theme, gradient etc."
                },
                "widthPx": {
                    "type": "number",
                    "format": "float",
                    "example": 800,
                    "maximum": 4000,
                    "minimum": 20,
                    "x-nullable": true,
                    "description": "The width of the sheet in pixels. Default value is: - 1680 pixels for responsive sheet - 1120 pixels for extended sheet - same width set in sheet properties for custom sheet"
                },
                "heightPx": {
                    "type": "number",
                    "format": "float",
                    "example": 1000,
                    "maximum": 4000,
                    "minimum": 20,
                    "x-nullable": true,
                    "description": "The height of the sheet in pixels. Default value is: - 1120 pixels for responsive sheet - 1680 pixels for extended sheet - same height set in sheet properties for custom sheet"
                },
                "jsOptsById": {
                    "type": "object",
                    "description": "A map for applying jsOpts to specific visualization IDs within the sheet.",
                    "additionalProperties": {
                        "type": "object",
                        "description": "A JSON object that is passed as-is to the mashup page while rendering."
                    }
                },
                "patchesById": {
                    "type": "object",
                    "description": "A map for applying soft properties, aka patches, to specific visualization IDs within the sheet.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NxPatch"
                        },
                        "maxItems": 100
                    }
                }
            },
            "description": "It refers to the Sense Sheet to be exported. Note that if widthPx and heightPx are not specified, default values will be applied depending on the actual size and layout properties of the Sense Sheet object."
        },
        "StanMessage": {
            "properties": {
                "payload": {
                    "type": "object",
                    "description": "The payload object included in the data field of the NATS message. Used in version \"2.0\" only.",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "The subject for the NATS streaming message. A default prefix with value \"reporting.\" is added to the subject if not present already."
                },
                "version": {
                    "enum": [
                        "1.0",
                        "2.0"
                    ],
                    "type": "string",
                    "default": "1.0",
                    "example": "2.0",
                    "description": "The eventTypeVersion of the callback NATS event. Supported versions are 1.0 and 2.0. Version 1.0 is deprecated."
                },
                "extensions": {
                    "type": "object",
                    "description": "The data field of the NATS message. Used in version \"1.0\", it is ignored in version \"2.0\".",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Story": {
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "Cbpvks",
                    "description": "The id of the story."
                },
                "jsOpts": {
                    "type": "object",
                    "description": "A JSON object that is passed as-is to the mashup page while rendering, this will be applied to all slide items."
                },
                "embeddedSheetWidthPx": {
                    "type": "number",
                    "format": "float",
                    "default": 1123,
                    "description": "The width of the embedded sheet in px, in play mode. If not specified the A4 width size is used as default."
                },
                "embeddedSheetHeightPx": {
                    "type": "number",
                    "format": "float",
                    "default": 794,
                    "description": "The height of the embedded sheet in px, in play mode. If not specified the A4 height size is used as default."
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "TemplateLocation": {
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string",
                    "example": "/temp/123",
                    "description": "resource location path."
                },
                "format": {
                    "enum": [
                        "url"
                    ],
                    "type": "string",
                    "default": "url"
                }
            },
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Variable": {
            "required": [
                "qName",
                "qNum",
                "qText"
            ],
            "x-go-type": {
                "type": "Variable",
                "import": {
                    "alias": "cModels",
                    "package": "github.com/qlik-trial/reporting-service/v9/pkg/models"
                }
            },
            "properties": {
                "qNum": {
                    "type": "number",
                    "format": "double",
                    "example": 20,
                    "description": "variable numeric value"
                },
                "qName": {
                    "type": "string",
                    "example": "variable1"
                },
                "qText": {
                    "type": "string",
                    "example": "Arizona",
                    "description": "variable string value"
                }
            },
            "description": "Variable that need to be created as session object to get data accordingly",
            "x-qlik-stability": "experimental",
            "x-qlik-visibility": "private"
        },
        "Visualization": {
            "required": [
                "id",
                "widthPx",
                "heightPx"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "QbtwdFg",
                    "description": "The sense visualization id or json definition."
                },
                "type": {
                    "enum": [
                        "visualization",
                        "sessionobject"
                    ],
                    "type": "string",
                    "example": "visualization",
                    "description": "Choose visualization to export an image of a sense chart, sessionobject for a visualization to be created on-the-fly. An empty value leads to the type being inferred by its id."
                },
                "jsOpts": {
                    "type": "object",
                    "description": "A JSON object that is passed as-is to the mashup page while rendering."
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NxPatch"
                    },
                    "maxItems": 100,
                    "description": "Soft properties, aka patches, to be applied to the visualization."
                },
                "widthPx": {
                    "type": "number",
                    "format": "float",
                    "example": 400,
                    "maximum": 4000,
                    "minimum": 5,
                    "description": "Width in pixels."
                },
                "heightPx": {
                    "type": "number",
                    "format": "float",
                    "example": 500,
                    "maximum": 4000,
                    "minimum": 5,
                    "description": "Height in pixels."
                }
            }
        },
        "CSPEntry": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/components/schemas/CSPEntryContent"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The CSP entry's unique identifier."
                }
            }
        },
        "CSPEntryContent": {
            "type": "object",
            "required": [
                "origin"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The name for this entry."
                },
                "imgSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources of images and favicons."
                },
                "origin": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "The origin that the CSP directives should be applied to."
                },
                "fontSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for loading fonts."
                },
                "childSrc": {
                    "type": "boolean",
                    "description": "Defines the valid sources for loading web workers and nested browsing contexts using elements such as frame and iFrame."
                },
                "frameSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for loading nested browsing contexts using elements such as frame and iFrame."
                },
                "mediaSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for loading media using the audio and video elements."
                },
                "styleSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for stylesheets."
                },
                "objectSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for the object, embed, and applet elements."
                },
                "scriptSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for JavaScript."
                },
                "workerSrc": {
                    "type": "boolean",
                    "description": "Specifies valid sources for Worker, SharedWorker, or ServiceWorker scripts."
                },
                "connectSrc": {
                    "type": "boolean",
                    "description": "Restricts the URLs that can be loaded using script interfaces."
                },
                "formAction": {
                    "type": "boolean",
                    "description": "Allow forms to be submitted to the origin."
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the CSP entry was created."
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The reason for adding this origin to the Content Security Policy."
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the CSP entry was last modified."
                },
                "connectSrcWSS": {
                    "type": "boolean",
                    "description": "Restricts the URLs that can be connected to websockets (all sources will be prefixed with 'wss://')."
                },
                "frameAncestors": {
                    "type": "boolean",
                    "description": "Specifies valid sources for embedding the resource using frame, iFrame, object, embed and applet."
                }
            }
        },
        "CSPEntryList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/CSPEntry"
                    }
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            }
        },
        "CSPHeader": {
            "type": "object",
            "properties": {
                "Content-Security-Policy": {
                    "type": "string",
                    "description": "The compiled CSP header."
                }
            }
        },
        "AppMetadata": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "space_id": {
                    "type": "string"
                },
                "space_name": {
                    "type": "string"
                },
                "space_type": {
                    "type": "string"
                },
                "limited_access": {
                    "type": "boolean"
                },
                "last_reload_date": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "description": "Metadata for app"
        },
        "ConversationalResponsePart": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "infoType": {
                    "type": "string"
                },
                "sentence": {
                    "properties": {
                        "text": {
                            "type": "string"
                        }
                    }
                },
                "narrative": {
                    "$ref": "#/components/schemas/NarrativeResponse"
                },
                "infoValues": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/QlikApp"
                                }
                            }
                        ]
                    }
                },
                "errorMessage": {
                    "type": "string"
                },
                "followupSentence": {
                    "type": "string"
                },
                "renderVisualization": {
                    "$ref": "#/components/schemas/RenderVisualization"
                }
            },
            "x-qlik-visibility": "public"
        },
        "NarrativeResponse": {
            "properties": {
                "text": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "NLMetricRecommendation": {
            "type": "object",
            "properties": {
                "dims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dimension(s) considered for recommendation"
                },
                "msrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Measure(s) considered for recommendation"
                },
                "analysis": {
                    "$ref": "#/components/schemas/Analysis"
                },
                "chartType": {
                    "$ref": "#/components/schemas/ChartType"
                },
                "relevance": {
                    "type": "number"
                },
                "analysisGroup": {
                    "$ref": "#/components/schemas/AnalysisGroup"
                }
            },
            "description": "Visualisation recommendation specs for the query"
        },
        "NLMetricRecord": {
            "type": "object",
            "required": [
                "id",
                "createdAt",
                "updatedAt",
                "appId",
                "questionId",
                "version"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique record id stored in database"
                },
                "apps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AppMetadata"
                    }
                },
                "lang": {
                    "type": "string",
                    "description": "language selected for query from insight advisor or insight advisor chat or third party api"
                },
                "appId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Qlik sense app id that is being used to answer the question"
                },
                "appName": {
                    "type": "string",
                    "description": "Qlik sense app name that is being used to answer the question"
                },
                "nluInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PartialNluInfo"
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the metric model"
                },
                "feedback": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RecFeedback"
                    }
                },
                "tenantId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Qlik sense tenant Id"
                },
                "channelId": {
                    "type": "string",
                    "description": "Source from which conversation is happening"
                },
                "chartType": {
                    "type": "string",
                    "description": "Chart type for given query. For insight advisor it would be 'native' and for insight advisor chat, it could be 'static' or 'responsive'"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Record created date",
                    "x-qlik-filterable": true
                },
                "createdBy": {
                    "type": "string",
                    "description": "Qlik sense user id who is interacting with insight advisor or insight advisor chat or third party api"
                },
                "queryText": {
                    "type": "string",
                    "description": "Query asked by user in insight advisor or insight advisor or third party api"
                },
                "queryType": {
                    "enum": [
                        "appList",
                        "appSuggested",
                        "dimensionList",
                        "exploreThisFurther",
                        "followup",
                        "greetings",
                        "measureList",
                        "query",
                        "sampleQuestion"
                    ],
                    "type": "string",
                    "description": "Nature of query being asked during the conversation e.g. query, applist, measurelist, dimensionlist"
                },
                "responses": {
                    "$ref": "#/components/schemas/NLResponses"
                },
                "stopWords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tokens from question parsed which are ignored"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Record modified date",
                    "x-qlik-filterable": true
                },
                "queryError": {
                    "type": "boolean",
                    "default": false
                },
                "questionId": {
                    "type": "string",
                    "description": "Unique id assigned to user query"
                },
                "queryOrigin": {
                    "enum": [
                        "askQuestion",
                        "iaAnalysis",
                        "iaAssetsPanel"
                    ],
                    "type": "string",
                    "default": "askQuestion",
                    "description": "Refers to source from where narrative request is called"
                },
                "recommendations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NLMetricRecommendation"
                    }
                },
                "isContextualQuery": {
                    "type": "boolean",
                    "default": false,
                    "description": "Boolean value indicates whether given query is contextual or not. It would be false for insight advisor"
                },
                "unmatchedEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tokens parsed as entities but not matched with app's field/dimension/measure"
                }
            }
        },
        "NLMetricsRequest": {
            "required": [
                "filter"
            ],
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2) for the syntax.\n\nFilter on createdAt and updatedAt fields are encouraged and support `eq`, `ne`, `gt`, `ge`, `lt`, `le` comparison operators along with `and` and `or` logical operators.\n\nFilter on tenantId field is not supported.\n\n`co`, `sw` and `ew` operators are not supported.\n\nExamples:\n```\nappId eq \"appId1\"\n```\n```\n(appId eq \"appId1\" or appId eq \"appId2\")\n```\n```\n(appId eq \"appId1\" or appId eq \"appId2\") and (createdAt gt \"2022-08-03T00:00:00.000Z\" and createdAt lt \"2022-08-04T00:00:00.000Z\")\n```\n\n```\n(appId eq \"appId1\") and (createdAt ge \"2022-08-03T00:00:00.000Z\")\n```\n\n```\n(appId eq \"appId1\") and (createdAt le \"2022-08-23:59:59.000Z\")\n```\n\n```\n(appId eq \"appId1\") and (questionId eq \"12345\")\n```\n"
                }
            }
        },
        "NLMetricsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NLMetricRecord"
                    }
                },
                "meta": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "total"
                    ],
                    "properties": {
                        "total": {
                            "type": "integer",
                            "description": "The total number of metrics matching the current filter."
                        }
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "NLResponses": {
            "type": "object",
            "properties": {
                "hasChart": {
                    "type": "boolean",
                    "description": "Chart was provided"
                },
                "hasInsights": {
                    "type": "boolean",
                    "description": "Narrative was provided"
                },
                "hasSuggestions": {
                    "type": "boolean",
                    "description": "Suggestion questions was provided"
                },
                "hasMetadataApps": {
                    "type": "boolean",
                    "description": "App list was provided"
                },
                "hasSampleQueries": {
                    "type": "boolean",
                    "description": "Sample questions was provided"
                },
                "hasMetadataMeasures": {
                    "type": "boolean",
                    "description": "Measures list was provided"
                },
                "hasMetadataDimensions": {
                    "type": "boolean",
                    "description": "Dimensions list was provided"
                }
            },
            "description": "Provides info what was included in response for given query"
        },
        "NluInfo": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NluInfoElements"
                    }
                }
            },
            "x-qlik-visibility": "public"
        },
        "NluInfoElements": {
            "properties": {
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "entity": {
                    "type": "boolean"
                },
                "isFilter": {
                    "type": "boolean"
                },
                "typeName": {
                    "type": "string"
                },
                "errorText": {
                    "type": "string"
                },
                "filterText": {
                    "type": "string"
                },
                "typeTranslated": {
                    "type": "string"
                },
                "filterFieldName": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "QlikApp": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "QueryCreate": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "app": {
                    "$ref": "#/components/schemas/QlikApp"
                },
                "lang": {
                    "type": "string",
                    "description": "The language to assume when parsing, specified as an ISO-639-1 code.\nDefaults to 'en' (English).\n"
                },
                "text": {
                    "type": "string",
                    "description": "The sentence that will be parsed."
                },
                "disableFollowups": {
                    "type": "boolean",
                    "default": false,
                    "description": "The flag specifies whether to disable follow-up recommendations."
                },
                "disableNarrative": {
                    "type": "boolean",
                    "default": false,
                    "description": "Flag that specifies whether the narratives should be generated for the user query or not."
                },
                "recommendationId": {
                    "type": "string",
                    "description": "property that contains the Id of the recommendation for which the response should be generated."
                },
                "clearEntityContext": {
                    "type": "boolean",
                    "default": false,
                    "description": "Flag that clears the entity context."
                },
                "visualizationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify visualizationTypes for only which visualization object should be provided if enableVisualizations is set to true. For eg. ['linechart', 'barchart']"
                },
                "enableVisualizations": {
                    "type": "boolean",
                    "default": false,
                    "description": "Flag that specifies whether visualization object should be provided or not."
                },
                "disableConversationContext": {
                    "type": "boolean",
                    "default": false,
                    "description": "Flag that specifies either to enable converastion context."
                }
            },
            "x-qlik-visibility": "public"
        },
        "QueryCreated": {
            "type": "object",
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QlikApp"
                    }
                },
                "nluInfo": {
                    "$ref": "#/components/schemas/NluInfo"
                },
                "conversationalResponse": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QueryResponse"
                    },
                    "description": "A list of conversational responses."
                }
            },
            "description": "The attributes of sentences.",
            "x-qlik-visibility": "public"
        },
        "QueryNotCreated": {
            "type": "object",
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QlikApp"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Error"
                    }
                },
                "nluInfo": {
                    "$ref": "#/components/schemas/NluInfo"
                },
                "conversationalResponse": {
                    "$ref": "#/components/schemas/QueryResponse"
                }
            },
            "x-qlik-visibility": "public"
        },
        "QueryResponse": {
            "type": "object",
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/QlikApp"
                    }
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ConversationalResponsePart"
                    }
                },
                "contextInfo": {
                    "type": "string",
                    "description": "For contextual responses, this string contains a list of entities that are used to produce the response."
                },
                "drillDownURI": {
                    "type": "string",
                    "description": "The URL with the query injected to insight advisor of the app to which the query belongs."
                },
                "sentenceWithMatches": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "RecFeedback": {
            "type": "object",
            "required": [
                "recommendationAddedToSheet",
                "recommendationAddedToHub",
                "recommendationDisliked",
                "recommendationLiked"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "chartType": {
                    "type": "string"
                },
                "analysisType": {
                    "type": "string"
                },
                "recommendationLiked": {
                    "type": "boolean"
                },
                "recommendationDisliked": {
                    "type": "boolean"
                },
                "recommendationAddedToHub": {
                    "type": "boolean"
                },
                "recommendationAddedToSheet": {
                    "type": "boolean"
                }
            },
            "description": "Any feedback from the user about a given recommendation"
        },
        "RenderVisualization": {
            "properties": {
                "data": {
                    "type": "object",
                    "description": "Data object should be used to render visualization"
                },
                "language": {
                    "type": "string"
                }
            },
            "x-qlik-visibility": "public"
        },
        "bundleMeta": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the bundle."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the bundle."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the bundle."
                }
            },
            "description": "Object containing meta data regarding the bundle the extension belongs to. If it does not belong to a bundle, this object is not defined."
        },
        "extension": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "readOnly": true
                },
                "file": {
                    "type": "object",
                    "description": "The file that was uploaded with the extension."
                },
                "icon": {
                    "type": "string",
                    "description": "Icon to show in the client."
                },
                "name": {
                    "type": "string",
                    "description": "The display name of this extension."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags."
                },
                "type": {
                    "type": "string",
                    "description": "The type of this extension (visualization, etc.)."
                },
                "author": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Author of the extension."
                },
                "bundle": {
                    "$ref": "#/components/schemas/bundleMeta"
                },
                "userId": {
                    "type": "string",
                    "readOnly": true
                },
                "bundled": {
                    "type": "boolean",
                    "description": "If the extension is part of an extension bundle."
                },
                "license": {
                    "type": "string",
                    "description": "Under which license this extension is published."
                },
                "preview": {
                    "type": "string",
                    "description": "Path to an image that enables users to preview the extension."
                },
                "version": {
                    "type": "string",
                    "description": "Version of the extension."
                },
                "checksum": {
                    "type": "string",
                    "description": "Checksum of the extension contents."
                },
                "homepage": {
                    "type": "string",
                    "description": "Home page of the extension."
                },
                "keywords": {
                    "type": "string",
                    "description": "Keywords for the extension."
                },
                "loadpath": {
                    "type": "string",
                    "description": "Relative path to the extension's entry file, defaults to `filename` from the qext file."
                },
                "supplier": {
                    "type": "string",
                    "description": "Supplier of the extension."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true
                },
                "updateAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "supernova": {
                    "type": "boolean",
                    "description": "If the extension is a supernova extension or not."
                },
                "deprecated": {
                    "type": "string",
                    "format": "date",
                    "description": "A date noting when the extension was deprecated."
                },
                "repository": {
                    "type": "string",
                    "description": "Link to the extension source code."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the extension."
                },
                "qextVersion": {
                    "type": "string",
                    "description": "The version from the qext file that was uploaded with this extension."
                },
                "dependencies": {
                    "type": "object",
                    "description": "Map of dependencies describing version of the component it requires."
                },
                "qextFilename": {
                    "type": "string",
                    "description": "The name of the qext file that was uploaded with this extension."
                }
            },
            "description": "The extension model."
        },
        "extensions": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/extension"
                    }
                }
            }
        },
        "meta": {
            "type": "object",
            "properties": {
                "fault": {
                    "type": "boolean",
                    "description": "Is the error a server-side fault?"
                },
                "explain": {
                    "type": "object",
                    "description": "Further explanation of the error"
                },
                "timeout": {
                    "type": "boolean",
                    "description": "Is the error a timeout?"
                },
                "temporary": {
                    "type": "boolean",
                    "description": "Is the error temporary?"
                }
            }
        },
        "theme": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "readOnly": true
                },
                "file": {
                    "type": "object",
                    "description": "The file that was uploaded with the theme."
                },
                "icon": {
                    "type": "string",
                    "description": "Icon to show in the client."
                },
                "name": {
                    "type": "string",
                    "description": "The display name of this theme."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags."
                },
                "type": {
                    "type": "string",
                    "description": "The type of this theme (visualization, etc.)."
                },
                "author": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Author of the theme."
                },
                "userId": {
                    "type": "string",
                    "readOnly": true
                },
                "license": {
                    "type": "string",
                    "description": "Under which license this theme is published."
                },
                "version": {
                    "type": "string",
                    "description": "Version of the theme."
                },
                "homepage": {
                    "type": "string",
                    "description": "Home page of the theme."
                },
                "keywords": {
                    "type": "string",
                    "description": "Keywords for the theme."
                },
                "supplier": {
                    "type": "string",
                    "description": "Supplier of the theme."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true
                },
                "updateAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "repository": {
                    "type": "string",
                    "description": "Link to the theme source code."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the theme."
                },
                "qextVersion": {
                    "type": "string",
                    "description": "The version from the qext file that was uploaded with this extension."
                },
                "dependencies": {
                    "type": "object",
                    "description": "Map of dependencies describing version of the component it requires."
                },
                "qextFilename": {
                    "type": "string",
                    "description": "The name of the qext file that was uploaded with this theme."
                }
            },
            "description": "The theme model."
        },
        "themes": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/theme"
                    }
                }
            }
        },
        "EventExtensions": {
            "type": "object",
            "title": "Additional metadata and custom fields.",
            "properties": {
                "actor": {
                    "type": "object",
                    "properties": {
                        "sub": {
                            "type": "string",
                            "description": "Opaque value identifying impersonating entity."
                        },
                        "subType": {
                            "type": "string",
                            "description": "The type of the impersonating entity."
                        }
                    },
                    "description": "Specifies the entity performing the action on behalf of another party listed as triggering the action."
                },
                "ownerId": {
                    "type": "string",
                    "description": "Id of the owner of the resource affected by the eventContext."
                },
                "spaceId": {
                    "type": "string",
                    "description": "Id of the space related to the action performed on the eventContext."
                },
                "updates": {
                    "x-qlik-pii": true,
                    "description": "Might be present if the action is of type \"updated\" and should contain information about the changes made to the resource."
                },
                "topLevelResourceId": {
                    "type": "string",
                    "description": "If the event originated from a sub resource the topLevelResourceId contains the id of the top level resource associated with the sub resource."
                }
            },
            "description": "The availability of the properties depends on the event and the context it was triggered in."
        },
        "GetArchiveResult": {
            "type": "object",
            "title": "GetArchiveResult is the result type of the audit service GetArchive method.",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "x-qlik-pii": true,
                    "description": "List of archived events. The structure of the events depend on their type and version."
                }
            }
        },
        "GetByIDResult": {
            "type": "object",
            "title": "GetByIDResult is the result type of the audit service GetByID method.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The resource item's unique identifier."
                },
                "data": {
                    "type": "object",
                    "x-qlik-pii": true,
                    "description": "Additional information about the event's details. The structure depends on the type and version of the event."
                },
                "links": {
                    "$ref": "#/components/schemas/GetLinks"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the event message, usually the producing service."
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user who performed the action that triggered the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The event's unique identifier."
                },
                "tenantId": {
                    "type": "string",
                    "description": "The ID of the tenant that owns the item. This is populated using the JWT."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the event happened."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of event that describes committed action."
                },
                "extensions": {
                    "$ref": "#/components/schemas/EventExtensions"
                },
                "contentType": {
                    "type": "string",
                    "description": "The type that content is encoded in, always \"application/json\"."
                },
                "eventTypeVersion": {
                    "type": "string",
                    "description": "The version of the event type."
                }
            }
        },
        "GetLinks": {
            "type": "object",
            "title": "GetLinks are the HAL links for a single result.",
            "properties": {
                "Self": {
                    "$ref": "#/components/schemas/Href"
                },
                "self": {
                    "$ref": "#/components/schemas/href"
                }
            }
        },
        "GetObjectsResult": {
            "type": "object",
            "title": "GetObjectsResult is the result type of audit service generic resources.",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of requested resources."
                },
                "links": {
                    "$ref": "#/components/schemas/ListLinks"
                }
            }
        },
        "GetResult": {
            "type": "object",
            "title": "GetResult is the result type of the audit service Get method.",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/GetByIDResult"
                    },
                    "description": "List of audit items."
                },
                "links": {
                    "$ref": "#/components/schemas/ListLinks"
                }
            }
        },
        "GetSettingsResult": {
            "type": "object",
            "title": "GetSettingsResult is the result type of a getSettings request.",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "EventTTL": {
                            "type": "integer",
                            "description": "The events TTL in seconds."
                        },
                        "ArchiveEnabled": {
                            "type": "boolean",
                            "description": "Is Long Term Storage archiving enabled?."
                        }
                    },
                    "description": "Server configuration options."
                }
            }
        },
        "ListLinks": {
            "type": "object",
            "properties": {
                "next": {
                    "$ref": "#/components/schemas/Page"
                },
                "prev": {
                    "$ref": "#/components/schemas/Page"
                },
                "self": {
                    "$ref": "#/components/schemas/Self"
                }
            }
        },
        "Brand": {
            "type": "object",
            "required": [
                "id",
                "name",
                "description",
                "files"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/BrandFile"
                    },
                    "description": "Collection of resources that make up the brand."
                },
                "active": {
                    "type": "boolean",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the brand was created."
                },
                "createdBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "ID of a user that created the brand."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the brand was last updated."
                },
                "updatedBy": {
                    "type": "string",
                    "readOnly": true,
                    "description": "ID of a user that last updated the brand."
                },
                "description": {
                    "type": "string"
                }
            },
            "description": "A brand is a collection of assets for applying custom branding. Only a single brand can be active in a tenant."
        },
        "BrandFile": {
            "type": "object",
            "properties": {
                "id": {
                    "enum": [
                        "logo",
                        "favIcon",
                        "styles"
                    ],
                    "type": "string"
                },
                "eTag": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                }
            },
            "description": "Represents one of the assets used as part of the brand. These include logos, favicons, and some styles."
        },
        "BrandPatch": {
            "type": "object",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/name",
                        "/description"
                    ],
                    "type": "string",
                    "example": "/description",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "string",
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "BrandsList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Brand"
                    }
                },
                "links": {
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "description": "A collection of brands."
        },
        "ErrorResponse400": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-400"
                            },
                            "title": {
                                "type": "string",
                                "example": "Bad request"
                            },
                            "detail": {
                                "type": "string",
                                "example": "The request is incorrect."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "ErrorResponse401": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-401"
                            },
                            "title": {
                                "type": "string",
                                "example": "Unauthorized"
                            },
                            "detail": {
                                "type": "string",
                                "example": "The user is not authorized to access the service."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "ErrorResponse403": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-403"
                            },
                            "title": {
                                "type": "string",
                                "example": "Forbidden"
                            },
                            "detail": {
                                "type": "string",
                                "example": "You don't have sufficient permissions to access this resource."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "ErrorResponse404": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-404"
                            },
                            "title": {
                                "type": "string",
                                "example": "Not found"
                            },
                            "detail": {
                                "type": "string",
                                "example": "The resource was not found."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "ErrorResponse500": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-500"
                            },
                            "title": {
                                "type": "string",
                                "example": "Internal Server Error"
                            },
                            "detail": {
                                "type": "string",
                                "example": "Something went wrong in the server."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "NoActiveBrand": {
            "type": "object",
            "description": "Empty object inferring lack of active branding."
        },
        "collectionLinksResponseBody": {
            "type": "object",
            "properties": {
                "self": {
                    "$ref": "#/components/schemas/Link"
                },
                "items": {
                    "$ref": "#/components/schemas/Link"
                }
            }
        },
        "collectionMetaResponseBody": {
            "type": "object",
            "properties": {
                "items": {
                    "$ref": "#/components/schemas/itemsResultResponseBody"
                }
            },
            "description": "Collection metadata and computed fields."
        },
        "collectionResultResponseBody": {
            "type": "object",
            "required": [
                "id",
                "name",
                "type",
                "createdAt",
                "updatedAt",
                "tenantId",
                "links",
                "itemCount"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The collection's unique identifier."
                },
                "full": {
                    "type": "boolean",
                    "description": "States if a collection has reached its items limit or not"
                },
                "meta": {
                    "$ref": "#/components/schemas/collectionMetaResponseBody"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "type": {
                    "enum": [
                        "private",
                        "public",
                        "favorite",
                        "publicgoverned"
                    ],
                    "type": "string"
                },
                "links": {
                    "$ref": "#/components/schemas/collectionLinksResponseBody"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The ID of the tenant that owns the collection. This property is populated by using JWT."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the collection was created."
                },
                "creatorId": {
                    "type": "string",
                    "description": "The ID of the user who created the collection. This property is only populated if the JWT contains a userId."
                },
                "itemCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of items that have been added to the collection that the user has access to."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the collection was last updated."
                },
                "updaterId": {
                    "type": "string",
                    "description": "The ID of the user who last updated the collection. This property is only populated if the JWT contains a userId."
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A collection."
        },
        "CollectionsAddCollectionItemRequestBody": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The item's unique identifier."
                }
            }
        },
        "CollectionsCreateCollectionRequestBody": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "type": {
                    "$ref": "#/components/schemas/CollectionTypes"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "collectionsLinksResponseBody": {
            "type": "object",
            "properties": {
                "item": {
                    "$ref": "#/components/schemas/Link"
                },
                "next": {
                    "$ref": "#/components/schemas/Link"
                },
                "prev": {
                    "$ref": "#/components/schemas/Link"
                },
                "self": {
                    "$ref": "#/components/schemas/Link"
                }
            }
        },
        "CollectionsListCollectionItemsResponseBody": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemResultResponseBody"
                    }
                }
            },
            "description": "ListCollectionItemsResponseBody result type"
        },
        "CollectionsListCollectionsResponseBody": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/collectionResultResponseBody"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/collectionsLinksResponseBody"
                }
            },
            "description": "ListCollectionsResponseBody result type"
        },
        "CollectionsUpdateCollectionRequestBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "CollectionTypes": {
            "enum": [
                "private",
                "public",
                "publicgoverned"
            ],
            "type": "string"
        },
        "ErrorResponseBody": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ServiceError"
                    }
                }
            }
        },
        "itemLinksResponseBody": {
            "type": "object",
            "properties": {
                "open": {
                    "$ref": "#/components/schemas/Link"
                },
                "self": {
                    "$ref": "#/components/schemas/Link"
                },
                "thumbnail": {
                    "$ref": "#/components/schemas/Link"
                },
                "collections": {
                    "$ref": "#/components/schemas/Link"
                }
            }
        },
        "itemMetaResponseBody": {
            "type": "object",
            "required": [
                "isFavorited",
                "actions",
                "tags",
                "collections"
            ],
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemTagResponseBody"
                    },
                    "description": "An array of tags that the item is part of.",
                    "x-qlik-customer-data": true
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions that the user can perform on the item."
                },
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemTagResponseBody"
                    },
                    "description": "An array of collections that the item is part of."
                },
                "isFavorited": {
                    "type": "boolean",
                    "description": "The flag that indicates if item is in the user's favorites collection."
                }
            },
            "description": "Item metadata and computed fields."
        },
        "itemResourceTypeEnum": {
            "enum": [
                "app",
                "collection",
                "qlikview",
                "insight",
                "qvapp",
                "genericlink",
                "sharingservicetask",
                "note",
                "dataasset",
                "dataset",
                "automation",
                "automl-experiment",
                "automl-deployment"
            ],
            "type": "string",
            "description": "The case-sensitive string defining the item's type."
        },
        "itemResultResponseBody": {
            "type": "object",
            "required": [
                "id",
                "name",
                "tenantId",
                "createdAt",
                "updatedAt",
                "isFavorited",
                "links",
                "resourceType",
                "resourceCreatedAt",
                "resourceUpdatedAt",
                "actions",
                "collectionIds",
                "resourceAttributes",
                "resourceCustomAttributes",
                "meta"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The item's unique identifier."
                },
                "meta": {
                    "$ref": "#/components/schemas/itemMetaResponseBody"
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "x-qlik-customer-data": true
                },
                "links": {
                    "$ref": "#/components/schemas/itemLinksResponseBody"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions that the user can perform on the item."
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the user who owns the item."
                },
                "spaceId": {
                    "type": "string",
                    "description": "The space's unique identifier."
                },
                "tenantId": {
                    "type": "string",
                    "description": "The ID of the tenant that owns the item. This is populated using the JWT."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the item was created."
                },
                "creatorId": {
                    "type": "string",
                    "description": "The ID of the user who created the item. This is only populated if the JWT contains a userId."
                },
                "itemViews": {
                    "$ref": "#/components/schemas/itemViewsResponseBody"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the item was last updated."
                },
                "updaterId": {
                    "type": "string",
                    "description": "ID of the user who last updated the item. This is only populated if the JWT contains a userId."
                },
                "resourceId": {
                    "type": "string",
                    "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "isFavorited": {
                    "type": "boolean",
                    "description": "The flag that indicates if item is in the user's favorites collection."
                },
                "thumbnailId": {
                    "type": "string",
                    "description": "The item thumbnail's unique identifier. This is optional for internal resources."
                },
                "resourceLink": {
                    "type": "string",
                    "format": "uri",
                    "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                },
                "resourceSize": {
                    "$ref": "#/components/schemas/itemsResourceSizeResponseBody"
                },
                "resourceType": {
                    "$ref": "#/components/schemas/itemResourceTypeEnum"
                },
                "collectionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the collections that the item has been added to."
                },
                "resourceSubType": {
                    "type": "string",
                    "description": "Optional field defining the item's subtype, if any."
                },
                "resourceCreatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the resource that the item references was created."
                },
                "resourceUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the resource that the item references was last updated."
                },
                "resourceAttributes": {
                    "type": "object",
                    "x-qlik-pii": true,
                    "additionalProperties": true,
                    "x-qlik-customer-data": true
                },
                "resourceReloadStatus": {
                    "type": "string",
                    "description": "If the resource last reload was successful or not."
                },
                "resourceReloadEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the resource last reload ended."
                },
                "resourceCustomAttributes": {
                    "type": "object",
                    "additionalProperties": true,
                    "x-qlik-customer-data": true
                }
            },
            "description": "An item."
        },
        "itemsLinksResponseBody": {
            "type": "object",
            "properties": {
                "next": {
                    "$ref": "#/components/schemas/Link"
                },
                "prev": {
                    "$ref": "#/components/schemas/Link"
                },
                "self": {
                    "$ref": "#/components/schemas/Link"
                },
                "collection": {
                    "$ref": "#/components/schemas/Link"
                }
            }
        },
        "itemsResourceSizeResponseBody": {
            "type": "object",
            "properties": {
                "appFile": {
                    "type": "number",
                    "description": "Size of the app on disk in bytes."
                },
                "appMemory": {
                    "type": "number",
                    "description": "Size of the app in memory in bytes."
                }
            }
        },
        "itemsResultResponseBody": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemResultResponseBody"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/itemsLinksResponseBody"
                }
            },
            "description": "Multiple items."
        },
        "itemTagResponseBody": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the tag/collection."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag/collection.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "Holds basic information about a tag or collection."
        },
        "itemViewsResponseBody": {
            "type": "object",
            "properties": {
                "week": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemViewsWeeksResponseBody"
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "Total number of views the resource got during the last 28 days."
                },
                "trend": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": -1,
                    "description": "Trend in views over the last 4 weeks."
                },
                "unique": {
                    "type": "integer",
                    "description": "Number of unique users who viewed the resource during the last 28 days."
                },
                "usedBy": {
                    "type": "integer",
                    "description": "Number of apps this dataset is used in (datasets only)."
                }
            }
        },
        "itemViewsWeeksResponseBody": {
            "type": "object",
            "properties": {
                "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime representing the start of the referenced week."
                },
                "total": {
                    "type": "integer",
                    "description": "Total number of views the resource got during the referenced week."
                },
                "unique": {
                    "type": "integer",
                    "description": "Number of unique users who viewed the resource during the referenced week."
                }
            }
        },
        "ServiceError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code is a unique identifier for this error class."
                },
                "meta": {
                    "$ref": "#/components/schemas/meta"
                },
                "title": {
                    "type": "string",
                    "description": "Title is the name of this class of errors."
                },
                "detail": {
                    "type": "string",
                    "description": "Detail is a human-readable explanation specific to this occurrence of the problem."
                }
            }
        },
        "Enforcement": {
            "type": "object",
            "properties": {
                "resourceType": {
                    "type": "string",
                    "description": "Resource type to be blocked"
                },
                "actionToBlock": {
                    "type": "string",
                    "description": "Resource action type to be blocked"
                }
            }
        },
        "ExecutionResponse": {
            "type": "object",
            "properties": {
                "unit": {
                    "type": "string",
                    "description": "Unit of measurement for the resource consumption",
                    "x-qlik-filterable": true
                },
                "scope": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "user",
                            "tenant",
                            "resourceId",
                            "resourceType",
                            "resourceAction"
                        ],
                        "type": "string",
                        "x-omitempty": false,
                        "x-qlik-filterable": true
                    },
                    "example": [
                        "tenant",
                        "resourceType"
                    ]
                },
                "userId": {
                    "type": "string",
                    "description": "The user id.",
                    "x-qlik-filterable": true
                },
                "blocked": {
                    "type": "boolean",
                    "format": "boolean",
                    "default": false,
                    "example": false,
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "overage": {
                    "type": "boolean",
                    "format": "boolean",
                    "default": false,
                    "example": false,
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "x-omitempty": true,
                        "x-qlik-filterable": false,
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "example": [
                        {
                            "QDI": 10
                        },
                        {
                            "APP": 10
                        }
                    ],
                    "x-omitempty": true
                },
                "taskName": {
                    "type": "string",
                    "example": "task_name",
                    "description": "The resource task name.",
                    "x-qlik-filterable": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id.",
                    "x-qlik-filterable": true
                },
                "periodEnd": {
                    "type": "string",
                    "example": "2022-01-31",
                    "description": "The end of the associated period.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "localUsage": {
                    "type": "number",
                    "format": "number",
                    "example": 20,
                    "description": "The local usage.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "periodType": {
                    "enum": [
                        "day",
                        "month",
                        "year",
                        ""
                    ],
                    "type": "string",
                    "example": "month",
                    "x-omitempty": true,
                    "x-qlik-filterable": true
                },
                "resourceId": {
                    "type": "string",
                    "example": "228ac375-086e-4652-b9c0-fa8689bac75f",
                    "description": "The resource id.",
                    "x-omitempty": true,
                    "x-qlik-filterable": true
                },
                "updateTime": {
                    "type": "string",
                    "description": "The RFC3339 timestamp when the resource was updated.",
                    "x-qlik-filterable": true
                },
                "enforcement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Enforcement"
                    },
                    "description": "Contains a list of resources that are blocked when quota for this is reached.",
                    "x-omitempty": true,
                    "x-qlik-filterable": true
                },
                "globalUsage": {
                    "type": "number",
                    "format": "number",
                    "example": 29,
                    "description": "The global usage.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "periodStart": {
                    "type": "string",
                    "example": "2022-01-01",
                    "description": "The start of the associated period.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "resourceType": {
                    "enum": [
                        "app",
                        "automations",
                        "space",
                        "data.volume.consumption"
                    ],
                    "type": "string",
                    "example": "app",
                    "description": "The resource type.",
                    "x-omitempty": true,
                    "x-qlik-filterable": true
                },
                "scopeMapping": {
                    "type": "string",
                    "description": "The map to the resource scope.",
                    "x-qlik-filterable": true
                },
                "capacityLimit": {
                    "type": "number",
                    "example": 50,
                    "description": "The capacity limit.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "closeToOverage": {
                    "type": "boolean",
                    "format": "boolean",
                    "default": false,
                    "example": false,
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "customerFacing": {
                    "type": "boolean",
                    "description": "The field to determine if a resource should be visible on the client.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "guardrailLimit": {
                    "type": "number",
                    "example": 20,
                    "description": "The guardrail limit.",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                },
                "resourceAction": {
                    "enum": [
                        "report.generated",
                        "reload",
                        "scheduledReload",
                        "executed",
                        "aggregation",
                        "import",
                        "updated",
                        "deployed"
                    ],
                    "type": "string",
                    "example": "reload",
                    "description": "The resource action.",
                    "x-omitempty": true,
                    "x-qlik-filterable": true
                },
                "taskDescription": {
                    "type": "string",
                    "example": "some description",
                    "description": "The resource task description.",
                    "x-qlik-filterable": true
                },
                "blockedEventTime": {
                    "type": "string",
                    "description": "RFC3339 timestamp when a block event was last emitted for this execution.",
                    "x-qlik-filterable": true
                },
                "overageEventTime": {
                    "type": "string",
                    "description": "RFC3339 timestamp when a overage event was last emitted for this execution.",
                    "x-qlik-filterable": true
                },
                "consumptionReportId": {
                    "type": "string",
                    "format": "uid",
                    "example": "01xQ1chLoHkOikyzUGcHJquteNrAfketW",
                    "description": "The id of the consumption report",
                    "x-omitempty": false,
                    "x-qlik-filterable": true
                }
            }
        },
        "ExecutionsByTenantList": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StandardListResponseProps"
                },
                {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ExecutionResponse"
                            }
                        },
                        "links": {
                            "$ref": "#/components/schemas/ListLinks"
                        },
                        "overage": {
                            "type": "boolean",
                            "example": false,
                            "x-omitempty": false
                        },
                        "closeToOverage": {
                            "type": "boolean",
                            "example": false,
                            "x-omitempty": false
                        },
                        "globalUsageAvailable": {
                            "type": "boolean",
                            "example": true,
                            "x-omitempty": false
                        }
                    }
                }
            ]
        },
        "Page": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string",
                    "example": "http://localhost:8787/v1/items?limit=12",
                    "description": "URL to particular set of elements"
                },
                "type": {
                    "enum": [
                        "prev",
                        "next"
                    ],
                    "type": "string",
                    "example": "next",
                    "description": "Page type, can be next or prev"
                },
                "token": {
                    "type": "string",
                    "example": "JwAAAAJfaWQAGQAAADVjZjUwM2NjMjVkYzlhMTM1MzYwZTVjZAAA",
                    "description": "Page unique token"
                }
            }
        },
        "Self": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string",
                    "example": "http://localhost:8787/v1/items/5da5825325dc9a0dd0260af9"
                }
            },
            "description": "Object with Href to a particular element or set of elements"
        },
        "StandardListResponseProps": {
            "type": "object",
            "required": [
                "currentPageCount",
                "totalCount"
            ],
            "properties": {
                "totalCount": {
                    "type": "integer",
                    "description": "total count of entries in the collection as a whole"
                },
                "currentPageCount": {
                    "type": "integer",
                    "description": "count of entries on the currently shown page"
                }
            },
            "description": "properties that should be added to every list response"
        },
        "AlertingActionsTriggerCreateRequest": {
            "type": "object",
            "required": [
                "alertingTaskID"
            ],
            "properties": {
                "alertingTaskID": {
                    "type": "string",
                    "example": "a1b2c3d4f5"
                }
            }
        },
        "AlertingActionsTriggerCreateResponse": {
            "type": "object",
            "properties": {
                "workflowID": {
                    "type": "string",
                    "example": "a1b2c3d4f5",
                    "description": "the workflow id created for the manual triggering of alert"
                }
            }
        },
        "AlertingConditionResponse": {
            "type": "object",
            "properties": {
                "hideSelections": {
                    "type": "boolean"
                },
                "conditionResponse": {
                    "type": "object",
                    "properties": {},
                    "description": "Should reference ConditionResponse type in condition-manager api docs"
                }
            }
        },
        "AlertingExecutionError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error code specific to sharing service."
                },
                "title": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error title."
                },
                "detail": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error cause."
                }
            }
        },
        "AlertingExecutionErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/AlertingExecutionError"
            }
        },
        "AlertingExecutionListResponse": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StandardListResponseProps"
                },
                {
                    "type": "object",
                    "properties": {
                        "links": {
                            "$ref": "#/components/schemas/ListLinks"
                        },
                        "executions": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AlertingExecutionResponse"
                            },
                            "description": "Gets a list of alerting-executions."
                        }
                    }
                }
            ]
        },
        "AlertingExecutionPersist": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Gets the execution identifier.",
                    "x-go-custom-tag": "bson:\"_id\""
                },
                "errors": {
                    "$ref": "#/components/schemas/AlertingExecutionErrors"
                },
                "result": {
                    "$ref": "#/components/schemas/AlertingExecutionResult"
                },
                "alertId": {
                    "type": "string",
                    "description": "ID for the alerting task that this execution references"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The owner that this execution belongs to"
                },
                "measures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Measures applied in the condition"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant that this execution belongs to"
                },
                "accessMode": {
                    "enum": [
                        "SOURCE_ACCESS",
                        "TARGET_ACCESS"
                    ],
                    "type": "string"
                },
                "bookmarkId": {
                    "type": "string",
                    "description": "Id of the bookmark associated with an alert"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dimensions applied in the condition"
                },
                "workflowId": {
                    "type": "string",
                    "description": "ID for the workflow, coming from eventing service"
                },
                "conditionId": {
                    "type": "string",
                    "description": "Id of the condition the alert is associated with"
                },
                "triggerTime": {
                    "type": "string",
                    "description": "Timestamp of execution start"
                },
                "evaluationId": {
                    "type": "string",
                    "description": "Id of the evaluation for the condition"
                },
                "executionType": {
                    "enum": [
                        "INDIVIDUAL",
                        "SHARED"
                    ],
                    "type": "string"
                },
                "conditionStatus": {
                    "enum": [
                        "FINISHED",
                        "FAILED"
                    ],
                    "type": "string"
                },
                "executionEvaluationStatus": {
                    "enum": [
                        "CONDITION_MET",
                        "CONDITION_NOT_MET",
                        "FAILED"
                    ],
                    "type": "string"
                }
            }
        },
        "AlertingExecutionResponse": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/AlertingExecutionPersist"
                },
                {
                    "type": "object",
                    "properties": {
                        "links": {
                            "$ref": "#/components/schemas/Links"
                        },
                        "evaluation": {
                            "$ref": "#/components/schemas/Evaluation"
                        }
                    }
                }
            ]
        },
        "AlertingExecutionResult": {
            "type": "object",
            "properties": {
                "alertTriggerStatus": {
                    "type": "string",
                    "example": "alertSent"
                },
                "throttlerTokensLeft": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "AlertingRecipientStats": {
            "type": "object",
            "required": [
                "enabled"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "userid"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "errors": {
                    "$ref": "#/components/schemas/AlertingRecipientStatsErrors"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "addedIndividually",
                        "group1",
                        "group2"
                    ],
                    "description": "A list of associated groups. If a user is added individually the \"addedIndividually\" pseudo group is included"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the recipient is enabled."
                },
                "lastScan": {
                    "type": "string",
                    "description": "last time a trigger was detected, but not sure if executed"
                },
                "subscribed": {
                    "type": "boolean",
                    "description": "Whether the recipient is subscribed."
                },
                "lastTrigger": {
                    "type": "string",
                    "description": "last time an execution had been created"
                },
                "conditionStatus": {
                    "enum": [
                        "OK",
                        "FAILED"
                    ],
                    "type": "string"
                }
            }
        },
        "AlertingRecipientStatsError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error code specific to sharing service."
                },
                "title": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error title."
                },
                "detail": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error cause."
                }
            }
        },
        "AlertingRecipientStatsErrors": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/AlertingRecipientStatsError"
            }
        },
        "AlertingRecipientStatsResponse": {
            "type": "object",
            "properties": {
                "recipientStats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AlertingRecipientStats"
                    }
                }
            }
        },
        "AlertingSettings": {
            "type": "object",
            "required": [
                "enable-data-alerting"
            ],
            "properties": {
                "tenantId": {
                    "type": "string",
                    "example": "cgdsAumGmQ6l0Bi7CUKt9V8P_Y9GL0sC",
                    "readOnly": true,
                    "description": "These persisted alerting settings are only available for this tenant. Extracted from request JWT."
                },
                "dataAlertsLimits": {
                    "type": "number",
                    "example": 50,
                    "readOnly": true,
                    "description": "Represents the number of data alerts limit to be consumed by the user either as an owner or recipient"
                },
                "dataAlertsConsumed": {
                    "type": "number",
                    "example": 40,
                    "readOnly": true,
                    "description": "Represents the number of data alerts consumed by the user either as an owner or recipient"
                },
                "enable-data-alerting": {
                    "type": "boolean",
                    "example": true,
                    "description": "true if data-alerting feature is enabled for this tenant. Enabling this feature also requires that the license has this feature enabled."
                },
                "data-alerting-license-status": {
                    "enum": [
                        "enabled",
                        "disabled"
                    ],
                    "type": "string",
                    "description": "Whether the license for the tenant has the data alerting feature enabled."
                },
                "max-recipients-in-target-access": {
                    "type": "integer",
                    "example": 100,
                    "readOnly": true,
                    "description": "The maximum number of recipients that can be present in an alerting task in TARGET_ACCESS mode. New recipients cannot be added when this limit is exceeded"
                },
                "data-alerting-feature-operation-status": {
                    "enum": [
                        "none",
                        "enabling",
                        "disabling"
                    ],
                    "type": "string",
                    "example": "disabling",
                    "readOnly": true,
                    "description": "This indicates that there is an ongoing operation to either disable or enable the data alerting feature. none means that no such operation is ongoing. enabling/disabling means that system is currently enabling/disabling the feature"
                },
                "data-alerting-feature-operation-status-change": {
                    "type": "string",
                    "example": "2020-09-02T13:44:33Z",
                    "readOnly": true,
                    "description": "UTC timestamp of the most recent change of data-alerting-feature-operation-status. If there has not been any such change, this is the timestamp of the initial creation of the record."
                }
            }
        },
        "AlertingSettingsUpload": {
            "type": "object",
            "required": [
                "enable-data-alerting"
            ],
            "properties": {
                "enable-data-alerting": {
                    "type": "boolean",
                    "example": true,
                    "description": "true if data-alerting feature is enabled. A status change could potentially result in a considerable amount of API operations to enable/disable triggers. Enabling this feature also requires that the license has this feature enabled."
                }
            }
        },
        "AlertingTaskCreateRequest": {
            "type": "object",
            "required": [
                "appId",
                "conditionId",
                "name",
                "recipients",
                "triggerType"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 78,
                    "description": "name associated to alerting task"
                },
                "appId": {
                    "type": "string",
                    "description": "appId associated to this alert definition"
                },
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "if the alerting task is enabled"
                },
                "sheetId": {
                    "type": "string",
                    "description": "sheetId associated to this alert definition"
                },
                "bookmarkId": {
                    "type": "string",
                    "description": "bookmarkId associated to this alert definition"
                },
                "recipients": {
                    "$ref": "#/components/schemas/Recipients"
                },
                "throttling": {
                    "$ref": "#/components/schemas/ThrottlingResource"
                },
                "conditionId": {
                    "type": "string",
                    "description": "the id of the condition that determines if this data alert should be triggered"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "description associated to alerting task"
                },
                "triggerType": {
                    "enum": [
                        "RELOAD",
                        "SCHEDULED"
                    ],
                    "type": "string",
                    "description": "Type of job that triggered the task"
                },
                "scheduleOptions": {
                    "$ref": "#/components/schemas/ScheduleOptions"
                }
            },
            "description": "a alerting task (a definition on an alert)"
        },
        "AlertingTaskError": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the error"
                },
                "value": {
                    "enum": [
                        "OWNER_DISABLED",
                        "OWNER_ACCESS",
                        "OWNER_LICENSE",
                        "APP_DELETED",
                        "NO_RECIPIENTS",
                        "PARTIAL_ACCESS",
                        "EVAL_ERROR",
                        "ORPHAN",
                        "CONVERSION_DENIED",
                        "EXPIRED",
                        "PARTIAL_SENT",
                        "QUOTA_REACHED"
                    ],
                    "type": "string",
                    "description": "Identifier for type of error occurring on alerting task"
                }
            }
        },
        "AlertingTaskExecutionStats": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StandardListResponseProps"
                },
                {
                    "type": "object",
                    "properties": {
                        "links": {
                            "$ref": "#/components/schemas/ListLinks"
                        },
                        "executionsStats": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ExecutionStats"
                            }
                        }
                    }
                }
            ],
            "x-qlik-deprecated": true
        },
        "AlertingTaskGroupRecipientError": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the error"
                },
                "value": {
                    "enum": [
                        "GROUP_IS_DISABLED",
                        "MAX_ALERTS_LIMIT_REACHED",
                        "GROUP_WITH_NO_APP_ACCESS",
                        "GROUP_IS_DELETED"
                    ],
                    "type": "string",
                    "description": "Identifier for type of error occurring on alerting task"
                }
            }
        },
        "AlertingTaskListResponse": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StandardListResponseProps"
                },
                {
                    "type": "object",
                    "properties": {
                        "links": {
                            "$ref": "#/components/schemas/ListLinks"
                        },
                        "tasks": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AlertingTaskResponse"
                            },
                            "description": "Gets a list of alerting tasks."
                        }
                    }
                }
            ]
        },
        "AlertingTaskPatchRequestCompliant": {
            "type": "object",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed"
                },
                "path": {
                    "enum": [
                        "/ownerName",
                        "/ownerId",
                        "/conditionId",
                        "/enabledAction",
                        "/bookmarkId",
                        "/name",
                        "/description",
                        "/throttling",
                        "/triggerType",
                        "/scheduleOptions"
                    ],
                    "type": "string",
                    "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902"
                },
                "value": {
                    "type": "object",
                    "properties": {},
                    "description": "The value to be used for this operation."
                }
            }
        },
        "AlertingTaskPatchRequestCompliantList": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/AlertingTaskPatchRequestCompliant"
            }
        },
        "AlertingTaskRecipientError": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the error"
                },
                "value": {
                    "enum": [
                        "USER_IS_DELETED",
                        "USER_DISABLED_IN_QCS",
                        "NO_ACCESS_TO_APP",
                        "UNSUBSCRIBED_FROM_ALERT",
                        "CONDITION_EVAL_ERROR",
                        "USER_DISABLED_IN_ALERT_BY_OWNER",
                        "MAX_ALERTS_LIMIT_REACHED"
                    ],
                    "type": "string",
                    "description": "Identifier for type of error occurring on alerting task"
                }
            }
        },
        "AlertingTaskRecipientPatch": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/AlertingTaskRecipientPatch_inner"
            },
            "example": [
                {
                    "op": "add",
                    "value": {
                        "value": "recipient-1",
                        "enabled": true
                    },
                    "recipientType": "userid"
                },
                {
                    "op": "remove",
                    "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                    "recipientType": "userid"
                },
                {
                    "op": "enable",
                    "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                    "recipientType": "userid"
                },
                {
                    "op": "disable",
                    "value": "I6mWVd60wRWIbOXZr1ZKV8QTnxhnitb",
                    "recipientType": "userid"
                },
                {
                    "op": "replace",
                    "value": [
                        {
                            "value": "recipient-1",
                            "enabled": true
                        },
                        {
                            "value": "recipient-2",
                            "enabled": false
                        }
                    ],
                    "recipientType": "userid"
                }
            ],
            "description": "A custom custom JSON Patch document, as an array of objects with operation, recipient type and value. Original defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "AlertingTaskRecipientPatch_inner": {
            "type": "object",
            "required": [
                "op",
                "recipientType",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "remove",
                        "add",
                        "replace",
                        "enable",
                        "disable",
                        "subscribe",
                        "unsubscribe"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "value": {
                    "type": "object",
                    "properties": {},
                    "description": "The value to be used for this operation."
                },
                "recipientType": {
                    "enum": [
                        "userid",
                        "groupid"
                    ],
                    "type": "string",
                    "description": "Defines the path for the given resource field to patch."
                }
            }
        },
        "AlertingTaskResponse": {
            "type": "object",
            "required": [
                "triggerStats"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "5da5825325dc9a0dd0260af9",
                    "description": "data alerting identifier (this is the alertID)",
                    "x-go-custom-tag": "bson:\"_id\""
                },
                "name": {
                    "type": "string",
                    "description": "name associated to alerting task"
                },
                "appId": {
                    "type": "string",
                    "description": "appId associated to this alert definition"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "status": {
                    "enum": [
                        "creating",
                        "deleting"
                    ],
                    "type": "string",
                    "description": "particular status of the alerting task"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "true if the alerting task is enabled"
                },
                "ownerId": {
                    "type": "string",
                    "description": "the owner of this alert"
                },
                "sheetId": {
                    "type": "string",
                    "description": "sheetId associated to this alert definition"
                },
                "lastScan": {
                    "type": "string",
                    "description": "last time a trigger was detected, but not sure if executed for requesting user"
                },
                "tenantId": {
                    "type": "string",
                    "description": "the tenant of this alert"
                },
                "ownerName": {
                    "type": "string",
                    "description": "the owner name of this alert"
                },
                "accessMode": {
                    "enum": [
                        "SOURCE_ACCESS",
                        "TARGET_ACCESS"
                    ],
                    "type": "string"
                },
                "bookmarkId": {
                    "type": "string",
                    "description": "bookmarkId associated to this alert definition"
                },
                "recipients": {
                    "$ref": "#/components/schemas/Recipients"
                },
                "throttling": {
                    "$ref": "#/components/schemas/ThrottlingResource"
                },
                "conditionId": {
                    "type": "string",
                    "description": "the id of the condition that determines if this data alert should be triggered"
                },
                "dateCreated": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the task (rfc3339 format)"
                },
                "description": {
                    "type": "string",
                    "description": "description associated to alerting task"
                },
                "errorStatus": {
                    "enum": [
                        "OK",
                        "FATAL-ERROR",
                        "PARTIAL-TRIGGER"
                    ],
                    "type": "string",
                    "description": "error labels from the latest workflow that happened within the task"
                },
                "lastTrigger": {
                    "type": "string",
                    "description": "last time an execution had been created for requesting user"
                },
                "lastUpdated": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp of the most recent update."
                },
                "triggerType": {
                    "enum": [
                        "RELOAD",
                        "SCHEDULED",
                        "MANUAL"
                    ],
                    "type": "string",
                    "description": "Type of job that triggered the task"
                },
                "triggerStats": {
                    "$ref": "#/components/schemas/AlertingTaskTriggerStats"
                },
                "hideSelections": {
                    "type": "boolean",
                    "description": "Whether the selection needs to be hidden."
                },
                "evaluationCount": {
                    "type": "integer",
                    "description": "the number of actual evaluations with engine this task has consumed in the current month"
                },
                "scheduleOptions": {
                    "$ref": "#/components/schemas/ScheduleOptions"
                },
                "subscriptionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of subscriptions related to this alerting task"
                },
                "absoluteLastScan": {
                    "type": "string",
                    "description": "last time a trigger was detected, but not sure if executed"
                },
                "conditionResponse": {
                    "type": "object",
                    "properties": {},
                    "description": "Should reference ConditionResponse type in condition-manager api docs"
                },
                "alertingTaskErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AlertingTaskError"
                    },
                    "x-omitempty": true
                },
                "absoluteLastTrigger": {
                    "type": "string",
                    "description": "last time an execution had been created"
                },
                "hasHistoryCondition": {
                    "type": "boolean",
                    "description": "true if the alert has history condition enabled"
                },
                "lastExecutionStatus": {
                    "enum": [
                        "OK",
                        "FAILED"
                    ],
                    "type": "string"
                },
                "recipientsChangeHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RecipientsChange"
                    }
                },
                "lastEvaluationCountUpdate": {
                    "type": "string",
                    "description": "the date when the evaluation count was updated"
                }
            }
        },
        "AlertingTaskTriggerStats": {
            "type": "object",
            "required": [
                "last100Scans",
                "last10Scans",
                "totalScans"
            ],
            "properties": {
                "totalScans": {
                    "type": "integer",
                    "maximum": 100,
                    "description": "The number of scans for the current condition."
                },
                "last10Scans": {
                    "type": "integer",
                    "maximum": 10,
                    "description": "The number of triggers out of the last 10 scans for the current condition."
                },
                "last100Scans": {
                    "type": "integer",
                    "maximum": 100,
                    "description": "The number of triggers out of the last 100 scans for the current condition."
                }
            }
        },
        "AlertingTaskValidation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifies for user id or condition id"
                },
                "type": {
                    "enum": [
                        "RECIPIENT",
                        "CONDITION",
                        "RECIPIENT_GROUP"
                    ],
                    "type": "string",
                    "description": "Identifier for type of a validation error occurring on alerting task"
                },
                "error": {
                    "enum": [
                        "NO_ACCESS",
                        "USER_IS_DISABLED",
                        "INVALID_CONDITION",
                        "GROUP_IS_DISABLED",
                        "GROUP_SIZE_EXCEEDED"
                    ],
                    "type": "string",
                    "description": "Identifier for a validation error occurring on alerting task",
                    "x-qlik-deprecated": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the error"
                },
                "validationErrors": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "NO_ACCESS",
                            "USER_IS_DISABLED",
                            "INVALID_CONDITION",
                            "MAX_ALERTS_LIMIT_REACHED",
                            "MAX_ALERT_RECIPIENTS_LIMIT_REACHED",
                            "GROUP_IS_DISABLED",
                            "GROUP_SIZE_EXCEEDED"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "AlertingTaskValidationResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "FAILURE",
                        "SUCCESS"
                    ],
                    "type": "string"
                },
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AlertingTaskValidation"
                    }
                }
            }
        },
        "Error_meta": {
            "type": "object",
            "properties": {
                "httpCode": {
                    "type": "integer",
                    "readOnly": true,
                    "description": "HTTP error code."
                }
            }
        },
        "EvaluationGetResponse": {
            "type": "object",
            "properties": {
                "condition": {
                    "type": "object",
                    "properties": {}
                },
                "evaluation": {
                    "$ref": "#/components/schemas/Evaluation"
                },
                "hideSelections": {
                    "type": "boolean"
                }
            }
        },
        "ExecutionStats": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "periodKey": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "totalExecutions": {
                    "type": "string"
                },
                "triggeredExecutions": {
                    "type": "string"
                }
            }
        },
        "GroupIDRecipient": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "example": "group1",
                    "description": "Group ID of recipient."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether this recipient can receive alerts."
                },
                "taskGroupRecipientErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TaskGroupRecipientError"
                    },
                    "nullable": true
                },
                "alertingTaskGroupRecipientErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AlertingTaskGroupRecipientError"
                    }
                }
            },
            "description": "an internal recipient based on its group id."
        },
        "Recipients": {
            "type": "object",
            "required": [
                "userIds"
            ],
            "properties": {
                "userIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserIDRecipient"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/GroupIDRecipient"
                    }
                }
            },
            "description": "List of recipients. An internal recipient is represented by either their user id or group id."
        },
        "RecipientsChange": {
            "type": "object",
            "properties": {
                "dateTime": {
                    "type": "string",
                    "description": "time of recipient state change"
                },
                "patchAction": {
                    "$ref": "#/components/schemas/AlertingTaskRecipientPatch"
                }
            },
            "description": "Change in a recipient for an alerting task"
        },
        "ScheduleOptions": {
            "type": "object",
            "properties": {
                "timezone": {
                    "type": "string",
                    "example": "Canada/Pacific",
                    "nullable": true,
                    "description": "The timezone for time calculations in SCHEDULED triggers, optional."
                },
                "recurrence": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "RRULE:FREQ=HOURLY;INTERVAL=2"
                    ],
                    "description": "List of RRULEs for SCHEDULED triggers, as specified in RFC5545. Note that DTSTART and DTEND, UNTIL lines are not allowed in this field; start and end times are specified in the start and end fields. RDATE and EXDATE lines are not currently supported. EXRULE is not supported since it is deprecated by RFC5545. It is mandatory if the trigger type is SCHEDULED. At least 1 rule must be set and maximum 5 rules are allowed."
                },
                "endDateTime": {
                    "type": "string",
                    "default": "",
                    "example": "2026-01-02T16:04:05",
                    "nullable": true,
                    "description": "EndDateTime is a local date time with respect to the above timezone parameter. If the timezone parameter is missing, then the timezone used is the one retrieved from user infos. Therefore ISO8601 time offsets are not allowed (e.g. \"2026-01-02T16:04:05Z\" or \"2026-01-02T16:04:05+01\"), if passed an error will be returned. EndDateTime is an optional parameter, when not set or when it's an empty string, the recurrence is intended to be never ending."
                },
                "chronosJobID": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The chronos job identifier. It is set once the related chronos job is created."
                },
                "startDateTime": {
                    "type": "string",
                    "example": "2006-01-02T16:04:05",
                    "nullable": true,
                    "description": "StartDateTime is a local date time with respect to the above timezone parameter. If the timezone parameter is missing, then the timezone used is the one retrieved from user infos. Therefore ISO8601 time offsets are not allowed (e.g. \"2026-01-02T16:04:05Z\" or \"2026-01-02T16:04:05+01\"), if passed an error will be returned. StartDateTime should not be older than 1 year from current date. StartDateTime is an optional parameter, when not set or when it's an empty string, its value is set to the current local date time."
                },
                "lastExecutionTime": {
                    "type": "string",
                    "example": "2020-11-20T12:00:55.000Z",
                    "nullable": true,
                    "readOnly": true,
                    "description": "lastExecutionTime is the time of the chronos job last execution in RFC3339 format (a time with a fixed UTC offset). Could be empty if job has not run yet."
                },
                "nextExecutionTime": {
                    "type": "string",
                    "example": "2020-11-20T12:00:55.000Z",
                    "nullable": true,
                    "readOnly": true,
                    "description": "nextExecutionTime is the time of the chronos job next execution in RFC3339 format (a time with a fixed UTC offset). Could be empty if the job is completed."
                }
            }
        },
        "TaskGroupRecipientError": {
            "type": "object",
            "properties": {
                "value": {
                    "enum": [
                        "GROUP_IS_DISABLED",
                        "MAX_ALERTS_LIMIT_REACHED",
                        "GROUP_WITH_NO_APP_ACCESS",
                        "GROUP_IS_DELETED"
                    ],
                    "type": "string",
                    "description": "Identifier for type of error occurring on sharing task specific for group recipient"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the error"
                }
            }
        },
        "TaskRecipientError": {
            "type": "object",
            "properties": {
                "value": {
                    "enum": [
                        "USER_IS_DELETED",
                        "USER_DISABLED_IN_QCS",
                        "NO_ACCESS_TO_APP",
                        "UNSUBSCRIBED_FROM_SHARING",
                        "USER_DISABLED_IN_SHARING_BY_OWNER",
                        "CHART_NOT_FOUND",
                        "APP_NOT_FOUND",
                        "SHEET_NOT_FOUND",
                        "ENGINE_POD_NOT_AVAILABLE",
                        "CHART_TYPE_NOT_ALLOWED",
                        "GENERIC_EXECUTION_FAILURE"
                    ],
                    "type": "string",
                    "description": "Identifier for type of error occurring on sharing task specific for recipient"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the error"
                }
            }
        },
        "ThrottlingResource": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "the maximum number of tokens that the bucket can contain"
                },
                "timezone": {
                    "type": "string",
                    "default": "Etc/UTC",
                    "description": "the timezone for time calculations in this throttlingresource, for current time and time reference."
                },
                "replenishRate": {
                    "type": "integer",
                    "description": "the amount of tokens to insert into the bucket on the specified interval. (tokens exceeding capacity are discarded)"
                },
                "recurrenceRule": {
                    "type": "string",
                    "description": "A string that supports a subset of RFC5545 recurrence rule directives."
                },
                "initialTokenCount": {
                    "type": "integer",
                    "description": "the initial amount of tokens in the bucket upon creation. cannot exceed capacity."
                },
                "referenceTimestamp": {
                    "type": "string",
                    "description": "a date and time reference specified in RFC3339 format"
                }
            },
            "description": "The rules and setup for throttling"
        },
        "UserIDRecipient": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "example": "1b263bs8m0mm_s21s3f",
                    "description": "User ID of recipient (internal user)."
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "addedIndividually",
                        "group1",
                        "group2"
                    ],
                    "description": "A list of associated groups. If a user is added individually the \"addedIndividually\" pseudo group is included"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether this recipient can receive alerts."
                },
                "subscribed": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether this recipient is subscribed to alerts of a task"
                },
                "taskRecipientErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/TaskRecipientError"
                    },
                    "nullable": true
                },
                "alertingTaskRecipientErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/AlertingTaskRecipientError"
                    }
                }
            },
            "description": "an internal recipient based on its user id."
        },
        "ActionDeleteRequest": {
            "type": "object",
            "required": [
                "connections"
            ],
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "ID of connection"
                            },
                            "name": {
                                "type": "string",
                                "description": "Connection name"
                            }
                        }
                    }
                }
            }
        },
        "ActionDuplicateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the source connection being duplicated"
                },
                "name": {
                    "type": "string",
                    "description": "Optional name for the duplicated connection, must be unique in the target scope. If not specified, a name will be automatically generated"
                },
                "spaceId": {
                    "type": "string",
                    "description": "Optional target space ID for the duplicated connection. If not specified, the duplicated connection will be in the same space as the source connection"
                },
                "qPassword": {
                    "type": "string",
                    "description": "Optional credential password, specify to override credential embedded (or associated) with the source connection"
                },
                "qUsername": {
                    "type": "string",
                    "description": "Optional credential username, specify to override credential embedded (or associated) with the source connection"
                }
            }
        },
        "ActionUpdateRequest": {
            "type": "object",
            "required": [
                "connections"
            ],
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Connection ID"
                            },
                            "name": {
                                "type": "string",
                                "description": "Connection name"
                            },
                            "ownerId": {
                                "type": "string",
                                "description": "User ID to which the connection will be updated. If not present, the connection's owner wont be changed"
                            },
                            "spaceId": {
                                "type": "string",
                                "description": "Space ID to which the connection will be updated. If not present, the connection's space wont be changed. If it is empty string, then the connection will be moved to the personal space of the user identified by ownerId (If ownerId is undefined, then the connection will be in oroginal owner's personal space)"
                            },
                            "spaceType": {
                                "enum": [
                                    "personal",
                                    "shared",
                                    "managed",
                                    "data"
                                ],
                                "type": "string",
                                "description": "Space type. Required when spaceId is specified"
                            }
                        }
                    }
                }
            }
        },
        "BulkResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "required": [
                            "id",
                            "status"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "ID of the resource"
                            },
                            "error": {
                                "$ref": "#/components/schemas/Error"
                            },
                            "status": {
                                "type": "integer",
                                "description": "Status code of operation on resource identified by ID"
                            }
                        }
                    }
                }
            }
        },
        "Connection": {
            "type": "object",
            "required": [
                "qID",
                "qName",
                "qConnectStatement",
                "qType",
                "qLogOn",
                "qEngineObjectID",
                "qArchitecture",
                "qSeparateCredentials",
                "privileges",
                "created",
                "updated",
                "user"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection, must be same as qEngineObjectID"
                },
                "qri": {
                    "type": "string",
                    "description": "Encrypted base Qri string"
                },
                "user": {
                    "type": "string",
                    "description": "User ID of the connection's creator"
                },
                "links": {
                    "$ref": "#/components/schemas/Link"
                },
                "qName": {
                    "type": "string",
                    "description": "Descriptive name of the data connection"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of connection - indicates connection provider type"
                },
                "space": {
                    "type": "string",
                    "description": "ID of the space to which the connection belongs"
                },
                "qLogOn": {
                    "enum": [
                        "0",
                        "1",
                        "LOG_ON_SERVICE_USER",
                        "LOG_ON_CURRENT_USER"
                    ],
                    "type": "string",
                    "description": "Indicates the type of user associated with the data connection"
                },
                "tenant": {
                    "type": "string",
                    "description": "Tenant ID of the connection's creator (Only when extended=true in query)"
                },
                "created": {
                    "type": "string",
                    "description": "Datetime when the connection was created"
                },
                "updated": {
                    "type": "string",
                    "description": "Datetime when the connection was last updated"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Privilege"
                    },
                    "description": "Array of string (i.e. update, delete, read) indicating the user's privileges on the associated connection"
                },
                "datasourceID": {
                    "type": "string",
                    "description": "Data source ID"
                },
                "qArchitecture": {
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer",
                    "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                },
                "qReferenceKey": {
                    "type": "string",
                    "description": "Reference key of credential in redis"
                },
                "qCredentialsID": {
                    "type": "string",
                    "description": "ID of the credential associated with the connection"
                },
                "qEngineObjectID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection, must be same as qID"
                },
                "qCredentialsName": {
                    "type": "string",
                    "description": "Name of the credential associated with the connection"
                },
                "qConnectStatement": {
                    "type": "string",
                    "description": "Connection string for the data connection"
                },
                "qConnectionSecret": {
                    "type": "string",
                    "description": "String that contains connection specific secret (or password). This field will not be included in response of GET /data-connections, will only be included in the response of GET /data0connections/{qID}"
                },
                "qSeparateCredentials": {
                    "type": "boolean",
                    "description": "Indicates whether or not this is a credential-less connection"
                }
            },
            "description": "Essential fields of a connection"
        },
        "ConnectionCreate": {
            "type": "object",
            "required": [
                "qName",
                "qConnectStatement",
                "qType",
                "datasourceID"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection. A UUID will be generated automatically if qID is not specified or empty"
                },
                "owner": {
                    "type": "string",
                    "description": "ID of the cloud app that owns this connection"
                },
                "qName": {
                    "type": "string",
                    "description": "Descriptive name of the data connection"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of connection - indicates connection provider type"
                },
                "space": {
                    "type": "string",
                    "description": "ID of the space to which the connection belongs"
                },
                "qLogOn": {
                    "enum": [
                        "0",
                        "1",
                        "LOG_ON_SERVICE_USER",
                        "LOG_ON_CURRENT_USER"
                    ],
                    "type": "string",
                    "description": "Indicates the type of user associated with the data connection."
                },
                "qPassword": {
                    "type": "string",
                    "description": "Any logon password associated with the data connection"
                },
                "qUsername": {
                    "type": "string",
                    "description": "Any logon username associated with the data connection"
                },
                "datasourceID": {
                    "type": "string",
                    "description": "ID of the datasource associated with this connection"
                },
                "qriInRequest": {
                    "type": "string",
                    "description": "QRI string of the connection. The string will be persisted to mongo when the request is originated from trusted client (i.e. dcaas) to avoid invalid QRi string."
                },
                "qArchitecture": {
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer",
                    "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                },
                "qCredentialsID": {
                    "type": "string",
                    "description": "ID of the credential associated with the connection"
                },
                "qEngineObjectID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection as specified by the Sense engine. A UUID will be generated automatically if this field is not specified or empty"
                },
                "qCredentialsName": {
                    "type": "string",
                    "description": "Name of the credential associated with the connection"
                },
                "qConnectStatement": {
                    "type": "string",
                    "description": "Connection string for the data connection"
                },
                "qConnectionSecret": {
                    "type": "string",
                    "example": "Any string",
                    "description": "String that contains connection specific secret (or password) that requires encryption before persist to database. This field is connection level secret"
                },
                "qSeparateCredentials": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether or not to create a credential-less connection"
                }
            }
        },
        "ConnectionCreateResponse": {
            "type": "object",
            "required": [
                "qID",
                "qName",
                "qConnectStatement",
                "qType",
                "qLogOn",
                "qEngineObjectID",
                "qArchitecture",
                "qSeparateCredentials",
                "privileges"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection, must be same as qEngineObjectID"
                },
                "user": {
                    "type": "string",
                    "description": "User ID of the connection's creator"
                },
                "links": {
                    "$ref": "#/components/schemas/Link"
                },
                "qName": {
                    "type": "string",
                    "description": "Descriptive name of the data connection"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of connection - indicates connection provider type"
                },
                "space": {
                    "type": "string",
                    "description": "ID of the space to which the connection belongs"
                },
                "qLogOn": {
                    "enum": [
                        "0",
                        "1",
                        "LOG_ON_SERVICE_USER",
                        "LOG_ON_CURRENT_USER"
                    ],
                    "type": "string",
                    "description": "Indicates the type of user associated with the data connection."
                },
                "created": {
                    "type": "string",
                    "description": "Datetime when the connection was created"
                },
                "updated": {
                    "type": "string",
                    "description": "Datetime when the connection was last updated"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Privilege"
                    }
                },
                "qArchitecture": {
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer",
                    "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                },
                "qReferenceKey": {
                    "type": "string",
                    "description": "Reference key of credential in redis"
                },
                "qCredentialsID": {
                    "type": "string",
                    "description": "ID of the credential associated with the connection"
                },
                "qEngineObjectID": {
                    "type": "string",
                    "description": "Unique identifier (UUID) for the data connection, must be same as qID"
                },
                "qCredentialsName": {
                    "type": "string",
                    "description": "Name of the credential associated with the connection"
                },
                "qConnectStatement": {
                    "type": "string",
                    "description": "Connection string for the data connection"
                },
                "qSeparateCredentials": {
                    "type": "boolean",
                    "description": "Indicates whether or not this is a credential-less connection"
                }
            },
            "description": "Essential fields of a connection"
        },
        "Connections": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Connection"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/Meta"
                },
                "links": {
                    "$ref": "#/components/schemas/TopLevelLink"
                },
                "errors": {
                    "$ref": "#/components/schemas/Errors"
                }
            }
        },
        "ConnectionUpdate": {
            "type": "object",
            "required": [
                "qID",
                "qName",
                "qConnectStatement",
                "qType",
                "qEngineObjectID"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "Unique identifier for the data connection"
                },
                "qName": {
                    "type": "string",
                    "description": "Descriptive name of the data connection"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of connection - indicates connection provider type"
                },
                "space": {
                    "type": "string",
                    "description": "ID of the space to which the connection belongs"
                },
                "qLogOn": {
                    "enum": [
                        "0",
                        "1",
                        "LOG_ON_SERVICE_USER",
                        "LOG_ON_CURRENT_USER"
                    ],
                    "type": "string",
                    "description": "Indicates the type of user associated with the data connection."
                },
                "qPassword": {
                    "type": "string",
                    "description": "Any logon password associated with the data connection"
                },
                "qUsername": {
                    "type": "string",
                    "description": "Any logon username associated with the data connection"
                },
                "datasourceID": {
                    "type": "string",
                    "description": "ID of the datasource associated with this connection"
                },
                "qArchitecture": {
                    "enum": [
                        0,
                        1
                    ],
                    "type": "integer",
                    "description": "0 or 1 value indicating whether the data connector is 64-bit (0) or 32-bit (1). Defaults to 0 if not specified."
                },
                "qCredentialsID": {
                    "type": "string",
                    "description": "ID of the credential associated with the connection"
                },
                "qEngineObjectID": {
                    "type": "string",
                    "description": "Unique identifier for the data connection as specified by the Sense engine"
                },
                "qCredentialsName": {
                    "type": "string",
                    "description": "Name of the credential associated with the connection"
                },
                "qConnectStatement": {
                    "type": "string",
                    "description": "Connection string for the data connection"
                },
                "qConnectionSecret": {
                    "type": "string",
                    "description": "String that contains connection level secret (or password). If this field presents in request, then existing connection secret will be updated to its value. If is an empty string, then eixsting connection secret will be cleared. If this field is missing, existing secret will not be updated."
                },
                "qSeparateCredentials": {
                    "type": "boolean",
                    "description": "Indicates whether or not this is a credential-less connection"
                }
            }
        },
        "PatchRequest": {
            "type": "object",
            "required": [
                "patchData"
            ],
            "properties": {
                "patchData": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "op": {
                                "enum": [
                                    "add",
                                    "replace",
                                    "remove"
                                ],
                                "type": "string",
                                "description": "Operation type"
                            },
                            "path": {
                                "type": "string",
                                "example": "Use '/qName' to patch the field 'qName' on toplevel, use '/tags/<index_number>' to patch an item in array properties like 'tags'",
                                "description": "Path to the target field to be patched"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value used for the patch, only needed for 'add' or 'replace'. Value type could be either string or integer, should match with the type of the target field"
                            }
                        }
                    }
                }
            }
        },
        "Privilege": {
            "enum": [
                "list",
                "update",
                "delete",
                "read"
            ],
            "type": "string",
            "description": "Access type allowed on associated data connection"
        },
        "ResponseErrors": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PublicApiError"
                    }
                }
            }
        },
        "TopLevelLink": {
            "type": "object",
            "required": [
                "self"
            ],
            "properties": {
                "next": {
                    "type": "object",
                    "required": [
                        "href"
                    ],
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "description": "URL link to next page of requested resources (available to paged request only)"
                },
                "prev": {
                    "type": "object",
                    "required": [
                        "href"
                    ],
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "description": "URL link to previous page of requested resources (available to paged request only)"
                },
                "self": {
                    "type": "object",
                    "required": [
                        "href"
                    ],
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "description": "Link to cirrent query"
                }
            }
        },
        "Credential": {
            "type": "object",
            "required": [
                "qID",
                "qName",
                "qType",
                "qConnCount"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "UUID of the credential"
                },
                "links": {
                    "$ref": "#/components/schemas/Link"
                },
                "qName": {
                    "type": "string",
                    "description": "Name of the credential"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of credential"
                },
                "qConnCount": {
                    "type": "integer",
                    "description": "Number of linked connections"
                },
                "qReferenceKey": {
                    "type": "string",
                    "description": "Reference key of credential in redis"
                }
            }
        },
        "CredentialCreate": {
            "required": [
                "qName",
                "qType",
                "qUsername",
                "qPassword"
            ],
            "properties": {
                "qID": {
                    "type": "string",
                    "description": "UUID of the credential"
                },
                "qName": {
                    "type": "string",
                    "description": "UName of the credential"
                },
                "qType": {
                    "type": "string",
                    "description": "Type of credential"
                },
                "qPassword": {
                    "type": "string",
                    "description": "Password"
                },
                "qUsername": {
                    "type": "string",
                    "description": "User name"
                },
                "connectionId": {
                    "type": "string",
                    "description": "ID of connection that will be associated with the credential"
                },
                "datasourceID": {
                    "type": "string",
                    "description": "ID datasource that the credential is created for"
                }
            },
            "description": "Credential"
        },
        "ApiSpecResponse": {
            "type": "object",
            "required": [
                "x-qlik-connector-version",
                "connectionProperties"
            ],
            "properties": {
                "connectionProperties": {
                    "type": "object",
                    "description": "List of properties required for the given datasource"
                },
                "x-qlik-connector-version": {
                    "type": "string",
                    "description": "Datasource provider (i.e. connector) version"
                }
            }
        },
        "AuthUrlResponse": {
            "type": "object",
            "required": [
                "authUrl"
            ],
            "properties": {
                "authUrl": {
                    "type": "string",
                    "description": "Authentication URL for OAuth datasource"
                }
            }
        },
        "CreateConnectionReq": {
            "type": "object",
            "required": [
                "dataSourceId",
                "connectionName",
                "connectionProperties"
            ],
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "tag string (256 bytes or less)"
                    },
                    "description": "string tags (32 or less) persisted with the connection object"
                },
                "spaceId": {
                    "type": "string",
                    "description": "Target connection space ID"
                },
                "authUrlOnly": {
                    "type": "boolean",
                    "default": false,
                    "description": "When set to true, authentication URL will be returned for OAuth request to datasource. This property will be ignored if the request is not OAuth or datasource doesn't support OAuth"
                },
                "dataSourceId": {
                    "type": "string",
                    "description": "Datasource ID"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name"
                },
                "connectionProperties": {
                    "type": "object",
                    "description": "List of connection properties required to create dataconnection for a given datasource, which is defined by the response of 'GET /actions/data-connections/api-specs'"
                }
            }
        },
        "CreateConnectionRes": {
            "type": "object",
            "required": [
                "dataSourceId",
                "connectionName",
                "connectionId",
                "userId",
                "tenantId",
                "createdAt",
                "updateAt"
            ],
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "User ID"
                },
                "spaceId": {
                    "type": "string",
                    "example": "641c53f71ecb12d7c450f687",
                    "description": "Space ID"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID"
                },
                "updateAt": {
                    "type": "string",
                    "example": "2023-03-23T13:30:55.351Z",
                    "description": "Updated at time stamp"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-03-23T13:30:55.351Z",
                    "description": "Created at time stamp"
                },
                "connectionId": {
                    "type": "string",
                    "example": "44054965-a970-458b-8c82-1fbf2934f87a",
                    "description": "Connection ID"
                },
                "dataSourceId": {
                    "type": "string",
                    "description": "Datasource ID"
                },
                "credentialsId": {
                    "type": "string",
                    "example": "d24799e4-e872-432b-8c5d-b9012afc6ff7",
                    "description": "Credentials ID (if credentials are included in the request)"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name"
                }
            }
        },
        "GetConnectionResponse": {
            "type": "object",
            "required": [
                "dataSourceId",
                "connectionName",
                "connectionId",
                "userId",
                "tenantId",
                "createdAt",
                "updateAt",
                "connectionProperties"
            ],
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "tag string (256 bytes or less)"
                    },
                    "description": "string tags associated with the connection"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID"
                },
                "spaceId": {
                    "type": "string",
                    "example": "641c53f71ecb12d7c450f687",
                    "description": "Space ID"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID"
                },
                "updateAt": {
                    "type": "string",
                    "example": "2023-03-23T13:30:55.351Z",
                    "description": "Updated at time stamp"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-03-23T13:30:55.351Z",
                    "description": "Created at time stamp"
                },
                "connectionId": {
                    "type": "string",
                    "example": "44054965-a970-458b-8c82-1fbf2934f87a",
                    "description": "Connection ID"
                },
                "dataSourceId": {
                    "type": "string",
                    "description": "Datasource ID"
                },
                "credentialsId": {
                    "type": "string",
                    "example": "d24799e4-e872-432b-8c5d-b9012afc6ff7",
                    "description": "Credentials ID (associated with the connection, either embedded or separated)"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Connection name"
                },
                "connectionProperties": {
                    "type": "object",
                    "description": "List of connection properties"
                }
            }
        },
        "PublicApiError": {
            "type": "object",
            "required": [
                "code",
                "title",
                "details"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "DCAAS-2001",
                    "description": "A service specific error code string"
                },
                "meta": {
                    "type": "object",
                    "description": "Additional metadata associated with the error"
                },
                "title": {
                    "type": "string",
                    "example": "Data source is not enabled.",
                    "description": "Summary of the error"
                },
                "detail": {
                    "type": "string",
                    "example": "This resource requires app read privileges.",
                    "description": "Concrete detail about the error"
                }
            }
        },
        "KeyProvider": {
            "type": "object",
            "example": {
                "arn": "arn:aws:kms:eu-north-1:857519135519:key/ee358547-5716-4e66-9524-1618716e221a",
                "name": "test name",
                "current": false,
                "description": "test description",
                "keyprovider": "AWS-KMS"
            },
            "required": [
                "name",
                "arn",
                "keyprovider"
            ],
            "properties": {
                "arn": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The provider resource notation for the key."
                },
                "name": {
                    "type": "string",
                    "description": "Name of key provider entry."
                },
                "current": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Indicates whether the key is being used to encrypt/decrypt secrets."
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Tenant ID."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When key entry was created."
                },
                "description": {
                    "type": "string",
                    "description": "Description of key provider entry."
                },
                "keyProvider": {
                    "enum": [
                        "AWS-KMS"
                    ],
                    "type": "string",
                    "description": "Key Provider type."
                },
                "arnFingerPrint": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The ARN fingerprint."
                },
                "promotedToCurrentAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the key was promoted to being the current active one."
                },
                "demotedFromCurrentAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When the key was demoted from being current to non active."
                }
            }
        },
        "KeyProviderPatchBase": {
            "type": "object",
            "example": {
                "op": "replace",
                "path": "/name",
                "value": "New Encryption Key"
            },
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "type": "string",
                    "description": "The property path."
                },
                "value": {
                    "type": "string",
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "KeyProviderPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/KeyProviderPatchBase"
            }
        },
        "KeyProviders": {
            "type": "object",
            "example": [
                {
                    "arn": "arn:aws:kms:eu-north-1:857519135519:key/ee358547-5716-4e66-9524-1618716e221a",
                    "name": "test name",
                    "current": true,
                    "description": "test description",
                    "keyprovider": "AWS-KMS"
                }
            ],
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/KeyProvider"
                    }
                }
            }
        },
        "KeyProvidersDeleteResponseBody": {
            "type": "object",
            "example": {
                "message": "Keyprovider metadata deleted successfully"
            },
            "required": [
                "message"
            ],
            "properties": {
                "response": {
                    "type": "string",
                    "format": "text",
                    "description": "Successful response message."
                }
            }
        },
        "ListKeyProviders": {
            "type": "object",
            "example": [
                {
                    "arn": "#QLIK_MANAGED_KEY_PROVIDER#",
                    "name": "Qlik Internal Kms",
                    "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                    "createdAt": "Qlik managed",
                    "description": "Default key management service",
                    "keyprovider": "Qlik",
                    "arnFingerPrint": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                    "promotedToCurrentAt": "2023-06-21T18:45:57Z",
                    "demotedFromCurrentAt": "0001-01-01T00:00:00Z"
                },
                {
                    "arn": "arn:aws:kms:eu-north-1:857519135519:key/e4e84fc7-7817-4121-b927-9d1d4ef03f1d",
                    "name": "CMK - 01",
                    "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                    "createdAt": "2023-06-21T18:43:49Z",
                    "keyprovider": "AWS-KMS",
                    "arnFingerPrint": "9f352c5a9c1618485051892cb57467e4",
                    "promotedToCurrentAt": "2023-06-21T18:43:54Z",
                    "demotedFromCurrentAt": "2023-06-21T18:45:57Z"
                },
                {
                    "arn": "arn:aws:kms:eu-north-1:857519135519:key/b6a2a74c-fb34-464a-8ea6-d867fd3b9438",
                    "name": "CMK - 02",
                    "current": true,
                    "tenantId": "ImTRa-bkJTD-NZRYjNBa_rDhwSVA6Qo8",
                    "createdAt": "2023-06-21T18:59:17Z",
                    "description": "CMK migration test",
                    "keyprovider": "AWS-KMS",
                    "arnFingerPrint": "b5fe2c83b25f9e39487bca28f69e4210",
                    "promotedToCurrentAt": "2023-06-21T18:59:18Z",
                    "demotedFromCurrentAt": "0001-01-01T00:00:00Z"
                }
            ],
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/KeyProvider"
                    }
                }
            }
        },
        "MigrationInformation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "description": "Migration operation ID."
                },
                "state": {
                    "enum": [
                        "New",
                        "InProgress",
                        "Completed"
                    ],
                    "type": "string",
                    "description": "Migration operation state."
                },
                "progress": {
                    "type": "number",
                    "description": "Progress in percentage."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "Tenant ID."
                },
                "completedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "initiatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "migratingTo": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The new key ARN that keys should be migrated to."
                },
                "migratingFrom": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The key ARN being migrated from (in case of QlikVault, could be a short name only)."
                },
                "migratingToPrefix": {
                    "type": "string",
                    "description": "The new key prefix (to help services know which prefix should NOT be migrated)."
                },
                "migratingToFingerprint": {
                    "type": "string",
                    "description": "The new key ARN fingerprint."
                }
            }
        },
        "StandardError": {
            "type": "object",
            "required": [
                "errors"
            ],
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/StandardErrorItem"
                    }
                }
            }
        },
        "StandardErrorItem": {
            "type": "object",
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The error code."
                },
                "meta": {
                    "type": "object",
                    "description": "Additional error object metadata."
                },
                "title": {
                    "type": "string",
                    "description": "Description of the error."
                },
                "detail": {
                    "type": "string",
                    "description": "Extra information about the error."
                }
            }
        },
        "atlanEntity": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "typeName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "attributes": {
                    "$ref": "#/components/schemas/atlanEntityAttributes"
                },
                "relationshipAttributes": {
                    "$ref": "#/components/schemas/atlanRelationshipAttributes"
                }
            }
        },
        "atlanEntityAttributes": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "usage": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "examples": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-qlik-customer-data": true
                },
                "relations": {
                    "$ref": "#/components/schemas/atlanResourceLink"
                },
                "displayText": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "abbreviation": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "relationGuid": {
                    "type": "string"
                },
                "parentCategory": {
                    "type": "string"
                },
                "userDescription": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "atlanGlossary": {
            "type": "object",
            "properties": {
                "entity": {
                    "$ref": "#/components/schemas/atlanEntity"
                },
                "referredEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/atlanEntity"
                    }
                }
            },
            "description": "Atlan glossary format. See https://apidocs.atlan.com/"
        },
        "atlanRelationEntity": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                },
                "typeName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "displayText": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "entityStatus": {
                    "type": "string"
                }
            }
        },
        "atlanRelationshipAttributes": {
            "type": "object",
            "properties": {
                "isA": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                },
                "terms": {
                    "$ref": "#/components/schemas/atlanRelationEntity"
                },
                "seeAlso": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                },
                "antonyms": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                },
                "synonyms": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                },
                "categories": {
                    "$ref": "#/components/schemas/atlanRelationEntity"
                },
                "classifies": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                },
                "replacedBy": {
                    "$ref": "#/components/schemas/atlanTermHeader"
                }
            }
        },
        "atlanResourceLink": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "displayName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "atlanTermHeader": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                },
                "steward": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "displayText": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "entityStatus": {
                    "type": "string"
                },
                "relationGuid": {
                    "type": "string"
                }
            }
        },
        "atlasCategory": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "displayText": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "categoryGuid": {
                    "type": "string"
                },
                "relationGuid": {
                    "type": "string"
                },
                "parentCategoryGuid": {
                    "type": "string"
                }
            }
        },
        "atlasGlossary": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/atlasTerm"
                    }
                },
                "usage": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "language": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/atlasCategory"
                    }
                },
                "qualifiedName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "longDescription": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "shortDescription": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "atlasTerm": {
            "type": "object",
            "properties": {
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "steward": {
                    "type": "string"
                },
                "termGuid": {
                    "type": "string"
                },
                "expression": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "displayText": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "relationGuid": {
                    "type": "string"
                }
            }
        },
        "categoriesResult": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/category"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/resultMeta"
                },
                "links": {
                    "$ref": "#/components/schemas/pageLinks"
                }
            }
        },
        "category": {
            "type": "object",
            "required": [
                "id",
                "glossaryId",
                "name",
                "description",
                "createdBy",
                "createdAt",
                "updatedBy",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "stewards": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uid"
                    },
                    "example": [
                        "6305e8691a1d504df06efab9",
                        "63075b341a1d504df06efabc"
                    ],
                    "description": "This list contains the uuids of the stewards of the category."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "createdBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The uuid of the user who last updated the category"
                },
                "glossaryId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "createCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "507f191e810c19729de860ea",
                    "description": "The id for resolving updates in future imports/updates. \nOpposed to the id of terms, id on category are not resolved by backend. Any category referred in the category array in terms will have to be identical to the id property of the category. If not, the category reference will be discarded.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the category. May not be identical to another category belonging to the same parent.\n",
                    "x-qlik-customer-data": true
                },
                "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "stewards": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uid"
                    },
                    "example": [
                        "6305e8691a1d504df06efab9",
                        "63075b341a1d504df06efabc"
                    ],
                    "description": "This list contains the uuids of the stewards of the category."
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                }
            }
        },
        "createGlossary": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Organization wide glossary",
                    "description": "Name of the glossary",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Red",
                        "Sales"
                    ],
                    "description": "List of tags for glossary",
                    "x-qlik-customer-data": true
                },
                "spaceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "Unique unique identifier of the space to contain the glossary"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview of the glossary content",
                    "x-qlik-customer-data": true
                },
                "description": {
                    "type": "string",
                    "example": "This glossary contains definitions and concepts of business terms.",
                    "description": "Description of the glossary",
                    "x-qlik-customer-data": true
                },
                "termTemplate": {
                    "$ref": "#/components/schemas/termTemplate"
                }
            }
        },
        "createTerm": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Earnings Before Interest and Tax (EBIT)",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Finance",
                        "Accounting"
                    ],
                    "x-qlik-customer-data": true
                },
                "linksTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termCreateLinksTo"
                    }
                },
                "stewards": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6305e8691a1d504df06efab9",
                        "63075b341a1d504df06efabc"
                    ],
                    "description": "This list contain the uuids for the terms stewards"
                },
                "relatesTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termRelatesTo"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "example": [
                        "507f191e810c19729de860ea",
                        "507f191e810c19729de860eb"
                    ],
                    "description": "Category Ids that the term belongs to. NOTE! In case of import the string refers to the index of the category in the import document."
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "abbreviation": {
                    "type": "string",
                    "example": "EBIT",
                    "x-qlik-customer-data": true
                },
                "relatedInformation": {
                    "type": "string",
                    "example": "In accounting and finance, earnings before interest and taxes (EBIT) is a measure of a firm's profit that includes all incomes and expenses (operating and non-operating) except interest expenses and income tax expenses.",
                    "x-qlik-customer-data": true
                }
            }
        },
        "errorResponse": {
            "type": "object",
            "example": {
                "error": "util.Error",
                "errors": [
                    {
                        "code": "LICENSES-123",
                        "title": "error title"
                    }
                ],
                "message": "error message"
            },
            "required": [
                "errors",
                "error",
                "message"
            ],
            "properties": {
                "error": {
                    "type": "string",
                    "description": "Error type",
                    "x-qlik-deprecated": true
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Error code"
                            },
                            "title": {
                                "type": "string",
                                "description": "Error title"
                            },
                            "detail": {
                                "type": "string",
                                "description": "Additional error detail."
                            }
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Error message",
                    "x-qlik-deprecated": true
                }
            }
        },
        "errorResponseBadRequest": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/errorResponseCode"
                    }
                },
                "traceId": {
                    "type": "string",
                    "example": "507f191e810c19729de860ea"
                }
            },
            "description": "### Custom error codes\n* BG-1 - Context JWT is missing tenantId.\n* BG-2 - Context JWT is missing userId.\n* BG-4 - Invalid or unsupported Content Type. Valid types are: application/json, application/json+qlik, application/json+atlan, application/json+atlas\n* BG-5 - Failed to decode JSON payload.\n* BG-6 - A glossary name is required.\n* BG-7 - Two categories with the same name cannot have the same parent.\n* BG-11 - Glossary validation failed - A value or parameter is invalid or not set\n* BG-12 - Category validation failed - A value or parameter is invalid or not set\n* BG-13 - Term validation failed - A value or parameter is invalid or not set\n* BG-14 - Two or more categories share Id\n* BG-15 - Two or more terms share Id\n* BG-16 - Not detecting proper Atlas format\n* BG-17 - Not detecting proper Atlan format\n* BG-18 - Not detecting proper Qlik format\n* BG-19 - Invalid format in term\n* BG-20 - Duplicate link definition\n* BG-21 - Rich text validation failed\n* BG-22 - Import cancelled\n* BG-23 - Duplicate link related\n"
        },
        "errorResponseCode": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                }
            }
        },
        "errorResponseForbidden": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/errorResponseCode"
                    }
                },
                "traceId": {
                    "type": "string",
                    "example": "507f191e810c19729de860ea"
                }
            },
            "description": "### Custom error codes\n* BG-3 - Access denied, no read access\n"
        },
        "errorResponseNotFound": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/errorResponseCode"
                    }
                },
                "traceId": {
                    "type": "string",
                    "example": "507f191e810c19729de860ea"
                }
            },
            "description": "### Custom error codes\n* BG-8 - Glossary not found\n* BG-9 - Category not found\n* BG-10 - Term not found\n"
        },
        "exportGlossary": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag1",
                        "tag2"
                    ],
                    "x-qlik-customer-data": true
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/term"
                    }
                },
                "ownerId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "spaceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "overview": {
                    "type": "string",
                    "example": "glossary overview",
                    "x-qlik-customer-data": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "createdBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The uuid of the user who last updated the glossary"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/category"
                    }
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "termTemplate": {
                    "$ref": "#/components/schemas/termTemplate"
                }
            }
        },
        "glossariesResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/glossary"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/resultMeta"
                },
                "links": {
                    "$ref": "#/components/schemas/pageLinks"
                }
            }
        },
        "glossary": {
            "type": "object",
            "required": [
                "id",
                "name",
                "description",
                "tags",
                "ownerId",
                "createdBy",
                "createdAt",
                "updatedBy",
                "updatedAt",
                "spaceId",
                "termTemplate",
                "overview"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "Unique identifier of the glossary"
                },
                "name": {
                    "type": "string",
                    "example": "Organization wide glossary",
                    "description": "Name of the glossary",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Red",
                        "Sales"
                    ],
                    "description": "List of tags associated with the glossary.",
                    "x-qlik-customer-data": true
                },
                "ownerId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "The unique identifier of the glossary owner"
                },
                "spaceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "The unique identifier of the space containg the glossary"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview of the glossary contents",
                    "x-qlik-customer-data": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true,
                    "description": "Datetime when the glossary was created"
                },
                "createdBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "Unique identifier of the user who created the glossary"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true,
                    "description": "Datetime when the glossary was updated"
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The unique identifier of the user who last updated the glossary"
                },
                "description": {
                    "type": "string",
                    "example": "This glossary contains definitions and concepts of business terms.",
                    "description": "Description of the glossary",
                    "x-qlik-customer-data": true
                },
                "termTemplate": {
                    "$ref": "#/components/schemas/termTemplate"
                }
            }
        },
        "importOwner": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Joe Smith",
                    "x-qlik-pii": true
                },
                "email": {
                    "type": "string",
                    "example": "joe.smith@qlik.com",
                    "x-qlik-pii": true
                },
                "userId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                }
            }
        },
        "importTerm": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "507f191e810c19729de860ea",
                    "description": "The id of the term. Used to identify the term in future updates. If not provided, will use the leading 30 chars of the term name and an incremental index\n"
                },
                "name": {
                    "type": "string",
                    "example": "name",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag1",
                        "tag2"
                    ],
                    "x-qlik-customer-data": true
                },
                "owner": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/importOwner"
                    }
                },
                "linksTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termCreateLinksTo"
                    }
                },
                "relatesTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termRelatesTo"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "example": [
                        "507f191e810c19729de860ea"
                    ],
                    "description": "Categories that the term belongs to. Refers to the `id` property of the category object\n"
                },
                "description": {
                    "type": "string",
                    "example": "description",
                    "x-qlik-customer-data": true
                },
                "abbreviation": {
                    "type": "string",
                    "example": "abbr",
                    "x-qlik-customer-data": true
                }
            }
        },
        "JSONPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace",
                        "set (Deprecated)",
                        "unset (Deprecated)",
                        "add (Deprecated)",
                        "renew"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/name",
                        "/roles (Deprecated)",
                        "/assignedRoles",
                        "/inviteExpiry",
                        "/preferredZoneinfo",
                        "/preferredLocale",
                        "/status"
                    ],
                    "type": "string",
                    "description": "A JSON Pointer."
                },
                "value": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "array"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefIDs"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefNames"
                        }
                    ],
                    "description": "The value to be used for this operation.",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
        },
        "JSONPatchArray": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/JSONPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/name",
                    "value": "John"
                },
                {
                    "op": "replace",
                    "path": "/assignedRoles",
                    "value": [
                        {
                            "name": "Developer"
                        }
                    ]
                },
                {
                    "op": "replace",
                    "path": "/email",
                    "value": "unicorn@corp.example"
                },
                {
                    "op": "replace",
                    "path": "/preferredZoneInfo",
                    "value": "America/Halifax"
                },
                {
                    "op": "replace",
                    "path": "/preferredLocale",
                    "value": "en_US_POSIX"
                },
                {
                    "op": "replace",
                    "path": "/status",
                    "value": "active"
                }
            ],
            "description": "An array of JSON Patch documents"
        },
        "linksResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termLinksTo"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/resultMeta"
                },
                "links": {
                    "$ref": "#/components/schemas/pageLinks"
                }
            }
        },
        "pageLink": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                }
            }
        },
        "pageLinks": {
            "type": "object",
            "properties": {
                "next": {
                    "$ref": "#/components/schemas/pageLink"
                },
                "prev": {
                    "$ref": "#/components/schemas/pageLink"
                },
                "self": {
                    "$ref": "#/components/schemas/pageLink"
                }
            }
        },
        "qlikGlossary": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag1",
                        "tag2"
                    ],
                    "x-qlik-customer-data": true
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/importTerm"
                    }
                },
                "spaceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "overview": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/createCategory"
                    }
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "termTemplate": {
                    "$ref": "#/components/schemas/termTemplate"
                }
            }
        },
        "resultMeta": {
            "type": "object",
            "properties": {
                "countTotal": {
                    "type": "integer"
                }
            }
        },
        "term": {
            "type": "object",
            "required": [
                "id",
                "glossaryId",
                "revision",
                "name",
                "description",
                "relatedInformation",
                "abbrevation",
                "tags",
                "stewards",
                "createdBy",
                "createdAt",
                "updatedBy",
                "updatedAt",
                "status"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "name": {
                    "type": "string",
                    "example": "Earnings Before Interest and Tax (EBIT)",
                    "x-qlik-customer-data": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Finance",
                        "Accounting"
                    ],
                    "x-qlik-customer-data": true
                },
                "status": {
                    "$ref": "#/components/schemas/termStatus"
                },
                "linksTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termLinksTo"
                    }
                },
                "revision": {
                    "type": "number",
                    "example": 0
                },
                "stewards": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6305e8691a1d504df06efab9",
                        "63075b341a1d504df06efabc"
                    ],
                    "description": "This list contains the uuids of the terms data stewards."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "createdBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true
                },
                "relatesTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/termRelatesTo"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The uuid of the user who last updated the term"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "example": [
                        "507f191e810c19729de860ea",
                        "507f191e810c19729de860eb"
                    ]
                },
                "glossaryId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "description": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "abbreviation": {
                    "type": "string",
                    "example": "EBIT",
                    "x-qlik-customer-data": true
                },
                "relatedInformation": {
                    "type": "string",
                    "example": "In accounting and finance, earnings before interest and taxes (EBIT) is a measure of a firm's profit that includes all incomes and expenses (operating and non-operating) except interest expenses and income tax expenses.",
                    "x-qlik-customer-data": true
                }
            }
        },
        "termCreateLinksTo": {
            "type": "object",
            "required": [
                "resourceType",
                "resourceId"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "definition",
                        "related"
                    ],
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "resourceType": {
                    "enum": [
                        "app",
                        "dataset"
                    ],
                    "type": "string"
                },
                "subResourceId": {
                    "type": "string"
                },
                "subResourceName": {
                    "type": "string",
                    "x-qlik-customer-data": true
                },
                "subResourceType": {
                    "enum": [
                        "master_dimension",
                        "master_measure"
                    ],
                    "type": "string"
                }
            },
            "description": "Describes links to other data assets such as analytics applications or dataset."
        },
        "termLinksTo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "x-qlik-filterable": true
                },
                "name": {
                    "type": "string",
                    "example": "Sales App",
                    "x-qlik-customer-data": true
                },
                "type": {
                    "enum": [
                        "definition",
                        "related"
                    ],
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Describes reason for item status during batch operation. E.g. why an error occurs during creation."
                },
                "status": {
                    "type": "number",
                    "example": 201,
                    "description": "Http status code for item during batch operation."
                },
                "openUrl": {
                    "type": "string",
                    "example": "https://tenant.qlik.com/sense/app/52bc4307-f9f2-4ce6-b521-67ca87018759"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "readOnly": true
                },
                "createdBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "x-qlik-filterable": true
                },
                "resourceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "x-qlik-filterable": true
                },
                "resourceType": {
                    "enum": [
                        "app",
                        "dataset"
                    ],
                    "type": "string",
                    "x-qlik-filterable": true
                },
                "subResourceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "x-qlik-filterable": true
                },
                "resourceSpaceId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea"
                },
                "subResourceName": {
                    "type": "string",
                    "example": "Sales YTD",
                    "x-qlik-customer-data": true
                },
                "subResourceType": {
                    "enum": [
                        "master_dimension",
                        "master_measure"
                    ],
                    "type": "string",
                    "x-qlik-filterable": true
                }
            },
            "description": "Describes links to other entities such as qlik charts, dataset columns etc."
        },
        "termRelatesTo": {
            "type": "object",
            "required": [
                "termId",
                "type"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "isA",
                        "hasA",
                        "seeAlso",
                        "synonym",
                        "antonym",
                        "classifies",
                        "other"
                    ],
                    "type": "string",
                    "description": "How the term related to the other object"
                },
                "termId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "The unique identifier of the related term. NOTE! In case of import the string refers to the index of the term in the import document."
                }
            }
        },
        "termsResult": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/term"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/resultMeta"
                },
                "links": {
                    "$ref": "#/components/schemas/pageLinks"
                }
            }
        },
        "termStatus": {
            "type": "object",
            "required": [
                "type",
                "updatedBy",
                "updatedAt"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "draft",
                        "verified",
                        "deprecated"
                    ],
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-10-02T14:20:50.52Z",
                    "description": "Time when the state was changed"
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "description": "The unique identifier of the user who last changed the status of the term"
                }
            },
            "description": "Terms status is used determine the status of a term"
        },
        "termTemplate": {
            "type": "object",
            "properties": {
                "relatedInformation": {
                    "type": "string",
                    "description": "Template text for new terms",
                    "x-qlik-customer-data": true
                }
            }
        },
        "AssignedRoles": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type",
                    "level",
                    "permissions"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique role identitier"
                    },
                    "name": {
                        "type": "string",
                        "example": "Developer",
                        "readOnly": true,
                        "description": "The role name",
                        "x-qlik-filterable": true
                    },
                    "type": {
                        "enum": [
                            "default"
                        ],
                        "type": "string",
                        "example": "default",
                        "readOnly": true,
                        "description": "The type of role"
                    },
                    "level": {
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "type": "string",
                        "example": "user",
                        "readOnly": true,
                        "description": "The role level"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "app:create"
                        ],
                        "readOnly": true,
                        "description": "An array of permissions associated to a given role."
                    }
                },
                "description": "represents a role entity stored in the database"
            },
            "description": "An array of role references."
        },
        "AssignedRolesRefIDs": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860ea",
                        "description": "The unique role identitier"
                    }
                },
                "description": "represents a role entity stored in the database"
            },
            "example": [
                {
                    "id": "507f191e810c19729de860ea"
                }
            ],
            "description": "An array of role reference identifiers."
        },
        "AssignedRolesRefNames": {
            "type": "array",
            "items": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "TenantAdmin",
                        "description": "The name of the role"
                    }
                }
            },
            "example": [
                {
                    "name": "TenantAdmin"
                }
            ],
            "description": "An array of role reference names."
        },
        "Filter": {
            "properties": {
                "filter": {
                    "type": "string",
                    "example": "(id eq \"626949b9017b657805080bbd\" or id eq \"626949bf017b657805080bbe\") and (status eq \"active\" or status eq \"deleted\")",
                    "description": "The advanced filtering to be applied the query. All conditional statements within this query parameter are case insensitive."
                }
            },
            "description": "An advanced query filter to be used for complex user querying in the tenant."
        },
        "Group": {
            "type": "object",
            "required": [
                "id",
                "tenantId",
                "name",
                "status",
                "createdAt",
                "lastUpdatedAt",
                "links"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The unique identifier for the group",
                    "x-qlik-filterable": true
                },
                "name": {
                    "type": "string",
                    "example": "Development",
                    "maxLength": 256,
                    "minLength": 1,
                    "description": "The name of the group.",
                    "x-qlik-filterable": true,
                    "x-qlik-customer-data": true
                },
                "idpId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "4ecbe7f9e8c1c9092c000027",
                    "description": "The unique identifier for the source IDP.",
                    "x-qlik-filterable": true,
                    "x-qlik-visibility": "private"
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/groups/507f191e810c19729de860ea",
                                    "description": "Link to the current group document"
                                }
                            }
                        }
                    },
                    "description": "Contains Links for current document"
                },
                "status": {
                    "enum": [
                        "active",
                        "disabled"
                    ],
                    "type": "string",
                    "example": "active",
                    "description": "The state of the group.",
                    "x-qlik-filterable": true
                },
                "tenantId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "12345678-1234-5678-1234-567812345678",
                    "description": "The tenant identifier associated with the given group"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-03-21T17:32:28Z",
                    "description": "The timestamp for when the group record was created.",
                    "x-qlik-filterable": true
                },
                "assignedRoles": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "id",
                            "name",
                            "type",
                            "level",
                            "permissions"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid",
                                "example": "507f191e810c19729de860ea",
                                "x-qlik-filterable": true
                            },
                            "name": {
                                "type": "string",
                                "example": "Developer",
                                "readOnly": true,
                                "x-qlik-filterable": true
                            },
                            "type": {
                                "enum": [
                                    "default"
                                ],
                                "type": "string",
                                "example": "default",
                                "readOnly": true,
                                "x-qlik-filterable": true
                            },
                            "level": {
                                "enum": [
                                    "admin",
                                    "user"
                                ],
                                "type": "string",
                                "example": "admin",
                                "readOnly": true,
                                "x-qlik-filterable": true
                            },
                            "permissions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "app:create"
                                ],
                                "readOnly": true,
                                "x-qlik-filterable": true
                            }
                        },
                        "description": "represents a role entity to be stored on a Group entity, either default or custom role"
                    }
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-03-22T10:01:02Z",
                    "description": "The timestamp for when the group record was last updated.",
                    "x-qlik-filterable": true
                }
            },
            "description": "represents a Group document"
        },
        "GroupPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "example": "replace",
                    "description": "The operation to be performed. Currently \"replace\" is the only supported operation."
                },
                "path": {
                    "enum": [
                        "assignedRoles"
                    ],
                    "type": "string",
                    "example": "assignedRoles",
                    "description": "Attribute name of a field of the Groups entity."
                },
                "value": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefIDs"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefNames"
                        }
                    ],
                    "description": "The roles to assign to the group (limit of 100 roles per group).",
                    "x-qlik-customer-data": true
                }
            },
            "description": "A JSON Patch document."
        },
        "GroupPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/GroupPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/assignedRoles",
                    "value": [
                        {
                            "name": "TenantAdmin"
                        },
                        {
                            "name": "AnalyticsAdmin"
                        }
                    ]
                }
            ],
            "description": "An array of JSON Patches for a group."
        },
        "GroupPostSchema": {
            "type": "object",
            "example": {
                "name": "Development",
                "status": "active",
                "assignedRoles": [
                    {
                        "name": "Developer"
                    }
                ]
            },
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Development",
                    "description": "The name of the group (maximum length of 256 characters).",
                    "x-qlik-customer-data": true
                },
                "status": {
                    "enum": [
                        "active"
                    ],
                    "type": "string",
                    "example": "active",
                    "description": "The status of the created group within the tenant. Defaults to active if empty."
                },
                "assignedRoles": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefIDs"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefNames"
                        }
                    ],
                    "description": "The roles to assign to the group (limit of 100 roles per group)."
                }
            }
        },
        "Groups": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "description": "An array of groups."
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/groups?next=FgAAAAdfaWQAYF33ydumcVj1cawoAA",
                                    "description": "Link to the next page of items"
                                }
                            }
                        },
                        "prev": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/groups?prev=FgAACAdfaWQAYF33ydumcVj1cawoAA",
                                    "description": "Link to the previous page of items"
                                }
                            }
                        },
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/groups",
                                    "description": "Link to the current page of items"
                                }
                            }
                        }
                    }
                },
                "totalResults": {
                    "type": "integer",
                    "description": "Indicates the total number of matching documents. Will only be returned if the query parameter \"totalResults\" is true."
                }
            },
            "description": "A result object when listing groups."
        },
        "GroupSettings": {
            "type": "object",
            "required": [
                "tenantId",
                "autoCreateGroups",
                "syncIdpGroups",
                "links"
            ],
            "properties": {
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/groups/settings",
                                    "description": "Link to the current group settings document"
                                }
                            }
                        }
                    },
                    "description": "Contains Links for current document"
                },
                "tenantId": {
                    "type": "string",
                    "format": "UUID",
                    "description": "The unique tenant identifier."
                },
                "systemGroups": {
                    "type": "object",
                    "properties": {
                        "000000000000000000000001": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "enum": [
                                        "000000000000000000000001"
                                    ],
                                    "type": "string",
                                    "description": "The ID of the Everyone group. This value will not change and is immutable."
                                },
                                "name": {
                                    "enum": [
                                        "com.qlik.Everyone"
                                    ],
                                    "type": "string",
                                    "description": "The name of the Everyone group. This value will not change and is immutable."
                                },
                                "enabled": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "For Everyone, this is always `true` and can't be patched."
                                },
                                "createdAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2021-03-22T10:01:02Z",
                                    "description": "The timestamp for when the Everyone group was created."
                                },
                                "assignedRoles": {
                                    "$ref": "#/components/schemas/AssignedRoles"
                                },
                                "lastUpdatedAt": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2021-03-22T10:01:02Z",
                                    "description": "The timestamp for when the Everyone group was last updated."
                                }
                            }
                        }
                    }
                },
                "syncIdpGroups": {
                    "type": "boolean",
                    "example": false,
                    "description": "Determines if groups should be created on login."
                },
                "autoCreateGroups": {
                    "type": "boolean",
                    "example": false,
                    "description": "Determines if groups should be created on login."
                }
            },
            "description": "represents a GroupSetting document"
        },
        "SettingsPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/autoCreateGroups",
                        "/syncIdpGroups",
                        "/systemGroups/{id}/assignedRoles"
                    ],
                    "type": "string",
                    "description": "A JSON Pointer."
                },
                "value": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefIDs"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefNames"
                        }
                    ],
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
        },
        "SettingsPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/SettingsPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/syncIdpGroups",
                    "value": true
                },
                {
                    "op": "replace",
                    "path": "/autoCreateGroups",
                    "value": true
                },
                {
                    "op": "replace",
                    "path": "/systemGroups/000000000000000000000001/assignedRoles",
                    "value": [
                        {
                            "name": "Steward"
                        }
                    ]
                }
            ],
            "description": "An array of JSON Patches for the groups settings."
        },
        "BaseIDP": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the IdP."
                },
                "meta": {
                    "type": "object"
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the IdP is available for use."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp for when the IdP was created."
                },
                "protocol": {
                    "$ref": "#/components/schemas/IDPProtocol"
                },
                "provider": {
                    "$ref": "#/components/schemas/IDPProvider"
                },
                "tenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tenant identifiers associated with the given IdP."
                },
                "description": {
                    "type": "string"
                },
                "interactive": {
                    "type": "boolean",
                    "description": "Indicates the type of connection with the IdP, either interactive login or a machine to machine connection."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp for when the IdP was last updated."
                },
                "clockToleranceSec": {
                    "type": "number"
                },
                "createNewUsersOnLogin": {
                    "type": "boolean",
                    "description": "When the flag is true, new users should be created when logging in for the first time."
                },
                "postLogoutRedirectUri": {
                    "type": "string",
                    "description": "Direct the user on logout to a specific URI."
                }
            }
        },
        "claimsMappingInteractive": {
            "type": "object",
            "properties": {
                "sub": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's subject."
                },
                "name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's name."
                },
                "email": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's email."
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's groups."
                },
                "locale": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's locale."
                },
                "picture": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's picture."
                },
                "zoneinfo": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's zoneinfo."
                },
                "client_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's client ID."
                },
                "email_verified": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's email_verified claim."
                }
            },
            "description": "Mappings from claim name to an array of JSON pointers that point to locations in the claims from the IdP to retrieve the value from."
        },
        "claimsMappingNonInteractive": {
            "type": "object",
            "properties": {
                "sub": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's subject."
                },
                "client_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of JSON pointers used to map the user's client ID."
                }
            },
            "description": "Mappings from claim name to an array of JSON pointers that point to locations in the claims from the IdP to retrieve the value from."
        },
        "CreateJWTAuthPayload": {
            "type": "object",
            "required": [
                "provider",
                "protocol",
                "options"
            ],
            "properties": {
                "options": {
                    "type": "object",
                    "required": [
                        "issuer",
                        "staticKeys"
                    ],
                    "properties": {
                        "issuer": {
                            "type": "string",
                            "description": "The JWT issuer."
                        },
                        "staticKeys": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": [
                                    "kid",
                                    "pem"
                                ],
                                "properties": {
                                    "kid": {
                                        "type": "string",
                                        "description": "Key ID used to sign the JWTs."
                                    },
                                    "pem": {
                                        "type": "string",
                                        "description": "Pem-encoded public key for verifying the JWTs."
                                    }
                                }
                            },
                            "description": "Keys for verifying JWTs. Limited to 1 key per identity provider."
                        }
                    },
                    "description": "Required IdP configurations."
                },
                "protocol": {
                    "enum": [
                        "jwtAuth"
                    ],
                    "type": "string",
                    "description": "The protocol to be used for communicating with the identity provider."
                },
                "provider": {
                    "enum": [
                        "external"
                    ],
                    "type": "string",
                    "description": "The identity provider to be used."
                },
                "tenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tenant identifiers that map to the given IdP."
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "clockToleranceSec": {
                    "type": "number",
                    "default": 5,
                    "maximum": 7200,
                    "minimum": 0,
                    "description": "There can be clock skew between the IdP and Qlik's login server, in these cases a tolerance can be set, decimals will be rounded off."
                }
            },
            "description": "Payload for creating an identity provider using JWT authentication."
        },
        "CreateOIDCPayload": {
            "type": "object",
            "required": [
                "provider",
                "protocol",
                "interactive"
            ],
            "properties": {
                "options": {
                    "type": "object",
                    "required": [
                        "claimsMapping"
                    ],
                    "properties": {
                        "realm": {
                            "type": "string",
                            "pattern": "^[A-Za-z0-9][A-Za-z0-9.\\-_]+$",
                            "maxLength": 254,
                            "description": "The realm identifier for the IdP."
                        },
                        "audience": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Allows for setting audience in access tokens."
                        },
                        "discoveryUrl": {
                            "type": "string",
                            "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration). Required if openid_configuration is not given."
                        },
                        "claimsMapping": {
                            "$ref": "#/components/schemas/claimsMappingNonInteractive"
                        },
                        "allowedClientIds": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Only clients with IDs in this list will be allowed API access. A blank list or empty value means any client IDs authenticated against the IdP will be allowed access."
                        },
                        "openid_configuration": {
                            "$ref": "#/components/schemas/OpenIDConfiguration"
                        }
                    },
                    "description": "Required OIDC configurations for non-interactive IdPs and interactive IdPs with `skipVerify` flag enabled."
                },
                "protocol": {
                    "enum": [
                        "OIDC"
                    ],
                    "type": "string",
                    "description": "The protocol to be used for communicating with the identity provider."
                },
                "provider": {
                    "enum": [
                        "auth0",
                        "okta",
                        "generic",
                        "salesforce",
                        "keycloak",
                        "adfs",
                        "azureAD"
                    ],
                    "type": "string",
                    "description": "The identity provider to be used."
                },
                "tenantIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tenant identifiers that map to the given IdP."
                },
                "skipVerify": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to `true`, skips IdP verification process and assumes the IdP is verified."
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "interactive": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether the IdP is meant for interactive login."
                },
                "pendingOptions": {
                    "type": "object",
                    "required": [
                        "clientId",
                        "clientSecret",
                        "claimsMapping"
                    ],
                    "properties": {
                        "realm": {
                            "type": "string",
                            "pattern": "^[A-Za-z0-9][A-Za-z0-9.\\-_]+$",
                            "maxLength": 254,
                            "description": "The realm identifier for the IdP."
                        },
                        "scope": {
                            "type": "string",
                            "maxLength": 254,
                            "description": "Scope which will be sent along with token requests to the IdP. Scopes should be space delimited. Will default to certain values depending on the IdP provider."
                        },
                        "clientId": {
                            "type": "string",
                            "description": "The client identifier used as part of authenticating an interactive identity provider."
                        },
                        "clientSecret": {
                            "type": "string",
                            "description": "The client secret used as part of authenticating an interactive identity provider."
                        },
                        "discoveryUrl": {
                            "type": "string",
                            "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration). Required if openid_configuration is not given."
                        },
                        "claimsMapping": {
                            "$ref": "#/components/schemas/claimsMappingInteractive"
                        },
                        "openid_configuration": {
                            "$ref": "#/components/schemas/OpenIDConfiguration"
                        },
                        "useClaimsFromIdToken": {
                            "type": "boolean",
                            "description": "If true, will use the claims from the ID token. By default it is set to true for ADFS and AzureAD."
                        },
                        "blockOfflineAccessScope": {
                            "type": "boolean",
                            "description": "When true, the `offline_access` scope will not be requested from the IdP where applicable."
                        },
                        "emailVerifiedAlwaysTrue": {
                            "type": "boolean",
                            "description": "Only ADFS and AzureAD IdPs can set this property. For ADFS and AzureAD, it defaults to false. For other IdPs, it defaults to undefined."
                        }
                    },
                    "description": "Required OIDC configurations for interactive IdPs that require verification."
                },
                "clockToleranceSec": {
                    "type": "number",
                    "default": 5,
                    "maximum": 7200,
                    "minimum": 0,
                    "description": "There can be clock skew between the IdP and Qlik's login server. In these cases, a tolerance can be set, decimals will be rounded off."
                },
                "createNewUsersOnLogin": {
                    "type": "boolean",
                    "default": true,
                    "description": "Tells the consumer of the IdP that new users should be created on login if they don't exist."
                },
                "postLogoutRedirectUri": {
                    "type": "string",
                    "maxLength": 2083,
                    "description": "Direct the user on logout to a specific URI."
                }
            },
            "description": "Payload for creating an OIDC-compatible identity provider."
        },
        "IDP": {
            "oneOf": [
                {
                    "$ref": "#/components/schemas/IDPOIDC"
                },
                {
                    "$ref": "#/components/schemas/IDPJWTAuth"
                }
            ],
            "discriminator": {
                "propertyName": "protocol"
            }
        },
        "IDPArray": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/IDP"
                    },
                    "description": "An array of IdPs."
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "IDPJWTAuth": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/BaseIDP"
                },
                {
                    "type": "object",
                    "properties": {
                        "options": {
                            "type": "object",
                            "properties": {
                                "issuer": {
                                    "type": "string",
                                    "description": "The expected JWT issuer"
                                },
                                "staticKeys": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "kid": {
                                                "type": "string",
                                                "description": "Key ID used to sign the JWTs."
                                            },
                                            "pem": {
                                                "type": "string",
                                                "description": "Pem-encoded public key for verifying the JWTs."
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ],
            "description": "An identity provider for JWT authentication."
        },
        "IDPMeta": {
            "type": "object",
            "properties": {
                "userPortalLink": {
                    "type": "string",
                    "description": "A link to direct you to where you can manage your Qlik account. Only available if the default identity provider is used (no custom interactive identity providers are active)."
                },
                "upgradeSubscriptionLink": {
                    "type": "string",
                    "description": "A link to direct you to where you can upgrade your trial or manage your subscriptions. Only available if the default identity provider is used (no custom interactive identity providers are active)."
                }
            }
        },
        "IDPOIDC": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/BaseIDP"
                },
                {
                    "type": "object",
                    "properties": {
                        "options": {
                            "$ref": "#/components/schemas/IDPOptions"
                        },
                        "pendingState": {
                            "enum": [
                                "verified",
                                "pending",
                                "error"
                            ],
                            "type": "string",
                            "description": "The state of pendingOptions. This represents the latest IdP test result."
                        },
                        "pendingResult": {
                            "$ref": "#/components/schemas/PendingResult"
                        },
                        "pendingOptions": {
                            "$ref": "#/components/schemas/IDPOptions"
                        }
                    }
                }
            ],
            "description": "An OIDC-compliant identity provider."
        },
        "IDPOptions": {
            "type": "object",
            "properties": {
                "realm": {
                    "type": "string",
                    "description": "The realm identifier for the IdP."
                },
                "scope": {
                    "type": "string",
                    "description": "Scope that will be sent along with token requests to the IdP."
                },
                "issuer": {
                    "type": "string",
                    "description": "This field is only used in Qlik Sense Enterprise Client-Managed IdPs."
                },
                "clientId": {
                    "type": "string",
                    "description": "The client identifier used as part of authenticating an interactive identity provider."
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret used as part of authenticating an interactive identity provider."
                },
                "discoveryUrl": {
                    "type": "string",
                    "description": "The OpenID configuration endpoint. (Ex: https://<domain>/.well-known/openid-configuration)."
                },
                "claimsMapping": {
                    "$ref": "#/components/schemas/claimsMappingInteractive"
                },
                "openid_configuration": {
                    "$ref": "#/components/schemas/OpenIDConfiguration"
                },
                "blockOfflineAccessScope": {
                    "type": "boolean",
                    "description": "If true, the `offline_access` scope will not be requested from the IdP, where applicable."
                },
                "emailVerifiedAlwaysTrue": {
                    "type": "boolean",
                    "description": "Determines if email_verified should be always true. This field is only used in ADFS and AzureAD IdPs."
                }
            }
        },
        "IDPPatchSchema": {
            "oneOf": [
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PatchOIDCPayload"
                    }
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PatchJWTAuthPayload"
                    }
                }
            ]
        },
        "IDPPostSchema": {
            "oneOf": [
                {
                    "$ref": "#/components/schemas/CreateOIDCPayload"
                },
                {
                    "$ref": "#/components/schemas/CreateJWTAuthPayload"
                }
            ],
            "discriminator": {
                "propertyName": "protocol"
            }
        },
        "IDPProtocol": {
            "enum": [
                "OIDC",
                "jwtAuth",
                "qsefw-local-bearer-token"
            ],
            "type": "string",
            "description": "The protocol to be used for communicating with the identity provider. Valid values are `OIDC`, `jwtAuth`, and `qsefw-local-bearer-token`."
        },
        "IDPProvider": {
            "enum": [
                "auth0",
                "okta",
                "qlik",
                "generic",
                "salesforce",
                "keycloak",
                "adfs",
                "external",
                "azureAD"
            ],
            "type": "string",
            "description": "The identity provider to be used. If protocol is `OIDC`, the valid values are `auth0`, `okta`, `generic`, `salesforce`, `keycloak`, `adfs`, and `azureAD`. If protocol is `jwtAuth`, the valid value is `external`."
        },
        "IDPsStatus": {
            "type": "object",
            "properties": {
                "idps_metadata": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "active": {
                                "type": "boolean",
                                "description": "Indicates whether the IdP is available for use."
                            },
                            "provider": {
                                "$ref": "#/components/schemas/IDPProvider"
                            },
                            "interactive": {
                                "type": "boolean",
                                "description": "Indicates whether the IdP is meant for interactive login."
                            }
                        }
                    },
                    "description": "A list of IdP metadata."
                },
                "active_interactive_idps_count": {
                    "type": "number",
                    "description": "The number of active interactive IdPs."
                }
            }
        },
        "OpenIDConfiguration": {
            "type": "object",
            "required": [
                "issuer",
                "authorization_endpoint",
                "token_endpoint",
                "jwks_uri"
            ],
            "properties": {
                "issuer": {
                    "type": "string",
                    "description": "OpenID Provider issuer"
                },
                "jwks_uri": {
                    "type": "string",
                    "description": "URL of the OP's JSON Web Key Set [JWK] document"
                },
                "token_endpoint": {
                    "type": "string",
                    "description": "OAuth 2.0 Token Endpoint"
                },
                "userinfo_endpoint": {
                    "type": "string",
                    "description": "URL of the OP's UserInfo Endpoint"
                },
                "end_session_endpoint": {
                    "type": "string",
                    "description": "URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP."
                },
                "authorization_endpoint": {
                    "type": "string",
                    "description": "OAuth 2.0 Authorization Endpoint"
                },
                "introspection_endpoint": {
                    "type": "string",
                    "description": "The introspection endpoint is an OAuth 2.0 endpoint that takes a parameter representing an OAuth 2.0 token and returns a JSON [RFC7159] document representing the meta information."
                }
            },
            "description": "OpenID configuration"
        },
        "PatchJWTAuthPayload": {
            "type": "object",
            "required": [
                "op"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The \"operation\" to be performed on a given IdP."
                },
                "path": {
                    "enum": [
                        "/description"
                    ],
                    "type": "string",
                    "description": "The \"path\" to the part of the IdP document."
                },
                "value": {
                    "description": "The \"value\" data type is dependent on the path value being used."
                }
            },
            "description": "A patch request for an identity provider using the `jwtAuth` protocol."
        },
        "PatchOIDCPayload": {
            "type": "object",
            "required": [
                "op"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace",
                        "promote-options"
                    ],
                    "type": "string",
                    "description": "The \"operation\" to be performed on a given IdP. Currently supports a custom operation value called \"promote-options\" that allows the test configuration to be promoted to the current configuration used for login."
                },
                "path": {
                    "enum": [
                        "/active",
                        "/description",
                        "/meta",
                        "/options",
                        "/options/realm",
                        "/options/discoveryUrl",
                        "/options/claimsMapping",
                        "/pendingOptions",
                        "/pendingOptions/realm",
                        "/pendingOptions/discoveryUrl",
                        "/pendingOptions/clientId",
                        "/pendingOptions/clientSecret",
                        "/pendingOptions/emailVerifiedAlwaysTrue",
                        "/pendingOptions/claimsMapping",
                        "/postLogoutRedirectUri",
                        "/clockToleranceSec"
                    ],
                    "type": "string",
                    "description": "The \"path\" to the part of the IdP document."
                },
                "value": {
                    "description": "The \"value\" data type is dependent on the path value being used."
                }
            },
            "description": "A patch request for an identity provider using the `OIDC` protocol."
        },
        "PendingResult": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "error": {
                    "type": "string",
                    "description": "A unique readable error message based on the error that has occurred."
                },
                "status": {
                    "enum": [
                        "success",
                        "pending",
                        "error",
                        "claimsError",
                        "callbackError",
                        "tokenError",
                        "protocolError",
                        "networkError",
                        "configChangedDuringTestError"
                    ],
                    "type": "string",
                    "description": "The status of the IdP configuration being tested."
                },
                "started": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp for when the test was started for an IdP configuration. This field is only available during lifespan of the test."
                },
                "idpClaims": {
                    "type": "object",
                    "x-qlik-pii": true,
                    "description": "The claims retrieved from the external IdP."
                },
                "oauth2Error": {
                    "type": "object",
                    "required": [
                        "error"
                    ],
                    "properties": {
                        "error": {
                            "type": "string",
                            "description": "An error code to identity the authentication error."
                        },
                        "errorURI": {
                            "type": "string",
                            "description": "An optional URI that includes additional information about the given error."
                        },
                        "errorDescription": {
                            "type": "string",
                            "description": "An optional human-readable description for the given error code."
                        }
                    }
                },
                "resultantClaims": {
                    "type": "object",
                    "x-qlik-pii": true,
                    "description": "The resultant claims based on the claims received from the external IdP."
                }
            }
        },
        "ItemsListItemCollectionsResponseBody": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/collectionResultResponseBody"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/collectionsLinksResponseBody"
                }
            },
            "description": "ListItemCollectionsResponseBody result type"
        },
        "ItemsListItemsResponseBody": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/itemResultResponseBody"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/itemsLinksResponseBody"
                }
            },
            "description": "ListItemsResponseBody result type"
        },
        "ItemsSettingsPatch": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed. Only \"replace\" is supported."
                    },
                    "path": {
                        "enum": [
                            "/usageMetricsEnabled"
                        ],
                        "type": "string",
                        "description": "Field of Settings to be patched (updated)."
                    },
                    "value": {
                        "type": "boolean",
                        "description": "The value to be used within the operations.\n"
                    }
                },
                "description": "A JSONPatch document as defined by RFC 6902."
            }
        },
        "ItemsSettingsResponseBody": {
            "type": "object",
            "required": [
                "usageMetricsEnabled"
            ],
            "properties": {
                "usageMetricsEnabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Decides if the usage metrics will be shown in the hub UI."
                }
            }
        },
        "ItemsUpdateItemRequestBody": {
            "type": "object",
            "required": [
                "resourceType"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "spaceId": {
                    "type": "string",
                    "description": "The space's unique identifier."
                },
                "resourceId": {
                    "type": "string",
                    "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                },
                "description": {
                    "type": "string"
                },
                "thumbnailId": {
                    "type": "string",
                    "description": "The item thumbnail's unique identifier. This is optional for internal resources."
                },
                "resourceLink": {
                    "type": "string",
                    "format": "uri",
                    "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
                },
                "resourceType": {
                    "$ref": "#/components/schemas/itemResourceTypeEnum"
                },
                "resourceSubType": {
                    "type": "string",
                    "description": "Optional field defining the item's subtype, if any."
                },
                "resourceUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The RFC3339 datetime when the resource that the item references was last updated."
                },
                "resourceAttributes": {
                    "type": "object",
                    "additionalProperties": true
                },
                "resourceCustomAttributes": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "assignmentsActionsAddRequest": {
            "type": "object",
            "example": {
                "add": [
                    {
                        "type": "professional",
                        "subject": "qlik\\kalle"
                    },
                    {
                        "type": "analyzer",
                        "subject": "qlik\\nalle"
                    }
                ]
            },
            "required": [
                "add"
            ],
            "properties": {
                "add": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "subject",
                            "type"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "User name"
                            },
                            "type": {
                                "type": "string",
                                "description": "Allotment type"
                            },
                            "userId": {
                                "type": "string",
                                "description": "User ID"
                            },
                            "subject": {
                                "type": "string",
                                "description": "User subject"
                            }
                        }
                    }
                }
            }
        },
        "assignmentsActionsAddResponse": {
            "type": "object",
            "example": {
                "data": [
                    {
                        "type": "professional",
                        "status": 201,
                        "subject": "qlik\\kalle"
                    },
                    {
                        "code": "LICENSES-011",
                        "type": "analyzer",
                        "title": "No available allotment error, No available allotment.",
                        "status": 403,
                        "subject": "qlik\\nalle"
                    }
                ]
            },
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "required": [
                            "subject",
                            "status"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Error code"
                            },
                            "type": {
                                "type": "string",
                                "description": "Allotment type"
                            },
                            "title": {
                                "type": "string",
                                "description": "Error title"
                            },
                            "status": {
                                "type": "integer",
                                "description": "Response status"
                            },
                            "subject": {
                                "type": "string",
                                "x-qlik-pii": true,
                                "description": "Subject"
                            }
                        }
                    }
                }
            }
        },
        "assignmentsActionsDeleteRequest": {
            "type": "object",
            "example": {
                "delete": [
                    {
                        "type": "analyzer",
                        "subject": "qlik\\malik"
                    }
                ]
            },
            "required": [
                "delete"
            ],
            "properties": {
                "delete": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "subject",
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Allotment type"
                            },
                            "subject": {
                                "type": "string",
                                "description": "User subject"
                            }
                        }
                    }
                }
            }
        },
        "assignmentsActionsDeleteResponse": {
            "type": "object",
            "example": {
                "data": [
                    {
                        "type": "professional",
                        "status": 200,
                        "subject": "qlik\\malik"
                    },
                    {
                        "code": "LICENSES-016",
                        "type": "analyzer",
                        "title": "Assignment not found.",
                        "status": 404,
                        "subject": "qlik\\no"
                    }
                ]
            },
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "required": [
                            "status"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Error code"
                            },
                            "type": {
                                "type": "string",
                                "description": "Allotment type"
                            },
                            "title": {
                                "type": "string",
                                "description": "Error title"
                            },
                            "status": {
                                "type": "integer",
                                "description": "Response status"
                            },
                            "subject": {
                                "type": "string",
                                "x-qlik-pii": true,
                                "description": "Subject"
                            }
                        }
                    }
                }
            }
        },
        "assignmentsActionsUpdateRequest": {
            "type": "object",
            "example": {
                "update": [
                    {
                        "type": "professional",
                        "subject": "qlik\\malik",
                        "sourceType": "analyzer"
                    }
                ]
            },
            "required": [
                "update"
            ],
            "properties": {
                "update": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "subject",
                            "sourceType",
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Target assignment type."
                            },
                            "subject": {
                                "type": "string",
                                "description": "User subject"
                            },
                            "sourceType": {
                                "type": "string",
                                "description": "Current assignment type."
                            }
                        }
                    }
                }
            }
        },
        "assignmentsActionsUpdateResponse": {
            "type": "object",
            "example": {
                "data": [
                    {
                        "type": "professional",
                        "status": 200,
                        "subject": "qlik\\malik",
                        "sourceType": "analyzer"
                    },
                    {
                        "code": "LICENSES-016",
                        "title": "Assignment not found.",
                        "status": 404,
                        "subject": "qlik/sara",
                        "sourceType": "analyzer"
                    }
                ]
            },
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "required": [
                            "status"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Error code"
                            },
                            "type": {
                                "type": "string",
                                "description": "Target allotment type."
                            },
                            "title": {
                                "type": "string",
                                "description": "Error title"
                            },
                            "status": {
                                "type": "integer",
                                "description": "Response status"
                            },
                            "subject": {
                                "type": "string",
                                "x-qlik-pii": true,
                                "description": "Subject"
                            },
                            "sourceType": {
                                "type": "string",
                                "description": "Current allotment type."
                            }
                        }
                    }
                }
            }
        },
        "assignmentsResponse": {
            "type": "object",
            "example": {
                "data": [
                    {
                        "type": "analyzer",
                        "excess": false,
                        "created": "2020-12-03T09:24:48.114Z",
                        "subject": "qlik\\kalle"
                    },
                    {
                        "type": false,
                        "created": "2020-12-03T09:24:48.114Z",
                        "subject": "qlik\\nalle"
                    }
                ],
                "links": {
                    "next": {
                        "href": "http://license/v1/licenses/assignments?limit=4&page=bmV4dDpGZ0FBQUFkZmFXUUFYOHBUcTlpM1U4UU1YWHZrQUE%3D"
                    },
                    "prev": {
                        "href": "http://license/v1/licenses/assignments?limit=4&page=cHJldjpGZ0FBQUFkZmFXUUFYOHBUcTlpM1U4UU1YWHZ0QUE%3D"
                    }
                }
            },
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "required": [
                            "type",
                            "subject",
                            "excess",
                            "created"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Allotment type"
                            },
                            "excess": {
                                "type": "boolean",
                                "description": "Assignment excess status."
                            },
                            "userId": {
                                "type": "string",
                                "description": "User ID",
                                "x-qlik-deprecated": true
                            },
                            "created": {
                                "type": "string",
                                "description": "Assignment created date."
                            },
                            "subject": {
                                "type": "string",
                                "x-qlik-pii": true,
                                "description": "Subject"
                            }
                        }
                    }
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/href"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/href"
                        }
                    }
                }
            }
        },
        "consumptionEventsResponse": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "ID"
                            },
                            "appId": {
                                "type": "string",
                                "description": "App ID"
                            },
                            "userId": {
                                "type": "string",
                                "description": "User ID"
                            },
                            "endTime": {
                                "type": "string",
                                "description": "Engine session end time.",
                                "x-qlik-filterable": true
                            },
                            "duration": {
                                "type": "string",
                                "description": "Engine session duration."
                            },
                            "sessionId": {
                                "type": "string",
                                "description": "Engine session ID."
                            },
                            "allotmentId": {
                                "type": "string",
                                "description": "Allotment ID"
                            },
                            "minutesUsed": {
                                "type": "integer",
                                "description": "Analyzer capacity minutes consumed."
                            },
                            "capacityUsed": {
                                "type": "integer",
                                "description": "Analyzer capacity chunks consumed."
                            },
                            "licenseUsage": {
                                "type": "string",
                                "description": "License usage"
                            }
                        }
                    }
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/href"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/href"
                        }
                    }
                }
            }
        },
        "licenseOverview": {
            "type": "object",
            "example": {
                "trial": false,
                "valid": "2018-01-01/2018-12-31",
                "origin": "Internal",
                "status": "Ok",
                "product": "Qlik Sense Enterprise SaaS",
                "allotments": [
                    {
                        "name": "analyzer_time",
                        "units": 300,
                        "overage": 100,
                        "unitsUsed": 242,
                        "usageClass": "time"
                    },
                    {
                        "name": "professional",
                        "units": 200,
                        "unitsUsed": 15,
                        "usageClass": "assigned"
                    }
                ],
                "licenseKey": "hejhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IktFWTEifQ.eyJqdGkiOiIxZjZkZTc0Zi04MDcyLTRjMTQtYjc1OS02ZjlkYmJmYWM5MjAiLCJsaWNlbnNlIjoiOTk5OTAwMDAwMDAwMTIzNCJ9.fwa6l6gY1MR_Ja2OMnV65V68fbzQYW5OAKUFnLfG9oZjNAbjhdDkZvS2S2zHaBnSrSva1ARh5iq_S0KTBOKKcJJDTb7jRVURyaAvbCuBDk_0ITrUudHaT9U_Mc9EKkfT8mR6vthhZxVzEhyYPFS7gDw7M6bav2ntpDsoJFPgous",
                "parameters": [
                    {
                        "name": "qlikAlerting",
                        "valid": "./.",
                        "values": {
                            "saas_alerting": "FULL"
                        }
                    }
                ],
                "licenseNumber": "9999000000001204",
                "secondaryNumber": "12345"
            },
            "required": [
                "allotments",
                "licenseKey",
                "licenseNumber",
                "origin",
                "updated",
                "parameters",
                "product",
                "status",
                "trial",
                "valid",
                "secondaryNumber"
            ],
            "properties": {
                "trial": {
                    "type": "boolean",
                    "description": "Boolean indicating if it is a trial license."
                },
                "valid": {
                    "type": "string",
                    "description": "Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end."
                },
                "origin": {
                    "enum": [
                        "Internal",
                        "External"
                    ],
                    "type": "string",
                    "description": "Origin of license key."
                },
                "status": {
                    "enum": [
                        "Ok",
                        "Blacklisted",
                        "Expired"
                    ],
                    "type": "string",
                    "description": "Enum with status of license. Only status Ok grants license. access."
                },
                "product": {
                    "type": "string",
                    "description": "The product the license is valid for."
                },
                "updated": {
                    "type": "string",
                    "description": "An ISO 8601 timestamp for when the license was last updated."
                },
                "allotments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "units",
                            "unitsUsed",
                            "usageClass"
                        ],
                        "properties": {
                            "name": {
                                "enum": [
                                    "professional",
                                    "analyzer",
                                    "analyzer_time"
                                ],
                                "type": "string"
                            },
                            "units": {
                                "type": "integer"
                            },
                            "overage": {
                                "type": "integer",
                                "description": "Overage value; -1 means unbounded overage."
                            },
                            "unitsUsed": {
                                "type": "integer"
                            },
                            "usageClass": {
                                "type": "string"
                            }
                        }
                    }
                },
                "changeTime": {
                    "type": "string",
                    "description": "An ISO 8601 timestamp for when the license was last changed."
                },
                "licenseKey": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "valid"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Parameter set (provision) name."
                            },
                            "valid": {
                                "type": "string",
                                "pattern": "^(\\.|\\d{4}-\\d{2}-\\d{2})/(\\.|\\d{4}-\\d{2}-\\d{2})$",
                                "description": "Time interval for parameter validity."
                            },
                            "access": {
                                "type": "object",
                                "properties": {
                                    "allotment": {
                                        "type": "string",
                                        "description": "Name of an allotment that the user must have access to. to"
                                    }
                                },
                                "description": "Parameters for licenses to control access to the parameters."
                            },
                            "values": {
                                "type": "object",
                                "properties": {},
                                "description": "Parameter values"
                            }
                        }
                    },
                    "description": "The license parameters."
                },
                "licenseType": {
                    "type": "string"
                },
                "licenseNumber": {
                    "type": "string"
                },
                "latestValidTime": {
                    "type": "string",
                    "description": "An ISO 8601 timestamp for when the latest time the license has been known to be valid, a missing value indicates the indefinite future."
                },
                "secondaryNumber": {
                    "type": "string",
                    "description": "The secondary number of a definition."
                }
            }
        },
        "licenseStatus": {
            "type": "object",
            "example": {
                "type": "Signed",
                "trial": false,
                "valid": "2018-01-01/2018-12-31",
                "origin": "Internal",
                "status": "Ok",
                "product": "Qlik Sense Business"
            },
            "required": [
                "origin",
                "product",
                "status",
                "trial",
                "type",
                "valid"
            ],
            "properties": {
                "type": {
                    "enum": [
                        "Signed",
                        "Plain"
                    ],
                    "type": "string",
                    "description": "Type of license key."
                },
                "trial": {
                    "type": "boolean",
                    "description": "Boolean indicating if it is a trial license."
                },
                "valid": {
                    "type": "string",
                    "description": "Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end."
                },
                "origin": {
                    "enum": [
                        "Internal",
                        "External"
                    ],
                    "type": "string",
                    "description": "Origin of license key."
                },
                "status": {
                    "enum": [
                        "Ok",
                        "Blacklisted",
                        "Expired",
                        "Missing"
                    ],
                    "type": "string",
                    "description": "Enum with status of license. Only status Ok grants license. access."
                },
                "product": {
                    "type": "string",
                    "description": "The product the license is valid for."
                }
            }
        },
        "settingsBody": {
            "type": "object",
            "example": {
                "autoAssignAnalyzer": true,
                "autoAssignProfessional": false
            },
            "properties": {
                "autoAssignAnalyzer": {
                    "type": "boolean",
                    "description": "If analyzer users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available."
                },
                "autoAssignProfessional": {
                    "type": "boolean",
                    "description": "If professional users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available."
                }
            }
        },
        "edge": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "nullable": true,
                    "description": "The index of edges. This is only used in the POST request."
                },
                "source": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "description": "The id (QRI) of the source node on this edge."
                },
                "target": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "description": "The id (QRI) of the target node on this edge."
                },
                "metadata": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "relation": {
                    "type": "string",
                    "example": [
                        "LOAD",
                        "STORE",
                        "READ",
                        "FROM"
                    ]
                }
            }
        },
        "emptyReturn": {
            "type": "object"
        },
        "errorResponse-400": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-400"
                            },
                            "title": {
                                "type": "string",
                                "example": "Bad Request"
                            },
                            "detail": {
                                "type": "string",
                                "example": "Something is not right in the request."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "errorResponse-403": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-403"
                            },
                            "title": {
                                "type": "string",
                                "example": "Forbidden"
                            },
                            "detail": {
                                "type": "string",
                                "example": "You don't have sufficient permissions to access this resource."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "errorResponse-404": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-404"
                            },
                            "title": {
                                "type": "string",
                                "example": "Not Found"
                            },
                            "detail": {
                                "type": "string",
                                "example": "The resource either never existed, or may have been deleted."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "errorResponse-500": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-500"
                            },
                            "meta": {
                                "type": "object",
                                "example": "{\"id\":\"e5c651d5-1198-45a2-be5d-f016cee0baf5\"}",
                                "description": "The meta contains additional inforomation when requests fail due to internal errors."
                            },
                            "title": {
                                "type": "string",
                                "example": "Internal Server Error"
                            },
                            "detail": {
                                "type": "string",
                                "example": "Something went wrong in the server."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "errorResponse-503": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "HTTP-503"
                            },
                            "title": {
                                "type": "string",
                                "example": "Service Unavailable"
                            },
                            "detail": {
                                "type": "string",
                                "example": "The service is unavailable."
                            }
                        }
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "graph": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "edges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/edge"
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label string for this graph."
                },
                "nodes": {
                    "$ref": "#/components/schemas/nodes"
                },
                "directed": {
                    "type": "boolean",
                    "description": "Returns true if the graph is directed."
                },
                "metadata": {
                    "type": "object",
                    "properties": {
                        "total": {
                            "type": "integer",
                            "description": "The total number of nodes retrieved in this graph."
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "The date and time when the graph is created."
                        },
                        "producerId": {
                            "type": "string",
                            "example": "qri:db:oracle://LfxVj_3du3GYdWdNaa721lOWvbhENXEArBpl58h96YE#ZfH0lkXnTTGu7QGnIvKZpIxFNagQivBtnbC_cAoCPOs",
                            "description": "The id (QRI) of the graph producer."
                        },
                        "specVersion": {
                            "type": "string"
                        },
                        "producerType": {
                            "type": "string",
                            "example": [
                                "QDA",
                                "EXTERNAL"
                            ],
                            "description": "The type of the graph producer."
                        }
                    }
                }
            },
            "description": "The lineage graph containing the node."
        },
        "graphs": {
            "type": "object",
            "title": "Graphs",
            "properties": {
                "graphs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/graph"
                    }
                }
            },
            "description": "The list of lineage graphs."
        },
        "lineageOverviewInfo": {
            "type": "object",
            "properties": {
                "tableQRI": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "nullable": true,
                    "description": "Table level QRI that the field belongs to."
                },
                "tableLabel": {
                    "type": "string",
                    "nullable": true,
                    "description": "Table level label"
                },
                "resourceQRI": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "nullable": true,
                    "description": "Resource level QRI"
                },
                "resourceLabel": {
                    "type": "string",
                    "nullable": true,
                    "description": "Resource level label"
                }
            }
        },
        "multiStatusResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/multiStatusResponseItem"
                    }
                }
            }
        },
        "multiStatusResponseItem": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "HTTP-404"
                },
                "title": {
                    "type": "string",
                    "example": "Resource not found."
                },
                "status": {
                    "type": "integer",
                    "example": 404
                },
                "resource": {
                    "$ref": "#/components/schemas/overviewItem"
                }
            }
        },
        "node": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name label of the node."
                },
                "metadata": {
                    "type": "object",
                    "required": [
                        "id",
                        "type"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "example": [
                                "DA_APP",
                                "DA_APP_LINK",
                                "DATASET",
                                "TABLE",
                                "FIELD"
                            ],
                            "description": "The type of the node."
                        },
                        "subtype": {
                            "type": "string",
                            "example": [
                                "PROCESSOR",
                                "APPLICATION",
                                "FILE"
                            ],
                            "description": "The subtype of the node."
                        }
                    },
                    "description": "This contains additional node information such as node types, subtypes, queryExpressions, etc."
                }
            }
        },
        "nodes": {
            "type": "object",
            "example": "{\"qri:app:sense://3634fc0d-273d-429e-8d0b-1b4b1b66a1f2\":{\"label\":\"a\",\"metadata\":{\"subtype\":\"PROCESSOR\",\"type\":\"DA_APP\"}}}",
            "description": "All the nodes contained in a graph.",
            "additionalProperties": {
                "$ref": "#/components/schemas/node"
            }
        },
        "overviewItem": {
            "type": "object",
            "properties": {
                "qri": {
                    "type": "string",
                    "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                    "description": "Input QRI that we are getting the overview for."
                },
                "lineage": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/lineageOverviewInfo"
                    }
                }
            }
        },
        "overviewItems": {
            "type": "object",
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/overviewItem"
                    }
                }
            }
        },
        "qris": {
            "type": "array",
            "items": {
                "type": "string",
                "example": "qri:app:sense://e5c651d5-1198-45a2-be5d-f016cee0baf5",
                "description": "List of qri to find direct lineage for."
            }
        },
        "ConfigReasonCode": {
            "enum": [
                "deployment",
                "toggle",
                "license"
            ],
            "type": "string",
            "description": "The possible states for the status of notes configuration GET or POST operation"
        },
        "NoteSettingsPutPayload": {
            "type": "object",
            "properties": {
                "toggledOn": {
                    "type": "boolean",
                    "description": "pass 'true' to enable the note toggle for the tenant, 'false' to disable the toggle (other values are ignore)."
                },
                "snapshotRelations": {
                    "type": "boolean",
                    "description": "pass 'true' to enable the relations api to search notes for the tenant."
                }
            }
        },
        "NoteSettingsPutResponse": {
            "type": "object",
            "properties": {
                "toggleOn": {
                    "type": "boolean",
                    "description": "'true' if the note feature is enabled for this tenant and user otherwise 'false'."
                },
                "snapshotRelations": {
                    "type": "boolean",
                    "description": "'true' if relations api to search notes for the tenant are enabled else false."
                }
            }
        },
        "NotesUserSettings": {
            "type": "object",
            "required": [
                "available"
            ],
            "properties": {
                "reason": {
                    "$ref": "#/components/schemas/ConfigReasonCode"
                },
                "available": {
                    "type": "boolean",
                    "description": "'true' if the note feature is enabled for this tenant and user otherwise 'false'."
                },
                "lastFetch": {
                    "type": "string",
                    "description": "The timestamp for the last time this users notes settings were fetched from downstream services."
                }
            }
        },
        "JsonPatches": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/JsonPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/enabled",
                    "value": false
                },
                {
                    "op": "add",
                    "path": "/frequency",
                    "value": "RRULE:FREQ=WEEKLY"
                }
            ],
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "NotificationDigest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id of digest",
                    "x-go-custom-tag": "bson:\"_id\""
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the digest is enabled or not"
                },
                "ownerId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Owner of the execution"
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The tenant that this execution belongs to"
                },
                "timezone": {
                    "type": "string",
                    "readOnly": true,
                    "description": "the timezone for the chronos job"
                },
                "frequency": {
                    "type": "string",
                    "example": "RRULE:FREQ=DAILY",
                    "description": "RRULE for SCHEDULED digest, as specified in RFC5545."
                },
                "startTime": {
                    "type": "string",
                    "readOnly": true,
                    "description": "start time of the notification request"
                },
                "chronosJobId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The chronos job identifier. It is set once the related chronos job is created."
                },
                "currentWorkflowId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "current workflowID to be written in the executions"
                }
            }
        },
        "NotificationDigestCreateRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the digest is enabled or not"
                },
                "frequency": {
                    "type": "string",
                    "example": "RRULE:FREQ=DAILY",
                    "description": "RRULE for SCHEDULED digest, as specified in RFC5545."
                }
            }
        },
        "NotificationDigestExecution": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id of execution",
                    "x-go-custom-tag": "bson:\"_id\""
                },
                "content": {
                    "type": "object",
                    "properties": {},
                    "description": "digest buffer content received from notification-prep"
                },
                "ownerId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Owner of the execution"
                },
                "expireAt": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for TTL document deleted after time stamp is reached"
                },
                "tenantId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The tenant that this execution belongs to"
                },
                "resourceId": {
                    "type": "string",
                    "description": "resourceId for the digest execution"
                },
                "workflowId": {
                    "type": "string",
                    "description": "workflow Id of related digest"
                },
                "dateCreated": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp for the creation of the task execution"
                },
                "resourceType": {
                    "type": "string",
                    "description": "resourceId for the digest execution"
                },
                "secureContent": {
                    "type": "object",
                    "properties": {},
                    "description": "digest buffer secure content received from notification-prep"
                },
                "executionFlowStartTime": {
                    "type": "string",
                    "example": "2019-10-15T16:07:01.492Z",
                    "description": "Timestamp of execution start"
                }
            },
            "description": "Notification Digest Execution."
        },
        "NotificationDigestExecutions": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StandardListResponseProps"
                },
                {
                    "type": "object",
                    "properties": {
                        "links": {
                            "$ref": "#/components/schemas/ListLinks"
                        },
                        "executions": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/NotificationDigestExecution"
                            }
                        }
                    }
                }
            ],
            "description": "list of Notification Digest Executions."
        },
        "NotificationItem": {
            "type": "object",
            "required": [
                "notificationNamePattern",
                "transports",
                "isSubscribable"
            ],
            "properties": {
                "transports": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "transport names are stored and retrived based on action"
                    },
                    "description": "Type of Transport e.g. Email, Notification, Slack message etc..."
                },
                "isSubscribable": {
                    "type": "boolean",
                    "description": "Indicates if the notification can be subscribed to by users.  If true, the object will also contain 'subscriptionInfo' object"
                },
                "presentationInfo": {
                    "type": "object",
                    "properties": {
                        "scopes": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "one of 'tenant', 'space' or 'resource'"
                            },
                            "description": "Information about the scopes to which this notification applies.  Helps determine the placement of the notification in the UI"
                        },
                        "friendlyName": {
                            "type": "string",
                            "description": "Localized, human-readable string representing the name of the notification suitable to use in a UI"
                        },
                        "scopeFriendlyNames": {
                            "type": "object",
                            "description": "Friendly name to be displayed for each scope.",
                            "additionalProperties": {
                                "type": "string",
                                "description": "Localized, human-readable string representing the name of the notification suitable to use in a UI."
                            }
                        }
                    },
                    "description": "Object containing information pertaining to the presentaion of a notification in the UI"
                },
                "subscriptionInfo": {
                    "type": "object",
                    "required": [
                        "resourceType",
                        "action"
                    ],
                    "properties": {
                        "action": {
                            "type": "string"
                        },
                        "target": {
                            "type": "string"
                        },
                        "resourceId": {
                            "type": "string"
                        },
                        "resourceType": {
                            "type": "string"
                        },
                        "resourceSubType": {
                            "type": "string"
                        }
                    },
                    "description": "Object indicating what properties to use to subscribe to this notification via the 'Subscriptions' service.  For info about its properties, refer to the Subscription sevice's API doc."
                },
                "isManageableInHub": {
                    "type": "boolean",
                    "description": "Indicates if the notification can be managed in the hub. If true, the object will also contain 'subscriptionInfo' object and a 'presentationInfo' object with a non-empty scopes array."
                },
                "notificationNamePattern": {
                    "type": "string",
                    "description": "Notification name pattern that will trigger this notification e.g resource.action"
                }
            },
            "description": "Notification result item"
        },
        "NotificationsObject": {
            "type": "object",
            "required": [
                "notifications"
            ],
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/NotificationItem"
                    },
                    "description": "list of notifications"
                }
            },
            "description": "Object containing array representing list of supported notifications"
        },
        "GetQuotaByIdResult": {
            "type": "object",
            "title": "Result containing an array with a single quota item.",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Quota"
                    },
                    "description": "Quota item."
                }
            }
        },
        "GetQuotasResult": {
            "type": "object",
            "title": "Result containing an array of quota items.",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Quota"
                    },
                    "description": "Array of quota items."
                }
            }
        },
        "Quota": {
            "type": "object",
            "title": "One single quota with attributes.",
            "required": [
                "type",
                "id",
                "attributes"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the quota item. For example, \"app_mem_size\", \"app_upload_disk_size\", or \"shared_spaces\"."
                },
                "type": {
                    "type": "string",
                    "description": "The resource type of the quota item. Always equal to \"quotas\"."
                },
                "attributes": {
                    "type": "object",
                    "required": [
                        "quota",
                        "unit"
                    ],
                    "properties": {
                        "unit": {
                            "type": "string",
                            "description": "The unit of the quota limit. For memory quotas, the unit is always \"bytes\". For other discrete units, the item counted is used as unit, for example \"spaces\"."
                        },
                        "quota": {
                            "type": "number",
                            "format": "double",
                            "description": "The quota limit. If there is no quota limit, -1 is returned."
                        },
                        "usage": {
                            "type": "number",
                            "format": "double",
                            "description": "The current quota usage, if applicable. This attribute is only present if it is requested using the reportUsage query parameter."
                        },
                        "warningThresholds": {
                            "type": "array",
                            "items": {
                                "type": "number",
                                "format": "float"
                            },
                            "example": [
                                0.9
                            ],
                            "description": "The warning thresholds at which \"close to quota\" warnings can be issued when exceeded. If omitted, no warning threshold shall be used. Currently, the array will contain only one threshold value. In the future, this may be extended. The threshold is a number between 0 and 1, relating to the quota limit. For example, a value of 0.9 means that a warning should be issued when exceeding 90% of the quota limit."
                        }
                    },
                    "description": "The attributes of the quota."
                }
            }
        },
        "PaginationLinks": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/SelfLink"
                },
                {
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Href"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Href"
                        }
                    }
                }
            ]
        },
        "PostTaskBody": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/TaskBase"
                },
                {
                    "required": [
                        "appId",
                        "timeZone"
                    ],
                    "properties": {
                        "type": {
                            "enum": [
                                "scheduled_reload"
                            ],
                            "type": "string",
                            "example": "scheduled_reload",
                            "description": "Type of task being created - only contains the \"scheduled_reload\" value. Type value is not used for creating a schedule reload. It has been deprecated since 2022-04-05.",
                            "x-qlik-deprecated": true
                        }
                    }
                }
            ]
        },
        "PutTaskBody": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/TaskBase"
                },
                {
                    "properties": {
                        "state": {
                            "enum": [
                                "Enabled",
                                "Disabled",
                                "Completed"
                            ],
                            "type": "string",
                            "example": "Disabled",
                            "description": "Toggle for enabling and disabling the reload task"
                        }
                    }
                }
            ]
        },
        "SelfLink": {
            "type": "object",
            "required": [
                "self"
            ],
            "properties": {
                "self": {
                    "$ref": "#/components/schemas/Href"
                }
            }
        },
        "Task": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/TaskBase"
                },
                {
                    "required": [
                        "id",
                        "appId",
                        "jobId",
                        "userId",
                        "tenantId",
                        "timeZone",
                        "state",
                        "links"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "example": "5be59decca62aa00097268a4",
                            "description": "The ID of the task."
                        },
                        "log": {
                            "type": "string",
                            "example": "Scheduled reload has been disabled since exceeded limit of 5 consecutive reload failures. Please fix error and re-enable schedule.",
                            "description": "The reason why the task was disabled.",
                            "x-qlik-deprecated": true
                        },
                        "links": {
                            "$ref": "#/components/schemas/SelfLink"
                        },
                        "state": {
                            "enum": [
                                "Enabled",
                                "Disabled",
                                "Completed"
                            ],
                            "type": "string",
                            "example": "Enabled",
                            "description": "Toggle for enabling and disabling the reload task"
                        },
                        "userId": {
                            "type": "string",
                            "example": "FyPG6xWp6prDU6BXQ3g7LY9gWR_YRkkx",
                            "description": "The ID of the user who owns the task."
                        },
                        "spaceId": {
                            "type": "string",
                            "example": "602c2c2be2be220002a22a22",
                            "description": "The space ID of the application"
                        },
                        "tenantId": {
                            "type": "string",
                            "example": "efSCcpNYuayTysONkUcE3F80zYQ_LV9w",
                            "description": "The ID of the tenant who owns the task."
                        },
                        "fortressId": {
                            "type": "string",
                            "example": "5c5b097116d25a0001a48b06",
                            "description": "The fortress ID of the application",
                            "x-qlik-deprecated": true
                        },
                        "disabledCode": {
                            "enum": [
                                "MANUALLY",
                                "CONSECUTIVE-FAILURES",
                                "OWNER-DELETED",
                                "OWNER-DISABLED"
                            ],
                            "type": "string",
                            "example": "CONSECUTIVE-FAILURES",
                            "description": "The reason why the task was disabled."
                        },
                        "lastExecutionTime": {
                            "type": "string",
                            "example": "2022-09-20T17:17:00Z",
                            "description": "The last time the task executed."
                        },
                        "nextExecutionTime": {
                            "type": "string",
                            "example": "2022-09-20T17:17:00Z",
                            "description": "The next time the task will execute."
                        }
                    }
                }
            ]
        },
        "TaskBase": {
            "type": "object",
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                    "description": "The ID of the app."
                },
                "partial": {
                    "type": "boolean",
                    "default": false,
                    "description": "The task is partial reload or not"
                },
                "timeZone": {
                    "type": "string",
                    "example": "America/Toronto",
                    "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. Europe/Zurich.) This field specifies the time zone in which the event start/end are expanded. If missing the start/end fields must specify a UTC offset in RFC3339 format."
                },
                "autoReload": {
                    "type": "boolean",
                    "default": false,
                    "description": "A flag that indicates whether a reload is triggered when data of the app is changed"
                },
                "recurrence": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "RRULE:FREQ=DAILY;INTERVAL=1;BYHOUR=11;BYMINUTE=18;BYSECOND=0",
                        "RRULE:FREQ=WEEKLY;INTERVAL=2;BYDAY=MO,TU;BYHOUR=13;BYMINUTE=17;BYSECOND=0"
                    ],
                    "description": "List of RECUR lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events"
                },
                "endDateTime": {
                    "type": "string",
                    "example": "2022-10-12T23:59:00",
                    "description": "The time that the task will stop recurring. If the time zone is missing, this is a combined date-time value expressing a time with a fixed UTC offset (formatted according to RFC3339). If a time zone is given, the zone offset must be omitted."
                },
                "startDateTime": {
                    "type": "string",
                    "example": "2022-09-19T11:18:00",
                    "description": "The time that the task execution start recurring. If the time zone is missing, this is a combined date-time value expressing a time with a fixed UTC offset (formatted according to RFC3339). If a time zone is given, the zone offset must be omitted. Field startDateTime should not be before the Unix epoch 00:00:00 UTC on 1 January 1970. Note that the empty string value with the empty recurrence array indicates the scheduled job is not set."
                },
                "autoReloadPartial": {
                    "type": "boolean",
                    "default": false,
                    "description": "A flag that indicates whether it is a partial reload or not for the auto reload"
                }
            }
        },
        "Tasks": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Task"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/PaginationLinks"
                }
            }
        },
        "Partial": {
            "type": "boolean",
            "example": false,
            "description": "The boolean value used to present the reload is partial or not."
        },
        "Reload": {
            "type": "object",
            "required": [
                "id",
                "appId",
                "tenantId",
                "userId",
                "type",
                "status",
                "creationTime"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "5be59decca62aa00097268a4",
                    "description": "The ID of the reload."
                },
                "log": {
                    "type": "string",
                    "example": "ReloadID: 5be59decca62aa00097268a4\\nStarted loading\\n(A detailed script progress log can be downloaded when the reload is finished)\\nApp saved\\nFinished successfully\\n",
                    "description": "The log describing the result of the latest reload execution from the request."
                },
                "type": {
                    "enum": [
                        "hub",
                        "chronos",
                        "external",
                        "automations",
                        "data-refresh"
                    ],
                    "type": "string",
                    "example": "hub",
                    "description": "What initiated the reload: hub = one-time reload manually triggered in hub, chronos = time based scheduled reload triggered by chronos, external = reload triggered via external API request, automations = reload triggered in automation, data-refresh = reload triggered by refresh of data."
                },
                "appId": {
                    "type": "string",
                    "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                    "description": "The ID of the app."
                },
                "links": {
                    "$ref": "#/components/schemas/ReloadLinks"
                },
                "status": {
                    "$ref": "#/components/schemas/Status"
                },
                "userId": {
                    "type": "string",
                    "example": "FyPG6xWp6prDU6BXQ3g7LY9gWR_YRkkx",
                    "description": "The ID of the user who created the reload."
                },
                "endTime": {
                    "type": "string",
                    "example": "2020-11-03T17:00:11.865Z",
                    "description": "The time the reload job finished."
                },
                "partial": {
                    "$ref": "#/components/schemas/Partial"
                },
                "tenantId": {
                    "type": "string",
                    "example": "efSCcpNYuayTysONkUcE3F80zYQ_LV9w",
                    "description": "The ID of the tenant who owns the reload."
                },
                "startTime": {
                    "type": "string",
                    "example": "2020-11-03T17:00:06.351Z",
                    "description": "The time the reload job was consumed from the queue."
                },
                "engineTime": {
                    "type": "string",
                    "example": "2020-11-03T17:00:07.048Z",
                    "description": "The timestamp returned from the Sense engine upon successful reload."
                },
                "creationTime": {
                    "type": "string",
                    "example": "2020-11-03T17:00:00.164Z",
                    "description": "The time the reload job was created."
                }
            }
        },
        "ReloadLinks": {
            "type": "object",
            "properties": {
                "self": {
                    "$ref": "#/components/schemas/Href"
                }
            }
        },
        "ReloadRequest": {
            "required": [
                "appId"
            ],
            "properties": {
                "appId": {
                    "type": "string",
                    "example": "116dbfae-7fb9-4983-8e23-5ccd8c508722",
                    "description": "The ID of the app to be reloaded."
                },
                "partial": {
                    "type": "boolean",
                    "example": false,
                    "description": "The boolean value used to present the reload is partial or not"
                }
            }
        },
        "Reloads": {
            "type": "object",
            "required": [
                "data",
                "links"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Reload"
                    }
                },
                "links": {
                    "$ref": "#/components/schemas/ReloadsLinks"
                }
            }
        },
        "ReloadsLinks": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/ReloadLinks"
                },
                {
                    "type": "object",
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Href"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Href"
                        }
                    }
                }
            ]
        },
        "Status": {
            "enum": [
                "QUEUED",
                "RELOADING",
                "CANCELING",
                "SUCCEEDED",
                "FAILED",
                "CANCELED",
                "EXCEEDED_LIMIT"
            ],
            "type": "string",
            "example": "SUCCEEDED",
            "description": "The status of the reload. There are seven statuses. `QUEUED`, `RELOADING`, `CANCELING` are the active statuses. `SUCCEEDED`, `FAILED`, `CANCELED`, `EXCEEDED_LIMIT` are the end statuses."
        },
        "ListRolesResult": {
            "type": "object",
            "required": [
                "links",
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "description": "An array of roles."
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                },
                "totalResults": {
                    "type": "integer",
                    "description": "Indicates the total number of matching documents. Will only be returned if the query parameter \"totalResults\" is true."
                }
            }
        },
        "Role": {
            "type": "object",
            "required": [
                "id",
                "tenantId",
                "name",
                "type",
                "description",
                "createdAt",
                "lastUpdatedAt",
                "links"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "507f191e810c19729de860ea",
                    "readOnly": true,
                    "description": "The unique identifier for the role.",
                    "x-qlik-filterable": true
                },
                "name": {
                    "type": "string",
                    "example": "Developer",
                    "description": "The name of the role.",
                    "x-qlik-filterable": true
                },
                "type": {
                    "enum": [
                        "default"
                    ],
                    "type": "string",
                    "example": "default",
                    "description": "The type of role.",
                    "x-qlik-filterable": true
                },
                "level": {
                    "enum": [
                        "admin",
                        "user"
                    ],
                    "type": "string",
                    "example": "admin",
                    "description": "The level of access associated to the role.",
                    "x-qlik-filterable": true
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.us.qlikcloud.com/api/v1/roles/507f191e810c19729de860ea",
                                    "description": "Link to the role."
                                }
                            }
                        }
                    },
                    "description": "Contains links for the role."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "12345678-1234-5678-1234-567812345678'",
                    "description": "The tenant unique identifier associated with the given Role.",
                    "x-qlik-filterable": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-03-21T17:32:28Z",
                    "description": "The timestamp for when the role was created.",
                    "x-qlik-filterable": true
                },
                "description": {
                    "type": "string",
                    "example": "Grants permission to generate API keys",
                    "description": "Descriptive text for the role.",
                    "x-qlik-filterable": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "edit_foo"
                    ],
                    "description": "An array of permissions associated with the role.",
                    "x-qlik-filterable": true
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-03-22T10:01:02Z",
                    "description": "The timestamp for when the role was last updated.",
                    "x-qlik-filterable": true
                }
            }
        },
        "ActionName": {
            "enum": [
                "create",
                "read",
                "update",
                "delete",
                "publish"
            ],
            "type": "string",
            "description": "The supported actions for user-created spaces like Shared or Managed spaces."
        },
        "Assignment": {
            "required": [
                "id",
                "type",
                "assigneeId",
                "roles",
                "spaceId",
                "tenantId",
                "links"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true
                },
                "type": {
                    "$ref": "#/components/schemas/AssignmentType"
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "space": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RoleType"
                    },
                    "description": "The roles assigned to a user or group. Must not be empty."
                },
                "spaceId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique identifier for the space."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique identifier for the tenant."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The date and time when the space was created."
                },
                "createdBy": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The ID of the user who created the assignment."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The date and time when the space was updated."
                },
                "updatedBy": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The ID of the user who updated the assignment."
                },
                "assigneeId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The userId or groupId based on the type."
                }
            }
        },
        "AssignmentCreate": {
            "required": [
                "type",
                "assigneeId",
                "roles"
            ],
            "properties": {
                "type": {
                    "$ref": "#/components/schemas/AssignmentType"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RoleType"
                    },
                    "description": "The roles assigned to the assigneeId."
                },
                "assigneeId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The userId or groupId based on the type."
                }
            }
        },
        "Assignments": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Assignment"
                    }
                },
                "meta": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "count"
                    ],
                    "properties": {
                        "count": {
                            "type": "integer",
                            "description": "The total number of assignments matching the current filter."
                        }
                    }
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            }
        },
        "AssignmentType": {
            "enum": [
                "user",
                "group"
            ],
            "type": "string",
            "description": "The type of assignment such as user or group"
        },
        "AssignmentUpdate": {
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/RoleType"
                    },
                    "description": "The roles assigned to the assigneeId."
                }
            }
        },
        "RoleType": {
            "enum": [
                "consumer",
                "contributor",
                "dataconsumer",
                "facilitator",
                "operator",
                "producer",
                "publisher",
                "basicconsumer",
                "codeveloper"
            ],
            "type": "string",
            "description": "Supported roles by space type:\n- Shared: codeveloper, consumer, dataconsumer, facilitator, producer\n- Managed: consumer, contributor, dataconsumer, facilitator, publisher, basicconsumer\n- Data: consumer, dataconsumer, facilitator, operator, producer, publisher\n"
        },
        "SharedSpaceRoleType": {
            "enum": [
                "facilitator",
                "consumer",
                "producer",
                "dataconsumer",
                "codeveloper"
            ],
            "type": "string",
            "description": "The supported roles for Shared spaces."
        },
        "Space": {
            "required": [
                "id",
                "name",
                "tenantId",
                "links"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "A unique identifier for the space, for example, 62716f4b39b865ece543cd45."
                },
                "meta": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "actions",
                        "roles",
                        "assignableRoles"
                    ],
                    "properties": {
                        "roles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RoleType"
                            },
                            "description": "The list of roles assigned to the current user in this space."
                        },
                        "actions": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ActionName"
                            },
                            "description": "The list of actions allowed by the current user in this space."
                        },
                        "assignableRoles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RoleType"
                            },
                            "example": {
                                "$ref": "#/components/schemas/SharedSpaceRoleType"
                            },
                            "description": "The list of roles that could be assigned in this space."
                        }
                    },
                    "description": "Information about the space settings."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the space. Personal spaces do not have a name."
                },
                "type": {
                    "enum": [
                        "shared",
                        "managed",
                        "data"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "The type of space such as shared, managed, and so on."
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self",
                        "assignments"
                    ],
                    "properties": {
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "assignments": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The ID for the space owner."
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The ID for the tenant, for example, xqGQ0k66vSR8f9G7J-vYtHZQkiYrCpct."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The date and time when the space was created."
                },
                "createdBy": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The ID of the user who created the space."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The date and time when the space was updated."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the space. Personal spaces do not have a description."
                }
            },
            "description": "A space is a security context simplifying the management of access control by allowing users to control it on the containers instead of on the resources themselves."
        },
        "SpaceCreate": {
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$",
                    "maxLength": 256,
                    "description": "The name of the space. Personal spaces do not have a name."
                },
                "type": {
                    "enum": [
                        "shared",
                        "managed",
                        "data"
                    ],
                    "type": "string",
                    "description": "The type of space such as shared, managed, and so on."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the space. Personal spaces do not have a description."
                }
            }
        },
        "SpacePatch": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/ownerId",
                            "/description"
                        ],
                        "type": "string",
                        "description": "Field of space to be patched (updated)."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be used within the operations.\n- name: The name (string) of space of maxLength 256 of pattern: ^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$\n- description: The description (string) of the space. Personal spaces do not have a description.\n- ownerId: The user ID in uid format (string) of the space owner.\n"
                    }
                },
                "description": "A JSONPatch document as defined by RFC 6902."
            }
        },
        "Spaces": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Space"
                    }
                },
                "meta": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "count"
                    ],
                    "properties": {
                        "count": {
                            "type": "integer",
                            "description": "The total number of spaces matching the current filter."
                        },
                        "personalSpace": {
                            "type": "object",
                            "readOnly": true,
                            "required": [
                                "resourceType",
                                "actions"
                            ],
                            "properties": {
                                "actions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ActionName"
                                    },
                                    "description": "The list of actions allowed by the current user in this space."
                                },
                                "resourceType": {
                                    "type": "string",
                                    "description": "resource type"
                                }
                            },
                            "description": "The meta related to personal space when applicable."
                        }
                    }
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            }
        },
        "SpaceType": {
            "enum": [
                "shared",
                "managed",
                "data"
            ],
            "type": "string",
            "readOnly": true,
            "description": "The name of the type."
        },
        "SpaceTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/SpaceType"
                    },
                    "example": [
                        "shared",
                        "managed"
                    ],
                    "readOnly": true
                }
            },
            "description": "The distinct types of spaces (shared, managed, and so on)."
        },
        "SpaceUpdate": {
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[^\\\"\\*\\?\\<\\>\\/\\|\\\\\\:]+$",
                    "maxLength": 256,
                    "description": "The name of the space."
                },
                "ownerId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The user ID of the space owner."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the space. Personal spaces do not have a description."
                }
            }
        },
        "detailResponse": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "string",
                    "description": "Identifier"
                },
                "Name": {
                    "type": "string",
                    "description": "File name of the file uploaded by the user."
                },
                "Size": {
                    "type": "string",
                    "description": "Size of resource (in bytes)."
                },
                "Expires": {
                    "type": "string",
                    "description": "Datetime-stamp when the resource expired (in UTC)."
                },
                "CreatedAt": {
                    "type": "string",
                    "description": "Datetime-stamp when the resource was created (in UTC)."
                },
                "CreatorID": {
                    "type": "string",
                    "description": "Identifier for the subject / resource creator."
                },
                "UpdatedAt": {
                    "type": "string",
                    "description": "Datetime-stamp when the resource was updated (in UTC)."
                },
                "TTLSeconds": {
                    "type": "integer",
                    "description": "Time-to-live in seconds."
                }
            }
        },
        "Tenant": {
            "type": "object",
            "required": [
                "name",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                    "readOnly": true,
                    "description": "The unique tenant identifier.",
                    "x-qlik-visibility": "private"
                },
                "name": {
                    "type": "string",
                    "example": "QlikTenant",
                    "description": "The display name of the tenant."
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "example": "http://foo.example/api/v1/tenants/TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                                    "description": "URL that defines the resource."
                                }
                            },
                            "description": "A link to this tenant."
                        }
                    }
                },
                "status": {
                    "enum": [
                        "active",
                        "disabled",
                        "deleted"
                    ],
                    "type": "string",
                    "description": "The status of the tenant."
                },
                "created": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true,
                    "description": "The timestamp for when the tenant record was created (1970-01-01T00:00:00.001Z for static tenants)."
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "foo.example"
                    },
                    "description": "List of case insensitive hostnames that are mapped to the tenant. The first record maps to the display name and the subsequent entries are aliases."
                },
                "datacenter": {
                    "type": "string",
                    "example": "us-east-1",
                    "description": "The datacenter where the tenant is located."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true,
                    "description": "The timestamp for when the tenant record was last updated (1970-01-01T00:00:00.001Z for static tenants)."
                },
                "createdByUser": {
                    "type": "string",
                    "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy7A",
                    "description": "The user ID who created the tenant."
                },
                "enableAnalyticCreation": {
                    "type": "boolean",
                    "default": false
                },
                "autoAssignCreateSharedSpacesRoleToProfessionals": {
                    "type": "boolean",
                    "default": true
                },
                "autoAssignDataServicesContributorRoleToProfessionals": {
                    "type": "boolean",
                    "default": true
                },
                "autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "TenantCreationRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "bk1672h181jm1b1",
                    "description": "The name of the created tenant, provided by the onboarding service.",
                    "x-qlik-visibility": "private"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "bk1672h181jm1b1.us.qlikcloud.com"
                    ],
                    "description": "The hostnames of the created tenant. Can only create with a single entry that lines up wtih the tenant name.",
                    "x-qlik-visibility": "private"
                },
                "datacenter": {
                    "type": "string",
                    "example": "us-east-1",
                    "description": "The datacenter where the tenant is located."
                },
                "licenseKey": {
                    "type": "string",
                    "example": 1234567890,
                    "description": "The signed license key of the license that will be associated with the created tenant."
                }
            }
        },
        "TenantDeactivateRequest": {
            "type": "object",
            "properties": {
                "purgeAfterDays": {
                    "type": "integer",
                    "default": 30,
                    "maximum": 90,
                    "minimum": 10,
                    "description": "Sets the number of days to purge the tenant after deactivation. Only available to OEMs."
                }
            },
            "description": "A request to deactivate a tenant."
        },
        "TenantDeactivateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "example": "TiQ8GPVr8qI714Lp5ChAAFFaU24MJy69",
                    "readOnly": true,
                    "description": "The unique tenant identifier."
                },
                "status": {
                    "enum": [
                        "disabled"
                    ],
                    "type": "string",
                    "description": "The status of the tenant."
                },
                "estimatedPurgeDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-08-18T00:00:00.000Z",
                    "description": "The estimated date time of when tenant will be purged."
                }
            },
            "description": "The result of tenant deactivation."
        },
        "TenantPatchErrors": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "TENANTS-10",
                                "description": "The error code."
                            },
                            "meta": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "TENANTS-11",
                                        "description": "The error code."
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "The specified hostname is unavailable for use",
                                        "description": "Summary of the problem."
                                    }
                                },
                                "description": "Additional properties relating to the error."
                            },
                            "title": {
                                "type": "string",
                                "example": "Invalid PATCH request",
                                "description": "Summary of the problem."
                            },
                            "source": {
                                "type": "object",
                                "properties": {
                                    "pointer": {
                                        "type": "string",
                                        "example": "/hostnames/1",
                                        "description": "A JSON Pointer to the property that caused the error."
                                    },
                                    "parameter": {
                                        "type": "string",
                                        "description": "The URI query parameter that caused the error."
                                    }
                                },
                                "description": "References to the source of the error."
                            }
                        },
                        "description": "An error object."
                    }
                }
            }
        },
        "TenantPatchSchema": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "op",
                    "path",
                    "value"
                ],
                "properties": {
                    "op": {
                        "enum": [
                            "replace"
                        ],
                        "type": "string",
                        "description": "The operation to be performed."
                    },
                    "path": {
                        "enum": [
                            "/name",
                            "/hostnames/1",
                            "/autoAssignCreateSharedSpacesRoleToProfessionals",
                            "/autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals",
                            "/autoAssignDataServicesContributorRoleToProfessionals",
                            "/enableAnalyticCreation"
                        ],
                        "type": "string",
                        "description": "A JSON Pointer value that references a location within the target document where the operation is performed."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ],
                        "description": "The value to be used for this operation."
                    }
                },
                "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/name",
                    "value": "Corp"
                },
                {
                    "op": "replace",
                    "path": "/hostnames/1",
                    "value": "example-tenant.us.qlikcloud.com"
                },
                {
                    "op": "replace",
                    "path": "/autoAssignCreateSharedSpacesRoleToProfessionals",
                    "value": true
                },
                {
                    "op": "replace",
                    "path": "/autoAssignPrivateAnalyticsContentCreatorRoleToProfessionals",
                    "value": false
                },
                {
                    "op": "replace",
                    "path": "/autoAssignDataServicesContributorRoleToProfessionals",
                    "value": true
                },
                {
                    "op": "replace",
                    "path": "/enableAnalyticCreation",
                    "value": false
                }
            ]
        },
        "DeleteConfigNotFoundError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "DELETE-1",
                                "description": "The error code."
                            },
                            "title": {
                                "type": "string",
                                "example": "No email config for tenant",
                                "description": "Summary of the problem"
                            }
                        },
                        "description": "An error object"
                    }
                }
            }
        },
        "email": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "email body"
                },
                "subject": {
                    "type": "string",
                    "description": "email subject"
                },
                "recipient": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "email recipient (email address)"
                }
            }
        },
        "emailConfigFieldPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace, remove, add"
                    ],
                    "type": "string",
                    "example": "add",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/username",
                        "/serverAddress",
                        "/serverPort",
                        "/securityType",
                        "/emailAddress",
                        "/emailPassword"
                    ],
                    "type": "string",
                    "example": "/emailAddress",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "string",
                    "example": "john.smith@company.com",
                    "x-qlik-pii": true,
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902."
        },
        "emailConfigGet": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/components/schemas/smtpConfigStatus"
                },
                "isValid": {
                    "type": "boolean",
                    "example": true,
                    "description": "Is the configuration valid"
                },
                "tenantId": {
                    "type": "string",
                    "example": "mcdd-mkw_Ebo0fR2vLl8_YsQYFsYrTdP",
                    "description": "The tenant Id"
                },
                "username": {
                    "type": "string",
                    "example": "john.smith@company.com",
                    "x-qlik-pii": true,
                    "description": "user name"
                },
                "serverPort": {
                    "type": "number",
                    "example": 587,
                    "minimum": 1,
                    "description": "smtp server listening port"
                },
                "authFailures": {
                    "type": "number",
                    "example": 0,
                    "description": "Number of authentication failures"
                },
                "emailAddress": {
                    "type": "string",
                    "example": "john.smith@company.com",
                    "x-qlik-pii": true,
                    "description": "used for SMTP authentication"
                },
                "securityType": {
                    "type": "string",
                    "example": "StartTLS",
                    "description": "one of none, StartTLS or SSL/TLS"
                },
                "serverAddress": {
                    "type": "string",
                    "example": "smtp.company.com",
                    "description": "domain name or IP address of SMTP server"
                },
                "passwordExists": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if password is defined for this smtp config. The password itself is not returned!"
                },
                "modificationTime": {
                    "type": "string",
                    "example": "2022-06-30T09:57:40.954Z",
                    "description": "Last modification time. Formatted as a ISO 8601 string."
                }
            }
        },
        "emailConfigPatch": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/emailConfigFieldPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/username",
                    "value": "New name"
                }
            ]
        },
        "ErrorPublic": {
            "type": "object",
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The error code."
                },
                "title": {
                    "type": "string",
                    "description": "Summary of the problem."
                }
            },
            "description": "An error object."
        },
        "ErrorsPublic": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ErrorPublic"
                    }
                }
            }
        },
        "PatchEmailConfigError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "INPUTCHECK-1",
                                "description": "The error code."
                            },
                            "title": {
                                "type": "string",
                                "example": "serverAddress is not a string",
                                "description": "Summary of the problem"
                            }
                        },
                        "description": "An error object"
                    }
                }
            }
        },
        "SendTestMailConfigNotFoundError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "SENDTESTEMAIL-1",
                                "description": "The error code."
                            },
                            "title": {
                                "type": "string",
                                "example": "No email config for tenant",
                                "description": "Summary of the problem"
                            }
                        },
                        "description": "An error object"
                    }
                }
            }
        },
        "smtpCheck": {
            "type": "object",
            "properties": {
                "isValid": {
                    "type": "boolean",
                    "description": "true if smtp config is correct and complete. Will return false if smtp-config does not exist at all"
                }
            }
        },
        "smtpConfigStatus": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "type": "number",
                    "example": 0,
                    "description": "Status code"
                },
                "statusReason": {
                    "type": "string",
                    "example": "OK",
                    "description": "Status reason"
                }
            },
            "description": "Contains statusCode and statusReason"
        },
        "smtpResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "error message from SMTP middleware .. a bit technical but could be useful to administrator"
                },
                "success": {
                    "type": "boolean",
                    "description": "was SMTP operation successful or not. Other fields herein provide more detail"
                },
                "connectionFailed": {
                    "type": "boolean",
                    "description": "could not resolve domain name, connection refused, connection timed out, SSL mismatch"
                },
                "smtpResponseCode": {
                    "type": "integer",
                    "description": "smtp result code string from the SMTP server. eg. \"250 2.6.0\""
                }
            }
        },
        "TenantAdminError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "ROLECHECK-1",
                                "description": "The error code."
                            },
                            "title": {
                                "type": "string",
                                "example": "Must be a tenant admin",
                                "description": "Summary of the problem"
                            }
                        },
                        "description": "An error object"
                    }
                }
            }
        },
        "VerifyConnectionConfigNotFoundError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "code",
                            "title"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "VERIFYCONNECTION-1",
                                "description": "The error code."
                            },
                            "title": {
                                "type": "string",
                                "example": "No email config for tenant",
                                "description": "Summary of the problem"
                            }
                        },
                        "description": "An error object"
                    }
                }
            }
        },
        "AssignedGroups": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "permissions"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "507f191e810c19729de860eb",
                        "description": "The unique group identitier"
                    },
                    "name": {
                        "type": "string",
                        "example": "Finance",
                        "readOnly": true,
                        "description": "The group name",
                        "x-qlik-customer-data": true
                    },
                    "assignedRoles": {
                        "$ref": "#/components/schemas/AssignedRoles"
                    }
                },
                "description": "represents a group entity stored in the database"
            },
            "description": "An array of group references."
        },
        "ErrorItem": {
            "type": "object",
            "required": [
                "code",
                "title"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "Error code"
                },
                "title": {
                    "type": "string",
                    "description": "Summary of the problem"
                },
                "detail": {
                    "type": "string",
                    "description": "A human-readable explanation specific to this occurrence of the problem (if applicable)"
                }
            },
            "description": "Error object."
        },
        "ErrorsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/ErrorItem"
                    }
                }
            }
        },
        "InviteDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ResultItem"
                            },
                            {
                                "$ref": "#/components/schemas/InviteErrorItem"
                            }
                        ]
                    }
                }
            },
            "description": "Data list - ResultItem or ErrorItem for each InviteeItem."
        },
        "InviteErrorItem": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/components/schemas/ErrorItem"
                },
                {
                    "type": "object",
                    "required": [
                        "status",
                        "email"
                    ],
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "Error code - | HTTP Status code | 1001 - Active User | 1002 - Disabled User | 1003 - Default External Dependency Error |"
                        },
                        "email": {
                            "type": "string",
                            "x-qlik-pii": true,
                            "description": "Invitee email"
                        },
                        "status": {
                            "enum": [
                                "error"
                            ],
                            "type": "string",
                            "description": "Result status = \"error\""
                        }
                    }
                }
            ],
            "description": "Error object."
        },
        "InviteItem": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Optional display name for this invitee. Example - \"Elvis Presley\"."
                },
                "email": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Email address for this invitee. Example - \"foo@qlik.com\"."
                },
                "resend": {
                    "type": "boolean",
                    "description": "Flag - when true invite message is sent to inactive or invited users. Typically used to force email resend to users who are not yet active."
                },
                "language": {
                    "type": "string",
                    "description": "Optional ISO 639-1 2 letter code for invite language. Defaults to 'en' when missing or not found."
                }
            }
        },
        "InviteRequest": {
            "type": "object",
            "properties": {
                "invitees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/InviteItem"
                    },
                    "required": [
                        "items"
                    ],
                    "description": "List of invitees who should receive an invite email."
                }
            }
        },
        "Metadata": {
            "type": "object",
            "properties": {
                "valid_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "TenantAdmin",
                        "Developer"
                    ],
                    "description": "List of system roles to which the user can be assigned."
                }
            },
            "description": "An object containing the metadata for the user configuration.",
            "x-qlik-deprecated": true
        },
        "ResultItem": {
            "type": "object",
            "required": [
                "status",
                "email",
                "subject",
                "userId"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "Email specified for this invitee"
                },
                "status": {
                    "enum": [
                        "ok",
                        "exists"
                    ],
                    "type": "string",
                    "description": "Result status = {\"ok\" (new user; email sent) | \"exists\" (existing user; no email sent)}"
                },
                "userId": {
                    "type": "string",
                    "format": "uid",
                    "description": "UserId for this invitee"
                },
                "subject": {
                    "type": "string",
                    "format": "uuid",
                    "x-qlik-pii": true,
                    "description": "IdP generated UUID for this invitee"
                }
            },
            "description": "Invitee result item"
        },
        "User": {
            "type": "object",
            "required": [
                "id",
                "subject",
                "name",
                "tenantId"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true,
                    "description": "The unique user identifier.",
                    "x-qlik-filterable": true
                },
                "name": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The name of the user.",
                    "x-qlik-filterable": true,
                    "x-qlik-customer-data": true
                },
                "email": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The email address for the user.",
                    "x-qlik-filterable": true,
                    "x-qlik-customer-data": true
                },
                "links": {
                    "type": "object",
                    "readOnly": true,
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "format": "uri",
                                    "example": "http://mytenant.elastic.example/api/v1/users/DKNmFJCNo8SGURUdh2ll--------USER",
                                    "description": "URL that defines the resource."
                                }
                            },
                            "description": "A link to this user."
                        }
                    },
                    "description": "Pagination links to the user."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "TenantAdmin",
                            "Developer",
                            "AnalyticsAdmin",
                            "DataAdmin",
                            "DataSpaceCreator",
                            "ManagedSpaceCreator",
                            "SharedSpaceCreator"
                        ],
                        "type": "string"
                    },
                    "description": "List of system roles to which the user has been assigned. Only returned when permitted by access control. Deprecated. Use `assignedRoles` instead.",
                    "x-qlik-deprecated": true
                },
                "locale": {
                    "type": "string",
                    "description": "Represents the end-user's language tag.",
                    "x-qlik-customer-data": true
                },
                "status": {
                    "enum": [
                        "active",
                        "invited",
                        "disabled",
                        "deleted"
                    ],
                    "type": "string",
                    "description": "The status of the user within the tenant.",
                    "x-qlik-filterable": true
                },
                "created": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true,
                    "description": "Deprecated. Use `createdAt` instead.",
                    "x-qlik-deprecated": true
                },
                "picture": {
                    "type": "string",
                    "format": "url",
                    "x-qlik-pii": true,
                    "description": "A static url linking to the avatar of the user.",
                    "x-qlik-customer-data": true
                },
                "subject": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The unique user identitier from an identity provider.",
                    "x-qlik-filterable": true,
                    "x-qlik-customer-data": true
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "description": "The tenant that the user belongs too."
                },
                "zoneinfo": {
                    "type": "string",
                    "description": "Represents the end-user's time zone.",
                    "x-qlik-customer-data": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The timestamp for when the user record was created."
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true,
                    "description": "Deprecated. Use `lastUpdatedAt` instead.",
                    "x-qlik-deprecated": true
                },
                "inviteExpiry": {
                    "type": "number",
                    "readOnly": true,
                    "description": "The number of seconds until the user invitation will expire."
                },
                "assignedRoles": {
                    "$ref": "#/components/schemas/AssignedRoles"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The timestamp for when the user record was last updated."
                },
                "assignedGroups": {
                    "$ref": "#/components/schemas/AssignedGroups"
                },
                "preferredLocale": {
                    "type": "string",
                    "description": "Represents the end-user's preferred language tag."
                },
                "preferredZoneinfo": {
                    "type": "string",
                    "description": "Represents the end-user's preferred time zone."
                }
            },
            "description": "A user object."
        },
        "UserCount": {
            "type": "object",
            "required": [
                "total"
            ],
            "properties": {
                "total": {
                    "type": "number",
                    "description": "The total number of users in the tenant."
                }
            },
            "description": "The result object for the user count."
        },
        "UserPostSchema": {
            "type": "object",
            "example": {
                "name": "John Smith",
                "email": "john.smith@corp.example",
                "status": "invited",
                "picture": "https://corp.example/docs/jsmith.png",
                "subject": "1234asdasa6789",
                "tenantId": "q3VRZ4YMixRaLKEPhkZWM-XMIDN7cO8f",
                "assignedRoles": [
                    {
                        "name": "Developer"
                    }
                ]
            },
            "required": [
                "subject"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The name of the user.",
                    "x-qlik-customer-data": true
                },
                "email": {
                    "type": "string",
                    "x-qlik-pii": true,
                    "description": "The email address for the user. This is a required field when inviting a user.",
                    "x-qlik-customer-data": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "TenantAdmin",
                            "Developer",
                            "AnalyticsAdmin",
                            "DataAdmin",
                            "DataSpaceCreator",
                            "ManagedSpaceCreator",
                            "SharedSpaceCreator"
                        ],
                        "type": "string"
                    },
                    "description": "List of system roles to which the user has been assigned. Only returned when permitted by access control.",
                    "x-qlik-deprecated": true
                },
                "status": {
                    "enum": [
                        "invited"
                    ],
                    "type": "string",
                    "example": "invited",
                    "description": "The status of the created user within the tenant."
                },
                "picture": {
                    "type": "string",
                    "format": "url",
                    "x-qlik-pii": true,
                    "description": "A static url linking to the avatar of the user.",
                    "x-qlik-customer-data": true
                },
                "subject": {
                    "type": "string",
                    "example": "foo\\12345",
                    "x-qlik-pii": true,
                    "description": "The unique user identitier from an identity provider.",
                    "x-qlik-customer-data": true
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "example": "DKNmFJCNo8SGURUdh2ll------TENANT",
                    "description": "The tenant that the user will belong too."
                },
                "assignedRoles": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefIDs"
                        },
                        {
                            "$ref": "#/components/schemas/AssignedRolesRefNames"
                        }
                    ],
                    "description": "The roles to assign to the user."
                }
            }
        },
        "Users": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/User"
                    },
                    "description": "List of users."
                },
                "links": {
                    "type": "object",
                    "required": [
                        "self"
                    ],
                    "properties": {
                        "next": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the next page of records"
                                }
                            },
                            "description": "Link information for next page"
                        },
                        "prev": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the previous page of records"
                                }
                            },
                            "description": "Link information for previous page"
                        },
                        "self": {
                            "type": "object",
                            "required": [
                                "href"
                            ],
                            "properties": {
                                "href": {
                                    "type": "string",
                                    "description": "URL to the current page of records"
                                }
                            },
                            "description": "Link information for current page"
                        }
                    },
                    "description": "Pagination links"
                }
            }
        },
        "Notification": {
            "type": "object",
            "required": [
                "id",
                "userId",
                "read",
                "title",
                "body",
                "createdAt",
                "updatedAt",
                "meta"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true
                },
                "body": {
                    "type": "string",
                    "readOnly": true
                },
                "read": {
                    "type": "boolean"
                },
                "action": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true
                },
                "userId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true
                },
                "spaceId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true
                },
                "tenantId": {
                    "type": "string",
                    "format": "uid",
                    "readOnly": true
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true
                },
                "resourceId": {
                    "type": "string",
                    "format": "string",
                    "readOnly": true
                },
                "resourceType": {
                    "type": "string",
                    "format": "string"
                },
                "subResourceType": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "NotificationPatch": {
            "type": "object",
            "required": [
                "op",
                "path",
                "value"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed."
                },
                "path": {
                    "enum": [
                        "/description"
                    ],
                    "type": "string",
                    "description": "The path for the given resource field to patch."
                },
                "value": {
                    "type": "string",
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902."
        },
        "NotificationPatchSchema": {
            "type": "array",
            "items": {
                "$ref": "#/components/schemas/NotificationPatch"
            },
            "example": [
                {
                    "op": "replace",
                    "path": "/read",
                    "value": true
                }
            ],
            "description": "An array of JSON Patch documents"
        },
        "Notifications": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Notification"
                    }
                },
                "meta": {
                    "$ref": "#/components/schemas/Meta"
                },
                "links": {
                    "$ref": "#/components/schemas/Links"
                }
            }
        },
        "Delivery": {
            "type": "object",
            "readOnly": true,
            "required": [
                "id",
                "webhookId",
                "triggeredAt",
                "status",
                "eventType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The delivery's unique identifier"
                },
                "status": {
                    "enum": [
                        "success",
                        "fail"
                    ],
                    "type": "string",
                    "description": "The status of delivery"
                },
                "request": {
                    "type": "object",
                    "properties": {
                        "url": {
                            "type": "string",
                            "description": "URL used for this delivery"
                        },
                        "body": {
                            "type": "object",
                            "description": "The sent body/payload of the delivery"
                        },
                        "headers": {
                            "type": "object",
                            "example": {
                                "headerName": "headerValue"
                            },
                            "description": "Headers sent for this delivery",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "description": ""
                },
                "response": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "type": "string",
                            "description": "The received body of the delivery"
                        },
                        "headers": {
                            "type": "object",
                            "example": {
                                "headerName": "headerValue"
                            },
                            "description": "Headers received for this delivery",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "statusCode": {
                            "type": "number",
                            "description": "The HTTP status code of the response"
                        }
                    },
                    "description": ""
                },
                "eventType": {
                    "type": "string",
                    "description": "The name of the triggering event-type"
                },
                "webhookId": {
                    "type": "string",
                    "description": "The unique webhook identifier that the delivery is for"
                },
                "triggeredAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC timestamp when the delivery was triggered"
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the delivery"
                }
            }
        },
        "DeliveryList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Delivery"
                    }
                },
                "links": {
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            }
        },
        "EventType": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the event type"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the event type"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which levels that are supported for this event type"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the event type"
                }
            }
        },
        "EventTypes": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/EventType"
                    }
                }
            }
        },
        "WebhookBase": {
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The webhook's unique identifier"
                },
                "url": {
                    "type": "string",
                    "maxLength": 2048,
                    "description": "Target URL for webhook HTTPS requests"
                },
                "name": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The name for the webhook"
                },
                "level": {
                    "enum": [
                        "tenant",
                        "user"
                    ],
                    "type": "string",
                    "default": "tenant",
                    "description": "Defines at what level the webhook should operate: for all resources belonging to a tenant or restricted to only those accessible by the webhook-creator."
                },
                "filter": {
                    "type": "string",
                    "example": "id eq \"id123\" or spaceId eq \"spaceId123\" or spaceId eq \"spaceId456\" or topLevelResourceId eq \"id789\"",
                    "description": "Filter that should match for a webhook to be triggered.\nSupported common attribute names are 'id', 'spaceId' and 'topLevelResourceId', beside the common attributes the \"com.qlik.v1.app.reload.finished\" event also supports \"data.status\" that could be either \"ok\" or \"error\" but can't be used together with other event types.\nSupported attribute operators are 'eq' and 'ne'.\nSupported logical operators are 'and' and 'or'.\nNote that attribute values must be valid JSON strings, hence they're enclosed with double quotes\nFor more detailed information regarding the SCIM filter syntax (RFC7644) used please follow the link to external documentation.",
                    "externalDocs": {
                        "url": "https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.2",
                        "description": "More information about the SCIM filter syntax (RFC7644)"
                    }
                },
                "secret": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 32,
                    "description": "String used as secret for calculating HMAC hash sent as header"
                },
                "enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the webhook is active and sending requests"
                },
                "headers": {
                    "type": "object",
                    "example": {
                        "headerName": "headerValue"
                    },
                    "description": "Additional headers in the post request",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ownerId": {
                    "type": "string",
                    "description": "The id of the user that owns the webhook, only applicable for user level webhooks"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the webhook was created"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "The UTC timestamp when the webhook was last updated"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of events for which the webhook should trigger."
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The reason for creating the webhook"
                },
                "disabledReason": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The reason for the webhook to be disabled"
                },
                "createdByUserId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The id of the user that created the webhook"
                },
                "updatedByUserId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The id of the user that last updated the webhook"
                },
                "disabledReasonCode": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique code for the reason"
                }
            }
        },
        "WebhookList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/WebhookResponse"
                    }
                },
                "links": {
                    "properties": {
                        "next": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "prev": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "self": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            }
        },
        "WebhookPatch": {
            "type": "object",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ],
                    "type": "string",
                    "description": "The operation to be performed"
                },
                "path": {
                    "enum": [
                        "/name",
                        "/description",
                        "/url",
                        "/eventTypes",
                        "/headers",
                        "/enabled",
                        "/secret"
                    ],
                    "type": "string",
                    "example": "/description",
                    "description": "The path for the given resource field to patch"
                },
                "value": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "integer"
                        },
                        {
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The value to be used for this operation."
                }
            },
            "description": "A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902"
        },
        "WebhookPost": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/WebhookBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "origin": {
                            "enum": [
                                "api",
                                "automations",
                                "management-console"
                            ],
                            "type": "string",
                            "default": "api",
                            "description": "Indicates from where the webhook was created and its purpose"
                        }
                    }
                }
            ]
        },
        "WebhookResponse": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/WebhookBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "origin": {
                            "enum": [
                                "api",
                                "automations",
                                "management-console"
                            ],
                            "type": "string",
                            "default": "api",
                            "readOnly": true,
                            "description": "Indicates from where the webhook was created and its purpose"
                        }
                    }
                }
            ]
        }
    }
}